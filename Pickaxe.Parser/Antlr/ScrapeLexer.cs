//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2015-09-17 21:38:29

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__101=101;
	public const int APOSTRAPHE=4;
	public const int ASTERISK=5;
	public const int ATTRIBUTE=6;
	public const int BLOCK=7;
	public const int BUFFER=8;
	public const int BUFFER_TABLE=9;
	public const int CASE=10;
	public const int CASE_BOOL=11;
	public const int CASE_EXPRESSION=12;
	public const int CASE_VAR=13;
	public const int CLOSEBRACE=14;
	public const int CLOSEPAREN=15;
	public const int COMMA=16;
	public const int COMMENT=17;
	public const int CREATE=18;
	public const int DIGIT=19;
	public const int DIV=20;
	public const int DOT=21;
	public const int DOWNLOAD_IMAGE=22;
	public const int DOWNLOAD_PAGE=23;
	public const int EACH=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQUALS=27;
	public const int EXPAND=28;
	public const int EXPAND_INTERATION_VARIABLE=29;
	public const int FIELD_TERMINATOR=30;
	public const int FILE=31;
	public const int FILE_TABLE=32;
	public const int FLOAT=33;
	public const int FROM=34;
	public const int GREATERTHAN=35;
	public const int GREATERTHANEQUAL=36;
	public const int HTML=37;
	public const int ID=38;
	public const int IDENTITY=39;
	public const int IN=40;
	public const int INSERT_INTO=41;
	public const int INSERT_INTO_DIRECTORY=42;
	public const int INSERT_OVERWRITE=43;
	public const int INT=44;
	public const int INTEGER=45;
	public const int LESSTHAN=46;
	public const int LESSTHANEQUAL=47;
	public const int LETTER=48;
	public const int LINE_COMMENT_DASH=49;
	public const int LINE_COMMENT_SLASH=50;
	public const int LOCATION=51;
	public const int MATCH=52;
	public const int MEMBER_REFERENCE=53;
	public const int MINIS=54;
	public const int NEWLINE=55;
	public const int NOTEQUAL=56;
	public const int NULL=57;
	public const int OPENBRACE=58;
	public const int OPENPAREN=59;
	public const int OTHERCHARS=60;
	public const int PICK=61;
	public const int PLUS=62;
	public const int POST_PICK=63;
	public const int PRE_PICK=64;
	public const int PROCEDURE=65;
	public const int PROGRAM=66;
	public const int PROXIES=67;
	public const int PROXY_LIST=68;
	public const int QUOTE=69;
	public const int REPLACE=70;
	public const int ROW_REFERENCE=71;
	public const int ROW_TERMINATOR=72;
	public const int SELECT=73;
	public const int SELECT_ALL=74;
	public const int SELECT_ARG=75;
	public const int SELECT_ID=76;
	public const int SELECT_STATEMENT=77;
	public const int STRING=78;
	public const int STRING_LITERAL=79;
	public const int TABLE_COLUMN_ARG=80;
	public const int TABLE_COLUMN_ARGS=81;
	public const int TABLE_MEMBER_REFERENCE=82;
	public const int TABLE_VARIABLE_REFERENCE=83;
	public const int TAKE=84;
	public const int TAKE_ATTRIBUTE=85;
	public const int TAKE_HTML=86;
	public const int TAKE_TEXT=87;
	public const int TEST=88;
	public const int TEXT=89;
	public const int THEN=90;
	public const int TO=91;
	public const int VARIABLE=92;
	public const int VARIABLE_DECLARATION=93;
	public const int VARIABLE_REFERENCE=94;
	public const int WHEN=95;
	public const int WHEN_BOOL_STATEMENT=96;
	public const int WHEN_LITERAL_STATEMENT=97;
	public const int WHERE=98;
	public const int WITH=99;
	public const int WS=100;

	// delegates
	// delegators

	public ScrapeLexer()
	{
		OnCreated();
	}

	public ScrapeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ScrapeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__101();
	partial void LeaveRule_T__101();

	// $ANTLR start "T__101"
	[GrammarRule("T__101")]
	private void mT__101()
	{
		EnterRule_T__101();
		EnterRule("T__101", 1);
		TraceIn("T__101", 1);
		try
		{
			int _type = T__101;
			int _channel = DefaultTokenChannel;
			// Scrape.g:8:8: ( '$' )
			DebugEnterAlt(1);
			// Scrape.g:8:10: '$'
			{
			DebugLocation(8, 10);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__101", 1);
			LeaveRule("T__101", 1);
			LeaveRule_T__101();
		}
	}
	// $ANTLR end "T__101"

	partial void EnterRule_PROCEDURE();
	partial void LeaveRule_PROCEDURE();

	// $ANTLR start "PROCEDURE"
	[GrammarRule("PROCEDURE")]
	private void mPROCEDURE()
	{
		EnterRule_PROCEDURE();
		EnterRule("PROCEDURE", 2);
		TraceIn("PROCEDURE", 2);
		try
		{
			int _type = PROCEDURE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:299:10: ( 'procedure' )
			DebugEnterAlt(1);
			// Scrape.g:299:12: 'procedure'
			{
			DebugLocation(299, 12);
			Match("procedure"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROCEDURE", 2);
			LeaveRule("PROCEDURE", 2);
			LeaveRule_PROCEDURE();
		}
	}
	// $ANTLR end "PROCEDURE"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 3);
		TraceIn("CASE", 3);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:300:5: ( 'case' )
			DebugEnterAlt(1);
			// Scrape.g:300:7: 'case'
			{
			DebugLocation(300, 7);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 3);
			LeaveRule("CASE", 3);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_WHEN();
	partial void LeaveRule_WHEN();

	// $ANTLR start "WHEN"
	[GrammarRule("WHEN")]
	private void mWHEN()
	{
		EnterRule_WHEN();
		EnterRule("WHEN", 4);
		TraceIn("WHEN", 4);
		try
		{
			int _type = WHEN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:301:5: ( 'when' )
			DebugEnterAlt(1);
			// Scrape.g:301:7: 'when'
			{
			DebugLocation(301, 7);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHEN", 4);
			LeaveRule("WHEN", 4);
			LeaveRule_WHEN();
		}
	}
	// $ANTLR end "WHEN"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 5);
		TraceIn("THEN", 5);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:302:5: ( 'then' )
			DebugEnterAlt(1);
			// Scrape.g:302:7: 'then'
			{
			DebugLocation(302, 7);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 5);
			LeaveRule("THEN", 5);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 6);
		TraceIn("END", 6);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// Scrape.g:303:4: ( 'end' )
			DebugEnterAlt(1);
			// Scrape.g:303:6: 'end'
			{
			DebugLocation(303, 6);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 6);
			LeaveRule("END", 6);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 7);
		TraceIn("ELSE", 7);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:304:5: ( 'else' )
			DebugEnterAlt(1);
			// Scrape.g:304:7: 'else'
			{
			DebugLocation(304, 7);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 7);
			LeaveRule("ELSE", 7);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 8);
		TraceIn("EQUALS", 8);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:306:8: ( '=' )
			DebugEnterAlt(1);
			// Scrape.g:306:10: '='
			{
			DebugLocation(306, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 8);
			LeaveRule("EQUALS", 8);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_LESSTHAN();
	partial void LeaveRule_LESSTHAN();

	// $ANTLR start "LESSTHAN"
	[GrammarRule("LESSTHAN")]
	private void mLESSTHAN()
	{
		EnterRule_LESSTHAN();
		EnterRule("LESSTHAN", 9);
		TraceIn("LESSTHAN", 9);
		try
		{
			int _type = LESSTHAN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:307:10: ( '<' )
			DebugEnterAlt(1);
			// Scrape.g:307:12: '<'
			{
			DebugLocation(307, 12);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHAN", 9);
			LeaveRule("LESSTHAN", 9);
			LeaveRule_LESSTHAN();
		}
	}
	// $ANTLR end "LESSTHAN"

	partial void EnterRule_LESSTHANEQUAL();
	partial void LeaveRule_LESSTHANEQUAL();

	// $ANTLR start "LESSTHANEQUAL"
	[GrammarRule("LESSTHANEQUAL")]
	private void mLESSTHANEQUAL()
	{
		EnterRule_LESSTHANEQUAL();
		EnterRule("LESSTHANEQUAL", 10);
		TraceIn("LESSTHANEQUAL", 10);
		try
		{
			int _type = LESSTHANEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:308:14: ( '<=' )
			DebugEnterAlt(1);
			// Scrape.g:308:16: '<='
			{
			DebugLocation(308, 16);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHANEQUAL", 10);
			LeaveRule("LESSTHANEQUAL", 10);
			LeaveRule_LESSTHANEQUAL();
		}
	}
	// $ANTLR end "LESSTHANEQUAL"

	partial void EnterRule_GREATERTHAN();
	partial void LeaveRule_GREATERTHAN();

	// $ANTLR start "GREATERTHAN"
	[GrammarRule("GREATERTHAN")]
	private void mGREATERTHAN()
	{
		EnterRule_GREATERTHAN();
		EnterRule("GREATERTHAN", 11);
		TraceIn("GREATERTHAN", 11);
		try
		{
			int _type = GREATERTHAN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:309:12: ( '>' )
			DebugEnterAlt(1);
			// Scrape.g:309:14: '>'
			{
			DebugLocation(309, 14);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHAN", 11);
			LeaveRule("GREATERTHAN", 11);
			LeaveRule_GREATERTHAN();
		}
	}
	// $ANTLR end "GREATERTHAN"

	partial void EnterRule_GREATERTHANEQUAL();
	partial void LeaveRule_GREATERTHANEQUAL();

	// $ANTLR start "GREATERTHANEQUAL"
	[GrammarRule("GREATERTHANEQUAL")]
	private void mGREATERTHANEQUAL()
	{
		EnterRule_GREATERTHANEQUAL();
		EnterRule("GREATERTHANEQUAL", 12);
		TraceIn("GREATERTHANEQUAL", 12);
		try
		{
			int _type = GREATERTHANEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:310:17: ( '>=' )
			DebugEnterAlt(1);
			// Scrape.g:310:19: '>='
			{
			DebugLocation(310, 19);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHANEQUAL", 12);
			LeaveRule("GREATERTHANEQUAL", 12);
			LeaveRule_GREATERTHANEQUAL();
		}
	}
	// $ANTLR end "GREATERTHANEQUAL"

	partial void EnterRule_NOTEQUAL();
	partial void LeaveRule_NOTEQUAL();

	// $ANTLR start "NOTEQUAL"
	[GrammarRule("NOTEQUAL")]
	private void mNOTEQUAL()
	{
		EnterRule_NOTEQUAL();
		EnterRule("NOTEQUAL", 13);
		TraceIn("NOTEQUAL", 13);
		try
		{
			int _type = NOTEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:311:9: ( '!=' )
			DebugEnterAlt(1);
			// Scrape.g:311:11: '!='
			{
			DebugLocation(311, 11);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUAL", 13);
			LeaveRule("NOTEQUAL", 13);
			LeaveRule_NOTEQUAL();
		}
	}
	// $ANTLR end "NOTEQUAL"

	partial void EnterRule_INSERT_INTO();
	partial void LeaveRule_INSERT_INTO();

	// $ANTLR start "INSERT_INTO"
	[GrammarRule("INSERT_INTO")]
	private void mINSERT_INTO()
	{
		EnterRule_INSERT_INTO();
		EnterRule("INSERT_INTO", 14);
		TraceIn("INSERT_INTO", 14);
		try
		{
			int _type = INSERT_INTO;
			int _channel = DefaultTokenChannel;
			// Scrape.g:313:13: ( 'insert into' )
			DebugEnterAlt(1);
			// Scrape.g:313:15: 'insert into'
			{
			DebugLocation(313, 15);
			Match("insert into"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSERT_INTO", 14);
			LeaveRule("INSERT_INTO", 14);
			LeaveRule_INSERT_INTO();
		}
	}
	// $ANTLR end "INSERT_INTO"

	partial void EnterRule_INSERT_OVERWRITE();
	partial void LeaveRule_INSERT_OVERWRITE();

	// $ANTLR start "INSERT_OVERWRITE"
	[GrammarRule("INSERT_OVERWRITE")]
	private void mINSERT_OVERWRITE()
	{
		EnterRule_INSERT_OVERWRITE();
		EnterRule("INSERT_OVERWRITE", 15);
		TraceIn("INSERT_OVERWRITE", 15);
		try
		{
			int _type = INSERT_OVERWRITE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:314:18: ( 'insert overwrite' )
			DebugEnterAlt(1);
			// Scrape.g:314:20: 'insert overwrite'
			{
			DebugLocation(314, 20);
			Match("insert overwrite"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSERT_OVERWRITE", 15);
			LeaveRule("INSERT_OVERWRITE", 15);
			LeaveRule_INSERT_OVERWRITE();
		}
	}
	// $ANTLR end "INSERT_OVERWRITE"

	partial void EnterRule_EACH();
	partial void LeaveRule_EACH();

	// $ANTLR start "EACH"
	[GrammarRule("EACH")]
	private void mEACH()
	{
		EnterRule_EACH();
		EnterRule("EACH", 16);
		TraceIn("EACH", 16);
		try
		{
			int _type = EACH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:315:6: ( 'each' )
			DebugEnterAlt(1);
			// Scrape.g:315:8: 'each'
			{
			DebugLocation(315, 8);
			Match("each"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EACH", 16);
			LeaveRule("EACH", 16);
			LeaveRule_EACH();
		}
	}
	// $ANTLR end "EACH"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 17);
		TraceIn("IN", 17);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:316:4: ( 'in' )
			DebugEnterAlt(1);
			// Scrape.g:316:6: 'in'
			{
			DebugLocation(316, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 17);
			LeaveRule("IN", 17);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_SELECT();
	partial void LeaveRule_SELECT();

	// $ANTLR start "SELECT"
	[GrammarRule("SELECT")]
	private void mSELECT()
	{
		EnterRule_SELECT();
		EnterRule("SELECT", 18);
		TraceIn("SELECT", 18);
		try
		{
			int _type = SELECT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:317:8: ( 'select' )
			DebugEnterAlt(1);
			// Scrape.g:317:10: 'select'
			{
			DebugLocation(317, 10);
			Match("select"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELECT", 18);
			LeaveRule("SELECT", 18);
			LeaveRule_SELECT();
		}
	}
	// $ANTLR end "SELECT"

	partial void EnterRule_FROM();
	partial void LeaveRule_FROM();

	// $ANTLR start "FROM"
	[GrammarRule("FROM")]
	private void mFROM()
	{
		EnterRule_FROM();
		EnterRule("FROM", 19);
		TraceIn("FROM", 19);
		try
		{
			int _type = FROM;
			int _channel = DefaultTokenChannel;
			// Scrape.g:318:6: ( 'from' )
			DebugEnterAlt(1);
			// Scrape.g:318:8: 'from'
			{
			DebugLocation(318, 8);
			Match("from"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FROM", 19);
			LeaveRule("FROM", 19);
			LeaveRule_FROM();
		}
	}
	// $ANTLR end "FROM"

	partial void EnterRule_WHERE();
	partial void LeaveRule_WHERE();

	// $ANTLR start "WHERE"
	[GrammarRule("WHERE")]
	private void mWHERE()
	{
		EnterRule_WHERE();
		EnterRule("WHERE", 20);
		TraceIn("WHERE", 20);
		try
		{
			int _type = WHERE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:319:7: ( 'where' )
			DebugEnterAlt(1);
			// Scrape.g:319:9: 'where'
			{
			DebugLocation(319, 9);
			Match("where"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHERE", 20);
			LeaveRule("WHERE", 20);
			LeaveRule_WHERE();
		}
	}
	// $ANTLR end "WHERE"

	partial void EnterRule_PICK();
	partial void LeaveRule_PICK();

	// $ANTLR start "PICK"
	[GrammarRule("PICK")]
	private void mPICK()
	{
		EnterRule_PICK();
		EnterRule("PICK", 21);
		TraceIn("PICK", 21);
		try
		{
			int _type = PICK;
			int _channel = DefaultTokenChannel;
			// Scrape.g:320:6: ( 'pick' )
			DebugEnterAlt(1);
			// Scrape.g:320:8: 'pick'
			{
			DebugLocation(320, 8);
			Match("pick"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PICK", 21);
			LeaveRule("PICK", 21);
			LeaveRule_PICK();
		}
	}
	// $ANTLR end "PICK"

	partial void EnterRule_TAKE();
	partial void LeaveRule_TAKE();

	// $ANTLR start "TAKE"
	[GrammarRule("TAKE")]
	private void mTAKE()
	{
		EnterRule_TAKE();
		EnterRule("TAKE", 22);
		TraceIn("TAKE", 22);
		try
		{
			int _type = TAKE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:321:6: ( 'take' )
			DebugEnterAlt(1);
			// Scrape.g:321:8: 'take'
			{
			DebugLocation(321, 8);
			Match("take"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TAKE", 22);
			LeaveRule("TAKE", 22);
			LeaveRule_TAKE();
		}
	}
	// $ANTLR end "TAKE"

	partial void EnterRule_MATCH();
	partial void LeaveRule_MATCH();

	// $ANTLR start "MATCH"
	[GrammarRule("MATCH")]
	private void mMATCH()
	{
		EnterRule_MATCH();
		EnterRule("MATCH", 23);
		TraceIn("MATCH", 23);
		try
		{
			int _type = MATCH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:322:7: ( 'match' )
			DebugEnterAlt(1);
			// Scrape.g:322:9: 'match'
			{
			DebugLocation(322, 9);
			Match("match"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATCH", 23);
			LeaveRule("MATCH", 23);
			LeaveRule_MATCH();
		}
	}
	// $ANTLR end "MATCH"

	partial void EnterRule_REPLACE();
	partial void LeaveRule_REPLACE();

	// $ANTLR start "REPLACE"
	[GrammarRule("REPLACE")]
	private void mREPLACE()
	{
		EnterRule_REPLACE();
		EnterRule("REPLACE", 24);
		TraceIn("REPLACE", 24);
		try
		{
			int _type = REPLACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:323:9: ( 'replace' )
			DebugEnterAlt(1);
			// Scrape.g:323:11: 'replace'
			{
			DebugLocation(323, 11);
			Match("replace"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REPLACE", 24);
			LeaveRule("REPLACE", 24);
			LeaveRule_REPLACE();
		}
	}
	// $ANTLR end "REPLACE"

	partial void EnterRule_ATTRIBUTE();
	partial void LeaveRule_ATTRIBUTE();

	// $ANTLR start "ATTRIBUTE"
	[GrammarRule("ATTRIBUTE")]
	private void mATTRIBUTE()
	{
		EnterRule_ATTRIBUTE();
		EnterRule("ATTRIBUTE", 25);
		TraceIn("ATTRIBUTE", 25);
		try
		{
			int _type = ATTRIBUTE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:324:11: ( 'attribute' )
			DebugEnterAlt(1);
			// Scrape.g:324:13: 'attribute'
			{
			DebugLocation(324, 13);
			Match("attribute"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATTRIBUTE", 25);
			LeaveRule("ATTRIBUTE", 25);
			LeaveRule_ATTRIBUTE();
		}
	}
	// $ANTLR end "ATTRIBUTE"

	partial void EnterRule_TEXT();
	partial void LeaveRule_TEXT();

	// $ANTLR start "TEXT"
	[GrammarRule("TEXT")]
	private void mTEXT()
	{
		EnterRule_TEXT();
		EnterRule("TEXT", 26);
		TraceIn("TEXT", 26);
		try
		{
			int _type = TEXT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:325:6: ( 'text' )
			DebugEnterAlt(1);
			// Scrape.g:325:8: 'text'
			{
			DebugLocation(325, 8);
			Match("text"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEXT", 26);
			LeaveRule("TEXT", 26);
			LeaveRule_TEXT();
		}
	}
	// $ANTLR end "TEXT"

	partial void EnterRule_HTML();
	partial void LeaveRule_HTML();

	// $ANTLR start "HTML"
	[GrammarRule("HTML")]
	private void mHTML()
	{
		EnterRule_HTML();
		EnterRule("HTML", 27);
		TraceIn("HTML", 27);
		try
		{
			int _type = HTML;
			int _channel = DefaultTokenChannel;
			// Scrape.g:326:6: ( 'html' )
			DebugEnterAlt(1);
			// Scrape.g:326:8: 'html'
			{
			DebugLocation(326, 8);
			Match("html"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HTML", 27);
			LeaveRule("HTML", 27);
			LeaveRule_HTML();
		}
	}
	// $ANTLR end "HTML"

	partial void EnterRule_DOWNLOAD_IMAGE();
	partial void LeaveRule_DOWNLOAD_IMAGE();

	// $ANTLR start "DOWNLOAD_IMAGE"
	[GrammarRule("DOWNLOAD_IMAGE")]
	private void mDOWNLOAD_IMAGE()
	{
		EnterRule_DOWNLOAD_IMAGE();
		EnterRule("DOWNLOAD_IMAGE", 28);
		TraceIn("DOWNLOAD_IMAGE", 28);
		try
		{
			int _type = DOWNLOAD_IMAGE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:327:16: ( 'download image' )
			DebugEnterAlt(1);
			// Scrape.g:327:18: 'download image'
			{
			DebugLocation(327, 18);
			Match("download image"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOWNLOAD_IMAGE", 28);
			LeaveRule("DOWNLOAD_IMAGE", 28);
			LeaveRule_DOWNLOAD_IMAGE();
		}
	}
	// $ANTLR end "DOWNLOAD_IMAGE"

	partial void EnterRule_DOWNLOAD_PAGE();
	partial void LeaveRule_DOWNLOAD_PAGE();

	// $ANTLR start "DOWNLOAD_PAGE"
	[GrammarRule("DOWNLOAD_PAGE")]
	private void mDOWNLOAD_PAGE()
	{
		EnterRule_DOWNLOAD_PAGE();
		EnterRule("DOWNLOAD_PAGE", 29);
		TraceIn("DOWNLOAD_PAGE", 29);
		try
		{
			int _type = DOWNLOAD_PAGE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:328:15: ( 'download page' )
			DebugEnterAlt(1);
			// Scrape.g:328:17: 'download page'
			{
			DebugLocation(328, 17);
			Match("download page"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOWNLOAD_PAGE", 29);
			LeaveRule("DOWNLOAD_PAGE", 29);
			LeaveRule_DOWNLOAD_PAGE();
		}
	}
	// $ANTLR end "DOWNLOAD_PAGE"

	partial void EnterRule_IDENTITY();
	partial void LeaveRule_IDENTITY();

	// $ANTLR start "IDENTITY"
	[GrammarRule("IDENTITY")]
	private void mIDENTITY()
	{
		EnterRule_IDENTITY();
		EnterRule("IDENTITY", 30);
		TraceIn("IDENTITY", 30);
		try
		{
			int _type = IDENTITY;
			int _channel = DefaultTokenChannel;
			// Scrape.g:329:10: ( 'identity' )
			DebugEnterAlt(1);
			// Scrape.g:329:12: 'identity'
			{
			DebugLocation(329, 12);
			Match("identity"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTITY", 30);
			LeaveRule("IDENTITY", 30);
			LeaveRule_IDENTITY();
		}
	}
	// $ANTLR end "IDENTITY"

	partial void EnterRule_EXPAND();
	partial void LeaveRule_EXPAND();

	// $ANTLR start "EXPAND"
	[GrammarRule("EXPAND")]
	private void mEXPAND()
	{
		EnterRule_EXPAND();
		EnterRule("EXPAND", 31);
		TraceIn("EXPAND", 31);
		try
		{
			int _type = EXPAND;
			int _channel = DefaultTokenChannel;
			// Scrape.g:330:8: ( 'expand' )
			DebugEnterAlt(1);
			// Scrape.g:330:10: 'expand'
			{
			DebugLocation(330, 10);
			Match("expand"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPAND", 31);
			LeaveRule("EXPAND", 31);
			LeaveRule_EXPAND();
		}
	}
	// $ANTLR end "EXPAND"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 32);
		TraceIn("TO", 32);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// Scrape.g:331:4: ( 'to' )
			DebugEnterAlt(1);
			// Scrape.g:331:6: 'to'
			{
			DebugLocation(331, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 32);
			LeaveRule("TO", 32);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_PROXIES();
	partial void LeaveRule_PROXIES();

	// $ANTLR start "PROXIES"
	[GrammarRule("PROXIES")]
	private void mPROXIES()
	{
		EnterRule_PROXIES();
		EnterRule("PROXIES", 33);
		TraceIn("PROXIES", 33);
		try
		{
			int _type = PROXIES;
			int _channel = DefaultTokenChannel;
			// Scrape.g:332:8: ( 'proxies' )
			DebugEnterAlt(1);
			// Scrape.g:332:10: 'proxies'
			{
			DebugLocation(332, 10);
			Match("proxies"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROXIES", 33);
			LeaveRule("PROXIES", 33);
			LeaveRule_PROXIES();
		}
	}
	// $ANTLR end "PROXIES"

	partial void EnterRule_TEST();
	partial void LeaveRule_TEST();

	// $ANTLR start "TEST"
	[GrammarRule("TEST")]
	private void mTEST()
	{
		EnterRule_TEST();
		EnterRule("TEST", 34);
		TraceIn("TEST", 34);
		try
		{
			int _type = TEST;
			int _channel = DefaultTokenChannel;
			// Scrape.g:333:6: ( 'test' )
			DebugEnterAlt(1);
			// Scrape.g:333:8: 'test'
			{
			DebugLocation(333, 8);
			Match("test"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEST", 34);
			LeaveRule("TEST", 34);
			LeaveRule_TEST();
		}
	}
	// $ANTLR end "TEST"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 35);
		TraceIn("NULL", 35);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:334:6: ( 'null' )
			DebugEnterAlt(1);
			// Scrape.g:334:8: 'null'
			{
			DebugLocation(334, 8);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 35);
			LeaveRule("NULL", 35);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_CREATE();
	partial void LeaveRule_CREATE();

	// $ANTLR start "CREATE"
	[GrammarRule("CREATE")]
	private void mCREATE()
	{
		EnterRule_CREATE();
		EnterRule("CREATE", 36);
		TraceIn("CREATE", 36);
		try
		{
			int _type = CREATE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:336:8: ( 'create' )
			DebugEnterAlt(1);
			// Scrape.g:336:10: 'create'
			{
			DebugLocation(336, 10);
			Match("create"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CREATE", 36);
			LeaveRule("CREATE", 36);
			LeaveRule_CREATE();
		}
	}
	// $ANTLR end "CREATE"

	partial void EnterRule_FILE();
	partial void LeaveRule_FILE();

	// $ANTLR start "FILE"
	[GrammarRule("FILE")]
	private void mFILE()
	{
		EnterRule_FILE();
		EnterRule("FILE", 37);
		TraceIn("FILE", 37);
		try
		{
			int _type = FILE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:337:6: ( 'file' )
			DebugEnterAlt(1);
			// Scrape.g:337:8: 'file'
			{
			DebugLocation(337, 8);
			Match("file"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILE", 37);
			LeaveRule("FILE", 37);
			LeaveRule_FILE();
		}
	}
	// $ANTLR end "FILE"

	partial void EnterRule_BUFFER();
	partial void LeaveRule_BUFFER();

	// $ANTLR start "BUFFER"
	[GrammarRule("BUFFER")]
	private void mBUFFER()
	{
		EnterRule_BUFFER();
		EnterRule("BUFFER", 38);
		TraceIn("BUFFER", 38);
		try
		{
			int _type = BUFFER;
			int _channel = DefaultTokenChannel;
			// Scrape.g:338:8: ( 'buffer' )
			DebugEnterAlt(1);
			// Scrape.g:338:10: 'buffer'
			{
			DebugLocation(338, 10);
			Match("buffer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BUFFER", 38);
			LeaveRule("BUFFER", 38);
			LeaveRule_BUFFER();
		}
	}
	// $ANTLR end "BUFFER"

	partial void EnterRule_WITH();
	partial void LeaveRule_WITH();

	// $ANTLR start "WITH"
	[GrammarRule("WITH")]
	private void mWITH()
	{
		EnterRule_WITH();
		EnterRule("WITH", 39);
		TraceIn("WITH", 39);
		try
		{
			int _type = WITH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:339:6: ( 'with' )
			DebugEnterAlt(1);
			// Scrape.g:339:8: 'with'
			{
			DebugLocation(339, 8);
			Match("with"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WITH", 39);
			LeaveRule("WITH", 39);
			LeaveRule_WITH();
		}
	}
	// $ANTLR end "WITH"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 40);
		TraceIn("STRING", 40);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Scrape.g:340:8: ( 'string' )
			DebugEnterAlt(1);
			// Scrape.g:340:10: 'string'
			{
			DebugLocation(340, 10);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 40);
			LeaveRule("STRING", 40);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 41);
		TraceIn("INTEGER", 41);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// Scrape.g:341:8: ( 'int' )
			DebugEnterAlt(1);
			// Scrape.g:341:10: 'int'
			{
			DebugLocation(341, 10);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 41);
			LeaveRule("INTEGER", 41);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 42);
		TraceIn("FLOAT", 42);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:342:6: ( 'float' )
			DebugEnterAlt(1);
			// Scrape.g:342:8: 'float'
			{
			DebugLocation(342, 8);
			Match("float"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 42);
			LeaveRule("FLOAT", 42);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_FIELD_TERMINATOR();
	partial void LeaveRule_FIELD_TERMINATOR();

	// $ANTLR start "FIELD_TERMINATOR"
	[GrammarRule("FIELD_TERMINATOR")]
	private void mFIELD_TERMINATOR()
	{
		EnterRule_FIELD_TERMINATOR();
		EnterRule("FIELD_TERMINATOR", 43);
		TraceIn("FIELD_TERMINATOR", 43);
		try
		{
			int _type = FIELD_TERMINATOR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:343:18: ( 'fieldterminator' )
			DebugEnterAlt(1);
			// Scrape.g:343:20: 'fieldterminator'
			{
			DebugLocation(343, 20);
			Match("fieldterminator"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FIELD_TERMINATOR", 43);
			LeaveRule("FIELD_TERMINATOR", 43);
			LeaveRule_FIELD_TERMINATOR();
		}
	}
	// $ANTLR end "FIELD_TERMINATOR"

	partial void EnterRule_ROW_TERMINATOR();
	partial void LeaveRule_ROW_TERMINATOR();

	// $ANTLR start "ROW_TERMINATOR"
	[GrammarRule("ROW_TERMINATOR")]
	private void mROW_TERMINATOR()
	{
		EnterRule_ROW_TERMINATOR();
		EnterRule("ROW_TERMINATOR", 44);
		TraceIn("ROW_TERMINATOR", 44);
		try
		{
			int _type = ROW_TERMINATOR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:344:16: ( 'rowterminator' )
			DebugEnterAlt(1);
			// Scrape.g:344:18: 'rowterminator'
			{
			DebugLocation(344, 18);
			Match("rowterminator"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ROW_TERMINATOR", 44);
			LeaveRule("ROW_TERMINATOR", 44);
			LeaveRule_ROW_TERMINATOR();
		}
	}
	// $ANTLR end "ROW_TERMINATOR"

	partial void EnterRule_LOCATION();
	partial void LeaveRule_LOCATION();

	// $ANTLR start "LOCATION"
	[GrammarRule("LOCATION")]
	private void mLOCATION()
	{
		EnterRule_LOCATION();
		EnterRule("LOCATION", 45);
		TraceIn("LOCATION", 45);
		try
		{
			int _type = LOCATION;
			int _channel = DefaultTokenChannel;
			// Scrape.g:345:10: ( 'location' )
			DebugEnterAlt(1);
			// Scrape.g:345:12: 'location'
			{
			DebugLocation(345, 12);
			Match("location"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOCATION", 45);
			LeaveRule("LOCATION", 45);
			LeaveRule_LOCATION();
		}
	}
	// $ANTLR end "LOCATION"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 46);
		TraceIn("STRING_LITERAL", 46);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:347:15: ( APOSTRAPHE (~ ( APOSTRAPHE ) )* APOSTRAPHE )
			DebugEnterAlt(1);
			// Scrape.g:347:17: APOSTRAPHE (~ ( APOSTRAPHE ) )* APOSTRAPHE
			{
			DebugLocation(347, 17);
			mAPOSTRAPHE(); 
			DebugLocation(347, 28);
			// Scrape.g:347:28: (~ ( APOSTRAPHE ) )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\u0000' && LA1_1<='&')||(LA1_1>='(' && LA1_1<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(347, 28);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(347, 43);
			mAPOSTRAPHE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 46);
			LeaveRule("STRING_LITERAL", 46);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 47);
		TraceIn("ID", 47);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Scrape.g:348:4: ( ( VARIABLE )+ )
			DebugEnterAlt(1);
			// Scrape.g:348:6: ( VARIABLE )+
			{
			DebugLocation(348, 6);
			// Scrape.g:348:6: ( VARIABLE )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='@' && LA2_1<='Z')||(LA2_1>='a' && LA2_1<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(348, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 47);
			LeaveRule("ID", 47);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_ASTERISK();
	partial void LeaveRule_ASTERISK();

	// $ANTLR start "ASTERISK"
	[GrammarRule("ASTERISK")]
	private void mASTERISK()
	{
		EnterRule_ASTERISK();
		EnterRule("ASTERISK", 48);
		TraceIn("ASTERISK", 48);
		try
		{
			int _type = ASTERISK;
			int _channel = DefaultTokenChannel;
			// Scrape.g:349:10: ( '*' )
			DebugEnterAlt(1);
			// Scrape.g:349:12: '*'
			{
			DebugLocation(349, 12);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASTERISK", 48);
			LeaveRule("ASTERISK", 48);
			LeaveRule_ASTERISK();
		}
	}
	// $ANTLR end "ASTERISK"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 49);
		TraceIn("DOT", 49);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:350:5: ( '.' )
			DebugEnterAlt(1);
			// Scrape.g:350:7: '.'
			{
			DebugLocation(350, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 49);
			LeaveRule("DOT", 49);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_OPENPAREN();
	partial void LeaveRule_OPENPAREN();

	// $ANTLR start "OPENPAREN"
	[GrammarRule("OPENPAREN")]
	private void mOPENPAREN()
	{
		EnterRule_OPENPAREN();
		EnterRule("OPENPAREN", 50);
		TraceIn("OPENPAREN", 50);
		try
		{
			int _type = OPENPAREN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:351:11: ( '(' )
			DebugEnterAlt(1);
			// Scrape.g:351:13: '('
			{
			DebugLocation(351, 13);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENPAREN", 50);
			LeaveRule("OPENPAREN", 50);
			LeaveRule_OPENPAREN();
		}
	}
	// $ANTLR end "OPENPAREN"

	partial void EnterRule_CLOSEPAREN();
	partial void LeaveRule_CLOSEPAREN();

	// $ANTLR start "CLOSEPAREN"
	[GrammarRule("CLOSEPAREN")]
	private void mCLOSEPAREN()
	{
		EnterRule_CLOSEPAREN();
		EnterRule("CLOSEPAREN", 51);
		TraceIn("CLOSEPAREN", 51);
		try
		{
			int _type = CLOSEPAREN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:352:12: ( ')' )
			DebugEnterAlt(1);
			// Scrape.g:352:14: ')'
			{
			DebugLocation(352, 14);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEPAREN", 51);
			LeaveRule("CLOSEPAREN", 51);
			LeaveRule_CLOSEPAREN();
		}
	}
	// $ANTLR end "CLOSEPAREN"

	partial void EnterRule_OPENBRACE();
	partial void LeaveRule_OPENBRACE();

	// $ANTLR start "OPENBRACE"
	[GrammarRule("OPENBRACE")]
	private void mOPENBRACE()
	{
		EnterRule_OPENBRACE();
		EnterRule("OPENBRACE", 52);
		TraceIn("OPENBRACE", 52);
		try
		{
			int _type = OPENBRACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:353:11: ( '{' )
			DebugEnterAlt(1);
			// Scrape.g:353:13: '{'
			{
			DebugLocation(353, 13);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENBRACE", 52);
			LeaveRule("OPENBRACE", 52);
			LeaveRule_OPENBRACE();
		}
	}
	// $ANTLR end "OPENBRACE"

	partial void EnterRule_CLOSEBRACE();
	partial void LeaveRule_CLOSEBRACE();

	// $ANTLR start "CLOSEBRACE"
	[GrammarRule("CLOSEBRACE")]
	private void mCLOSEBRACE()
	{
		EnterRule_CLOSEBRACE();
		EnterRule("CLOSEBRACE", 53);
		TraceIn("CLOSEBRACE", 53);
		try
		{
			int _type = CLOSEBRACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:354:12: ( '}' )
			DebugEnterAlt(1);
			// Scrape.g:354:14: '}'
			{
			DebugLocation(354, 14);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEBRACE", 53);
			LeaveRule("CLOSEBRACE", 53);
			LeaveRule_CLOSEBRACE();
		}
	}
	// $ANTLR end "CLOSEBRACE"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 54);
		TraceIn("PLUS", 54);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:355:6: ( '+' )
			DebugEnterAlt(1);
			// Scrape.g:355:8: '+'
			{
			DebugLocation(355, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 54);
			LeaveRule("PLUS", 54);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINIS();
	partial void LeaveRule_MINIS();

	// $ANTLR start "MINIS"
	[GrammarRule("MINIS")]
	private void mMINIS()
	{
		EnterRule_MINIS();
		EnterRule("MINIS", 55);
		TraceIn("MINIS", 55);
		try
		{
			int _type = MINIS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:356:8: ( '-' )
			DebugEnterAlt(1);
			// Scrape.g:356:10: '-'
			{
			DebugLocation(356, 10);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINIS", 55);
			LeaveRule("MINIS", 55);
			LeaveRule_MINIS();
		}
	}
	// $ANTLR end "MINIS"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 56);
		TraceIn("DIV", 56);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// Scrape.g:357:6: ( '/' )
			DebugEnterAlt(1);
			// Scrape.g:357:8: '/'
			{
			DebugLocation(357, 8);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 56);
			LeaveRule("DIV", 56);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 57);
		TraceIn("COMMA", 57);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Scrape.g:358:7: ( ',' )
			DebugEnterAlt(1);
			// Scrape.g:358:9: ','
			{
			DebugLocation(358, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 57);
			LeaveRule("COMMA", 57);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 58);
		TraceIn("QUOTE", 58);
		try
		{
			int _type = QUOTE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:359:7: ( '\"' )
			DebugEnterAlt(1);
			// Scrape.g:359:9: '\"'
			{
			DebugLocation(359, 9);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTE", 58);
			LeaveRule("QUOTE", 58);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	partial void EnterRule_APOSTRAPHE();
	partial void LeaveRule_APOSTRAPHE();

	// $ANTLR start "APOSTRAPHE"
	[GrammarRule("APOSTRAPHE")]
	private void mAPOSTRAPHE()
	{
		EnterRule_APOSTRAPHE();
		EnterRule("APOSTRAPHE", 59);
		TraceIn("APOSTRAPHE", 59);
		try
		{
			int _type = APOSTRAPHE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:360:12: ( '\\'' )
			DebugEnterAlt(1);
			// Scrape.g:360:14: '\\''
			{
			DebugLocation(360, 14);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("APOSTRAPHE", 59);
			LeaveRule("APOSTRAPHE", 59);
			LeaveRule_APOSTRAPHE();
		}
	}
	// $ANTLR end "APOSTRAPHE"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 60);
		TraceIn("INT", 60);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:361:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// Scrape.g:361:7: ( DIGIT )+
			{
			DebugLocation(361, 7);
			// Scrape.g:361:7: ( DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(361, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 60);
			LeaveRule("INT", 60);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 61);
		TraceIn("NEWLINE", 61);
		try
		{
			// Scrape.g:362:18: ( ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(362, 18);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("NEWLINE", 61);
			LeaveRule("NEWLINE", 61);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 62);
		TraceIn("DIGIT", 62);
		try
		{
			// Scrape.g:363:15: ( '0' .. '9' )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(363, 15);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 62);
			LeaveRule("DIGIT", 62);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_VARIABLE();
	partial void LeaveRule_VARIABLE();

	// $ANTLR start "VARIABLE"
	[GrammarRule("VARIABLE")]
	private void mVARIABLE()
	{
		EnterRule_VARIABLE();
		EnterRule("VARIABLE", 63);
		TraceIn("VARIABLE", 63);
		try
		{
			// Scrape.g:364:18: ( ( '@' | LETTER ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(364, 18);
			if ((input.LA(1)>='@' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("VARIABLE", 63);
			LeaveRule("VARIABLE", 63);
			LeaveRule_VARIABLE();
		}
	}
	// $ANTLR end "VARIABLE"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 64);
		TraceIn("LETTER", 64);
		try
		{
			// Scrape.g:365:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(365, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 64);
			LeaveRule("LETTER", 64);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_OTHERCHARS();
	partial void LeaveRule_OTHERCHARS();

	// $ANTLR start "OTHERCHARS"
	[GrammarRule("OTHERCHARS")]
	private void mOTHERCHARS()
	{
		EnterRule_OTHERCHARS();
		EnterRule("OTHERCHARS", 65);
		TraceIn("OTHERCHARS", 65);
		try
		{
			// Scrape.g:366:21: ( ( '.' | '|' | '-' | '&' | ',' | '\\\\' | ':' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(366, 21);
			if (input.LA(1)=='&'||(input.LA(1)>=',' && input.LA(1)<='.')||input.LA(1)==':'||input.LA(1)=='\\'||input.LA(1)=='|')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("OTHERCHARS", 65);
			LeaveRule("OTHERCHARS", 65);
			LeaveRule_OTHERCHARS();
		}
	}
	// $ANTLR end "OTHERCHARS"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 66);
		TraceIn("WS", 66);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:367:4: ( ( ' ' | '\\t' | NEWLINE )+ )
			DebugEnterAlt(1);
			// Scrape.g:367:7: ( ' ' | '\\t' | NEWLINE )+
			{
			DebugLocation(367, 7);
			// Scrape.g:367:7: ( ' ' | '\\t' | NEWLINE )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='\t' && LA4_1<='\n')||LA4_1=='\r'||LA4_1==' '))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(367, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(367, 27);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 66);
			LeaveRule("WS", 66);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 67);
		TraceIn("COMMENT", 67);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:368:9: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// Scrape.g:368:11: '/*' ( . )* '*/'
			{
			DebugLocation(368, 11);
			Match("/*"); 

			DebugLocation(368, 16);
			// Scrape.g:368:16: ( . )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='*'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='/'))
					{
						alt5 = 2;
					}
					else if (((LA5_2>='\u0000' && LA5_2<='.')||(LA5_2>='0' && LA5_2<='\uFFFF')))
					{
						alt5 = 1;
					}


				}
				else if (((LA5_1>='\u0000' && LA5_1<=')')||(LA5_1>='+' && LA5_1<='\uFFFF')))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:368:16: .
					{
					DebugLocation(368, 16);
					MatchAny(); 

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(368, 19);
			Match("*/"); 

			DebugLocation(368, 24);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 67);
			LeaveRule("COMMENT", 67);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT_SLASH();
	partial void LeaveRule_LINE_COMMENT_SLASH();

	// $ANTLR start "LINE_COMMENT_SLASH"
	[GrammarRule("LINE_COMMENT_SLASH")]
	private void mLINE_COMMENT_SLASH()
	{
		EnterRule_LINE_COMMENT_SLASH();
		EnterRule("LINE_COMMENT_SLASH", 68);
		TraceIn("LINE_COMMENT_SLASH", 68);
		try
		{
			int _type = LINE_COMMENT_SLASH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:369:20: ( '//' (~ NEWLINE )* )
			DebugEnterAlt(1);
			// Scrape.g:369:22: '//' (~ NEWLINE )*
			{
			DebugLocation(369, 22);
			Match("//"); 

			DebugLocation(369, 27);
			// Scrape.g:369:27: (~ NEWLINE )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if (((LA6_1>='\u0000' && LA6_1<='\t')||(LA6_1>='\u000B' && LA6_1<='\f')||(LA6_1>='\u000E' && LA6_1<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(369, 27);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(369, 37);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT_SLASH", 68);
			LeaveRule("LINE_COMMENT_SLASH", 68);
			LeaveRule_LINE_COMMENT_SLASH();
		}
	}
	// $ANTLR end "LINE_COMMENT_SLASH"

	partial void EnterRule_LINE_COMMENT_DASH();
	partial void LeaveRule_LINE_COMMENT_DASH();

	// $ANTLR start "LINE_COMMENT_DASH"
	[GrammarRule("LINE_COMMENT_DASH")]
	private void mLINE_COMMENT_DASH()
	{
		EnterRule_LINE_COMMENT_DASH();
		EnterRule("LINE_COMMENT_DASH", 69);
		TraceIn("LINE_COMMENT_DASH", 69);
		try
		{
			int _type = LINE_COMMENT_DASH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:370:19: ( '--' (~ NEWLINE )* )
			DebugEnterAlt(1);
			// Scrape.g:370:21: '--' (~ NEWLINE )*
			{
			DebugLocation(370, 21);
			Match("--"); 

			DebugLocation(370, 26);
			// Scrape.g:370:26: (~ NEWLINE )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='\u0000' && LA7_1<='\t')||(LA7_1>='\u000B' && LA7_1<='\f')||(LA7_1>='\u000E' && LA7_1<='\uFFFF')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(370, 26);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(370, 36);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT_DASH", 69);
			LeaveRule("LINE_COMMENT_DASH", 69);
			LeaveRule_LINE_COMMENT_DASH();
		}
	}
	// $ANTLR end "LINE_COMMENT_DASH"

	public override void mTokens()
	{
		// Scrape.g:1:8: ( T__101 | PROCEDURE | CASE | WHEN | THEN | END | ELSE | EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | INSERT_INTO | INSERT_OVERWRITE | EACH | IN | SELECT | FROM | WHERE | PICK | TAKE | MATCH | REPLACE | ATTRIBUTE | TEXT | HTML | DOWNLOAD_IMAGE | DOWNLOAD_PAGE | IDENTITY | EXPAND | TO | PROXIES | TEST | NULL | CREATE | FILE | BUFFER | WITH | STRING | INTEGER | FLOAT | FIELD_TERMINATOR | ROW_TERMINATOR | LOCATION | STRING_LITERAL | ID | ASTERISK | DOT | OPENPAREN | CLOSEPAREN | OPENBRACE | CLOSEBRACE | PLUS | MINIS | DIV | COMMA | QUOTE | APOSTRAPHE | INT | WS | COMMENT | LINE_COMMENT_SLASH | LINE_COMMENT_DASH )
		int alt8=64;
		try { DebugEnterDecision(8, false);
		try
		{
			alt8 = dfa8.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(8); }
		switch (alt8)
		{
		case 1:
			DebugEnterAlt(1);
			// Scrape.g:1:10: T__101
			{
			DebugLocation(1, 10);
			mT__101(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Scrape.g:1:17: PROCEDURE
			{
			DebugLocation(1, 17);
			mPROCEDURE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Scrape.g:1:27: CASE
			{
			DebugLocation(1, 27);
			mCASE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Scrape.g:1:32: WHEN
			{
			DebugLocation(1, 32);
			mWHEN(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Scrape.g:1:37: THEN
			{
			DebugLocation(1, 37);
			mTHEN(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Scrape.g:1:42: END
			{
			DebugLocation(1, 42);
			mEND(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Scrape.g:1:46: ELSE
			{
			DebugLocation(1, 46);
			mELSE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Scrape.g:1:51: EQUALS
			{
			DebugLocation(1, 51);
			mEQUALS(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Scrape.g:1:58: LESSTHAN
			{
			DebugLocation(1, 58);
			mLESSTHAN(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Scrape.g:1:67: LESSTHANEQUAL
			{
			DebugLocation(1, 67);
			mLESSTHANEQUAL(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Scrape.g:1:81: GREATERTHAN
			{
			DebugLocation(1, 81);
			mGREATERTHAN(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Scrape.g:1:93: GREATERTHANEQUAL
			{
			DebugLocation(1, 93);
			mGREATERTHANEQUAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Scrape.g:1:110: NOTEQUAL
			{
			DebugLocation(1, 110);
			mNOTEQUAL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Scrape.g:1:119: INSERT_INTO
			{
			DebugLocation(1, 119);
			mINSERT_INTO(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Scrape.g:1:131: INSERT_OVERWRITE
			{
			DebugLocation(1, 131);
			mINSERT_OVERWRITE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Scrape.g:1:148: EACH
			{
			DebugLocation(1, 148);
			mEACH(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Scrape.g:1:153: IN
			{
			DebugLocation(1, 153);
			mIN(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Scrape.g:1:156: SELECT
			{
			DebugLocation(1, 156);
			mSELECT(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Scrape.g:1:163: FROM
			{
			DebugLocation(1, 163);
			mFROM(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Scrape.g:1:168: WHERE
			{
			DebugLocation(1, 168);
			mWHERE(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Scrape.g:1:174: PICK
			{
			DebugLocation(1, 174);
			mPICK(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Scrape.g:1:179: TAKE
			{
			DebugLocation(1, 179);
			mTAKE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Scrape.g:1:184: MATCH
			{
			DebugLocation(1, 184);
			mMATCH(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Scrape.g:1:190: REPLACE
			{
			DebugLocation(1, 190);
			mREPLACE(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Scrape.g:1:198: ATTRIBUTE
			{
			DebugLocation(1, 198);
			mATTRIBUTE(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Scrape.g:1:208: TEXT
			{
			DebugLocation(1, 208);
			mTEXT(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Scrape.g:1:213: HTML
			{
			DebugLocation(1, 213);
			mHTML(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Scrape.g:1:218: DOWNLOAD_IMAGE
			{
			DebugLocation(1, 218);
			mDOWNLOAD_IMAGE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Scrape.g:1:233: DOWNLOAD_PAGE
			{
			DebugLocation(1, 233);
			mDOWNLOAD_PAGE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Scrape.g:1:247: IDENTITY
			{
			DebugLocation(1, 247);
			mIDENTITY(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Scrape.g:1:256: EXPAND
			{
			DebugLocation(1, 256);
			mEXPAND(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Scrape.g:1:263: TO
			{
			DebugLocation(1, 263);
			mTO(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Scrape.g:1:266: PROXIES
			{
			DebugLocation(1, 266);
			mPROXIES(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Scrape.g:1:274: TEST
			{
			DebugLocation(1, 274);
			mTEST(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Scrape.g:1:279: NULL
			{
			DebugLocation(1, 279);
			mNULL(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Scrape.g:1:284: CREATE
			{
			DebugLocation(1, 284);
			mCREATE(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Scrape.g:1:291: FILE
			{
			DebugLocation(1, 291);
			mFILE(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Scrape.g:1:296: BUFFER
			{
			DebugLocation(1, 296);
			mBUFFER(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Scrape.g:1:303: WITH
			{
			DebugLocation(1, 303);
			mWITH(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Scrape.g:1:308: STRING
			{
			DebugLocation(1, 308);
			mSTRING(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Scrape.g:1:315: INTEGER
			{
			DebugLocation(1, 315);
			mINTEGER(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Scrape.g:1:323: FLOAT
			{
			DebugLocation(1, 323);
			mFLOAT(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// Scrape.g:1:329: FIELD_TERMINATOR
			{
			DebugLocation(1, 329);
			mFIELD_TERMINATOR(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// Scrape.g:1:346: ROW_TERMINATOR
			{
			DebugLocation(1, 346);
			mROW_TERMINATOR(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// Scrape.g:1:361: LOCATION
			{
			DebugLocation(1, 361);
			mLOCATION(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// Scrape.g:1:370: STRING_LITERAL
			{
			DebugLocation(1, 370);
			mSTRING_LITERAL(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// Scrape.g:1:385: ID
			{
			DebugLocation(1, 385);
			mID(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// Scrape.g:1:388: ASTERISK
			{
			DebugLocation(1, 388);
			mASTERISK(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// Scrape.g:1:397: DOT
			{
			DebugLocation(1, 397);
			mDOT(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// Scrape.g:1:401: OPENPAREN
			{
			DebugLocation(1, 401);
			mOPENPAREN(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// Scrape.g:1:411: CLOSEPAREN
			{
			DebugLocation(1, 411);
			mCLOSEPAREN(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// Scrape.g:1:422: OPENBRACE
			{
			DebugLocation(1, 422);
			mOPENBRACE(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// Scrape.g:1:432: CLOSEBRACE
			{
			DebugLocation(1, 432);
			mCLOSEBRACE(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// Scrape.g:1:443: PLUS
			{
			DebugLocation(1, 443);
			mPLUS(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// Scrape.g:1:448: MINIS
			{
			DebugLocation(1, 448);
			mMINIS(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// Scrape.g:1:454: DIV
			{
			DebugLocation(1, 454);
			mDIV(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// Scrape.g:1:458: COMMA
			{
			DebugLocation(1, 458);
			mCOMMA(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// Scrape.g:1:464: QUOTE
			{
			DebugLocation(1, 464);
			mQUOTE(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// Scrape.g:1:470: APOSTRAPHE
			{
			DebugLocation(1, 470);
			mAPOSTRAPHE(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// Scrape.g:1:481: INT
			{
			DebugLocation(1, 481);
			mINT(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// Scrape.g:1:485: WS
			{
			DebugLocation(1, 485);
			mWS(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// Scrape.g:1:488: COMMENT
			{
			DebugLocation(1, 488);
			mCOMMENT(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// Scrape.g:1:496: LINE_COMMENT_SLASH
			{
			DebugLocation(1, 496);
			mLINE_COMMENT_SLASH(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// Scrape.g:1:515: LINE_COMMENT_DASH
			{
			DebugLocation(1, 515);
			mLINE_COMMENT_DASH(); 

			}
			break;

		}

	}


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this, SpecialStateTransition8);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x2\xFFFF\x5\x17\x1\xFFFF\x1\x34\x1\x36\x1\xFFFF\xB\x17\x1\x47\x8\xFFFF"+
			"\x1\x4A\x1\x4D\x4\xFFFF\x9\x17\x1\x58\x4\x17\x4\xFFFF\x1\x5F\xF\x17\x7"+
			"\xFFFF\xA\x17\x1\xFFFF\x1\x7C\x4\x17\x1\x81\x1\xFFFF\x12\x17\x1\x94\x1"+
			"\x95\x1\x17\x1\x97\x1\x17\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\xFFFF"+
			"\x1\x9E\x1\x9F\x2\x17\x1\xFFFF\x3\x17\x1\xA5\x1\xA6\x6\x17\x1\xAD\x1"+
			"\x17\x1\xAF\x4\x17\x2\xFFFF\x1\x17\x1\xFFFF\x1\xB5\x7\xFFFF\x5\x17\x2"+
			"\xFFFF\x1\x17\x1\xBC\x1\xBD\x3\x17\x1\xFFFF\x1\x17\x1\xFFFF\x4\x17\x1"+
			"\xC6\x1\xFFFF\x1\xC7\x2\x17\x1\xCA\x1\xCB\x1\x17\x2\xFFFF\x4\x17\x1\xD1"+
			"\x2\x17\x1\xD4\x3\xFFFF\x1\x17\x2\xFFFF\x1\x17\x1\xD9\x3\x17\x1\xFFFF"+
			"\x2\x17\x3\xFFFF\x1\xDF\x1\x17\x1\xFFFF\x3\x17\x1\xE4\x1\xE5\x1\xFFFF"+
			"\x2\x17\x1\xE8\x3\xFFFF\x2\x17\x3\xFFFF\x5\x17\x1\xF2\x1\x17\x1\xFFFF"+
			"\x1\xF4\x1\xFFFF";
		private const string DFA8_eofS =
			"\xF5\xFFFF";
		private const string DFA8_minS =
			"\x1\x9\x1\xFFFF\x1\x69\x1\x61\x1\x68\x2\x61\x1\xFFFF\x2\x3D\x1\xFFFF"+
			"\x1\x64\x1\x65\x1\x69\x1\x61\x1\x65\x2\x74\x1\x6F\x2\x75\x1\x6F\x1\x0"+
			"\x8\xFFFF\x1\x2D\x1\x2A\x4\xFFFF\x1\x6F\x1\x63\x1\x73\x2\x65\x1\x74\x1"+
			"\x65\x1\x6B\x1\x73\x1\x40\x1\x64\x1\x73\x1\x63\x1\x70\x4\xFFFF\x1\x40"+
			"\x1\x65\x1\x6C\x1\x72\x1\x6F\x1\x65\x1\x6F\x1\x74\x1\x70\x1\x77\x1\x74"+
			"\x1\x6D\x1\x77\x1\x6C\x1\x66\x1\x63\x7\xFFFF\x1\x63\x1\x6B\x1\x65\x1"+
			"\x61\x1\x6E\x1\x68\x1\x6E\x1\x65\x2\x74\x1\xFFFF\x1\x40\x1\x65\x1\x68"+
			"\x1\x61\x1\x65\x1\x40\x1\xFFFF\x1\x6E\x1\x65\x1\x69\x1\x6D\x1\x65\x1"+
			"\x6C\x1\x61\x1\x63\x1\x6C\x1\x74\x1\x72\x1\x6C\x1\x6E\x1\x6C\x1\x66\x1"+
			"\x61\x1\x65\x1\x69\x2\x40\x1\x74\x1\x40\x1\x65\x5\x40\x1\xFFFF\x2\x40"+
			"\x1\x6E\x1\x72\x1\xFFFF\x1\x74\x1\x63\x1\x6E\x2\x40\x1\x64\x1\x74\x1"+
			"\x68\x1\x61\x1\x65\x1\x69\x1\x40\x1\x6C\x1\x40\x1\x65\x1\x74\x1\x64\x1"+
			"\x65\x2\xFFFF\x1\x65\x1\xFFFF\x1\x40\x7\xFFFF\x1\x64\x1\x74\x1\x69\x1"+
			"\x74\x1\x67\x2\xFFFF\x1\x74\x2\x40\x1\x63\x1\x72\x1\x62\x1\xFFFF\x1\x6F"+
			"\x1\xFFFF\x1\x72\x1\x69\x1\x75\x1\x73\x1\x40\x1\xFFFF\x1\x40\x1\x20\x1"+
			"\x74\x2\x40\x1\x65\x2\xFFFF\x1\x65\x1\x6D\x1\x75\x1\x61\x1\x40\x1\x6F"+
			"\x1\x72\x1\x40\x2\xFFFF\x1\x69\x1\x79\x2\xFFFF\x1\x72\x1\x40\x1\x69\x1"+
			"\x74\x1\x64\x1\xFFFF\x1\x6E\x1\x65\x3\xFFFF\x1\x40\x1\x6D\x1\xFFFF\x1"+
			"\x6E\x1\x65\x1\x20\x2\x40\x1\xFFFF\x1\x69\x1\x61\x1\x40\x1\x69\x2\xFFFF"+
			"\x1\x6E\x1\x74\x3\xFFFF\x1\x61\x1\x6F\x1\x74\x1\x72\x1\x6F\x1\x40\x1"+
			"\x72\x1\xFFFF\x1\x40\x1\xFFFF";
		private const string DFA8_maxS =
			"\x1\x7D\x1\xFFFF\x2\x72\x1\x69\x1\x6F\x1\x78\x1\xFFFF\x2\x3D\x1\xFFFF"+
			"\x1\x6E\x1\x74\x1\x72\x1\x61\x1\x6F\x2\x74\x1\x6F\x2\x75\x1\x6F\x1\xFFFF"+
			"\x8\xFFFF\x1\x2D\x1\x2F\x4\xFFFF\x1\x6F\x1\x63\x1\x73\x2\x65\x1\x74\x1"+
			"\x65\x1\x6B\x1\x78\x1\x7A\x1\x64\x1\x73\x1\x63\x1\x70\x4\xFFFF\x1\x7A"+
			"\x1\x65\x1\x6C\x1\x72\x1\x6F\x1\x6C\x1\x6F\x1\x74\x1\x70\x1\x77\x1\x74"+
			"\x1\x6D\x1\x77\x1\x6C\x1\x66\x1\x63\x7\xFFFF\x1\x78\x1\x6B\x1\x65\x1"+
			"\x61\x1\x72\x1\x68\x1\x6E\x1\x65\x2\x74\x1\xFFFF\x1\x7A\x1\x65\x1\x68"+
			"\x1\x61\x1\x65\x1\x7A\x1\xFFFF\x1\x6E\x1\x65\x1\x69\x1\x6D\x1\x65\x1"+
			"\x6C\x1\x61\x1\x63\x1\x6C\x1\x74\x1\x72\x1\x6C\x1\x6E\x1\x6C\x1\x66\x1"+
			"\x61\x1\x65\x1\x69\x2\x7A\x1\x74\x1\x7A\x1\x65\x5\x7A\x1\xFFFF\x2\x7A"+
			"\x1\x6E\x1\x72\x1\xFFFF\x1\x74\x1\x63\x1\x6E\x2\x7A\x1\x64\x1\x74\x1"+
			"\x68\x1\x61\x1\x65\x1\x69\x1\x7A\x1\x6C\x1\x7A\x1\x65\x1\x74\x1\x64\x1"+
			"\x65\x2\xFFFF\x1\x65\x1\xFFFF\x1\x7A\x7\xFFFF\x1\x64\x1\x74\x1\x69\x1"+
			"\x74\x1\x67\x2\xFFFF\x1\x74\x2\x7A\x1\x63\x1\x72\x1\x62\x1\xFFFF\x1\x6F"+
			"\x1\xFFFF\x1\x72\x1\x69\x1\x75\x1\x73\x1\x7A\x1\xFFFF\x1\x7A\x1\x20\x1"+
			"\x74\x2\x7A\x1\x65\x2\xFFFF\x1\x65\x1\x6D\x1\x75\x1\x61\x1\x7A\x1\x6F"+
			"\x1\x72\x1\x7A\x2\xFFFF\x1\x6F\x1\x79\x2\xFFFF\x1\x72\x1\x7A\x1\x69\x1"+
			"\x74\x1\x64\x1\xFFFF\x1\x6E\x1\x65\x3\xFFFF\x1\x7A\x1\x6D\x1\xFFFF\x1"+
			"\x6E\x1\x65\x1\x20\x2\x7A\x1\xFFFF\x1\x69\x1\x61\x1\x7A\x1\x70\x2\xFFFF"+
			"\x1\x6E\x1\x74\x3\xFFFF\x1\x61\x1\x6F\x1\x74\x1\x72\x1\x6F\x1\x7A\x1"+
			"\x72\x1\xFFFF\x1\x7A\x1\xFFFF";
		private const string DFA8_acceptS =
			"\x1\xFFFF\x1\x1\x5\xFFFF\x1\x8\x2\xFFFF\x1\xD\xC\xFFFF\x1\x2F\x1\x30"+
			"\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x2\xFFFF\x1\x39\x1\x3A\x1"+
			"\x3C\x1\x3D\xE\xFFFF\x1\xA\x1\x9\x1\xC\x1\xB\x10\xFFFF\x1\x3B\x1\x2E"+
			"\x1\x40\x1\x37\x1\x3E\x1\x3F\x1\x38\xA\xFFFF\x1\x20\x6\xFFFF\x1\x11\x1C"+
			"\xFFFF\x1\x6\x4\xFFFF\x1\x29\x12\xFFFF\x1\x15\x1\x3\x1\xFFFF\x1\x4\x1"+
			"\xFFFF\x1\x27\x1\x5\x1\x16\x1\x1A\x1\x22\x1\x7\x1\x10\x5\xFFFF\x1\x13"+
			"\x1\x25\x6\xFFFF\x1\x1B\x1\xFFFF\x1\x23\x5\xFFFF\x1\x14\x6\xFFFF\x1\x2A"+
			"\x1\x17\x8\xFFFF\x1\x24\x1\x1F\x2\xFFFF\x1\x12\x1\x28\x5\xFFFF\x1\x26"+
			"\x2\xFFFF\x1\x21\x1\xE\x1\xF\x2\xFFFF\x1\x18\x5\xFFFF\x1\x1E\x4\xFFFF"+
			"\x1\x2D\x1\x2\x2\xFFFF\x1\x19\x1\x1C\x1\x1D\x7\xFFFF\x1\x2C\x1\xFFFF"+
			"\x1\x2B";
		private const string DFA8_specialS =
			"\x16\xFFFF\x1\x0\xDE\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x2\x24\x2\xFFFF\x1\x24\x12\xFFFF\x1\x24\x1\xA\x1\x22\x1\xFFFF\x1\x1"+
				"\x2\xFFFF\x1\x16\x1\x1A\x1\x1B\x1\x18\x1\x1E\x1\x21\x1\x1F\x1\x19\x1"+
				"\x20\xA\x23\x2\xFFFF\x1\x8\x1\x7\x1\x9\x1\xFFFF\x1B\x17\x6\xFFFF\x1"+
				"\x10\x1\x14\x1\x3\x1\x12\x1\x6\x1\xD\x1\x17\x1\x11\x1\xB\x2\x17\x1\x15"+
				"\x1\xE\x1\x13\x1\x17\x1\x2\x1\x17\x1\xF\x1\xC\x1\x5\x2\x17\x1\x4\x3"+
				"\x17\x1\x1C\x1\xFFFF\x1\x1D",
				"",
				"\x1\x26\x8\xFFFF\x1\x25",
				"\x1\x27\x10\xFFFF\x1\x28",
				"\x1\x29\x1\x2A",
				"\x1\x2C\x3\xFFFF\x1\x2D\x2\xFFFF\x1\x2B\x6\xFFFF\x1\x2E",
				"\x1\x31\xA\xFFFF\x1\x30\x1\xFFFF\x1\x2F\x9\xFFFF\x1\x32",
				"",
				"\x1\x33",
				"\x1\x35",
				"",
				"\x1\x38\x9\xFFFF\x1\x37",
				"\x1\x39\xE\xFFFF\x1\x3A",
				"\x1\x3C\x2\xFFFF\x1\x3D\x5\xFFFF\x1\x3B",
				"\x1\x3E",
				"\x1\x3F\x9\xFFFF\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x0\x48",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x49",
				"\x1\x4B\x4\xFFFF\x1\x4C",
				"",
				"",
				"",
				"",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x57\x4\xFFFF\x1\x56",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"",
				"",
				"",
				"",
				"\x1B\x17\x6\xFFFF\x12\x17\x1\x5D\x1\x5E\x6\x17",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x65\x6\xFFFF\x1\x64",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x70\x14\xFFFF\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75\x3\xFFFF\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\x1\x79",
				"\x1\x7A",
				"\x1\x7B",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\x7D",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"\x1\x86",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x93",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\x96",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\x98",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xA0",
				"\x1\xA1",
				"",
				"\x1\xA2",
				"\x1\xA3",
				"\x1\xA4",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xA7",
				"\x1\xA8",
				"\x1\xA9",
				"\x1\xAA",
				"\x1\xAB",
				"\x1\xAC",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xAE",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xB0",
				"\x1\xB1",
				"\x1\xB2",
				"\x1\xB3",
				"",
				"",
				"\x1\xB4",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"",
				"",
				"\x1\xBB",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xBE",
				"\x1\xBF",
				"\x1\xC0",
				"",
				"\x1\xC1",
				"",
				"\x1\xC2",
				"\x1\xC3",
				"\x1\xC4",
				"\x1\xC5",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xC8",
				"\x1\xC9",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xCC",
				"",
				"",
				"\x1\xCD",
				"\x1\xCE",
				"\x1\xCF",
				"\x1\xD0",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xD2",
				"\x1\xD3",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"",
				"\x1\xD5\x5\xFFFF\x1\xD6",
				"\x1\xD7",
				"",
				"",
				"\x1\xD8",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xDA",
				"\x1\xDB",
				"\x1\xDC",
				"",
				"\x1\xDD",
				"\x1\xDE",
				"",
				"",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xE0",
				"",
				"\x1\xE1",
				"\x1\xE2",
				"\x1\xE3",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"",
				"\x1\xE6",
				"\x1\xE7",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xE9\x6\xFFFF\x1\xEA",
				"",
				"",
				"\x1\xEB",
				"\x1\xEC",
				"",
				"",
				"",
				"\x1\xED",
				"\x1\xEE",
				"\x1\xEF",
				"\x1\xF0",
				"\x1\xF1",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				"\x1\xF3",
				"",
				"\x1B\x17\x6\xFFFF\x1A\x17",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__101 | PROCEDURE | CASE | WHEN | THEN | END | ELSE | EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | INSERT_INTO | INSERT_OVERWRITE | EACH | IN | SELECT | FROM | WHERE | PICK | TAKE | MATCH | REPLACE | ATTRIBUTE | TEXT | HTML | DOWNLOAD_IMAGE | DOWNLOAD_PAGE | IDENTITY | EXPAND | TO | PROXIES | TEST | NULL | CREATE | FILE | BUFFER | WITH | STRING | INTEGER | FLOAT | FIELD_TERMINATOR | ROW_TERMINATOR | LOCATION | STRING_LITERAL | ID | ASTERISK | DOT | OPENPAREN | CLOSEPAREN | OPENBRACE | CLOSEBRACE | PLUS | MINIS | DIV | COMMA | QUOTE | APOSTRAPHE | INT | WS | COMMENT | LINE_COMMENT_SLASH | LINE_COMMENT_DASH );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition8(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA8_1 = input.LA(1);
		int index8_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if (((LA8_1>='\u0000' && LA8_1<='\uFFFF'))) {s = 72;}

				else s = 71;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 8, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion

}
