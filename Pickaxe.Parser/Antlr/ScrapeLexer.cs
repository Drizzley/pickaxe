//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-05-19 19:32:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__123=123;
	public const int T__124=124;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CONNECTIONSTRING=20;
	public const int CREATE=21;
	public const int DBTABLE=22;
	public const int DIGIT=23;
	public const int DIV=24;
	public const int DOT=25;
	public const int DOWNLOAD_IMAGE=26;
	public const int DOWNLOAD_PAGE=27;
	public const int EACH=28;
	public const int ELSE=29;
	public const int END=30;
	public const int EQUALS=31;
	public const int EXEC=32;
	public const int EXPAND=33;
	public const int EXPAND_INTERATION_VARIABLE=34;
	public const int FIELD_TERMINATOR=35;
	public const int FILE=36;
	public const int FILE_TABLE=37;
	public const int FLOAT=38;
	public const int FROM=39;
	public const int GREATERTHAN=40;
	public const int GREATERTHANEQUAL=41;
	public const int HTML=42;
	public const int ID=43;
	public const int IDENTITY=44;
	public const int IDENTITY_VAR=45;
	public const int IN=46;
	public const int INNER_JOIN=47;
	public const int INSERT_DIRECTORY=48;
	public const int INSERT_INTO=49;
	public const int INSERT_INTO_DIRECTORY=50;
	public const int INSERT_OVERWRITE=51;
	public const int INT=52;
	public const int INTEGER=53;
	public const int JOIN=54;
	public const int LESSTHAN=55;
	public const int LESSTHANEQUAL=56;
	public const int LETTER=57;
	public const int LINE_COMMENT_DASH=58;
	public const int LINE_COMMENT_SLASH=59;
	public const int LOCATION=60;
	public const int MATCH=61;
	public const int MEMBER_REFERENCE=62;
	public const int MINIS=63;
	public const int MSSQL=64;
	public const int MSSQL_TABLE=65;
	public const int NEWLINE=66;
	public const int NODES=67;
	public const int NOTEQUAL=68;
	public const int NULL=69;
	public const int NULL_OPERATOR=70;
	public const int OPENBRACE=71;
	public const int OPENPAREN=72;
	public const int OR=73;
	public const int OTHERCHARS=74;
	public const int PICK=75;
	public const int PLUS=76;
	public const int POST_PICK=77;
	public const int PRE_PICK=78;
	public const int PROCEDURE=79;
	public const int PROGRAM=80;
	public const int PROXIES=81;
	public const int PROXY_LIST=82;
	public const int QUOTE=83;
	public const int REPLACE=84;
	public const int ROW_REFERENCE=85;
	public const int ROW_TERMINATOR=86;
	public const int SELECT=87;
	public const int SELECT_ALL=88;
	public const int SELECT_ARG=89;
	public const int SELECT_ID=90;
	public const int SELECT_STATEMENT=91;
	public const int SET=92;
	public const int STRING=93;
	public const int STRING_LITERAL=94;
	public const int TABLE=95;
	public const int TABLE_ALIAS=96;
	public const int TABLE_COLUMN_ARG=97;
	public const int TABLE_COLUMN_ARGS=98;
	public const int TABLE_MEMBER_REFERENCE=99;
	public const int TABLE_VARIABLE_REFERENCE=100;
	public const int TAKE=101;
	public const int TAKE_ATTRIBUTE=102;
	public const int TAKE_HTML=103;
	public const int TAKE_TEXT=104;
	public const int TEST=105;
	public const int TEXT=106;
	public const int THEN=107;
	public const int THREAD=108;
	public const int TO=109;
	public const int TRUNCATE=110;
	public const int UPDATE=111;
	public const int VAR=112;
	public const int VARIABLE_ASSIGNMENT=113;
	public const int VARIABLE_DECLARATION=114;
	public const int VARIABLE_REFERENCE=115;
	public const int WHEN=116;
	public const int WHEN_BOOL_STATEMENT=117;
	public const int WHEN_LITERAL_STATEMENT=118;
	public const int WHERE=119;
	public const int WHILE=120;
	public const int WITH=121;
	public const int WS=122;

	// delegates
	// delegators

	public ScrapeLexer()
	{
		OnCreated();
	}

	public ScrapeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ScrapeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__123();
	partial void LeaveRule_T__123();

	// $ANTLR start "T__123"
	[GrammarRule("T__123")]
	private void mT__123()
	{
		EnterRule_T__123();
		EnterRule("T__123", 1);
		TraceIn("T__123", 1);
		try
		{
			int _type = T__123;
			int _channel = DefaultTokenChannel;
			// Scrape.g:8:8: ( '$' )
			DebugEnterAlt(1);
			// Scrape.g:8:10: '$'
			{
			DebugLocation(8, 10);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__123", 1);
			LeaveRule("T__123", 1);
			LeaveRule_T__123();
		}
	}
	// $ANTLR end "T__123"

	partial void EnterRule_T__124();
	partial void LeaveRule_T__124();

	// $ANTLR start "T__124"
	[GrammarRule("T__124")]
	private void mT__124()
	{
		EnterRule_T__124();
		EnterRule("T__124", 2);
		TraceIn("T__124", 2);
		try
		{
			int _type = T__124;
			int _channel = DefaultTokenChannel;
			// Scrape.g:9:8: ( 'on' )
			DebugEnterAlt(1);
			// Scrape.g:9:10: 'on'
			{
			DebugLocation(9, 10);
			Match("on"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__124", 2);
			LeaveRule("T__124", 2);
			LeaveRule_T__124();
		}
	}
	// $ANTLR end "T__124"

	partial void EnterRule_PROCEDURE();
	partial void LeaveRule_PROCEDURE();

	// $ANTLR start "PROCEDURE"
	[GrammarRule("PROCEDURE")]
	private void mPROCEDURE()
	{
		EnterRule_PROCEDURE();
		EnterRule("PROCEDURE", 3);
		TraceIn("PROCEDURE", 3);
		try
		{
			int _type = PROCEDURE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:421:10: ( 'procedure' )
			DebugEnterAlt(1);
			// Scrape.g:421:12: 'procedure'
			{
			DebugLocation(421, 12);
			Match("procedure"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROCEDURE", 3);
			LeaveRule("PROCEDURE", 3);
			LeaveRule_PROCEDURE();
		}
	}
	// $ANTLR end "PROCEDURE"

	partial void EnterRule_EXEC();
	partial void LeaveRule_EXEC();

	// $ANTLR start "EXEC"
	[GrammarRule("EXEC")]
	private void mEXEC()
	{
		EnterRule_EXEC();
		EnterRule("EXEC", 4);
		TraceIn("EXEC", 4);
		try
		{
			int _type = EXEC;
			int _channel = DefaultTokenChannel;
			// Scrape.g:422:5: ( 'exec' )
			DebugEnterAlt(1);
			// Scrape.g:422:7: 'exec'
			{
			DebugLocation(422, 7);
			Match("exec"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXEC", 4);
			LeaveRule("EXEC", 4);
			LeaveRule_EXEC();
		}
	}
	// $ANTLR end "EXEC"

	partial void EnterRule_CASE();
	partial void LeaveRule_CASE();

	// $ANTLR start "CASE"
	[GrammarRule("CASE")]
	private void mCASE()
	{
		EnterRule_CASE();
		EnterRule("CASE", 5);
		TraceIn("CASE", 5);
		try
		{
			int _type = CASE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:423:5: ( 'case' )
			DebugEnterAlt(1);
			// Scrape.g:423:7: 'case'
			{
			DebugLocation(423, 7);
			Match("case"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CASE", 5);
			LeaveRule("CASE", 5);
			LeaveRule_CASE();
		}
	}
	// $ANTLR end "CASE"

	partial void EnterRule_WHEN();
	partial void LeaveRule_WHEN();

	// $ANTLR start "WHEN"
	[GrammarRule("WHEN")]
	private void mWHEN()
	{
		EnterRule_WHEN();
		EnterRule("WHEN", 6);
		TraceIn("WHEN", 6);
		try
		{
			int _type = WHEN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:424:5: ( 'when' )
			DebugEnterAlt(1);
			// Scrape.g:424:7: 'when'
			{
			DebugLocation(424, 7);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHEN", 6);
			LeaveRule("WHEN", 6);
			LeaveRule_WHEN();
		}
	}
	// $ANTLR end "WHEN"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 7);
		TraceIn("THEN", 7);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:425:5: ( 'then' )
			DebugEnterAlt(1);
			// Scrape.g:425:7: 'then'
			{
			DebugLocation(425, 7);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 7);
			LeaveRule("THEN", 7);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 8);
		TraceIn("END", 8);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// Scrape.g:426:4: ( 'end' )
			DebugEnterAlt(1);
			// Scrape.g:426:6: 'end'
			{
			DebugLocation(426, 6);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 8);
			LeaveRule("END", 8);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 9);
		TraceIn("ELSE", 9);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:427:5: ( 'else' )
			DebugEnterAlt(1);
			// Scrape.g:427:7: 'else'
			{
			DebugLocation(427, 7);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 9);
			LeaveRule("ELSE", 9);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 10);
		TraceIn("VAR", 10);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:429:4: ( 'var' )
			DebugEnterAlt(1);
			// Scrape.g:429:6: 'var'
			{
			DebugLocation(429, 6);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 10);
			LeaveRule("VAR", 10);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 11);
		TraceIn("AND", 11);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// Scrape.g:431:5: ( 'and' )
			DebugEnterAlt(1);
			// Scrape.g:431:7: 'and'
			{
			DebugLocation(431, 7);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 11);
			LeaveRule("AND", 11);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 12);
		TraceIn("OR", 12);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:432:4: ( 'or' )
			DebugEnterAlt(1);
			// Scrape.g:432:6: 'or'
			{
			DebugLocation(432, 6);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 12);
			LeaveRule("OR", 12);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 13);
		TraceIn("EQUALS", 13);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:434:8: ( '=' )
			DebugEnterAlt(1);
			// Scrape.g:434:10: '='
			{
			DebugLocation(434, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 13);
			LeaveRule("EQUALS", 13);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_LESSTHAN();
	partial void LeaveRule_LESSTHAN();

	// $ANTLR start "LESSTHAN"
	[GrammarRule("LESSTHAN")]
	private void mLESSTHAN()
	{
		EnterRule_LESSTHAN();
		EnterRule("LESSTHAN", 14);
		TraceIn("LESSTHAN", 14);
		try
		{
			int _type = LESSTHAN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:435:10: ( '<' )
			DebugEnterAlt(1);
			// Scrape.g:435:12: '<'
			{
			DebugLocation(435, 12);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHAN", 14);
			LeaveRule("LESSTHAN", 14);
			LeaveRule_LESSTHAN();
		}
	}
	// $ANTLR end "LESSTHAN"

	partial void EnterRule_LESSTHANEQUAL();
	partial void LeaveRule_LESSTHANEQUAL();

	// $ANTLR start "LESSTHANEQUAL"
	[GrammarRule("LESSTHANEQUAL")]
	private void mLESSTHANEQUAL()
	{
		EnterRule_LESSTHANEQUAL();
		EnterRule("LESSTHANEQUAL", 15);
		TraceIn("LESSTHANEQUAL", 15);
		try
		{
			int _type = LESSTHANEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:436:14: ( '<=' )
			DebugEnterAlt(1);
			// Scrape.g:436:16: '<='
			{
			DebugLocation(436, 16);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSTHANEQUAL", 15);
			LeaveRule("LESSTHANEQUAL", 15);
			LeaveRule_LESSTHANEQUAL();
		}
	}
	// $ANTLR end "LESSTHANEQUAL"

	partial void EnterRule_GREATERTHAN();
	partial void LeaveRule_GREATERTHAN();

	// $ANTLR start "GREATERTHAN"
	[GrammarRule("GREATERTHAN")]
	private void mGREATERTHAN()
	{
		EnterRule_GREATERTHAN();
		EnterRule("GREATERTHAN", 16);
		TraceIn("GREATERTHAN", 16);
		try
		{
			int _type = GREATERTHAN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:437:12: ( '>' )
			DebugEnterAlt(1);
			// Scrape.g:437:14: '>'
			{
			DebugLocation(437, 14);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHAN", 16);
			LeaveRule("GREATERTHAN", 16);
			LeaveRule_GREATERTHAN();
		}
	}
	// $ANTLR end "GREATERTHAN"

	partial void EnterRule_GREATERTHANEQUAL();
	partial void LeaveRule_GREATERTHANEQUAL();

	// $ANTLR start "GREATERTHANEQUAL"
	[GrammarRule("GREATERTHANEQUAL")]
	private void mGREATERTHANEQUAL()
	{
		EnterRule_GREATERTHANEQUAL();
		EnterRule("GREATERTHANEQUAL", 17);
		TraceIn("GREATERTHANEQUAL", 17);
		try
		{
			int _type = GREATERTHANEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:438:17: ( '>=' )
			DebugEnterAlt(1);
			// Scrape.g:438:19: '>='
			{
			DebugLocation(438, 19);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATERTHANEQUAL", 17);
			LeaveRule("GREATERTHANEQUAL", 17);
			LeaveRule_GREATERTHANEQUAL();
		}
	}
	// $ANTLR end "GREATERTHANEQUAL"

	partial void EnterRule_NOTEQUAL();
	partial void LeaveRule_NOTEQUAL();

	// $ANTLR start "NOTEQUAL"
	[GrammarRule("NOTEQUAL")]
	private void mNOTEQUAL()
	{
		EnterRule_NOTEQUAL();
		EnterRule("NOTEQUAL", 18);
		TraceIn("NOTEQUAL", 18);
		try
		{
			int _type = NOTEQUAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:439:9: ( '!=' )
			DebugEnterAlt(1);
			// Scrape.g:439:11: '!='
			{
			DebugLocation(439, 11);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUAL", 18);
			LeaveRule("NOTEQUAL", 18);
			LeaveRule_NOTEQUAL();
		}
	}
	// $ANTLR end "NOTEQUAL"

	partial void EnterRule_NULL_OPERATOR();
	partial void LeaveRule_NULL_OPERATOR();

	// $ANTLR start "NULL_OPERATOR"
	[GrammarRule("NULL_OPERATOR")]
	private void mNULL_OPERATOR()
	{
		EnterRule_NULL_OPERATOR();
		EnterRule("NULL_OPERATOR", 19);
		TraceIn("NULL_OPERATOR", 19);
		try
		{
			int _type = NULL_OPERATOR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:441:14: ( '??' )
			DebugEnterAlt(1);
			// Scrape.g:441:16: '??'
			{
			DebugLocation(441, 16);
			Match("??"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL_OPERATOR", 19);
			LeaveRule("NULL_OPERATOR", 19);
			LeaveRule_NULL_OPERATOR();
		}
	}
	// $ANTLR end "NULL_OPERATOR"

	partial void EnterRule_UPDATE();
	partial void LeaveRule_UPDATE();

	// $ANTLR start "UPDATE"
	[GrammarRule("UPDATE")]
	private void mUPDATE()
	{
		EnterRule_UPDATE();
		EnterRule("UPDATE", 20);
		TraceIn("UPDATE", 20);
		try
		{
			int _type = UPDATE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:443:8: ( 'update' )
			DebugEnterAlt(1);
			// Scrape.g:443:10: 'update'
			{
			DebugLocation(443, 10);
			Match("update"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UPDATE", 20);
			LeaveRule("UPDATE", 20);
			LeaveRule_UPDATE();
		}
	}
	// $ANTLR end "UPDATE"

	partial void EnterRule_SET();
	partial void LeaveRule_SET();

	// $ANTLR start "SET"
	[GrammarRule("SET")]
	private void mSET()
	{
		EnterRule_SET();
		EnterRule("SET", 21);
		TraceIn("SET", 21);
		try
		{
			int _type = SET;
			int _channel = DefaultTokenChannel;
			// Scrape.g:444:5: ( 'set' )
			DebugEnterAlt(1);
			// Scrape.g:444:7: 'set'
			{
			DebugLocation(444, 7);
			Match("set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SET", 21);
			LeaveRule("SET", 21);
			LeaveRule_SET();
		}
	}
	// $ANTLR end "SET"

	partial void EnterRule_INSERT_INTO();
	partial void LeaveRule_INSERT_INTO();

	// $ANTLR start "INSERT_INTO"
	[GrammarRule("INSERT_INTO")]
	private void mINSERT_INTO()
	{
		EnterRule_INSERT_INTO();
		EnterRule("INSERT_INTO", 22);
		TraceIn("INSERT_INTO", 22);
		try
		{
			int _type = INSERT_INTO;
			int _channel = DefaultTokenChannel;
			// Scrape.g:445:13: ( 'insert into' )
			DebugEnterAlt(1);
			// Scrape.g:445:15: 'insert into'
			{
			DebugLocation(445, 15);
			Match("insert into"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSERT_INTO", 22);
			LeaveRule("INSERT_INTO", 22);
			LeaveRule_INSERT_INTO();
		}
	}
	// $ANTLR end "INSERT_INTO"

	partial void EnterRule_INSERT_OVERWRITE();
	partial void LeaveRule_INSERT_OVERWRITE();

	// $ANTLR start "INSERT_OVERWRITE"
	[GrammarRule("INSERT_OVERWRITE")]
	private void mINSERT_OVERWRITE()
	{
		EnterRule_INSERT_OVERWRITE();
		EnterRule("INSERT_OVERWRITE", 23);
		TraceIn("INSERT_OVERWRITE", 23);
		try
		{
			int _type = INSERT_OVERWRITE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:446:18: ( 'insert overwrite' )
			DebugEnterAlt(1);
			// Scrape.g:446:20: 'insert overwrite'
			{
			DebugLocation(446, 20);
			Match("insert overwrite"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSERT_OVERWRITE", 23);
			LeaveRule("INSERT_OVERWRITE", 23);
			LeaveRule_INSERT_OVERWRITE();
		}
	}
	// $ANTLR end "INSERT_OVERWRITE"

	partial void EnterRule_INSERT_DIRECTORY();
	partial void LeaveRule_INSERT_DIRECTORY();

	// $ANTLR start "INSERT_DIRECTORY"
	[GrammarRule("INSERT_DIRECTORY")]
	private void mINSERT_DIRECTORY()
	{
		EnterRule_INSERT_DIRECTORY();
		EnterRule("INSERT_DIRECTORY", 24);
		TraceIn("INSERT_DIRECTORY", 24);
		try
		{
			int _type = INSERT_DIRECTORY;
			int _channel = DefaultTokenChannel;
			// Scrape.g:447:18: ( 'insert file into' )
			DebugEnterAlt(1);
			// Scrape.g:447:20: 'insert file into'
			{
			DebugLocation(447, 20);
			Match("insert file into"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INSERT_DIRECTORY", 24);
			LeaveRule("INSERT_DIRECTORY", 24);
			LeaveRule_INSERT_DIRECTORY();
		}
	}
	// $ANTLR end "INSERT_DIRECTORY"

	partial void EnterRule_TRUNCATE();
	partial void LeaveRule_TRUNCATE();

	// $ANTLR start "TRUNCATE"
	[GrammarRule("TRUNCATE")]
	private void mTRUNCATE()
	{
		EnterRule_TRUNCATE();
		EnterRule("TRUNCATE", 25);
		TraceIn("TRUNCATE", 25);
		try
		{
			int _type = TRUNCATE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:448:10: ( 'truncate' )
			DebugEnterAlt(1);
			// Scrape.g:448:12: 'truncate'
			{
			DebugLocation(448, 12);
			Match("truncate"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUNCATE", 25);
			LeaveRule("TRUNCATE", 25);
			LeaveRule_TRUNCATE();
		}
	}
	// $ANTLR end "TRUNCATE"

	partial void EnterRule_THREAD();
	partial void LeaveRule_THREAD();

	// $ANTLR start "THREAD"
	[GrammarRule("THREAD")]
	private void mTHREAD()
	{
		EnterRule_THREAD();
		EnterRule("THREAD", 26);
		TraceIn("THREAD", 26);
		try
		{
			int _type = THREAD;
			int _channel = DefaultTokenChannel;
			// Scrape.g:449:8: ( 'thread' )
			DebugEnterAlt(1);
			// Scrape.g:449:10: 'thread'
			{
			DebugLocation(449, 10);
			Match("thread"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THREAD", 26);
			LeaveRule("THREAD", 26);
			LeaveRule_THREAD();
		}
	}
	// $ANTLR end "THREAD"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 27);
		TraceIn("WHILE", 27);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:450:7: ( 'while' )
			DebugEnterAlt(1);
			// Scrape.g:450:9: 'while'
			{
			DebugLocation(450, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 27);
			LeaveRule("WHILE", 27);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_EACH();
	partial void LeaveRule_EACH();

	// $ANTLR start "EACH"
	[GrammarRule("EACH")]
	private void mEACH()
	{
		EnterRule_EACH();
		EnterRule("EACH", 28);
		TraceIn("EACH", 28);
		try
		{
			int _type = EACH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:451:6: ( 'each' )
			DebugEnterAlt(1);
			// Scrape.g:451:8: 'each'
			{
			DebugLocation(451, 8);
			Match("each"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EACH", 28);
			LeaveRule("EACH", 28);
			LeaveRule_EACH();
		}
	}
	// $ANTLR end "EACH"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 29);
		TraceIn("IN", 29);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:452:4: ( 'in' )
			DebugEnterAlt(1);
			// Scrape.g:452:6: 'in'
			{
			DebugLocation(452, 6);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 29);
			LeaveRule("IN", 29);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_SELECT();
	partial void LeaveRule_SELECT();

	// $ANTLR start "SELECT"
	[GrammarRule("SELECT")]
	private void mSELECT()
	{
		EnterRule_SELECT();
		EnterRule("SELECT", 30);
		TraceIn("SELECT", 30);
		try
		{
			int _type = SELECT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:453:8: ( 'select' )
			DebugEnterAlt(1);
			// Scrape.g:453:10: 'select'
			{
			DebugLocation(453, 10);
			Match("select"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SELECT", 30);
			LeaveRule("SELECT", 30);
			LeaveRule_SELECT();
		}
	}
	// $ANTLR end "SELECT"

	partial void EnterRule_FROM();
	partial void LeaveRule_FROM();

	// $ANTLR start "FROM"
	[GrammarRule("FROM")]
	private void mFROM()
	{
		EnterRule_FROM();
		EnterRule("FROM", 31);
		TraceIn("FROM", 31);
		try
		{
			int _type = FROM;
			int _channel = DefaultTokenChannel;
			// Scrape.g:454:6: ( 'from' )
			DebugEnterAlt(1);
			// Scrape.g:454:8: 'from'
			{
			DebugLocation(454, 8);
			Match("from"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FROM", 31);
			LeaveRule("FROM", 31);
			LeaveRule_FROM();
		}
	}
	// $ANTLR end "FROM"

	partial void EnterRule_INNER_JOIN();
	partial void LeaveRule_INNER_JOIN();

	// $ANTLR start "INNER_JOIN"
	[GrammarRule("INNER_JOIN")]
	private void mINNER_JOIN()
	{
		EnterRule_INNER_JOIN();
		EnterRule("INNER_JOIN", 32);
		TraceIn("INNER_JOIN", 32);
		try
		{
			int _type = INNER_JOIN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:455:12: ( 'inner join' )
			DebugEnterAlt(1);
			// Scrape.g:455:14: 'inner join'
			{
			DebugLocation(455, 14);
			Match("inner join"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INNER_JOIN", 32);
			LeaveRule("INNER_JOIN", 32);
			LeaveRule_INNER_JOIN();
		}
	}
	// $ANTLR end "INNER_JOIN"

	partial void EnterRule_JOIN();
	partial void LeaveRule_JOIN();

	// $ANTLR start "JOIN"
	[GrammarRule("JOIN")]
	private void mJOIN()
	{
		EnterRule_JOIN();
		EnterRule("JOIN", 33);
		TraceIn("JOIN", 33);
		try
		{
			int _type = JOIN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:456:5: ( 'join' )
			DebugEnterAlt(1);
			// Scrape.g:456:7: 'join'
			{
			DebugLocation(456, 7);
			Match("join"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("JOIN", 33);
			LeaveRule("JOIN", 33);
			LeaveRule_JOIN();
		}
	}
	// $ANTLR end "JOIN"

	partial void EnterRule_NODES();
	partial void LeaveRule_NODES();

	// $ANTLR start "NODES"
	[GrammarRule("NODES")]
	private void mNODES()
	{
		EnterRule_NODES();
		EnterRule("NODES", 34);
		TraceIn("NODES", 34);
		try
		{
			int _type = NODES;
			int _channel = DefaultTokenChannel;
			// Scrape.g:457:6: ( 'nodes' )
			DebugEnterAlt(1);
			// Scrape.g:457:8: 'nodes'
			{
			DebugLocation(457, 8);
			Match("nodes"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NODES", 34);
			LeaveRule("NODES", 34);
			LeaveRule_NODES();
		}
	}
	// $ANTLR end "NODES"

	partial void EnterRule_WHERE();
	partial void LeaveRule_WHERE();

	// $ANTLR start "WHERE"
	[GrammarRule("WHERE")]
	private void mWHERE()
	{
		EnterRule_WHERE();
		EnterRule("WHERE", 35);
		TraceIn("WHERE", 35);
		try
		{
			int _type = WHERE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:458:7: ( 'where' )
			DebugEnterAlt(1);
			// Scrape.g:458:9: 'where'
			{
			DebugLocation(458, 9);
			Match("where"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHERE", 35);
			LeaveRule("WHERE", 35);
			LeaveRule_WHERE();
		}
	}
	// $ANTLR end "WHERE"

	partial void EnterRule_PICK();
	partial void LeaveRule_PICK();

	// $ANTLR start "PICK"
	[GrammarRule("PICK")]
	private void mPICK()
	{
		EnterRule_PICK();
		EnterRule("PICK", 36);
		TraceIn("PICK", 36);
		try
		{
			int _type = PICK;
			int _channel = DefaultTokenChannel;
			// Scrape.g:459:6: ( 'pick' )
			DebugEnterAlt(1);
			// Scrape.g:459:8: 'pick'
			{
			DebugLocation(459, 8);
			Match("pick"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PICK", 36);
			LeaveRule("PICK", 36);
			LeaveRule_PICK();
		}
	}
	// $ANTLR end "PICK"

	partial void EnterRule_TAKE();
	partial void LeaveRule_TAKE();

	// $ANTLR start "TAKE"
	[GrammarRule("TAKE")]
	private void mTAKE()
	{
		EnterRule_TAKE();
		EnterRule("TAKE", 37);
		TraceIn("TAKE", 37);
		try
		{
			int _type = TAKE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:460:6: ( 'take' )
			DebugEnterAlt(1);
			// Scrape.g:460:8: 'take'
			{
			DebugLocation(460, 8);
			Match("take"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TAKE", 37);
			LeaveRule("TAKE", 37);
			LeaveRule_TAKE();
		}
	}
	// $ANTLR end "TAKE"

	partial void EnterRule_MATCH();
	partial void LeaveRule_MATCH();

	// $ANTLR start "MATCH"
	[GrammarRule("MATCH")]
	private void mMATCH()
	{
		EnterRule_MATCH();
		EnterRule("MATCH", 38);
		TraceIn("MATCH", 38);
		try
		{
			int _type = MATCH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:461:7: ( 'match' )
			DebugEnterAlt(1);
			// Scrape.g:461:9: 'match'
			{
			DebugLocation(461, 9);
			Match("match"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATCH", 38);
			LeaveRule("MATCH", 38);
			LeaveRule_MATCH();
		}
	}
	// $ANTLR end "MATCH"

	partial void EnterRule_REPLACE();
	partial void LeaveRule_REPLACE();

	// $ANTLR start "REPLACE"
	[GrammarRule("REPLACE")]
	private void mREPLACE()
	{
		EnterRule_REPLACE();
		EnterRule("REPLACE", 39);
		TraceIn("REPLACE", 39);
		try
		{
			int _type = REPLACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:462:9: ( 'replace' )
			DebugEnterAlt(1);
			// Scrape.g:462:11: 'replace'
			{
			DebugLocation(462, 11);
			Match("replace"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REPLACE", 39);
			LeaveRule("REPLACE", 39);
			LeaveRule_REPLACE();
		}
	}
	// $ANTLR end "REPLACE"

	partial void EnterRule_ATTRIBUTE();
	partial void LeaveRule_ATTRIBUTE();

	// $ANTLR start "ATTRIBUTE"
	[GrammarRule("ATTRIBUTE")]
	private void mATTRIBUTE()
	{
		EnterRule_ATTRIBUTE();
		EnterRule("ATTRIBUTE", 40);
		TraceIn("ATTRIBUTE", 40);
		try
		{
			int _type = ATTRIBUTE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:463:11: ( 'attribute' )
			DebugEnterAlt(1);
			// Scrape.g:463:13: 'attribute'
			{
			DebugLocation(463, 13);
			Match("attribute"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ATTRIBUTE", 40);
			LeaveRule("ATTRIBUTE", 40);
			LeaveRule_ATTRIBUTE();
		}
	}
	// $ANTLR end "ATTRIBUTE"

	partial void EnterRule_TEXT();
	partial void LeaveRule_TEXT();

	// $ANTLR start "TEXT"
	[GrammarRule("TEXT")]
	private void mTEXT()
	{
		EnterRule_TEXT();
		EnterRule("TEXT", 41);
		TraceIn("TEXT", 41);
		try
		{
			int _type = TEXT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:464:6: ( 'text' )
			DebugEnterAlt(1);
			// Scrape.g:464:8: 'text'
			{
			DebugLocation(464, 8);
			Match("text"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEXT", 41);
			LeaveRule("TEXT", 41);
			LeaveRule_TEXT();
		}
	}
	// $ANTLR end "TEXT"

	partial void EnterRule_HTML();
	partial void LeaveRule_HTML();

	// $ANTLR start "HTML"
	[GrammarRule("HTML")]
	private void mHTML()
	{
		EnterRule_HTML();
		EnterRule("HTML", 42);
		TraceIn("HTML", 42);
		try
		{
			int _type = HTML;
			int _channel = DefaultTokenChannel;
			// Scrape.g:465:6: ( 'html' )
			DebugEnterAlt(1);
			// Scrape.g:465:8: 'html'
			{
			DebugLocation(465, 8);
			Match("html"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HTML", 42);
			LeaveRule("HTML", 42);
			LeaveRule_HTML();
		}
	}
	// $ANTLR end "HTML"

	partial void EnterRule_DOWNLOAD_IMAGE();
	partial void LeaveRule_DOWNLOAD_IMAGE();

	// $ANTLR start "DOWNLOAD_IMAGE"
	[GrammarRule("DOWNLOAD_IMAGE")]
	private void mDOWNLOAD_IMAGE()
	{
		EnterRule_DOWNLOAD_IMAGE();
		EnterRule("DOWNLOAD_IMAGE", 43);
		TraceIn("DOWNLOAD_IMAGE", 43);
		try
		{
			int _type = DOWNLOAD_IMAGE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:466:16: ( 'download image' )
			DebugEnterAlt(1);
			// Scrape.g:466:18: 'download image'
			{
			DebugLocation(466, 18);
			Match("download image"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOWNLOAD_IMAGE", 43);
			LeaveRule("DOWNLOAD_IMAGE", 43);
			LeaveRule_DOWNLOAD_IMAGE();
		}
	}
	// $ANTLR end "DOWNLOAD_IMAGE"

	partial void EnterRule_DOWNLOAD_PAGE();
	partial void LeaveRule_DOWNLOAD_PAGE();

	// $ANTLR start "DOWNLOAD_PAGE"
	[GrammarRule("DOWNLOAD_PAGE")]
	private void mDOWNLOAD_PAGE()
	{
		EnterRule_DOWNLOAD_PAGE();
		EnterRule("DOWNLOAD_PAGE", 44);
		TraceIn("DOWNLOAD_PAGE", 44);
		try
		{
			int _type = DOWNLOAD_PAGE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:467:15: ( 'download page' )
			DebugEnterAlt(1);
			// Scrape.g:467:17: 'download page'
			{
			DebugLocation(467, 17);
			Match("download page"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOWNLOAD_PAGE", 44);
			LeaveRule("DOWNLOAD_PAGE", 44);
			LeaveRule_DOWNLOAD_PAGE();
		}
	}
	// $ANTLR end "DOWNLOAD_PAGE"

	partial void EnterRule_IDENTITY();
	partial void LeaveRule_IDENTITY();

	// $ANTLR start "IDENTITY"
	[GrammarRule("IDENTITY")]
	private void mIDENTITY()
	{
		EnterRule_IDENTITY();
		EnterRule("IDENTITY", 45);
		TraceIn("IDENTITY", 45);
		try
		{
			int _type = IDENTITY;
			int _channel = DefaultTokenChannel;
			// Scrape.g:468:10: ( 'identity' )
			DebugEnterAlt(1);
			// Scrape.g:468:12: 'identity'
			{
			DebugLocation(468, 12);
			Match("identity"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTITY", 45);
			LeaveRule("IDENTITY", 45);
			LeaveRule_IDENTITY();
		}
	}
	// $ANTLR end "IDENTITY"

	partial void EnterRule_EXPAND();
	partial void LeaveRule_EXPAND();

	// $ANTLR start "EXPAND"
	[GrammarRule("EXPAND")]
	private void mEXPAND()
	{
		EnterRule_EXPAND();
		EnterRule("EXPAND", 46);
		TraceIn("EXPAND", 46);
		try
		{
			int _type = EXPAND;
			int _channel = DefaultTokenChannel;
			// Scrape.g:469:8: ( 'expand' )
			DebugEnterAlt(1);
			// Scrape.g:469:10: 'expand'
			{
			DebugLocation(469, 10);
			Match("expand"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPAND", 46);
			LeaveRule("EXPAND", 46);
			LeaveRule_EXPAND();
		}
	}
	// $ANTLR end "EXPAND"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 47);
		TraceIn("TO", 47);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// Scrape.g:470:4: ( 'to' )
			DebugEnterAlt(1);
			// Scrape.g:470:6: 'to'
			{
			DebugLocation(470, 6);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 47);
			LeaveRule("TO", 47);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_PROXIES();
	partial void LeaveRule_PROXIES();

	// $ANTLR start "PROXIES"
	[GrammarRule("PROXIES")]
	private void mPROXIES()
	{
		EnterRule_PROXIES();
		EnterRule("PROXIES", 48);
		TraceIn("PROXIES", 48);
		try
		{
			int _type = PROXIES;
			int _channel = DefaultTokenChannel;
			// Scrape.g:471:8: ( 'proxies' )
			DebugEnterAlt(1);
			// Scrape.g:471:10: 'proxies'
			{
			DebugLocation(471, 10);
			Match("proxies"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROXIES", 48);
			LeaveRule("PROXIES", 48);
			LeaveRule_PROXIES();
		}
	}
	// $ANTLR end "PROXIES"

	partial void EnterRule_TEST();
	partial void LeaveRule_TEST();

	// $ANTLR start "TEST"
	[GrammarRule("TEST")]
	private void mTEST()
	{
		EnterRule_TEST();
		EnterRule("TEST", 49);
		TraceIn("TEST", 49);
		try
		{
			int _type = TEST;
			int _channel = DefaultTokenChannel;
			// Scrape.g:472:6: ( 'test' )
			DebugEnterAlt(1);
			// Scrape.g:472:8: 'test'
			{
			DebugLocation(472, 8);
			Match("test"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TEST", 49);
			LeaveRule("TEST", 49);
			LeaveRule_TEST();
		}
	}
	// $ANTLR end "TEST"

	partial void EnterRule_NULL();
	partial void LeaveRule_NULL();

	// $ANTLR start "NULL"
	[GrammarRule("NULL")]
	private void mNULL()
	{
		EnterRule_NULL();
		EnterRule("NULL", 50);
		TraceIn("NULL", 50);
		try
		{
			int _type = NULL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:473:6: ( 'null' )
			DebugEnterAlt(1);
			// Scrape.g:473:8: 'null'
			{
			DebugLocation(473, 8);
			Match("null"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NULL", 50);
			LeaveRule("NULL", 50);
			LeaveRule_NULL();
		}
	}
	// $ANTLR end "NULL"

	partial void EnterRule_CREATE();
	partial void LeaveRule_CREATE();

	// $ANTLR start "CREATE"
	[GrammarRule("CREATE")]
	private void mCREATE()
	{
		EnterRule_CREATE();
		EnterRule("CREATE", 51);
		TraceIn("CREATE", 51);
		try
		{
			int _type = CREATE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:475:8: ( 'create' )
			DebugEnterAlt(1);
			// Scrape.g:475:10: 'create'
			{
			DebugLocation(475, 10);
			Match("create"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CREATE", 51);
			LeaveRule("CREATE", 51);
			LeaveRule_CREATE();
		}
	}
	// $ANTLR end "CREATE"

	partial void EnterRule_FILE();
	partial void LeaveRule_FILE();

	// $ANTLR start "FILE"
	[GrammarRule("FILE")]
	private void mFILE()
	{
		EnterRule_FILE();
		EnterRule("FILE", 52);
		TraceIn("FILE", 52);
		try
		{
			int _type = FILE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:476:6: ( 'file' )
			DebugEnterAlt(1);
			// Scrape.g:476:8: 'file'
			{
			DebugLocation(476, 8);
			Match("file"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILE", 52);
			LeaveRule("FILE", 52);
			LeaveRule_FILE();
		}
	}
	// $ANTLR end "FILE"

	partial void EnterRule_BUFFER();
	partial void LeaveRule_BUFFER();

	// $ANTLR start "BUFFER"
	[GrammarRule("BUFFER")]
	private void mBUFFER()
	{
		EnterRule_BUFFER();
		EnterRule("BUFFER", 53);
		TraceIn("BUFFER", 53);
		try
		{
			int _type = BUFFER;
			int _channel = DefaultTokenChannel;
			// Scrape.g:477:8: ( 'buffer' )
			DebugEnterAlt(1);
			// Scrape.g:477:10: 'buffer'
			{
			DebugLocation(477, 10);
			Match("buffer"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BUFFER", 53);
			LeaveRule("BUFFER", 53);
			LeaveRule_BUFFER();
		}
	}
	// $ANTLR end "BUFFER"

	partial void EnterRule_MSSQL();
	partial void LeaveRule_MSSQL();

	// $ANTLR start "MSSQL"
	[GrammarRule("MSSQL")]
	private void mMSSQL()
	{
		EnterRule_MSSQL();
		EnterRule("MSSQL", 54);
		TraceIn("MSSQL", 54);
		try
		{
			int _type = MSSQL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:478:7: ( 'mssql' )
			DebugEnterAlt(1);
			// Scrape.g:478:9: 'mssql'
			{
			DebugLocation(478, 9);
			Match("mssql"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MSSQL", 54);
			LeaveRule("MSSQL", 54);
			LeaveRule_MSSQL();
		}
	}
	// $ANTLR end "MSSQL"

	partial void EnterRule_WITH();
	partial void LeaveRule_WITH();

	// $ANTLR start "WITH"
	[GrammarRule("WITH")]
	private void mWITH()
	{
		EnterRule_WITH();
		EnterRule("WITH", 55);
		TraceIn("WITH", 55);
		try
		{
			int _type = WITH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:479:6: ( 'with' )
			DebugEnterAlt(1);
			// Scrape.g:479:8: 'with'
			{
			DebugLocation(479, 8);
			Match("with"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WITH", 55);
			LeaveRule("WITH", 55);
			LeaveRule_WITH();
		}
	}
	// $ANTLR end "WITH"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 56);
		TraceIn("STRING", 56);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Scrape.g:480:8: ( 'string' )
			DebugEnterAlt(1);
			// Scrape.g:480:10: 'string'
			{
			DebugLocation(480, 10);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 56);
			LeaveRule("STRING", 56);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_INTEGER();
	partial void LeaveRule_INTEGER();

	// $ANTLR start "INTEGER"
	[GrammarRule("INTEGER")]
	private void mINTEGER()
	{
		EnterRule_INTEGER();
		EnterRule("INTEGER", 57);
		TraceIn("INTEGER", 57);
		try
		{
			int _type = INTEGER;
			int _channel = DefaultTokenChannel;
			// Scrape.g:481:8: ( 'int' )
			DebugEnterAlt(1);
			// Scrape.g:481:10: 'int'
			{
			DebugLocation(481, 10);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER", 57);
			LeaveRule("INTEGER", 57);
			LeaveRule_INTEGER();
		}
	}
	// $ANTLR end "INTEGER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 58);
		TraceIn("FLOAT", 58);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:482:6: ( 'float' )
			DebugEnterAlt(1);
			// Scrape.g:482:8: 'float'
			{
			DebugLocation(482, 8);
			Match("float"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 58);
			LeaveRule("FLOAT", 58);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_FIELD_TERMINATOR();
	partial void LeaveRule_FIELD_TERMINATOR();

	// $ANTLR start "FIELD_TERMINATOR"
	[GrammarRule("FIELD_TERMINATOR")]
	private void mFIELD_TERMINATOR()
	{
		EnterRule_FIELD_TERMINATOR();
		EnterRule("FIELD_TERMINATOR", 59);
		TraceIn("FIELD_TERMINATOR", 59);
		try
		{
			int _type = FIELD_TERMINATOR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:483:18: ( 'fieldterminator' )
			DebugEnterAlt(1);
			// Scrape.g:483:20: 'fieldterminator'
			{
			DebugLocation(483, 20);
			Match("fieldterminator"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FIELD_TERMINATOR", 59);
			LeaveRule("FIELD_TERMINATOR", 59);
			LeaveRule_FIELD_TERMINATOR();
		}
	}
	// $ANTLR end "FIELD_TERMINATOR"

	partial void EnterRule_ROW_TERMINATOR();
	partial void LeaveRule_ROW_TERMINATOR();

	// $ANTLR start "ROW_TERMINATOR"
	[GrammarRule("ROW_TERMINATOR")]
	private void mROW_TERMINATOR()
	{
		EnterRule_ROW_TERMINATOR();
		EnterRule("ROW_TERMINATOR", 60);
		TraceIn("ROW_TERMINATOR", 60);
		try
		{
			int _type = ROW_TERMINATOR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:484:16: ( 'rowterminator' )
			DebugEnterAlt(1);
			// Scrape.g:484:18: 'rowterminator'
			{
			DebugLocation(484, 18);
			Match("rowterminator"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ROW_TERMINATOR", 60);
			LeaveRule("ROW_TERMINATOR", 60);
			LeaveRule_ROW_TERMINATOR();
		}
	}
	// $ANTLR end "ROW_TERMINATOR"

	partial void EnterRule_LOCATION();
	partial void LeaveRule_LOCATION();

	// $ANTLR start "LOCATION"
	[GrammarRule("LOCATION")]
	private void mLOCATION()
	{
		EnterRule_LOCATION();
		EnterRule("LOCATION", 61);
		TraceIn("LOCATION", 61);
		try
		{
			int _type = LOCATION;
			int _channel = DefaultTokenChannel;
			// Scrape.g:485:10: ( 'location' )
			DebugEnterAlt(1);
			// Scrape.g:485:12: 'location'
			{
			DebugLocation(485, 12);
			Match("location"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LOCATION", 61);
			LeaveRule("LOCATION", 61);
			LeaveRule_LOCATION();
		}
	}
	// $ANTLR end "LOCATION"

	partial void EnterRule_CONNECTIONSTRING();
	partial void LeaveRule_CONNECTIONSTRING();

	// $ANTLR start "CONNECTIONSTRING"
	[GrammarRule("CONNECTIONSTRING")]
	private void mCONNECTIONSTRING()
	{
		EnterRule_CONNECTIONSTRING();
		EnterRule("CONNECTIONSTRING", 62);
		TraceIn("CONNECTIONSTRING", 62);
		try
		{
			int _type = CONNECTIONSTRING;
			int _channel = DefaultTokenChannel;
			// Scrape.g:486:18: ( 'connectionstring' )
			DebugEnterAlt(1);
			// Scrape.g:486:20: 'connectionstring'
			{
			DebugLocation(486, 20);
			Match("connectionstring"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CONNECTIONSTRING", 62);
			LeaveRule("CONNECTIONSTRING", 62);
			LeaveRule_CONNECTIONSTRING();
		}
	}
	// $ANTLR end "CONNECTIONSTRING"

	partial void EnterRule_TABLE();
	partial void LeaveRule_TABLE();

	// $ANTLR start "TABLE"
	[GrammarRule("TABLE")]
	private void mTABLE()
	{
		EnterRule_TABLE();
		EnterRule("TABLE", 63);
		TraceIn("TABLE", 63);
		try
		{
			int _type = TABLE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:487:7: ( 'table' )
			DebugEnterAlt(1);
			// Scrape.g:487:9: 'table'
			{
			DebugLocation(487, 9);
			Match("table"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TABLE", 63);
			LeaveRule("TABLE", 63);
			LeaveRule_TABLE();
		}
	}
	// $ANTLR end "TABLE"

	partial void EnterRule_DBTABLE();
	partial void LeaveRule_DBTABLE();

	// $ANTLR start "DBTABLE"
	[GrammarRule("DBTABLE")]
	private void mDBTABLE()
	{
		EnterRule_DBTABLE();
		EnterRule("DBTABLE", 64);
		TraceIn("DBTABLE", 64);
		try
		{
			int _type = DBTABLE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:488:9: ( 'dbtable' )
			DebugEnterAlt(1);
			// Scrape.g:488:11: 'dbtable'
			{
			DebugLocation(488, 11);
			Match("dbtable"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DBTABLE", 64);
			LeaveRule("DBTABLE", 64);
			LeaveRule_DBTABLE();
		}
	}
	// $ANTLR end "DBTABLE"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 65);
		TraceIn("STRING_LITERAL", 65);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// Scrape.g:490:15: ( APOSTRAPHE (~ ( APOSTRAPHE ) )* APOSTRAPHE )
			DebugEnterAlt(1);
			// Scrape.g:490:17: APOSTRAPHE (~ ( APOSTRAPHE ) )* APOSTRAPHE
			{
			DebugLocation(490, 17);
			mAPOSTRAPHE(); 
			DebugLocation(490, 28);
			// Scrape.g:490:28: (~ ( APOSTRAPHE ) )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\u0000' && LA1_1<='&')||(LA1_1>='(' && LA1_1<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(490, 28);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(490, 43);
			mAPOSTRAPHE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 65);
			LeaveRule("STRING_LITERAL", 65);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_IDENTITY_VAR();
	partial void LeaveRule_IDENTITY_VAR();

	// $ANTLR start "IDENTITY_VAR"
	[GrammarRule("IDENTITY_VAR")]
	private void mIDENTITY_VAR()
	{
		EnterRule_IDENTITY_VAR();
		EnterRule("IDENTITY_VAR", 66);
		TraceIn("IDENTITY_VAR", 66);
		try
		{
			int _type = IDENTITY_VAR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:491:14: ( '@@identity' )
			DebugEnterAlt(1);
			// Scrape.g:491:16: '@@identity'
			{
			DebugLocation(491, 16);
			Match("@@identity"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTITY_VAR", 66);
			LeaveRule("IDENTITY_VAR", 66);
			LeaveRule_IDENTITY_VAR();
		}
	}
	// $ANTLR end "IDENTITY_VAR"

	partial void EnterRule_COMMAND_VAR();
	partial void LeaveRule_COMMAND_VAR();

	// $ANTLR start "COMMAND_VAR"
	[GrammarRule("COMMAND_VAR")]
	private void mCOMMAND_VAR()
	{
		EnterRule_COMMAND_VAR();
		EnterRule("COMMAND_VAR", 67);
		TraceIn("COMMAND_VAR", 67);
		try
		{
			int _type = COMMAND_VAR;
			int _channel = DefaultTokenChannel;
			// Scrape.g:492:13: ( '@' ( DIGIT )+ )
			DebugEnterAlt(1);
			// Scrape.g:492:15: '@' ( DIGIT )+
			{
			DebugLocation(492, 15);
			Match('@'); 
			DebugLocation(492, 19);
			// Scrape.g:492:19: ( DIGIT )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(492, 19);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMAND_VAR", 67);
			LeaveRule("COMMAND_VAR", 67);
			LeaveRule_COMMAND_VAR();
		}
	}
	// $ANTLR end "COMMAND_VAR"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 68);
		TraceIn("ID", 68);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Scrape.g:493:4: ( ( LETTER )+ )
			DebugEnterAlt(1);
			// Scrape.g:493:6: ( LETTER )+
			{
			DebugLocation(493, 6);
			// Scrape.g:493:6: ( LETTER )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='A' && LA3_1<='Z')||(LA3_1>='a' && LA3_1<='z')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(493, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 68);
			LeaveRule("ID", 68);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_ASTERISK();
	partial void LeaveRule_ASTERISK();

	// $ANTLR start "ASTERISK"
	[GrammarRule("ASTERISK")]
	private void mASTERISK()
	{
		EnterRule_ASTERISK();
		EnterRule("ASTERISK", 69);
		TraceIn("ASTERISK", 69);
		try
		{
			int _type = ASTERISK;
			int _channel = DefaultTokenChannel;
			// Scrape.g:494:10: ( '*' )
			DebugEnterAlt(1);
			// Scrape.g:494:12: '*'
			{
			DebugLocation(494, 12);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASTERISK", 69);
			LeaveRule("ASTERISK", 69);
			LeaveRule_ASTERISK();
		}
	}
	// $ANTLR end "ASTERISK"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 70);
		TraceIn("DOT", 70);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:495:5: ( '.' )
			DebugEnterAlt(1);
			// Scrape.g:495:7: '.'
			{
			DebugLocation(495, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 70);
			LeaveRule("DOT", 70);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_OPENPAREN();
	partial void LeaveRule_OPENPAREN();

	// $ANTLR start "OPENPAREN"
	[GrammarRule("OPENPAREN")]
	private void mOPENPAREN()
	{
		EnterRule_OPENPAREN();
		EnterRule("OPENPAREN", 71);
		TraceIn("OPENPAREN", 71);
		try
		{
			int _type = OPENPAREN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:496:11: ( '(' )
			DebugEnterAlt(1);
			// Scrape.g:496:13: '('
			{
			DebugLocation(496, 13);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENPAREN", 71);
			LeaveRule("OPENPAREN", 71);
			LeaveRule_OPENPAREN();
		}
	}
	// $ANTLR end "OPENPAREN"

	partial void EnterRule_CLOSEPAREN();
	partial void LeaveRule_CLOSEPAREN();

	// $ANTLR start "CLOSEPAREN"
	[GrammarRule("CLOSEPAREN")]
	private void mCLOSEPAREN()
	{
		EnterRule_CLOSEPAREN();
		EnterRule("CLOSEPAREN", 72);
		TraceIn("CLOSEPAREN", 72);
		try
		{
			int _type = CLOSEPAREN;
			int _channel = DefaultTokenChannel;
			// Scrape.g:497:12: ( ')' )
			DebugEnterAlt(1);
			// Scrape.g:497:14: ')'
			{
			DebugLocation(497, 14);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEPAREN", 72);
			LeaveRule("CLOSEPAREN", 72);
			LeaveRule_CLOSEPAREN();
		}
	}
	// $ANTLR end "CLOSEPAREN"

	partial void EnterRule_OPENBRACE();
	partial void LeaveRule_OPENBRACE();

	// $ANTLR start "OPENBRACE"
	[GrammarRule("OPENBRACE")]
	private void mOPENBRACE()
	{
		EnterRule_OPENBRACE();
		EnterRule("OPENBRACE", 73);
		TraceIn("OPENBRACE", 73);
		try
		{
			int _type = OPENBRACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:498:11: ( '{' )
			DebugEnterAlt(1);
			// Scrape.g:498:13: '{'
			{
			DebugLocation(498, 13);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPENBRACE", 73);
			LeaveRule("OPENBRACE", 73);
			LeaveRule_OPENBRACE();
		}
	}
	// $ANTLR end "OPENBRACE"

	partial void EnterRule_CLOSEBRACE();
	partial void LeaveRule_CLOSEBRACE();

	// $ANTLR start "CLOSEBRACE"
	[GrammarRule("CLOSEBRACE")]
	private void mCLOSEBRACE()
	{
		EnterRule_CLOSEBRACE();
		EnterRule("CLOSEBRACE", 74);
		TraceIn("CLOSEBRACE", 74);
		try
		{
			int _type = CLOSEBRACE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:499:12: ( '}' )
			DebugEnterAlt(1);
			// Scrape.g:499:14: '}'
			{
			DebugLocation(499, 14);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSEBRACE", 74);
			LeaveRule("CLOSEBRACE", 74);
			LeaveRule_CLOSEBRACE();
		}
	}
	// $ANTLR end "CLOSEBRACE"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 75);
		TraceIn("PLUS", 75);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:500:6: ( '+' )
			DebugEnterAlt(1);
			// Scrape.g:500:8: '+'
			{
			DebugLocation(500, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 75);
			LeaveRule("PLUS", 75);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINIS();
	partial void LeaveRule_MINIS();

	// $ANTLR start "MINIS"
	[GrammarRule("MINIS")]
	private void mMINIS()
	{
		EnterRule_MINIS();
		EnterRule("MINIS", 76);
		TraceIn("MINIS", 76);
		try
		{
			int _type = MINIS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:501:8: ( '-' )
			DebugEnterAlt(1);
			// Scrape.g:501:10: '-'
			{
			DebugLocation(501, 10);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINIS", 76);
			LeaveRule("MINIS", 76);
			LeaveRule_MINIS();
		}
	}
	// $ANTLR end "MINIS"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 77);
		TraceIn("DIV", 77);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// Scrape.g:502:6: ( '/' )
			DebugEnterAlt(1);
			// Scrape.g:502:8: '/'
			{
			DebugLocation(502, 8);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 77);
			LeaveRule("DIV", 77);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 78);
		TraceIn("COMMA", 78);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Scrape.g:503:7: ( ',' )
			DebugEnterAlt(1);
			// Scrape.g:503:9: ','
			{
			DebugLocation(503, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 78);
			LeaveRule("COMMA", 78);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 79);
		TraceIn("QUOTE", 79);
		try
		{
			int _type = QUOTE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:504:7: ( '\"' )
			DebugEnterAlt(1);
			// Scrape.g:504:9: '\"'
			{
			DebugLocation(504, 9);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTE", 79);
			LeaveRule("QUOTE", 79);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	partial void EnterRule_APOSTRAPHE();
	partial void LeaveRule_APOSTRAPHE();

	// $ANTLR start "APOSTRAPHE"
	[GrammarRule("APOSTRAPHE")]
	private void mAPOSTRAPHE()
	{
		EnterRule_APOSTRAPHE();
		EnterRule("APOSTRAPHE", 80);
		TraceIn("APOSTRAPHE", 80);
		try
		{
			int _type = APOSTRAPHE;
			int _channel = DefaultTokenChannel;
			// Scrape.g:505:12: ( '\\'' )
			DebugEnterAlt(1);
			// Scrape.g:505:14: '\\''
			{
			DebugLocation(505, 14);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("APOSTRAPHE", 80);
			LeaveRule("APOSTRAPHE", 80);
			LeaveRule_APOSTRAPHE();
		}
	}
	// $ANTLR end "APOSTRAPHE"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 81);
		TraceIn("INT", 81);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:506:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// Scrape.g:506:7: ( DIGIT )+
			{
			DebugLocation(506, 7);
			// Scrape.g:506:7: ( DIGIT )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(506, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 81);
			LeaveRule("INT", 81);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 82);
		TraceIn("NEWLINE", 82);
		try
		{
			// Scrape.g:507:18: ( ( '\\n' | '\\r' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(507, 18);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("NEWLINE", 82);
			LeaveRule("NEWLINE", 82);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 83);
		TraceIn("DIGIT", 83);
		try
		{
			// Scrape.g:508:15: ( '0' .. '9' )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(508, 15);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 83);
			LeaveRule("DIGIT", 83);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 84);
		TraceIn("LETTER", 84);
		try
		{
			// Scrape.g:509:17: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(509, 17);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 84);
			LeaveRule("LETTER", 84);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_OTHERCHARS();
	partial void LeaveRule_OTHERCHARS();

	// $ANTLR start "OTHERCHARS"
	[GrammarRule("OTHERCHARS")]
	private void mOTHERCHARS()
	{
		EnterRule_OTHERCHARS();
		EnterRule("OTHERCHARS", 85);
		TraceIn("OTHERCHARS", 85);
		try
		{
			// Scrape.g:510:21: ( ( '.' | '|' | '-' | '&' | ',' | '\\\\' | ':' ) )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			DebugLocation(510, 21);
			if (input.LA(1)=='&'||(input.LA(1)>=',' && input.LA(1)<='.')||input.LA(1)==':'||input.LA(1)=='\\'||input.LA(1)=='|')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("OTHERCHARS", 85);
			LeaveRule("OTHERCHARS", 85);
			LeaveRule_OTHERCHARS();
		}
	}
	// $ANTLR end "OTHERCHARS"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 86);
		TraceIn("WS", 86);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Scrape.g:511:4: ( ( ' ' | '\\t' | NEWLINE )+ )
			DebugEnterAlt(1);
			// Scrape.g:511:7: ( ' ' | '\\t' | NEWLINE )+
			{
			DebugLocation(511, 7);
			// Scrape.g:511:7: ( ' ' | '\\t' | NEWLINE )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if (((LA5_1>='\t' && LA5_1<='\n')||LA5_1=='\r'||LA5_1==' '))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(511, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(511, 27);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 86);
			LeaveRule("WS", 86);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 87);
		TraceIn("COMMENT", 87);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// Scrape.g:512:9: ( '/*' ( . )* '*/' )
			DebugEnterAlt(1);
			// Scrape.g:512:11: '/*' ( . )* '*/'
			{
			DebugLocation(512, 11);
			Match("/*"); 

			DebugLocation(512, 16);
			// Scrape.g:512:16: ( . )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='*'))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2=='/'))
					{
						alt6 = 2;
					}
					else if (((LA6_2>='\u0000' && LA6_2<='.')||(LA6_2>='0' && LA6_2<='\uFFFF')))
					{
						alt6 = 1;
					}


				}
				else if (((LA6_1>='\u0000' && LA6_1<=')')||(LA6_1>='+' && LA6_1<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:512:16: .
					{
					DebugLocation(512, 16);
					MatchAny(); 

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(512, 19);
			Match("*/"); 

			DebugLocation(512, 24);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 87);
			LeaveRule("COMMENT", 87);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_LINE_COMMENT_SLASH();
	partial void LeaveRule_LINE_COMMENT_SLASH();

	// $ANTLR start "LINE_COMMENT_SLASH"
	[GrammarRule("LINE_COMMENT_SLASH")]
	private void mLINE_COMMENT_SLASH()
	{
		EnterRule_LINE_COMMENT_SLASH();
		EnterRule("LINE_COMMENT_SLASH", 88);
		TraceIn("LINE_COMMENT_SLASH", 88);
		try
		{
			int _type = LINE_COMMENT_SLASH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:513:20: ( '//' (~ NEWLINE )* )
			DebugEnterAlt(1);
			// Scrape.g:513:22: '//' (~ NEWLINE )*
			{
			DebugLocation(513, 22);
			Match("//"); 

			DebugLocation(513, 27);
			// Scrape.g:513:27: (~ NEWLINE )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if (((LA7_1>='\u0000' && LA7_1<='\t')||(LA7_1>='\u000B' && LA7_1<='\f')||(LA7_1>='\u000E' && LA7_1<='\uFFFF')))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(513, 27);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(513, 37);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT_SLASH", 88);
			LeaveRule("LINE_COMMENT_SLASH", 88);
			LeaveRule_LINE_COMMENT_SLASH();
		}
	}
	// $ANTLR end "LINE_COMMENT_SLASH"

	partial void EnterRule_LINE_COMMENT_DASH();
	partial void LeaveRule_LINE_COMMENT_DASH();

	// $ANTLR start "LINE_COMMENT_DASH"
	[GrammarRule("LINE_COMMENT_DASH")]
	private void mLINE_COMMENT_DASH()
	{
		EnterRule_LINE_COMMENT_DASH();
		EnterRule("LINE_COMMENT_DASH", 89);
		TraceIn("LINE_COMMENT_DASH", 89);
		try
		{
			int _type = LINE_COMMENT_DASH;
			int _channel = DefaultTokenChannel;
			// Scrape.g:514:19: ( '--' (~ NEWLINE )* )
			DebugEnterAlt(1);
			// Scrape.g:514:21: '--' (~ NEWLINE )*
			{
			DebugLocation(514, 21);
			Match("--"); 

			DebugLocation(514, 26);
			// Scrape.g:514:26: (~ NEWLINE )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>='\u0000' && LA8_1<='\t')||(LA8_1>='\u000B' && LA8_1<='\f')||(LA8_1>='\u000E' && LA8_1<='\uFFFF')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:
					{
					DebugLocation(514, 26);
					input.Consume();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(514, 36);
			_channel = Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT_DASH", 89);
			LeaveRule("LINE_COMMENT_DASH", 89);
			LeaveRule_LINE_COMMENT_DASH();
		}
	}
	// $ANTLR end "LINE_COMMENT_DASH"

	public override void mTokens()
	{
		// Scrape.g:1:8: ( T__123 | T__124 | PROCEDURE | EXEC | CASE | WHEN | THEN | END | ELSE | VAR | AND | OR | EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | NULL_OPERATOR | UPDATE | SET | INSERT_INTO | INSERT_OVERWRITE | INSERT_DIRECTORY | TRUNCATE | THREAD | WHILE | EACH | IN | SELECT | FROM | INNER_JOIN | JOIN | NODES | WHERE | PICK | TAKE | MATCH | REPLACE | ATTRIBUTE | TEXT | HTML | DOWNLOAD_IMAGE | DOWNLOAD_PAGE | IDENTITY | EXPAND | TO | PROXIES | TEST | NULL | CREATE | FILE | BUFFER | MSSQL | WITH | STRING | INTEGER | FLOAT | FIELD_TERMINATOR | ROW_TERMINATOR | LOCATION | CONNECTIONSTRING | TABLE | DBTABLE | STRING_LITERAL | IDENTITY_VAR | COMMAND_VAR | ID | ASTERISK | DOT | OPENPAREN | CLOSEPAREN | OPENBRACE | CLOSEBRACE | PLUS | MINIS | DIV | COMMA | QUOTE | APOSTRAPHE | INT | WS | COMMENT | LINE_COMMENT_SLASH | LINE_COMMENT_DASH )
		int alt9=85;
		try { DebugEnterDecision(9, false);
		try
		{
			alt9 = dfa9.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(9); }
		switch (alt9)
		{
		case 1:
			DebugEnterAlt(1);
			// Scrape.g:1:10: T__123
			{
			DebugLocation(1, 10);
			mT__123(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Scrape.g:1:17: T__124
			{
			DebugLocation(1, 17);
			mT__124(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Scrape.g:1:24: PROCEDURE
			{
			DebugLocation(1, 24);
			mPROCEDURE(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Scrape.g:1:34: EXEC
			{
			DebugLocation(1, 34);
			mEXEC(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Scrape.g:1:39: CASE
			{
			DebugLocation(1, 39);
			mCASE(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Scrape.g:1:44: WHEN
			{
			DebugLocation(1, 44);
			mWHEN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Scrape.g:1:49: THEN
			{
			DebugLocation(1, 49);
			mTHEN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Scrape.g:1:54: END
			{
			DebugLocation(1, 54);
			mEND(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Scrape.g:1:58: ELSE
			{
			DebugLocation(1, 58);
			mELSE(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Scrape.g:1:63: VAR
			{
			DebugLocation(1, 63);
			mVAR(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Scrape.g:1:67: AND
			{
			DebugLocation(1, 67);
			mAND(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Scrape.g:1:71: OR
			{
			DebugLocation(1, 71);
			mOR(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Scrape.g:1:74: EQUALS
			{
			DebugLocation(1, 74);
			mEQUALS(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Scrape.g:1:81: LESSTHAN
			{
			DebugLocation(1, 81);
			mLESSTHAN(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Scrape.g:1:90: LESSTHANEQUAL
			{
			DebugLocation(1, 90);
			mLESSTHANEQUAL(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Scrape.g:1:104: GREATERTHAN
			{
			DebugLocation(1, 104);
			mGREATERTHAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Scrape.g:1:116: GREATERTHANEQUAL
			{
			DebugLocation(1, 116);
			mGREATERTHANEQUAL(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Scrape.g:1:133: NOTEQUAL
			{
			DebugLocation(1, 133);
			mNOTEQUAL(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Scrape.g:1:142: NULL_OPERATOR
			{
			DebugLocation(1, 142);
			mNULL_OPERATOR(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Scrape.g:1:156: UPDATE
			{
			DebugLocation(1, 156);
			mUPDATE(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Scrape.g:1:163: SET
			{
			DebugLocation(1, 163);
			mSET(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Scrape.g:1:167: INSERT_INTO
			{
			DebugLocation(1, 167);
			mINSERT_INTO(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Scrape.g:1:179: INSERT_OVERWRITE
			{
			DebugLocation(1, 179);
			mINSERT_OVERWRITE(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Scrape.g:1:196: INSERT_DIRECTORY
			{
			DebugLocation(1, 196);
			mINSERT_DIRECTORY(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Scrape.g:1:213: TRUNCATE
			{
			DebugLocation(1, 213);
			mTRUNCATE(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Scrape.g:1:222: THREAD
			{
			DebugLocation(1, 222);
			mTHREAD(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Scrape.g:1:229: WHILE
			{
			DebugLocation(1, 229);
			mWHILE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Scrape.g:1:235: EACH
			{
			DebugLocation(1, 235);
			mEACH(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Scrape.g:1:240: IN
			{
			DebugLocation(1, 240);
			mIN(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Scrape.g:1:243: SELECT
			{
			DebugLocation(1, 243);
			mSELECT(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Scrape.g:1:250: FROM
			{
			DebugLocation(1, 250);
			mFROM(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Scrape.g:1:255: INNER_JOIN
			{
			DebugLocation(1, 255);
			mINNER_JOIN(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Scrape.g:1:266: JOIN
			{
			DebugLocation(1, 266);
			mJOIN(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Scrape.g:1:271: NODES
			{
			DebugLocation(1, 271);
			mNODES(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Scrape.g:1:277: WHERE
			{
			DebugLocation(1, 277);
			mWHERE(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Scrape.g:1:283: PICK
			{
			DebugLocation(1, 283);
			mPICK(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Scrape.g:1:288: TAKE
			{
			DebugLocation(1, 288);
			mTAKE(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Scrape.g:1:293: MATCH
			{
			DebugLocation(1, 293);
			mMATCH(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Scrape.g:1:299: REPLACE
			{
			DebugLocation(1, 299);
			mREPLACE(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Scrape.g:1:307: ATTRIBUTE
			{
			DebugLocation(1, 307);
			mATTRIBUTE(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Scrape.g:1:317: TEXT
			{
			DebugLocation(1, 317);
			mTEXT(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Scrape.g:1:322: HTML
			{
			DebugLocation(1, 322);
			mHTML(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// Scrape.g:1:327: DOWNLOAD_IMAGE
			{
			DebugLocation(1, 327);
			mDOWNLOAD_IMAGE(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// Scrape.g:1:342: DOWNLOAD_PAGE
			{
			DebugLocation(1, 342);
			mDOWNLOAD_PAGE(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// Scrape.g:1:356: IDENTITY
			{
			DebugLocation(1, 356);
			mIDENTITY(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// Scrape.g:1:365: EXPAND
			{
			DebugLocation(1, 365);
			mEXPAND(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// Scrape.g:1:372: TO
			{
			DebugLocation(1, 372);
			mTO(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// Scrape.g:1:375: PROXIES
			{
			DebugLocation(1, 375);
			mPROXIES(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// Scrape.g:1:383: TEST
			{
			DebugLocation(1, 383);
			mTEST(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// Scrape.g:1:388: NULL
			{
			DebugLocation(1, 388);
			mNULL(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// Scrape.g:1:393: CREATE
			{
			DebugLocation(1, 393);
			mCREATE(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// Scrape.g:1:400: FILE
			{
			DebugLocation(1, 400);
			mFILE(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// Scrape.g:1:405: BUFFER
			{
			DebugLocation(1, 405);
			mBUFFER(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// Scrape.g:1:412: MSSQL
			{
			DebugLocation(1, 412);
			mMSSQL(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// Scrape.g:1:418: WITH
			{
			DebugLocation(1, 418);
			mWITH(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// Scrape.g:1:423: STRING
			{
			DebugLocation(1, 423);
			mSTRING(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// Scrape.g:1:430: INTEGER
			{
			DebugLocation(1, 430);
			mINTEGER(); 

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// Scrape.g:1:438: FLOAT
			{
			DebugLocation(1, 438);
			mFLOAT(); 

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// Scrape.g:1:444: FIELD_TERMINATOR
			{
			DebugLocation(1, 444);
			mFIELD_TERMINATOR(); 

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// Scrape.g:1:461: ROW_TERMINATOR
			{
			DebugLocation(1, 461);
			mROW_TERMINATOR(); 

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// Scrape.g:1:476: LOCATION
			{
			DebugLocation(1, 476);
			mLOCATION(); 

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// Scrape.g:1:485: CONNECTIONSTRING
			{
			DebugLocation(1, 485);
			mCONNECTIONSTRING(); 

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// Scrape.g:1:502: TABLE
			{
			DebugLocation(1, 502);
			mTABLE(); 

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// Scrape.g:1:508: DBTABLE
			{
			DebugLocation(1, 508);
			mDBTABLE(); 

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// Scrape.g:1:516: STRING_LITERAL
			{
			DebugLocation(1, 516);
			mSTRING_LITERAL(); 

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// Scrape.g:1:531: IDENTITY_VAR
			{
			DebugLocation(1, 531);
			mIDENTITY_VAR(); 

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// Scrape.g:1:544: COMMAND_VAR
			{
			DebugLocation(1, 544);
			mCOMMAND_VAR(); 

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// Scrape.g:1:556: ID
			{
			DebugLocation(1, 556);
			mID(); 

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// Scrape.g:1:559: ASTERISK
			{
			DebugLocation(1, 559);
			mASTERISK(); 

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// Scrape.g:1:568: DOT
			{
			DebugLocation(1, 568);
			mDOT(); 

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// Scrape.g:1:572: OPENPAREN
			{
			DebugLocation(1, 572);
			mOPENPAREN(); 

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// Scrape.g:1:582: CLOSEPAREN
			{
			DebugLocation(1, 582);
			mCLOSEPAREN(); 

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// Scrape.g:1:593: OPENBRACE
			{
			DebugLocation(1, 593);
			mOPENBRACE(); 

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// Scrape.g:1:603: CLOSEBRACE
			{
			DebugLocation(1, 603);
			mCLOSEBRACE(); 

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// Scrape.g:1:614: PLUS
			{
			DebugLocation(1, 614);
			mPLUS(); 

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// Scrape.g:1:619: MINIS
			{
			DebugLocation(1, 619);
			mMINIS(); 

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// Scrape.g:1:625: DIV
			{
			DebugLocation(1, 625);
			mDIV(); 

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// Scrape.g:1:629: COMMA
			{
			DebugLocation(1, 629);
			mCOMMA(); 

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// Scrape.g:1:635: QUOTE
			{
			DebugLocation(1, 635);
			mQUOTE(); 

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// Scrape.g:1:641: APOSTRAPHE
			{
			DebugLocation(1, 641);
			mAPOSTRAPHE(); 

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// Scrape.g:1:652: INT
			{
			DebugLocation(1, 652);
			mINT(); 

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// Scrape.g:1:656: WS
			{
			DebugLocation(1, 656);
			mWS(); 

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// Scrape.g:1:659: COMMENT
			{
			DebugLocation(1, 659);
			mCOMMENT(); 

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// Scrape.g:1:667: LINE_COMMENT_SLASH
			{
			DebugLocation(1, 667);
			mLINE_COMMENT_SLASH(); 

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// Scrape.g:1:686: LINE_COMMENT_DASH
			{
			DebugLocation(1, 686);
			mLINE_COMMENT_DASH(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this, SpecialStateTransition9);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x2\xFFFF\x8\x1D\x1\xFFFF\x1\x41\x1\x43\x2\xFFFF\xC\x1D\x1\x58\x9\xFFFF"+
			"\x1\x5D\x1\x60\x4\xFFFF\x1\x61\x1\x62\xF\x1D\x1\x77\x3\x1D\x4\xFFFF\x3"+
			"\x1D\x1\x82\x10\x1D\xB\xFFFF\x4\x1D\x1\x99\xF\x1D\x1\xFFFF\x1\xAA\x1"+
			"\xAB\x2\x1D\x1\xAE\x4\x1D\x1\xB3\x1\xFFFF\x13\x1D\x1\xC7\x1\xC8\x1\x1D"+
			"\x1\xFFFF\x1\xCA\x1\xCB\x1\xCC\x2\x1D\x1\xCF\x2\x1D\x1\xD2\x1\xD3\x2"+
			"\x1D\x1\xD6\x1\x1D\x1\xD8\x1\xD9\x2\xFFFF\x2\x1D\x1\xFFFF\x4\x1D\x1\xFFFF"+
			"\x1\x1D\x1\xE1\x1\xE2\x2\x1D\x1\xE5\x1\x1D\x1\xE7\x4\x1D\x1\xEC\x6\x1D"+
			"\x2\xFFFF\x1\x1D\x3\xFFFF\x2\x1D\x1\xFFFF\x1\xF6\x1\xF7\x2\xFFFF\x2\x1D"+
			"\x1\xFFFF\x1\xFA\x2\xFFFF\x7\x1D\x2\xFFFF\x1\x1D\x1\x103\x1\xFFFF\x1"+
			"\x104\x1\xFFFF\x1\x105\x1\x106\x2\x1D\x1\xFFFF\x6\x1D\x1\x10F\x1\x110"+
			"\x1\x1D\x2\xFFFF\x1\x112\x1\x1D\x1\xFFFF\x1\x1D\x1\x115\x1\x116\x1\x117"+
			"\x1\x1D\x1\xFFFF\x2\x1D\x4\xFFFF\x4\x1D\x1\x11F\x2\x1D\x1\x122\x2\xFFFF"+
			"\x1\x1D\x1\xFFFF\x2\x1D\x4\xFFFF\x2\x1D\x1\x12B\x2\x1D\x1\x12E\x1\xFFFF"+
			"\x2\x1D\x1\xFFFF\x1\x1D\x1\x132\x1\x1D\x3\xFFFF\x1\x134\x1\x1D\x1\xFFFF"+
			"\x2\x1D\x1\xFFFF\x1\x138\x1\x139\x1\x1D\x1\xFFFF\x1\x13B\x1\xFFFF\x2"+
			"\x1D\x3\xFFFF\x1\x1D\x1\xFFFF\x2\x1D\x2\xFFFF\x8\x1D\x1\x14B\x2\x1D\x1"+
			"\xFFFF\x1\x1D\x1\x14F\x1\x150\x2\xFFFF";
		private const string DFA9_eofS =
			"\x151\xFFFF";
		private const string DFA9_minS =
			"\x1\x9\x1\xFFFF\x1\x6E\x1\x69\x2\x61\x1\x68\x2\x61\x1\x6E\x1\xFFFF\x2"+
			"\x3D\x2\xFFFF\x1\x70\x1\x65\x1\x64\x1\x69\x2\x6F\x1\x61\x1\x65\x1\x74"+
			"\x1\x62\x1\x75\x1\x6F\x1\x0\x1\x30\x8\xFFFF\x1\x2D\x1\x2A\x4\xFFFF\x2"+
			"\x41\x1\x6F\x1\x63\x1\x65\x1\x64\x1\x73\x1\x63\x1\x73\x1\x65\x1\x6E\x1"+
			"\x65\x1\x74\x1\x65\x1\x75\x1\x62\x1\x73\x1\x41\x1\x72\x1\x64\x1\x74\x4"+
			"\xFFFF\x1\x64\x1\x6C\x1\x72\x1\x41\x1\x65\x1\x6F\x1\x65\x1\x6F\x1\x69"+
			"\x1\x64\x1\x6C\x1\x74\x1\x73\x1\x70\x1\x77\x1\x6D\x1\x77\x1\x74\x1\x66"+
			"\x1\x63\xB\xFFFF\x1\x63\x1\x6B\x1\x63\x1\x61\x1\x41\x1\x65\x1\x68\x1"+
			"\x65\x1\x61\x2\x6E\x1\x6C\x1\x68\x1\x6E\x1\x65\x1\x6E\x1\x65\x1\x6C\x2"+
			"\x74\x1\xFFFF\x2\x41\x1\x72\x1\x61\x1\x41\x1\x65\x1\x69\x2\x65\x1\x41"+
			"\x1\xFFFF\x1\x6E\x1\x6D\x1\x65\x1\x6C\x1\x61\x1\x6E\x1\x65\x1\x6C\x1"+
			"\x63\x1\x71\x1\x6C\x1\x74\x1\x6C\x1\x6E\x1\x61\x1\x66\x1\x61\x1\x65\x1"+
			"\x69\x2\x41\x1\x6E\x1\xFFFF\x3\x41\x1\x74\x1\x65\x1\x41\x2\x65\x2\x41"+
			"\x1\x61\x1\x63\x1\x41\x1\x65\x2\x41\x2\xFFFF\x1\x69\x1\x74\x1\xFFFF\x1"+
			"\x63\x1\x6E\x2\x72\x1\xFFFF\x1\x74\x2\x41\x1\x64\x1\x74\x1\x41\x1\x73"+
			"\x1\x41\x1\x68\x1\x6C\x1\x61\x1\x65\x1\x41\x1\x6C\x1\x62\x1\x65\x1\x74"+
			"\x1\x64\x1\x65\x2\xFFFF\x1\x64\x3\xFFFF\x1\x65\x1\x63\x1\xFFFF\x2\x41"+
			"\x2\xFFFF\x1\x64\x1\x61\x1\xFFFF\x1\x41\x2\xFFFF\x1\x62\x1\x65\x1\x74"+
			"\x1\x67\x1\x74\x1\x20\x1\x69\x2\xFFFF\x1\x74\x1\x41\x1\xFFFF\x1\x41\x1"+
			"\xFFFF\x2\x41\x1\x63\x1\x72\x1\xFFFF\x1\x6F\x1\x6C\x1\x72\x1\x69\x1\x75"+
			"\x1\x73\x2\x41\x1\x74\x2\xFFFF\x1\x41\x1\x74\x1\xFFFF\x1\x75\x3\x41\x1"+
			"\x20\x1\xFFFF\x1\x74\x1\x65\x4\xFFFF\x1\x65\x1\x6D\x1\x61\x1\x65\x1\x41"+
			"\x1\x6F\x1\x72\x1\x41\x2\xFFFF\x1\x69\x1\xFFFF\x1\x65\x1\x74\x3\xFFFF"+
			"\x1\x66\x1\x79\x1\x72\x1\x41\x1\x69\x1\x64\x1\x41\x1\xFFFF\x1\x6E\x1"+
			"\x65\x1\xFFFF\x1\x6F\x1\x41\x1\x65\x3\xFFFF\x1\x41\x1\x6D\x1\xFFFF\x1"+
			"\x6E\x1\x20\x1\xFFFF\x2\x41\x1\x6E\x1\xFFFF\x1\x41\x1\xFFFF\x1\x69\x1"+
			"\x61\x1\x69\x2\xFFFF\x1\x73\x1\xFFFF\x1\x6E\x1\x74\x2\xFFFF\x1\x74\x1"+
			"\x61\x1\x6F\x1\x72\x1\x74\x1\x72\x1\x69\x1\x6F\x1\x41\x1\x6E\x1\x72\x1"+
			"\xFFFF\x1\x67\x2\x41\x2\xFFFF";
		private const string DFA9_maxS =
			"\x1\x7D\x1\xFFFF\x2\x72\x1\x78\x1\x72\x1\x69\x1\x72\x1\x61\x1\x74\x1"+
			"\xFFFF\x2\x3D\x2\xFFFF\x1\x70\x1\x74\x1\x6E\x1\x72\x1\x6F\x1\x75\x1\x73"+
			"\x1\x6F\x1\x74\x1\x6F\x1\x75\x1\x6F\x1\xFFFF\x1\x40\x8\xFFFF\x1\x2D\x1"+
			"\x2F\x4\xFFFF\x2\x7A\x1\x6F\x1\x63\x1\x70\x1\x64\x1\x73\x1\x63\x1\x73"+
			"\x1\x65\x1\x6E\x1\x69\x1\x74\x1\x72\x1\x75\x1\x6B\x1\x78\x1\x7A\x1\x72"+
			"\x1\x64\x1\x74\x4\xFFFF\x1\x64\x1\x74\x1\x72\x1\x7A\x1\x65\x1\x6F\x1"+
			"\x6C\x1\x6F\x1\x69\x1\x64\x1\x6C\x1\x74\x1\x73\x1\x70\x1\x77\x1\x6D\x1"+
			"\x77\x1\x74\x1\x66\x1\x63\xB\xFFFF\x1\x78\x1\x6B\x1\x63\x1\x61\x1\x7A"+
			"\x1\x65\x1\x68\x1\x65\x1\x61\x1\x6E\x1\x72\x1\x6C\x1\x68\x1\x6E\x1\x65"+
			"\x1\x6E\x1\x65\x1\x6C\x2\x74\x1\xFFFF\x2\x7A\x1\x72\x1\x61\x1\x7A\x1"+
			"\x65\x1\x69\x2\x65\x1\x7A\x1\xFFFF\x1\x6E\x1\x6D\x1\x65\x1\x6C\x1\x61"+
			"\x1\x6E\x1\x65\x1\x6C\x1\x63\x1\x71\x1\x6C\x1\x74\x1\x6C\x1\x6E\x1\x61"+
			"\x1\x66\x1\x61\x1\x65\x1\x69\x2\x7A\x1\x6E\x1\xFFFF\x3\x7A\x1\x74\x1"+
			"\x65\x1\x7A\x2\x65\x2\x7A\x1\x61\x1\x63\x1\x7A\x1\x65\x2\x7A\x2\xFFFF"+
			"\x1\x69\x1\x74\x1\xFFFF\x1\x63\x1\x6E\x2\x72\x1\xFFFF\x1\x74\x2\x7A\x1"+
			"\x64\x1\x74\x1\x7A\x1\x73\x1\x7A\x1\x68\x1\x6C\x1\x61\x1\x65\x1\x7A\x1"+
			"\x6C\x1\x62\x1\x65\x1\x74\x1\x64\x1\x65\x2\xFFFF\x1\x64\x3\xFFFF\x1\x65"+
			"\x1\x63\x1\xFFFF\x2\x7A\x2\xFFFF\x1\x64\x1\x61\x1\xFFFF\x1\x7A\x2\xFFFF"+
			"\x1\x62\x1\x65\x1\x74\x1\x67\x1\x74\x1\x20\x1\x69\x2\xFFFF\x1\x74\x1"+
			"\x7A\x1\xFFFF\x1\x7A\x1\xFFFF\x2\x7A\x1\x63\x1\x72\x1\xFFFF\x1\x6F\x1"+
			"\x6C\x1\x72\x1\x69\x1\x75\x1\x73\x2\x7A\x1\x74\x2\xFFFF\x1\x7A\x1\x74"+
			"\x1\xFFFF\x1\x75\x3\x7A\x1\x20\x1\xFFFF\x1\x74\x1\x65\x4\xFFFF\x1\x65"+
			"\x1\x6D\x1\x61\x1\x65\x1\x7A\x1\x6F\x1\x72\x1\x7A\x2\xFFFF\x1\x69\x1"+
			"\xFFFF\x1\x65\x1\x74\x3\xFFFF\x1\x6F\x1\x79\x1\x72\x1\x7A\x1\x69\x1\x64"+
			"\x1\x7A\x1\xFFFF\x1\x6E\x1\x65\x1\xFFFF\x1\x6F\x1\x7A\x1\x65\x3\xFFFF"+
			"\x1\x7A\x1\x6D\x1\xFFFF\x1\x6E\x1\x20\x1\xFFFF\x2\x7A\x1\x6E\x1\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x69\x1\x61\x1\x70\x2\xFFFF\x1\x73\x1\xFFFF\x1\x6E"+
			"\x1\x74\x2\xFFFF\x1\x74\x1\x61\x1\x6F\x1\x72\x1\x74\x1\x72\x1\x69\x1"+
			"\x6F\x1\x7A\x1\x6E\x1\x72\x1\xFFFF\x1\x67\x2\x7A\x2\xFFFF";
		private const string DFA9_acceptS =
			"\x1\xFFFF\x1\x1\x8\xFFFF\x1\xD\x2\xFFFF\x1\x12\x1\x13\xE\xFFFF\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x2\xFFFF\x1\x4E\x1"+
			"\x4F\x1\x51\x1\x52\x15\xFFFF\x1\xF\x1\xE\x1\x11\x1\x10\x14\xFFFF\x1\x50"+
			"\x1\x41\x1\x42\x1\x43\x1\x55\x1\x4C\x1\x53\x1\x54\x1\x4D\x1\x2\x1\xC"+
			"\x14\xFFFF\x1\x2F\xA\xFFFF\x1\x1D\x16\xFFFF\x1\x8\x10\xFFFF\x1\xA\x1"+
			"\xB\x2\xFFFF\x1\x15\x4\xFFFF\x1\x39\x13\xFFFF\x1\x24\x1\x4\x1\xFFFF\x1"+
			"\x9\x1\x1C\x1\x5\x2\xFFFF\x1\x6\x2\xFFFF\x1\x37\x1\x7\x2\xFFFF\x1\x25"+
			"\x1\xFFFF\x1\x29\x1\x31\x7\xFFFF\x1\x1F\x1\x34\x2\xFFFF\x1\x21\x1\xFFFF"+
			"\x1\x32\x4\xFFFF\x1\x2A\x9\xFFFF\x1\x23\x1\x1B\x2\xFFFF\x1\x3F\x5\xFFFF"+
			"\x1\x20\x2\xFFFF\x1\x3A\x1\x22\x1\x26\x1\x36\x8\xFFFF\x1\x2E\x1\x33\x1"+
			"\xFFFF\x1\x1A\x2\xFFFF\x1\x14\x1\x1E\x1\x38\x7\xFFFF\x1\x35\x2\xFFFF"+
			"\x1\x30\x3\xFFFF\x1\x16\x1\x17\x1\x18\x2\xFFFF\x1\x27\x2\xFFFF\x1\x40"+
			"\x3\xFFFF\x1\x19\x1\xFFFF\x1\x2D\x3\xFFFF\x1\x3D\x1\x3\x1\xFFFF\x1\x28"+
			"\x2\xFFFF\x1\x2B\x1\x2C\xB\xFFFF\x1\x3C\x3\xFFFF\x1\x3B\x1\x3E";
		private const string DFA9_specialS =
			"\x1B\xFFFF\x1\x0\x135\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x2\x2A\x2\xFFFF\x1\x2A\x12\xFFFF\x1\x2A\x1\xD\x1\x28\x1\xFFFF\x1\x1"+
				"\x2\xFFFF\x1\x1B\x1\x20\x1\x21\x1\x1E\x1\x24\x1\x27\x1\x25\x1\x1F\x1"+
				"\x26\xA\x29\x2\xFFFF\x1\xB\x1\xA\x1\xC\x1\xE\x1\x1C\x1A\x1D\x6\xFFFF"+
				"\x1\x9\x1\x19\x1\x5\x1\x18\x1\x4\x1\x12\x1\x1D\x1\x17\x1\x11\x1\x13"+
				"\x1\x1D\x1\x1A\x1\x15\x1\x14\x1\x2\x1\x3\x1\x1D\x1\x16\x1\x10\x1\x7"+
				"\x1\xF\x1\x8\x1\x6\x3\x1D\x1\x22\x1\xFFFF\x1\x23",
				"",
				"\x1\x2B\x3\xFFFF\x1\x2C",
				"\x1\x2E\x8\xFFFF\x1\x2D",
				"\x1\x32\xA\xFFFF\x1\x31\x1\xFFFF\x1\x30\x9\xFFFF\x1\x2F",
				"\x1\x33\xD\xFFFF\x1\x35\x2\xFFFF\x1\x34",
				"\x1\x36\x1\x37",
				"\x1\x3A\x3\xFFFF\x1\x3B\x2\xFFFF\x1\x38\x6\xFFFF\x1\x3C\x2\xFFFF\x1"+
				"\x39",
				"\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3F",
				"",
				"\x1\x40",
				"\x1\x42",
				"",
				"",
				"\x1\x44",
				"\x1\x45\xE\xFFFF\x1\x46",
				"\x1\x48\x9\xFFFF\x1\x47",
				"\x1\x4A\x2\xFFFF\x1\x4B\x5\xFFFF\x1\x49",
				"\x1\x4C",
				"\x1\x4D\x5\xFFFF\x1\x4E",
				"\x1\x4F\x11\xFFFF\x1\x50",
				"\x1\x51\x9\xFFFF\x1\x52",
				"\x1\x53",
				"\x1\x55\xC\xFFFF\x1\x54",
				"\x1\x56",
				"\x1\x57",
				"\x0\x59",
				"\xA\x5B\x6\xFFFF\x1\x5A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x5C",
				"\x1\x5E\x4\xFFFF\x1\x5F",
				"",
				"",
				"",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65\xA\xFFFF\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"\x1\x6C",
				"\x1\x6D\x3\xFFFF\x1\x6E",
				"\x1\x6F",
				"\x1\x70\xC\xFFFF\x1\x71",
				"\x1\x72",
				"\x1\x74\x8\xFFFF\x1\x73",
				"\x1\x76\x4\xFFFF\x1\x75",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x78",
				"\x1\x79",
				"\x1\x7A",
				"",
				"",
				"",
				"",
				"\x1\x7B",
				"\x1\x7D\x7\xFFFF\x1\x7C",
				"\x1\x7E",
				"\x1A\x1D\x6\xFFFF\xD\x1D\x1\x80\x4\x1D\x1\x7F\x1\x81\x6\x1D",
				"\x1\x83",
				"\x1\x84",
				"\x1\x86\x6\xFFFF\x1\x85",
				"\x1\x87",
				"\x1\x88",
				"\x1\x89",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"\x1\x8F",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92",
				"\x1\x93",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x94\x14\xFFFF\x1\x95",
				"\x1\x96",
				"\x1\x97",
				"\x1\x98",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x9A",
				"\x1\x9B",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F\x3\xFFFF\x1\xA0",
				"\x1\xA1",
				"\x1\xA2",
				"\x1\xA3",
				"\x1\xA4",
				"\x1\xA5",
				"\x1\xA6",
				"\x1\xA7",
				"\x1\xA8",
				"\x1\xA9",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xAC",
				"\x1\xAD",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\xB1",
				"\x1\xB2",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6",
				"\x1\xB7",
				"\x1\xB8",
				"\x1\xB9",
				"\x1\xBA",
				"\x1\xBB",
				"\x1\xBC",
				"\x1\xBD",
				"\x1\xBE",
				"\x1\xBF",
				"\x1\xC0",
				"\x1\xC1",
				"\x1\xC2",
				"\x1\xC3",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xC9",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xCD",
				"\x1\xCE",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xD0",
				"\x1\xD1",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xD4",
				"\x1\xD5",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xD7",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"\x1\xDA",
				"\x1\xDB",
				"",
				"\x1\xDC",
				"\x1\xDD",
				"\x1\xDE",
				"\x1\xDF",
				"",
				"\x1\xE0",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xE3",
				"\x1\xE4",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xE6",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xE8",
				"\x1\xE9",
				"\x1\xEA",
				"\x1\xEB",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\xED",
				"\x1\xEE",
				"\x1\xEF",
				"\x1\xF0",
				"\x1\xF1",
				"\x1\xF2",
				"",
				"",
				"\x1\xF3",
				"",
				"",
				"",
				"\x1\xF4",
				"\x1\xF5",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"\x1\xF8",
				"\x1\xF9",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"\x1\xFB",
				"\x1\xFC",
				"\x1\xFD",
				"\x1\xFE",
				"\x1\xFF",
				"\x1\x100",
				"\x1\x101",
				"",
				"",
				"\x1\x102",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x107",
				"\x1\x108",
				"",
				"\x1\x109",
				"\x1\x10A",
				"\x1\x10B",
				"\x1\x10C",
				"\x1\x10D",
				"\x1\x10E",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x111",
				"",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x113",
				"",
				"\x1\x114",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x118",
				"",
				"\x1\x119",
				"\x1\x11A",
				"",
				"",
				"",
				"",
				"\x1\x11B",
				"\x1\x11C",
				"\x1\x11D",
				"\x1\x11E",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x120",
				"\x1\x121",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"",
				"\x1\x123",
				"",
				"\x1\x124",
				"\x1\x125",
				"",
				"",
				"",
				"\x1\x128\x2\xFFFF\x1\x126\x5\xFFFF\x1\x127",
				"\x1\x129",
				"\x1\x12A",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x12C",
				"\x1\x12D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1\x12F",
				"\x1\x130",
				"",
				"\x1\x131",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x133",
				"",
				"",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x135",
				"",
				"\x1\x136",
				"\x1\x137",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x13A",
				"",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				"\x1\x13C",
				"\x1\x13D",
				"\x1\x13E\x6\xFFFF\x1\x13F",
				"",
				"",
				"\x1\x140",
				"",
				"\x1\x141",
				"\x1\x142",
				"",
				"",
				"\x1\x143",
				"\x1\x144",
				"\x1\x145",
				"\x1\x146",
				"\x1\x147",
				"\x1\x148",
				"\x1\x149",
				"\x1\x14A",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1\x14C",
				"\x1\x14D",
				"",
				"\x1\x14E",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"\x1A\x1D\x6\xFFFF\x1A\x1D",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__123 | T__124 | PROCEDURE | EXEC | CASE | WHEN | THEN | END | ELSE | VAR | AND | OR | EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | NULL_OPERATOR | UPDATE | SET | INSERT_INTO | INSERT_OVERWRITE | INSERT_DIRECTORY | TRUNCATE | THREAD | WHILE | EACH | IN | SELECT | FROM | INNER_JOIN | JOIN | NODES | WHERE | PICK | TAKE | MATCH | REPLACE | ATTRIBUTE | TEXT | HTML | DOWNLOAD_IMAGE | DOWNLOAD_PAGE | IDENTITY | EXPAND | TO | PROXIES | TEST | NULL | CREATE | FILE | BUFFER | MSSQL | WITH | STRING | INTEGER | FLOAT | FIELD_TERMINATOR | ROW_TERMINATOR | LOCATION | CONNECTIONSTRING | TABLE | DBTABLE | STRING_LITERAL | IDENTITY_VAR | COMMAND_VAR | ID | ASTERISK | DOT | OPENPAREN | CLOSEPAREN | OPENBRACE | CLOSEBRACE | PLUS | MINIS | DIV | COMMA | QUOTE | APOSTRAPHE | INT | WS | COMMENT | LINE_COMMENT_SLASH | LINE_COMMENT_DASH );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition9(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		s = -1;
		int LA9_1 = input.LA(1);
		int index9_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				if (((LA9_1>='\u0000' && LA9_1<='\uFFFF'))) {s = 89;}

				else s = 88;

				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		NoViableAltException nvae = new NoViableAltException(dfa.Description, 9, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion

}
