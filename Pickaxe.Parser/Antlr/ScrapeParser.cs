//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-05-19 19:32:31

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CONNECTIONSTRING", "CREATE", "DBTABLE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "MSSQL", "MSSQL_TABLE", "NEWLINE", "NODES", "NOTEQUAL", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "SET", "STRING", "STRING_LITERAL", "TABLE", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "THREAD", "TO", "TRUNCATE", "UPDATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WHILE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__123=123;
	public const int T__124=124;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CONNECTIONSTRING=20;
	public const int CREATE=21;
	public const int DBTABLE=22;
	public const int DIGIT=23;
	public const int DIV=24;
	public const int DOT=25;
	public const int DOWNLOAD_IMAGE=26;
	public const int DOWNLOAD_PAGE=27;
	public const int EACH=28;
	public const int ELSE=29;
	public const int END=30;
	public const int EQUALS=31;
	public const int EXEC=32;
	public const int EXPAND=33;
	public const int EXPAND_INTERATION_VARIABLE=34;
	public const int FIELD_TERMINATOR=35;
	public const int FILE=36;
	public const int FILE_TABLE=37;
	public const int FLOAT=38;
	public const int FROM=39;
	public const int GREATERTHAN=40;
	public const int GREATERTHANEQUAL=41;
	public const int HTML=42;
	public const int ID=43;
	public const int IDENTITY=44;
	public const int IDENTITY_VAR=45;
	public const int IN=46;
	public const int INNER_JOIN=47;
	public const int INSERT_DIRECTORY=48;
	public const int INSERT_INTO=49;
	public const int INSERT_INTO_DIRECTORY=50;
	public const int INSERT_OVERWRITE=51;
	public const int INT=52;
	public const int INTEGER=53;
	public const int JOIN=54;
	public const int LESSTHAN=55;
	public const int LESSTHANEQUAL=56;
	public const int LETTER=57;
	public const int LINE_COMMENT_DASH=58;
	public const int LINE_COMMENT_SLASH=59;
	public const int LOCATION=60;
	public const int MATCH=61;
	public const int MEMBER_REFERENCE=62;
	public const int MINIS=63;
	public const int MSSQL=64;
	public const int MSSQL_TABLE=65;
	public const int NEWLINE=66;
	public const int NODES=67;
	public const int NOTEQUAL=68;
	public const int NULL=69;
	public const int NULL_OPERATOR=70;
	public const int OPENBRACE=71;
	public const int OPENPAREN=72;
	public const int OR=73;
	public const int OTHERCHARS=74;
	public const int PICK=75;
	public const int PLUS=76;
	public const int POST_PICK=77;
	public const int PRE_PICK=78;
	public const int PROCEDURE=79;
	public const int PROGRAM=80;
	public const int PROXIES=81;
	public const int PROXY_LIST=82;
	public const int QUOTE=83;
	public const int REPLACE=84;
	public const int ROW_REFERENCE=85;
	public const int ROW_TERMINATOR=86;
	public const int SELECT=87;
	public const int SELECT_ALL=88;
	public const int SELECT_ARG=89;
	public const int SELECT_ID=90;
	public const int SELECT_STATEMENT=91;
	public const int SET=92;
	public const int STRING=93;
	public const int STRING_LITERAL=94;
	public const int TABLE=95;
	public const int TABLE_ALIAS=96;
	public const int TABLE_COLUMN_ARG=97;
	public const int TABLE_COLUMN_ARGS=98;
	public const int TABLE_MEMBER_REFERENCE=99;
	public const int TABLE_VARIABLE_REFERENCE=100;
	public const int TAKE=101;
	public const int TAKE_ATTRIBUTE=102;
	public const int TAKE_HTML=103;
	public const int TAKE_TEXT=104;
	public const int TEST=105;
	public const int TEXT=106;
	public const int THEN=107;
	public const int THREAD=108;
	public const int TO=109;
	public const int TRUNCATE=110;
	public const int UPDATE=111;
	public const int VAR=112;
	public const int VARIABLE_ASSIGNMENT=113;
	public const int VARIABLE_DECLARATION=114;
	public const int VARIABLE_REFERENCE=115;
	public const int WHEN=116;
	public const int WHEN_BOOL_STATEMENT=117;
	public const int WHEN_LITERAL_STATEMENT=118;
	public const int WHERE=119;
	public const int WHILE=120;
	public const int WITH=121;
	public const int WS=122;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:65:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(65, 1);
		try
		{
			// Scrape.g:66:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case UPDATE:
			case VAR:
			case WHILE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:66:4: noBraceBlock EOF
				{
				DebugLocation(66, 4);
				PushFollow(Follow._noBraceBlock_in_program232);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(66, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program234); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 66:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(66, 24);
					// Scrape.g:66:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(66, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(66, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:67:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(67, 4);
				PushFollow(Follow._proxyStatement_in_program247);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(67, 19);
				PushFollow(Follow._noBraceBlock_in_program249);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(67, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program251); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 67:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(67, 39);
					// Scrape.g:67:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(67, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(67, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(67, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:68:4: procedureDefinition
				{
				DebugLocation(68, 4);
				PushFollow(Follow._procedureDefinition_in_program266);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 68:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(68, 27);
					// Scrape.g:68:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(68, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(68, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:71:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(71, 1);
		try
		{
			// Scrape.g:72:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:72:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(72, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition285); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(72, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition287); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(72, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(72, 27);
			// Scrape.g:72:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:72:27: tableColumnArgs
					{
					DebugLocation(72, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition291);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(72, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition294); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(72, 55);
			PushFollow(Follow._block_in_procedureDefinition296);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: block, ID, PROCEDURE, tableColumnArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 72:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(72, 64);
				// Scrape.g:72:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(72, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(72, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(72, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(72, 85);
				// Scrape.g:72:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(72, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:75:1: statement : ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(75, 1);
		try
		{
			// Scrape.g:76:2: ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable )
			int alt3=10;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case UPDATE:
				{
				alt3 = 3;
				}
				break;
			case VAR:
				{
				alt3 = 4;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 5;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 6;
				}
				break;
			case EACH:
				{
				alt3 = 7;
				}
				break;
			case WHILE:
				{
				alt3 = 8;
				}
				break;
			case EXEC:
				{
				alt3 = 9;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:76:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._createTableStatement_in_statement324);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:77:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._sqlStatement_in_statement329);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:78:4: updateStatment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._updateStatment_in_statement334);
				updateStatment15=updateStatment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, updateStatment15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:79:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement339);
				variableDeclarationStatement16=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:80:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement344);
				variableAssignmentStatement17=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:81:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._insertStatement_in_statement349);
				insertStatement18=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:82:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._eachStatement_in_statement354);
				eachStatement19=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:83:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._whileStatement_in_statement359);
				whileStatement20=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement20.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Scrape.g:84:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._procedureCall_in_statement364);
				procedureCall21=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall21.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Scrape.g:85:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(85, 4);
				PushFollow(Follow._truncateTable_in_statement369);
				truncateTable22=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable22.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:88:1: truncateTable : TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE23 = default(CommonToken);
		CommonToken TABLE24 = default(CommonToken);
		CommonToken ID25 = default(CommonToken);

		CommonTree TRUNCATE23_tree = default(CommonTree);
		CommonTree TABLE24_tree = default(CommonTree);
		CommonTree ID25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(88, 1);
		try
		{
			// Scrape.g:89:2: ( TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:89:4: TRUNCATE TABLE ID
			{
			DebugLocation(89, 4);
			TRUNCATE23=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable380); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE23);

			DebugLocation(89, 13);
			TABLE24=(CommonToken)Match(input,TABLE,Follow._TABLE_in_truncateTable382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE24);

			DebugLocation(89, 19);
			ID25=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable384); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID25);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 89:22: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(89, 25);
				// Scrape.g:89:25: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(89, 27);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(89, 36);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID25));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:93:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC26 = default(CommonToken);
		CommonToken ID27 = default(CommonToken);
		CommonToken OPENPAREN28 = default(CommonToken);
		CommonToken CLOSEPAREN30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC26_tree = default(CommonTree);
		CommonTree ID27_tree = default(CommonTree);
		CommonTree OPENPAREN28_tree = default(CommonTree);
		CommonTree CLOSEPAREN30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(93, 1);
		try
		{
			// Scrape.g:94:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:94:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(94, 5);
			EXEC26=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall406); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC26);

			DebugLocation(94, 10);
			ID27=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall408); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID27);

			DebugLocation(94, 13);
			OPENPAREN28=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall410); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN28);

			DebugLocation(94, 23);
			// Scrape.g:94:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:94:23: procedureCallList
					{
					DebugLocation(94, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall412);
					procedureCallList29=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList29.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(94, 42);
			CLOSEPAREN30=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN30);



			{
			// AST REWRITE
			// elements: procedureCallList, ID, EXEC
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 94:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(94, 56);
				// Scrape.g:94:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(94, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(94, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(94, 66);
				// Scrape.g:94:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(94, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:97:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs33 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(97, 1);
		try
		{
			// Scrape.g:98:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:98:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(98, 4);
			// Scrape.g:98:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:98:5: callArgs COMMA
					{
					DebugLocation(98, 5);
					PushFollow(Follow._callArgs_in_procedureCallList438);
					callArgs31=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs31.Tree);
					DebugLocation(98, 14);
					COMMA32=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList440); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA32);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(98, 22);
			PushFollow(Follow._callArgs_in_procedureCallList444);
			callArgs33=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs33.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 98:31: -> ( callArgs )*
			{
				DebugLocation(98, 34);
				// Scrape.g:98:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(98, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:101:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(101, 1);
		try
		{
			// Scrape.g:102:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:102:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(102, 4);
				PushFollow(Follow._expandVar_in_callArgs460);
				expandVar34=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:103:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(103, 4);
				STRING_LITERAL35=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs465); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL35_tree = (CommonTree)adaptor.Create(STRING_LITERAL35);
				adaptor.AddChild(root_0, STRING_LITERAL35_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:106:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES36 = default(CommonToken);
		CommonToken OPENPAREN37 = default(CommonToken);
		CommonToken CLOSEPAREN39 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES36_tree = default(CommonTree);
		CommonTree OPENPAREN37_tree = default(CommonTree);
		CommonTree CLOSEPAREN39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(106, 1);
		try
		{
			// Scrape.g:107:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:107:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(107, 4);
			PROXIES36=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement476); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES36);

			DebugLocation(107, 12);
			OPENPAREN37=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement478); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN37);

			DebugLocation(107, 22);
			PushFollow(Follow._proxyList_in_proxyStatement480);
			proxyList38=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList38.Tree);
			DebugLocation(107, 32);
			CLOSEPAREN39=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement482); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN39);

			DebugLocation(107, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement484);
			proxyTest40=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest40.Tree);


			{
			// AST REWRITE
			// elements: PROXIES, proxyList, proxyTest
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 107:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(107, 56);
				// Scrape.g:107:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(107, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(107, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(107, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:110:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL41 = default(CommonToken);
		CommonToken COMMA42 = default(CommonToken);
		CommonToken STRING_LITERAL43 = default(CommonToken);

		CommonTree STRING_LITERAL41_tree = default(CommonTree);
		CommonTree COMMA42_tree = default(CommonTree);
		CommonTree STRING_LITERAL43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(110, 1);
		try
		{
			// Scrape.g:111:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:111:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(111, 4);
			// Scrape.g:111:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:111:5: STRING_LITERAL COMMA
					{
					DebugLocation(111, 5);
					STRING_LITERAL41=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList506); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL41);

					DebugLocation(111, 20);
					COMMA42=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList508); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA42);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(111, 28);
			STRING_LITERAL43=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList512); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL43);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 111:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(111, 46);
				// Scrape.g:111:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(111, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(111, 59);
				// Scrape.g:111:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(111, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:114:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH44 = default(CommonToken);
		CommonToken TEST45 = default(CommonToken);
		CommonToken OPENBRACE46 = default(CommonToken);
		CommonToken CLOSEBRACE48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH44_tree = default(CommonTree);
		CommonTree TEST45_tree = default(CommonTree);
		CommonTree OPENBRACE46_tree = default(CommonTree);
		CommonTree CLOSEBRACE48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(114, 1);
		try
		{
			// Scrape.g:115:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:115:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(115, 4);
			WITH44=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest532); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH44);

			DebugLocation(115, 9);
			TEST45=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST45);

			DebugLocation(115, 14);
			OPENBRACE46=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest536); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE46);

			DebugLocation(115, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest538);
			sqlStatement47=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement47.Tree);
			DebugLocation(115, 37);
			CLOSEBRACE48=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE48);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 115:48: -> sqlStatement
			{
				DebugLocation(115, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Scrape.g:118:1: whileStatement : WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 11);
		TraceIn("whileStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHILE49 = default(CommonToken);
		CommonToken OPENPAREN50 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		CommonToken CLOSEPAREN52 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHILE49_tree = default(CommonTree);
		CommonTree OPENPAREN50_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		CommonTree CLOSEPAREN52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(118, 1);
		try
		{
			// Scrape.g:119:2: ( WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) )
			DebugEnterAlt(1);
			// Scrape.g:119:4: WHILE OPENPAREN ID CLOSEPAREN block
			{
			DebugLocation(119, 4);
			WHILE49=(CommonToken)Match(input,WHILE,Follow._WHILE_in_whileStatement555); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE49);

			DebugLocation(119, 10);
			OPENPAREN50=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_whileStatement557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN50);

			DebugLocation(119, 20);
			ID51=(CommonToken)Match(input,ID,Follow._ID_in_whileStatement559); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID51);

			DebugLocation(119, 23);
			CLOSEPAREN52=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_whileStatement561); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN52);

			DebugLocation(119, 34);
			PushFollow(Follow._block_in_whileStatement563);
			block53=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block53.Tree);


			{
			// AST REWRITE
			// elements: WHILE, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 119:40: -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
			{
				DebugLocation(119, 43);
				// Scrape.g:119:43: ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(119, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(119, 51);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID51));
				DebugLocation(119, 81);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 11);
			LeaveRule("whileStatement", 11);
			LeaveRule_whileStatement();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:122:1: eachStatement : EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 12);
		TraceIn("eachStatement", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken VAR56 = default(CommonToken);
		CommonToken IN57 = default(CommonToken);
		CommonToken CLOSEPAREN58 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree VAR56_tree = default(CommonTree);
		CommonTree IN57_tree = default(CommonTree);
		CommonTree CLOSEPAREN58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(122, 1);
		try
		{
			// Scrape.g:123:2: ( EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:123:4: EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(123, 4);
			EACH54=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement585); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH54);

			DebugLocation(123, 9);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement587); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(123, 19);
			VAR56=(CommonToken)Match(input,VAR,Follow._VAR_in_eachStatement589); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR56);

			DebugLocation(123, 24);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(123, 28);
			IN57=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement595); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN57);

			DebugLocation(123, 32);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(123, 36);
			CLOSEPAREN58=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement601); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN58);

			DebugLocation(123, 47);
			PushFollow(Follow._block_in_eachStatement603);
			block59=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block59.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 123:53: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(123, 56);
				// Scrape.g:123:56: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(123, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(123, 63);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(123, 88);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(123, 117);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 12);
			LeaveRule("eachStatement", 12);
			LeaveRule_eachStatement();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:126:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 13);
		TraceIn("noBraceBlock", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(126, 1);
		try
		{
			// Scrape.g:127:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:127:4: ( statement )*
			{
			DebugLocation(127, 4);
			// Scrape.g:127:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)||LA8_1==WHILE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:127:4: statement
					{
					DebugLocation(127, 4);
					PushFollow(Follow._statement_in_noBraceBlock628);
					statement60=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement60.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 127:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(127, 18);
				// Scrape.g:127:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(127, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(127, 26);
				// Scrape.g:127:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(127, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 13);
			LeaveRule("noBraceBlock", 13);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:130:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 14);
		TraceIn("block", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(130, 1);
		try
		{
			// Scrape.g:131:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:131:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(131, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block649); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(131, 14);
			// Scrape.g:131:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)||LA9_1==WHILE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:131:14: statement
					{
					DebugLocation(131, 14);
					PushFollow(Follow._statement_in_block651);
					statement62=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement62.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(131, 25);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block654); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 131:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(131, 39);
				// Scrape.g:131:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(131, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(131, 47);
				// Scrape.g:131:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(131, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 14);
			LeaveRule("block", 14);
			LeaveRule_block();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:134:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 15);
		TraceIn("expandExpression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND64 = default(CommonToken);
		CommonToken OPENPAREN65 = default(CommonToken);
		CommonToken TO67 = default(CommonToken);
		CommonToken CLOSEPAREN69 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND64_tree = default(CommonTree);
		CommonTree OPENPAREN65_tree = default(CommonTree);
		CommonTree TO67_tree = default(CommonTree);
		CommonTree CLOSEPAREN69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(134, 1);
		try
		{
			// Scrape.g:135:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:135:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(135, 4);
			EXPAND64=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND64);

			DebugLocation(135, 11);
			OPENPAREN65=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression676); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN65);

			DebugLocation(135, 21);
			PushFollow(Follow._expandVar_in_expandExpression678);
			expandVar66=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar66.Tree);
			DebugLocation(135, 31);
			TO67=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression680); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO67);

			DebugLocation(135, 34);
			PushFollow(Follow._expandVar_in_expandExpression682);
			expandVar68=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar68.Tree);
			DebugLocation(135, 44);
			CLOSEPAREN69=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN69);

			DebugLocation(135, 55);
			// Scrape.g:135:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:135:55: expandBlock
					{
					DebugLocation(135, 55);
					PushFollow(Follow._expandBlock_in_expandExpression686);
					expandBlock70=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock70.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: EXPAND, expandVar, expandBlock, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 135:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(135, 71);
				// Scrape.g:135:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(135, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(135, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(135, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(135, 100);
				// Scrape.g:135:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(135, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 15);
			LeaveRule("expandExpression", 15);
			LeaveRule_expandExpression();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:138:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 16);
		TraceIn("expandBlock", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE71 = default(CommonToken);
		CommonToken CLOSEBRACE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE71_tree = default(CommonTree);
		CommonTree CLOSEBRACE73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(138, 1);
		try
		{
			// Scrape.g:139:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:139:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(139, 4);
			OPENBRACE71=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock711); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE71);

			DebugLocation(139, 14);
			// Scrape.g:139:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==123))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:139:14: mathExpression
					{
					DebugLocation(139, 14);
					PushFollow(Follow._mathExpression_in_expandBlock713);
					mathExpression72=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression72.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(139, 30);
			CLOSEBRACE73=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock716); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE73);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 139:41: -> ( mathExpression )*
			{
				DebugLocation(139, 44);
				// Scrape.g:139:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(139, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 16);
			LeaveRule("expandBlock", 16);
			LeaveRule_expandBlock();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:142:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 17);
		TraceIn("expandVar", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(142, 1);
		try
		{
			// Scrape.g:143:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:143:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				INT74=(CommonToken)Match(input,INT,Follow._INT_in_expandVar732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT74_tree = (CommonTree)adaptor.Create(INT74);
				adaptor.AddChild(root_0, INT74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:144:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._variableReference_in_expandVar737);
				variableReference75=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference75.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 17);
			LeaveRule("expandVar", 17);
			LeaveRule_expandVar();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:147:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 18);
		TraceIn("downloadExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(147, 1);
		try
		{
			// Scrape.g:148:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:148:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression748);
				downloadPageExpresssion76=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion76.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:149:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression753);
				downloadImageExpression77=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression77.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 18);
			LeaveRule("downloadExpression", 18);
			LeaveRule_downloadExpression();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:152:1: downloadPageExpresssion : DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ;
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 19);
		TraceIn("downloadPageExpresssion", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(152, 1);
		try
		{
			// Scrape.g:153:2: ( DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? )
			DebugEnterAlt(1);
			// Scrape.g:153:4: DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(153, 17);
			DOWNLOAD_PAGE78=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion764); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_PAGE78_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE78);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE78_tree, root_0);
			}
			DebugLocation(153, 19);
			PushFollow(Follow._downloadExpressionArg_in_downloadPageExpresssion767);
			downloadExpressionArg79=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg79.Tree);
			DebugLocation(153, 41);
			// Scrape.g:153:41: ( tableHint )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==WITH))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:153:41: tableHint
				{
				DebugLocation(153, 41);
				PushFollow(Follow._tableHint_in_downloadPageExpresssion769);
				tableHint80=tableHint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableHint80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 19);
			LeaveRule("downloadPageExpresssion", 19);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:156:1: downloadImageExpression : DOWNLOAD_IMAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 20);
		TraceIn("downloadImageExpression", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(156, 1);
		try
		{
			// Scrape.g:157:2: ( DOWNLOAD_IMAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:157:4: DOWNLOAD_IMAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(157, 18);
			DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression781); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_IMAGE81_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE81);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE81_tree, root_0);
			}
			DebugLocation(157, 20);
			PushFollow(Follow._downloadExpressionArg_in_downloadImageExpression784);
			downloadExpressionArg82=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg82.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 20);
			LeaveRule("downloadImageExpression", 20);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_downloadExpressionArg();
	partial void LeaveRule_downloadExpressionArg();
	// $ANTLR start "downloadExpressionArg"
	// Scrape.g:160:1: downloadExpressionArg : ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference );
	[GrammarRule("downloadExpressionArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg()
	{
		EnterRule_downloadExpressionArg();
		EnterRule("downloadExpressionArg", 21);
		TraceIn("downloadExpressionArg", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL83 = default(CommonToken);
		CommonToken OPENPAREN84 = default(CommonToken);
		CommonToken CLOSEPAREN86 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL83_tree = default(CommonTree);
		CommonTree OPENPAREN84_tree = default(CommonTree);
		CommonTree CLOSEPAREN86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadExpressionArg");
		DebugLocation(160, 1);
		try
		{
			// Scrape.g:161:2: ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case STRING_LITERAL:
				{
				alt15 = 1;
				}
				break;
			case OPENPAREN:
				{
				alt15 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:161:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				STRING_LITERAL83=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadExpressionArg795); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL83_tree = (CommonTree)adaptor.Create(STRING_LITERAL83);
				adaptor.AddChild(root_0, STRING_LITERAL83_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:162:4: OPENPAREN ! sqlStatement CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 13);
				OPENPAREN84=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadExpressionArg800); if (state.failed) return retval;
				DebugLocation(162, 15);
				PushFollow(Follow._sqlStatement_in_downloadExpressionArg803);
				sqlStatement85=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement85.Tree);
				DebugLocation(162, 38);
				CLOSEPAREN86=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadExpressionArg805); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:163:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 4);
				PushFollow(Follow._variableReference_in_downloadExpressionArg811);
				variableReference87=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference87.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpressionArg", 21);
			LeaveRule("downloadExpressionArg", 21);
			LeaveRule_downloadExpressionArg();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpressionArg"); }
		return retval;

	}
	// $ANTLR end "downloadExpressionArg"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:166:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 22);
		TraceIn("variableReference", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID88 = default(CommonToken);
		CommonToken COMMAND_VAR89 = default(CommonToken);
		CommonToken IDENTITY_VAR90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID88_tree = default(CommonTree);
		CommonTree COMMAND_VAR89_tree = default(CommonTree);
		CommonTree IDENTITY_VAR90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(166, 1);
		try
		{
			// Scrape.g:167:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==DOT))
				{
					alt16 = 4;
				}
				else if ((LA16_2==EOF||LA16_2==ASTERISK||(LA16_2>=CLOSEBRACE && LA16_2<=COMMAND_VAR)||LA16_2==CREATE||LA16_2==DIV||LA16_2==EACH||(LA16_2>=EQUALS && LA16_2<=EXEC)||LA16_2==ID||LA16_2==IDENTITY_VAR||(LA16_2>=INSERT_DIRECTORY && LA16_2<=INSERT_INTO)||(LA16_2>=INSERT_OVERWRITE && LA16_2<=INT)||LA16_2==MINIS||LA16_2==NULL||LA16_2==OPENPAREN||LA16_2==PLUS||LA16_2==SELECT||LA16_2==STRING_LITERAL||(LA16_2>=TO && LA16_2<=VAR)||(LA16_2>=WHERE && LA16_2<=WITH)||LA16_2==123))
				{
					alt16 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt16 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:167:4: ID
				{
				DebugLocation(167, 4);
				ID88=(CommonToken)Match(input,ID,Follow._ID_in_variableReference823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID88);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(167, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID88));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:168:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				COMMAND_VAR89=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference833); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR89_tree = (CommonTree)adaptor.Create(COMMAND_VAR89);
				adaptor.AddChild(root_0, COMMAND_VAR89_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:169:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				IDENTITY_VAR90=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference838); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR90_tree = (CommonTree)adaptor.Create(IDENTITY_VAR90);
				adaptor.AddChild(root_0, IDENTITY_VAR90_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:170:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference843);
				tableMemberReference91=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference91.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 22);
			LeaveRule("variableReference", 22);
			LeaveRule_variableReference();
		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:173:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 23);
		TraceIn("tableMemberReference", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT92 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(173, 1);
		try
		{
			// Scrape.g:174:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:174:4: t= ID DOT m= ID
			{
			DebugLocation(174, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference857); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(174, 9);
			DOT92=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference859); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT92);

			DebugLocation(174, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference863); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(174, 21);
				// Scrape.g:174:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(174, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(174, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 23);
			LeaveRule("tableMemberReference", 23);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:177:1: variableDeclarationStatement : VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 24);
		TraceIn("variableDeclarationStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR93 = default(CommonToken);
		CommonToken ID94 = default(CommonToken);
		CommonToken EQUALS95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR93_tree = default(CommonTree);
		CommonTree ID94_tree = default(CommonTree);
		CommonTree EQUALS95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(177, 1);
		try
		{
			// Scrape.g:178:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:178:4: VAR ID EQUALS assignmentExpression
			{
			DebugLocation(178, 4);
			VAR93=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement887); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR93);

			DebugLocation(178, 8);
			ID94=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID94);

			DebugLocation(178, 11);
			EQUALS95=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement891); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS95);

			DebugLocation(178, 18);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement893);
			assignmentExpression96=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression96.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(178, 42);
				// Scrape.g:178:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(178, 65);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(178, 68);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 24);
			LeaveRule("variableDeclarationStatement", 24);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:181:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 25);
		TraceIn("variableAssignmentStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS98 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(181, 1);
		try
		{
			// Scrape.g:182:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:182:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(182, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement914);
			variableReference97=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference97.Tree);
			DebugLocation(182, 22);
			EQUALS98=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement916); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS98);

			DebugLocation(182, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement918);
			assignmentExpression99=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression99.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 182:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(182, 53);
				// Scrape.g:182:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(182, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(182, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(182, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 25);
			LeaveRule("variableAssignmentStatement", 25);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:185:1: nullOperator : COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 26);
		TraceIn("nullOperator", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMAND_VAR100 = default(CommonToken);
		CommonToken NULL_OPERATOR101 = default(CommonToken);
		CommonToken COMMAND_VAR102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMAND_VAR100_tree = default(CommonTree);
		CommonTree NULL_OPERATOR101_tree = default(CommonTree);
		CommonTree COMMAND_VAR102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(185, 1);
		try
		{
			// Scrape.g:186:2: ( COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:186:4: COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(186, 4);
			COMMAND_VAR100=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator939); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMAND_VAR100_tree = (CommonTree)adaptor.Create(COMMAND_VAR100);
			adaptor.AddChild(root_0, COMMAND_VAR100_tree);
			}
			DebugLocation(186, 29);
			NULL_OPERATOR101=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator941); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR101_tree = (CommonTree)adaptor.Create(NULL_OPERATOR101);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR101_tree, root_0);
			}
			DebugLocation(186, 31);
			// Scrape.g:186:31: ( COMMAND_VAR | literal )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==COMMAND_VAR))
			{
				alt17 = 1;
			}
			else if ((LA17_1==INT||LA17_1==NULL||LA17_1==STRING_LITERAL))
			{
				alt17 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:186:32: COMMAND_VAR
				{
				DebugLocation(186, 32);
				COMMAND_VAR102=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR102_tree = (CommonTree)adaptor.Create(COMMAND_VAR102);
				adaptor.AddChild(root_0, COMMAND_VAR102_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:186:44: literal
				{
				DebugLocation(186, 44);
				PushFollow(Follow._literal_in_nullOperator947);
				literal103=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 26);
			LeaveRule("nullOperator", 26);
			LeaveRule_nullOperator();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:189:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 27);
		TraceIn("assignmentExpression", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(189, 1);
		try
		{
			// Scrape.g:190:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt18=6;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==NULL_OPERATOR))
				{
					alt18 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 123:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:190:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression959);
				mathExpression104=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression104.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:191:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression964);
				downloadExpression105=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:192:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression969);
				expandExpression106=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression106.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:193:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression974);
				sqlStatement107=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement107.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:194:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression979);
				nullOperator108=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator108.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:195:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression984);
				variableReference109=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference109.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 27);
			LeaveRule("assignmentExpression", 27);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:198:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 28);
		TraceIn("mathExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set111 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(198, 5);
		try
		{
			// Scrape.g:199:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:199:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression1000);
			mathExpressionGroup110=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup110.Tree);
			DebugLocation(199, 29);
			// Scrape.g:199:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:199:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(199, 46);

					set111=(CommonToken)input.LT(1);
					set111=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set111), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(199, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression1014);
					mathExpressionGroup112=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup112.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 28);
			LeaveRule("mathExpression", 28);
			LeaveRule_mathExpression();
		}
		DebugLocation(200, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:202:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 29);
		TraceIn("mathExpressionGroup", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set114 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(202, 3);
		try
		{
			// Scrape.g:203:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:203:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(203, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup1032);
			atom113=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom113.Tree);
			DebugLocation(203, 9);
			// Scrape.g:203:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:203:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(203, 28);

					set114=(CommonToken)input.LT(1);
					set114=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set114), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(203, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1046);
					atom115=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom115.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 29);
			LeaveRule("mathExpressionGroup", 29);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(204, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:206:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 30);
		TraceIn("atom", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal117 = default(CommonToken);
		CommonToken OPENPAREN119 = default(CommonToken);
		CommonToken CLOSEPAREN121 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree OPENPAREN119_tree = default(CommonTree);
		CommonTree CLOSEPAREN121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(206, 5);
		try
		{
			// Scrape.g:207:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=4;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt21 = 1;
				}
				break;
			case 123:
				{
				alt21 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:207:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(207, 8);
				PushFollow(Follow._variableReference_in_atom1067);
				variableReference116=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference116.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:208:5: '$'
				{
				DebugLocation(208, 5);
				char_literal117=(CommonToken)Match(input,123,Follow._123_in_atom1073); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal117);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 208:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(208, 12);
					// Scrape.g:208:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:209:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 5);
				PushFollow(Follow._literal_in_atom1085);
				literal118=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal118.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:210:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 17);
				OPENPAREN119=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1094); if (state.failed) return retval;
				DebugLocation(210, 19);
				PushFollow(Follow._mathExpression_in_atom1097);
				mathExpression120=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression120.Tree);
				DebugLocation(210, 44);
				CLOSEPAREN121=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1099); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 30);
			LeaveRule("atom", 30);
			LeaveRule_atom();
		}
		DebugLocation(211, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:213:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 31);
		TraceIn("literal", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set122 = default(CommonToken);

		CommonTree set122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(213, 1);
		try
		{
			// Scrape.g:214:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(214, 2);

			set122=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set122));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 31);
			LeaveRule("literal", 31);
			LeaveRule_literal();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:222:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 32);
		TraceIn("insertStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO123 = default(CommonToken);
		CommonToken ID124 = default(CommonToken);
		CommonToken INSERT_DIRECTORY126 = default(CommonToken);
		CommonToken INSERT_OVERWRITE129 = default(CommonToken);
		CommonToken ID130 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO123_tree = default(CommonTree);
		CommonTree ID124_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY126_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE129_tree = default(CommonTree);
		CommonTree ID130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(222, 1);
		try
		{
			// Scrape.g:223:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:223:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(223, 4);
				INSERT_INTO123=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1141); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO123);

				DebugLocation(223, 16);
				ID124=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1143); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID124);

				DebugLocation(223, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1145);
				sqlStatement125=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement125.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 223:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(223, 34);
					// Scrape.g:223:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(223, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(223, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID124));
					DebugLocation(223, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:224:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(224, 4);
				INSERT_DIRECTORY126=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY126);

				DebugLocation(224, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1162);
				mathExpression127=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression127.Tree);
				DebugLocation(224, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1164);
				sqlStatement128=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement128.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, mathExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 224:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(224, 51);
					// Scrape.g:224:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(224, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(224, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(224, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:225:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(225, 4);
				INSERT_OVERWRITE129=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1178); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE129);

				DebugLocation(225, 21);
				ID130=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID130);

				DebugLocation(225, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1182);
				sqlStatement131=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement131.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 225:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(225, 39);
					// Scrape.g:225:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(225, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(225, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID130));
					DebugLocation(225, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 32);
			LeaveRule("insertStatement", 32);
			LeaveRule_insertStatement();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_updateStatment();
	partial void LeaveRule_updateStatment();
	// $ANTLR start "updateStatment"
	// Scrape.g:231:1: updateStatment : UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("updateStatment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment()
	{
		EnterRule_updateStatment();
		EnterRule("updateStatment", 33);
		TraceIn("updateStatment", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UPDATE132 = default(CommonToken);
		CommonToken ID133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArgs134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UPDATE132_tree = default(CommonTree);
		CommonTree ID133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		RewriteRuleSubtreeStream stream_setArgs=new RewriteRuleSubtreeStream(adaptor,"rule setArgs");
		try { DebugEnterRule(GrammarFileName, "updateStatment");
		DebugLocation(231, 1);
		try
		{
			// Scrape.g:232:2: ( UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:232:4: UPDATE ID setArgs ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(232, 4);
			UPDATE132=(CommonToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatment1207); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE132);

			DebugLocation(232, 11);
			ID133=(CommonToken)Match(input,ID,Follow._ID_in_updateStatment1209); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID133);

			DebugLocation(232, 14);
			PushFollow(Follow._setArgs_in_updateStatment1211);
			setArgs134=setArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArgs.Add(setArgs134.Tree);
			DebugLocation(232, 22);
			// Scrape.g:232:22: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:232:22: fromStatement
				{
				DebugLocation(232, 22);
				PushFollow(Follow._fromStatement_in_updateStatment1213);
				fromStatement135=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(232, 37);
			// Scrape.g:232:37: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:232:37: whereStatement
				{
				DebugLocation(232, 37);
				PushFollow(Follow._whereStatement_in_updateStatment1216);
				whereStatement136=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: setArgs, whereStatement, fromStatement, ID, UPDATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:53: -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(232, 56);
				// Scrape.g:232:56: ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(232, 65);
				// Scrape.g:232:65: ^( TABLE_ALIAS ID )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 67);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

				DebugLocation(232, 79);
				adaptor.AddChild(root_2, stream_ID.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(232, 83);
				adaptor.AddChild(root_1, stream_setArgs.NextTree());
				DebugLocation(232, 91);
				// Scrape.g:232:91: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(232, 91);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(232, 106);
				// Scrape.g:232:106: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(232, 106);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatment", 33);
			LeaveRule("updateStatment", 33);
			LeaveRule_updateStatment();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatment"); }
		return retval;

	}
	// $ANTLR end "updateStatment"

	partial void EnterRule_setArgs();
	partial void LeaveRule_setArgs();
	// $ANTLR start "setArgs"
	// Scrape.g:235:1: setArgs : SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) ;
	[GrammarRule("setArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArgs()
	{
		EnterRule_setArgs();
		EnterRule("setArgs", 34);
		TraceIn("setArgs", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SET137 = default(CommonToken);
		CommonToken COMMA139 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SET137_tree = default(CommonTree);
		CommonTree COMMA139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_setArg=new RewriteRuleSubtreeStream(adaptor,"rule setArg");
		try { DebugEnterRule(GrammarFileName, "setArgs");
		DebugLocation(235, 1);
		try
		{
			// Scrape.g:236:2: ( SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:236:4: SET ( setArg COMMA )* setArg
			{
			DebugLocation(236, 4);
			SET137=(CommonToken)Match(input,SET,Follow._SET_in_setArgs1248); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET137);

			DebugLocation(236, 8);
			// Scrape.g:236:8: ( setArg COMMA )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA25_2 = input.LA(2);

					if ((LA25_2==STRING_LITERAL))
					{
						switch (input.LA(3))
						{
						case TAKE:
							{
							switch (input.LA(4))
							{
							case ATTRIBUTE:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==STRING_LITERAL))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==MATCH))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==REPLACE))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==EQUALS))
													{
														switch (input.LA(11))
														{
														case PICK:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																switch (input.LA(13))
																{
																case TAKE:
																	{
																	switch (input.LA(14))
																	{
																	case ATTRIBUTE:
																		{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==MATCH))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==REPLACE))
																					{
																						int LA25_19 = input.LA(19);

																						if ((LA25_19==STRING_LITERAL))
																						{
																							int LA25_20 = input.LA(20);

																							if ((LA25_20==COMMA))
																							{
																								alt25 = 1;
																							}


																						}


																					}
																					else if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																		}
																		break;
																	case TEXT:
																		{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==MATCH))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==REPLACE))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==STRING_LITERAL))
																					{
																						int LA25_19 = input.LA(19);

																						if ((LA25_19==COMMA))
																						{
																							alt25 = 1;
																						}


																					}


																				}
																				else if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																		}
																		break;
																	case HTML:
																		{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==MATCH))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==REPLACE))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==STRING_LITERAL))
																					{
																						int LA25_19 = input.LA(19);

																						if ((LA25_19==COMMA))
																						{
																							alt25 = 1;
																						}


																					}


																				}
																				else if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																		}
																		break;
																	}

																	}
																	break;
																case MATCH:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																	}
																	break;
																case COMMA:
																	{
																	alt25 = 1;
																	}
																	break;
																}

															}


															}
															break;
														case INT:
														case NULL:
														case STRING_LITERAL:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case ID:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==DOT))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==ID))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case COMMAND_VAR:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case IDENTITY_VAR:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														}

													}


												}


											}
											else if ((LA25_8==EQUALS))
											{
												switch (input.LA(9))
												{
												case PICK:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														switch (input.LA(11))
														{
														case TAKE:
															{
															switch (input.LA(12))
															{
															case ATTRIBUTE:
																{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==MATCH))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==REPLACE))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


																}
																break;
															case TEXT:
																{
																int LA25_13 = input.LA(13);

																if ((LA25_13==MATCH))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


																}
																break;
															case HTML:
																{
																int LA25_13 = input.LA(13);

																if ((LA25_13==MATCH))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


																}
																break;
															}

															}
															break;
														case MATCH:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


															}
															break;
														case COMMA:
															{
															alt25 = 1;
															}
															break;
														}

													}


													}
													break;
												case INT:
												case NULL:
												case STRING_LITERAL:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case ID:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==DOT))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==ID))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case COMMAND_VAR:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case IDENTITY_VAR:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												}

											}


										}


									}
									else if ((LA25_6==EQUALS))
									{
										switch (input.LA(7))
										{
										case PICK:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												switch (input.LA(9))
												{
												case TAKE:
													{
													switch (input.LA(10))
													{
													case ATTRIBUTE:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


														}
														break;
													case TEXT:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==MATCH))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case HTML:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==MATCH))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													}

													}
													break;
												case MATCH:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==REPLACE))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


													}
													break;
												case COMMA:
													{
													alt25 = 1;
													}
													break;
												}

											}


											}
											break;
										case INT:
										case NULL:
										case STRING_LITERAL:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										case ID:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==DOT))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==ID))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										case COMMAND_VAR:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										case IDENTITY_VAR:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										}

									}


								}


								}
								break;
							case TEXT:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==MATCH))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==EQUALS))
												{
													switch (input.LA(10))
													{
													case PICK:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															switch (input.LA(12))
															{
															case TAKE:
																{
																switch (input.LA(13))
																{
																case ATTRIBUTE:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==MATCH))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==REPLACE))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==STRING_LITERAL))
																					{
																						int LA25_19 = input.LA(19);

																						if ((LA25_19==COMMA))
																						{
																							alt25 = 1;
																						}


																					}


																				}
																				else if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																	}
																	break;
																case TEXT:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==MATCH))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==REPLACE))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																	}
																	break;
																case HTML:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==MATCH))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==REPLACE))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																	}
																	break;
																}

																}
																break;
															case MATCH:
																{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


																}
																break;
															case COMMA:
																{
																alt25 = 1;
																}
																break;
															}

														}


														}
														break;
													case INT:
													case NULL:
													case STRING_LITERAL:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case ID:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==DOT))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==ID))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case COMMAND_VAR:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case IDENTITY_VAR:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													}

												}


											}


										}
										else if ((LA25_7==EQUALS))
										{
											switch (input.LA(8))
											{
											case PICK:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													switch (input.LA(10))
													{
													case TAKE:
														{
														switch (input.LA(11))
														{
														case ATTRIBUTE:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==MATCH))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


															}
															break;
														case TEXT:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case HTML:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														}

														}
														break;
													case MATCH:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


														}
														break;
													case COMMA:
														{
														alt25 = 1;
														}
														break;
													}

												}


												}
												break;
											case INT:
											case NULL:
											case STRING_LITERAL:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case ID:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==DOT))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==ID))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case COMMAND_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case IDENTITY_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											}

										}


									}


								}
								else if ((LA25_5==EQUALS))
								{
									switch (input.LA(6))
									{
									case PICK:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											switch (input.LA(8))
											{
											case TAKE:
												{
												switch (input.LA(9))
												{
												case ATTRIBUTE:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==MATCH))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


													}
													break;
												case TEXT:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case HTML:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												}

												}
												break;
											case MATCH:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


												}
												break;
											case COMMA:
												{
												alt25 = 1;
												}
												break;
											}

										}


										}
										break;
									case INT:
									case NULL:
									case STRING_LITERAL:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case ID:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==DOT))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==ID))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case COMMAND_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case IDENTITY_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

								}


								}
								break;
							case HTML:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==MATCH))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==EQUALS))
												{
													switch (input.LA(10))
													{
													case PICK:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															switch (input.LA(12))
															{
															case TAKE:
																{
																switch (input.LA(13))
																{
																case ATTRIBUTE:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==MATCH))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==REPLACE))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==STRING_LITERAL))
																					{
																						int LA25_19 = input.LA(19);

																						if ((LA25_19==COMMA))
																						{
																							alt25 = 1;
																						}


																					}


																				}
																				else if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																	}
																	break;
																case TEXT:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==MATCH))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==REPLACE))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																	}
																	break;
																case HTML:
																	{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==MATCH))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==REPLACE))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==STRING_LITERAL))
																				{
																					int LA25_18 = input.LA(18);

																					if ((LA25_18==COMMA))
																					{
																						alt25 = 1;
																					}


																				}


																			}
																			else if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																	}
																	break;
																}

																}
																break;
															case MATCH:
																{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


																}
																break;
															case COMMA:
																{
																alt25 = 1;
																}
																break;
															}

														}


														}
														break;
													case INT:
													case NULL:
													case STRING_LITERAL:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case ID:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==DOT))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==ID))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case COMMAND_VAR:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													case IDENTITY_VAR:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


														}
														break;
													}

												}


											}


										}
										else if ((LA25_7==EQUALS))
										{
											switch (input.LA(8))
											{
											case PICK:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													switch (input.LA(10))
													{
													case TAKE:
														{
														switch (input.LA(11))
														{
														case ATTRIBUTE:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==MATCH))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


															}
															break;
														case TEXT:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case HTML:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														}

														}
														break;
													case MATCH:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


														}
														break;
													case COMMA:
														{
														alt25 = 1;
														}
														break;
													}

												}


												}
												break;
											case INT:
											case NULL:
											case STRING_LITERAL:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case ID:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==DOT))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==ID))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case COMMAND_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case IDENTITY_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											}

										}


									}


								}
								else if ((LA25_5==EQUALS))
								{
									switch (input.LA(6))
									{
									case PICK:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											switch (input.LA(8))
											{
											case TAKE:
												{
												switch (input.LA(9))
												{
												case ATTRIBUTE:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==MATCH))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


													}
													break;
												case TEXT:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case HTML:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												}

												}
												break;
											case MATCH:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


												}
												break;
											case COMMA:
												{
												alt25 = 1;
												}
												break;
											}

										}


										}
										break;
									case INT:
									case NULL:
									case STRING_LITERAL:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case ID:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==DOT))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==ID))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case COMMAND_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case IDENTITY_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

								}


								}
								break;
							}

							}
							break;
						case MATCH:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==STRING_LITERAL))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==REPLACE))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==EQUALS))
										{
											switch (input.LA(8))
											{
											case PICK:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													switch (input.LA(10))
													{
													case TAKE:
														{
														switch (input.LA(11))
														{
														case ATTRIBUTE:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==MATCH))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==REPLACE))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==STRING_LITERAL))
																			{
																				int LA25_17 = input.LA(17);

																				if ((LA25_17==COMMA))
																				{
																					alt25 = 1;
																				}


																			}


																		}
																		else if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


															}
															break;
														case TEXT:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														case HTML:
															{
															int LA25_12 = input.LA(12);

															if ((LA25_12==MATCH))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==REPLACE))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==STRING_LITERAL))
																		{
																			int LA25_16 = input.LA(16);

																			if ((LA25_16==COMMA))
																			{
																				alt25 = 1;
																			}


																		}


																	}
																	else if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


															}
															break;
														}

														}
														break;
													case MATCH:
														{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


														}
														break;
													case COMMA:
														{
														alt25 = 1;
														}
														break;
													}

												}


												}
												break;
											case INT:
											case NULL:
											case STRING_LITERAL:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case ID:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==DOT))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==ID))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case COMMAND_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case IDENTITY_VAR:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											}

										}


									}


								}
								else if ((LA25_5==EQUALS))
								{
									switch (input.LA(6))
									{
									case PICK:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											switch (input.LA(8))
											{
											case TAKE:
												{
												switch (input.LA(9))
												{
												case ATTRIBUTE:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==MATCH))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==REPLACE))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==STRING_LITERAL))
																	{
																		int LA25_15 = input.LA(15);

																		if ((LA25_15==COMMA))
																		{
																			alt25 = 1;
																		}


																	}


																}
																else if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


													}
													break;
												case TEXT:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												case HTML:
													{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


													}
													break;
												}

												}
												break;
											case MATCH:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


												}
												break;
											case COMMA:
												{
												alt25 = 1;
												}
												break;
											}

										}


										}
										break;
									case INT:
									case NULL:
									case STRING_LITERAL:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case ID:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==DOT))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==ID))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case COMMAND_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case IDENTITY_VAR:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

								}


							}


							}
							break;
						case EQUALS:
							{
							switch (input.LA(4))
							{
							case PICK:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==STRING_LITERAL))
								{
									switch (input.LA(6))
									{
									case TAKE:
										{
										switch (input.LA(7))
										{
										case ATTRIBUTE:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==MATCH))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==REPLACE))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


											}
											break;
										case TEXT:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										case HTML:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


											}
											break;
										}

										}
										break;
									case MATCH:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==REPLACE))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


										}
										break;
									case COMMA:
										{
										alt25 = 1;
										}
										break;
									}

								}


								}
								break;
							case INT:
							case NULL:
							case STRING_LITERAL:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==COMMA))
								{
									alt25 = 1;
								}


								}
								break;
							case ID:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==DOT))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==ID))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


									}


								}
								else if ((LA25_5==COMMA))
								{
									alt25 = 1;
								}


								}
								break;
							case COMMAND_VAR:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==COMMA))
								{
									alt25 = 1;
								}


								}
								break;
							case IDENTITY_VAR:
								{
								int LA25_5 = input.LA(5);

								if ((LA25_5==COMMA))
								{
									alt25 = 1;
								}


								}
								break;
							}

							}
							break;
						}

					}


					}
					break;
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA25_2 = input.LA(2);

					if ((LA25_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==STRING_LITERAL))
							{
								switch (input.LA(5))
								{
								case TAKE:
									{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

									}
									break;
								case MATCH:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


									}


									}
									break;
								case COMMA:
									{
									alt25 = 1;
									}
									break;
								}

							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case ID:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==DOT))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==ID))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


								}


							}
							else if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case ID:
					{
					int LA25_2 = input.LA(2);

					if ((LA25_2==DOT))
					{
						int LA25_3 = input.LA(3);

						if ((LA25_3==ID))
						{
							int LA25_4 = input.LA(4);

							if ((LA25_4==EQUALS))
							{
								switch (input.LA(5))
								{
								case PICK:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										switch (input.LA(7))
										{
										case TAKE:
											{
											switch (input.LA(8))
											{
											case ATTRIBUTE:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==MATCH))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==REPLACE))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==STRING_LITERAL))
																{
																	int LA25_14 = input.LA(14);

																	if ((LA25_14==COMMA))
																	{
																		alt25 = 1;
																	}


																}


															}
															else if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


												}
												break;
											case TEXT:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==MATCH))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==REPLACE))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											case HTML:
												{
												int LA25_9 = input.LA(9);

												if ((LA25_9==MATCH))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==REPLACE))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==STRING_LITERAL))
															{
																int LA25_13 = input.LA(13);

																if ((LA25_13==COMMA))
																{
																	alt25 = 1;
																}


															}


														}
														else if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


												}
												break;
											}

											}
											break;
										case MATCH:
											{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


											}
											break;
										case COMMA:
											{
											alt25 = 1;
											}
											break;
										}

									}


									}
									break;
								case INT:
								case NULL:
								case STRING_LITERAL:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


									}
									break;
								case ID:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==DOT))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==ID))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


									}
									else if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


									}
									break;
								case COMMAND_VAR:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


									}
									break;
								case IDENTITY_VAR:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


									}
									break;
								}

							}


						}


					}
					else if ((LA25_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==STRING_LITERAL))
							{
								switch (input.LA(5))
								{
								case TAKE:
									{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

									}
									break;
								case MATCH:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


									}


									}
									break;
								case COMMA:
									{
									alt25 = 1;
									}
									break;
								}

							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case ID:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==DOT))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==ID))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


								}


							}
							else if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((LA25_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==STRING_LITERAL))
							{
								switch (input.LA(5))
								{
								case TAKE:
									{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

									}
									break;
								case MATCH:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


									}


									}
									break;
								case COMMA:
									{
									alt25 = 1;
									}
									break;
								}

							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case ID:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==DOT))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==ID))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


								}


							}
							else if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((LA25_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==STRING_LITERAL))
							{
								switch (input.LA(5))
								{
								case TAKE:
									{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==STRING_LITERAL))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==MATCH))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==STRING_LITERAL))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==REPLACE))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==STRING_LITERAL))
														{
															int LA25_12 = input.LA(12);

															if ((LA25_12==COMMA))
															{
																alt25 = 1;
															}


														}


													}
													else if ((LA25_10==COMMA))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_8==COMMA))
											{
												alt25 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA25_7 = input.LA(7);

										if ((LA25_7==MATCH))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==REPLACE))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==STRING_LITERAL))
													{
														int LA25_11 = input.LA(11);

														if ((LA25_11==COMMA))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


										}
										break;
									}

									}
									break;
								case MATCH:
									{
									int LA25_6 = input.LA(6);

									if ((LA25_6==STRING_LITERAL))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==REPLACE))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==STRING_LITERAL))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==COMMA))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_7==COMMA))
										{
											alt25 = 1;
										}


									}


									}
									break;
								case COMMA:
									{
									alt25 = 1;
									}
									break;
								}

							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case ID:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==DOT))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==ID))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==COMMA))
									{
										alt25 = 1;
									}


								}


							}
							else if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA25_4 = input.LA(4);

							if ((LA25_4==COMMA))
							{
								alt25 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				}

				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:236:9: setArg COMMA
					{
					DebugLocation(236, 9);
					PushFollow(Follow._setArg_in_setArgs1251);
					setArg138=setArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setArg.Add(setArg138.Tree);
					DebugLocation(236, 16);
					COMMA139=(CommonToken)Match(input,COMMA,Follow._COMMA_in_setArgs1253); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA139);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(236, 24);
			PushFollow(Follow._setArg_in_setArgs1257);
			setArg140=setArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArg.Add(setArg140.Tree);


			{
			// AST REWRITE
			// elements: setArg, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:31: -> ^( SET ( setArg )* )
			{
				DebugLocation(236, 34);
				// Scrape.g:236:34: ^( SET ( setArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(236, 40);
				// Scrape.g:236:40: ( setArg )*
				while ( stream_setArg.HasNext )
				{
					DebugLocation(236, 40);
					adaptor.AddChild(root_1, stream_setArg.NextTree());

				}
				stream_setArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArgs", 34);
			LeaveRule("setArgs", 34);
			LeaveRule_setArgs();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "setArgs"); }
		return retval;

	}
	// $ANTLR end "setArgs"

	partial void EnterRule_setArg();
	partial void LeaveRule_setArg();
	// $ANTLR start "setArg"
	// Scrape.g:239:1: setArg : selectArg EQUALS selectArg -> ^( VARIABLE_ASSIGNMENT selectArg selectArg ) ;
	[GrammarRule("setArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArg()
	{
		EnterRule_setArg();
		EnterRule("setArg", 35);
		TraceIn("setArg", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "setArg");
		DebugLocation(239, 1);
		try
		{
			// Scrape.g:240:2: ( selectArg EQUALS selectArg -> ^( VARIABLE_ASSIGNMENT selectArg selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:240:4: selectArg EQUALS selectArg
			{
			DebugLocation(240, 4);
			PushFollow(Follow._selectArg_in_setArg1277);
			selectArg141=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg141.Tree);
			DebugLocation(240, 14);
			EQUALS142=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_setArg1279); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS142);

			DebugLocation(240, 21);
			PushFollow(Follow._selectArg_in_setArg1281);
			selectArg143=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg143.Tree);


			{
			// AST REWRITE
			// elements: selectArg, selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:31: -> ^( VARIABLE_ASSIGNMENT selectArg selectArg )
			{
				DebugLocation(240, 34);
				// Scrape.g:240:34: ^( VARIABLE_ASSIGNMENT selectArg selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(240, 56);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());
				DebugLocation(240, 66);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArg", 35);
			LeaveRule("setArg", 35);
			LeaveRule_setArg();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "setArg"); }
		return retval;

	}
	// $ANTLR end "setArg"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:245:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 36);
		TraceIn("sqlStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(245, 1);
		try
		{
			// Scrape.g:246:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:246:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(246, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1305);
			selectStatement144=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement144.Tree);
			DebugLocation(246, 20);
			// Scrape.g:246:20: ( fromStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==FROM))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:246:20: fromStatement
				{
				DebugLocation(246, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1307);
				fromStatement145=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement145.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(246, 35);
			// Scrape.g:246:35: ( whereStatement )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==WHERE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:246:35: whereStatement
				{
				DebugLocation(246, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1310);
				whereStatement146=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement146.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: whereStatement, fromStatement, selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(246, 54);
				// Scrape.g:246:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(246, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(246, 89);
				// Scrape.g:246:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(246, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(246, 104);
				// Scrape.g:246:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(246, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 36);
			LeaveRule("sqlStatement", 36);
			LeaveRule_sqlStatement();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:249:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 37);
		TraceIn("whereStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE147 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(249, 1);
		try
		{
			// Scrape.g:250:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:250:5: WHERE boolExpression
			{
			DebugLocation(250, 5);
			WHERE147=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1337); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE147);

			DebugLocation(250, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1339);
			boolExpression148=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression148.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, WHERE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(250, 29);
				// Scrape.g:250:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(250, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 37);
			LeaveRule("whereStatement", 37);
			LeaveRule_whereStatement();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:253:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ tableGenerationClause | FROM OPENPAREN tableGenerationClause CLOSEPAREN ID ( tableHint )? -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ( tableHint )? ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 38);
		TraceIn("fromStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM149 = default(CommonToken);
		CommonToken FROM151 = default(CommonToken);
		CommonToken FROM153 = default(CommonToken);
		CommonToken OPENPAREN154 = default(CommonToken);
		CommonToken CLOSEPAREN156 = default(CommonToken);
		CommonToken ID157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM149_tree = default(CommonTree);
		CommonTree FROM151_tree = default(CommonTree);
		CommonTree FROM153_tree = default(CommonTree);
		CommonTree OPENPAREN154_tree = default(CommonTree);
		CommonTree CLOSEPAREN156_tree = default(CommonTree);
		CommonTree ID157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableHint=new RewriteRuleSubtreeStream(adaptor,"rule tableHint");
		RewriteRuleSubtreeStream stream_tableGenerationClause=new RewriteRuleSubtreeStream(adaptor,"rule tableGenerationClause");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(253, 1);
		try
		{
			// Scrape.g:254:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ tableGenerationClause | FROM OPENPAREN tableGenerationClause CLOSEPAREN ID ( tableHint )? -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ( tableHint )? ) )
			int alt31=3;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt31 = 1;
					}
					break;
				case OPENPAREN:
					{
					alt31 = 3;
					}
					break;
				case DOWNLOAD_IMAGE:
				case DOWNLOAD_PAGE:
				case EXPAND:
					{
					alt31 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:254:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(254, 4);
				FROM149=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1359); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM149);

				DebugLocation(254, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1363); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(254, 15);
				// Scrape.g:254:15: (a= ID )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ID))
				{
					int LA28_2 = input.LA(2);

					if ((LA28_2==EOF||(LA28_2>=CLOSEBRACE && LA28_2<=CLOSEPAREN)||LA28_2==COMMAND_VAR||LA28_2==CREATE||LA28_2==EACH||LA28_2==EXEC||LA28_2==ID||LA28_2==IDENTITY_VAR||(LA28_2>=INNER_JOIN && LA28_2<=INSERT_INTO)||LA28_2==INSERT_OVERWRITE||LA28_2==JOIN||LA28_2==SELECT||(LA28_2>=TRUNCATE && LA28_2<=VAR)||(LA28_2>=WHERE && LA28_2<=WHILE)))
					{
						alt28 = 1;
					}
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:254:15: a= ID
					{
					DebugLocation(254, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1367); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(254, 20);
				// Scrape.g:254:20: ( innerJoinStatement )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==INNER_JOIN||LA29_1==JOIN))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:254:20: innerJoinStatement
					{
					DebugLocation(254, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1370);
					innerJoinStatement150=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement150.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, a, FROM
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 254:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(254, 43);
					// Scrape.g:254:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(254, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(254, 79);
					// Scrape.g:254:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(254, 79);
						// Scrape.g:254:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(254, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(254, 98);
					// Scrape.g:254:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(254, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:255:4: FROM ^ tableGenerationClause
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(255, 8);
				FROM151=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1397); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM151_tree = (CommonTree)adaptor.Create(FROM151);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM151_tree, root_0);
				}
				DebugLocation(255, 10);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1400);
				tableGenerationClause152=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableGenerationClause152.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:256:4: FROM OPENPAREN tableGenerationClause CLOSEPAREN ID ( tableHint )?
				{
				DebugLocation(256, 4);
				FROM153=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1405); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM153);

				DebugLocation(256, 9);
				OPENPAREN154=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fromStatement1407); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN154);

				DebugLocation(256, 19);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1409);
				tableGenerationClause155=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableGenerationClause.Add(tableGenerationClause155.Tree);
				DebugLocation(256, 41);
				CLOSEPAREN156=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fromStatement1411); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN156);

				DebugLocation(256, 52);
				ID157=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1413); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID157);

				DebugLocation(256, 55);
				// Scrape.g:256:55: ( tableHint )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==WITH))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:256:55: tableHint
					{
					DebugLocation(256, 55);
					PushFollow(Follow._tableHint_in_fromStatement1415);
					tableHint158=tableHint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableHint.Add(tableHint158.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }



				{
				// AST REWRITE
				// elements: ID, tableGenerationClause, tableHint, FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:66: -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ( tableHint )? )
				{
					DebugLocation(256, 69);
					// Scrape.g:256:69: ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ( tableHint )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(256, 76);
					adaptor.AddChild(root_1, stream_tableGenerationClause.NextTree());
					DebugLocation(256, 98);
					// Scrape.g:256:98: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 100);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(256, 112);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(256, 116);
					// Scrape.g:256:116: ( tableHint )?
					if (stream_tableHint.HasNext)
					{
						DebugLocation(256, 116);
						adaptor.AddChild(root_1, stream_tableHint.NextTree());

					}
					stream_tableHint.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 38);
			LeaveRule("fromStatement", 38);
			LeaveRule_fromStatement();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_tableHint();
	partial void LeaveRule_tableHint();
	// $ANTLR start "tableHint"
	// Scrape.g:260:1: tableHint : WITH ! OPENPAREN ! hint CLOSEPAREN !;
	[GrammarRule("tableHint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableHint()
	{
		EnterRule_tableHint();
		EnterRule("tableHint", 39);
		TraceIn("tableHint", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH159 = default(CommonToken);
		CommonToken OPENPAREN160 = default(CommonToken);
		CommonToken CLOSEPAREN162 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH159_tree = default(CommonTree);
		CommonTree OPENPAREN160_tree = default(CommonTree);
		CommonTree CLOSEPAREN162_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tableHint");
		DebugLocation(260, 1);
		try
		{
			// Scrape.g:261:2: ( WITH ! OPENPAREN ! hint CLOSEPAREN !)
			DebugEnterAlt(1);
			// Scrape.g:261:4: WITH ! OPENPAREN ! hint CLOSEPAREN !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(261, 8);
			WITH159=(CommonToken)Match(input,WITH,Follow._WITH_in_tableHint1446); if (state.failed) return retval;
			DebugLocation(261, 19);
			OPENPAREN160=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_tableHint1449); if (state.failed) return retval;
			DebugLocation(261, 21);
			PushFollow(Follow._hint_in_tableHint1452);
			hint161=hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, hint161.Tree);
			DebugLocation(261, 36);
			CLOSEPAREN162=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_tableHint1454); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableHint", 39);
			LeaveRule("tableHint", 39);
			LeaveRule_tableHint();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "tableHint"); }
		return retval;

	}
	// $ANTLR end "tableHint"

	partial void EnterRule_hint();
	partial void LeaveRule_hint();
	// $ANTLR start "hint"
	// Scrape.g:264:1: hint : THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) ;
	[GrammarRule("hint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> hint()
	{
		EnterRule_hint();
		EnterRule("hint", 40);
		TraceIn("hint", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken THREAD163 = default(CommonToken);
		CommonToken OPENPAREN164 = default(CommonToken);
		CommonToken INT165 = default(CommonToken);
		CommonToken CLOSEPAREN166 = default(CommonToken);

		CommonTree THREAD163_tree = default(CommonTree);
		CommonTree OPENPAREN164_tree = default(CommonTree);
		CommonTree INT165_tree = default(CommonTree);
		CommonTree CLOSEPAREN166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THREAD=new RewriteRuleITokenStream(adaptor,"token THREAD");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		try { DebugEnterRule(GrammarFileName, "hint");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) )
			DebugEnterAlt(1);
			// Scrape.g:265:4: THREAD OPENPAREN INT CLOSEPAREN
			{
			DebugLocation(265, 4);
			THREAD163=(CommonToken)Match(input,THREAD,Follow._THREAD_in_hint1466); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THREAD.Add(THREAD163);

			DebugLocation(265, 11);
			OPENPAREN164=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1468); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN164);

			DebugLocation(265, 21);
			INT165=(CommonToken)Match(input,INT,Follow._INT_in_hint1470); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INT.Add(INT165);

			DebugLocation(265, 25);
			CLOSEPAREN166=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1472); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN166);



			{
			// AST REWRITE
			// elements: THREAD, INT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:36: -> ^( THREAD INT )
			{
				DebugLocation(265, 39);
				// Scrape.g:265:39: ^( THREAD INT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_THREAD.NextNode(), root_1);

				DebugLocation(265, 48);
				adaptor.AddChild(root_1, stream_INT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hint", 40);
			LeaveRule("hint", 40);
			LeaveRule_hint();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "hint"); }
		return retval;

	}
	// $ANTLR end "hint"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:268:1: innerJoinStatement : innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 41);
		TraceIn("innerJoinStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal168 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:269:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
			{
			DebugLocation(269, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1491);
			innerJoin167=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin167.Tree);
			DebugLocation(269, 15);
			t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(269, 20);
			// Scrape.g:269:20: (a= ID )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==ID))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:269:20: a= ID
				{
				DebugLocation(269, 20);
				a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1499); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(a);


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(269, 25);
			string_literal168=(CommonToken)Match(input,124,Follow._124_in_innerJoinStatement1502); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal168);

			DebugLocation(269, 30);
			PushFollow(Follow._boolExpression_in_innerJoinStatement1504);
			boolExpression169=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression169.Tree);
			DebugLocation(269, 45);
			// Scrape.g:269:45: ( innerJoinStatement )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==INNER_JOIN||LA33_1==JOIN))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:269:45: innerJoinStatement
				{
				DebugLocation(269, 45);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1506);
				innerJoinStatement170=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement170.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: boolExpression, a, innerJoinStatement
			// token labels: a
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
			{
				DebugLocation(269, 68);
				// Scrape.g:269:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(269, 81);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(269, 110);
				// Scrape.g:269:110: ( ^( TABLE_ALIAS $a) )?
				if (stream_a.HasNext)
				{
					DebugLocation(269, 110);
					// Scrape.g:269:110: ^( TABLE_ALIAS $a)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(269, 112);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(269, 125);
					adaptor.AddChild(root_2, stream_a.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_a.Reset();
				DebugLocation(269, 129);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(269, 144);
				// Scrape.g:269:144: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(269, 144);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 41);
			LeaveRule("innerJoinStatement", 41);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_tableGenerationClause();
	partial void LeaveRule_tableGenerationClause();
	// $ANTLR start "tableGenerationClause"
	// Scrape.g:272:1: tableGenerationClause : ( downloadPageExpresssion | downloadImageExpression | expandExpression );
	[GrammarRule("tableGenerationClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause()
	{
		EnterRule_tableGenerationClause();
		EnterRule("tableGenerationClause", 42);
		TraceIn("tableGenerationClause", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion171 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "tableGenerationClause");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
			int alt34=3;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case DOWNLOAD_PAGE:
				{
				alt34 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
				{
				alt34 = 2;
				}
				break;
			case EXPAND:
				{
				alt34 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:273:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(273, 4);
				PushFollow(Follow._downloadPageExpresssion_in_tableGenerationClause1540);
				downloadPageExpresssion171=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion171.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:274:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._downloadImageExpression_in_tableGenerationClause1545);
				downloadImageExpression172=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression172.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:275:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._expandExpression_in_tableGenerationClause1550);
				expandExpression173=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression173.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableGenerationClause", 42);
			LeaveRule("tableGenerationClause", 42);
			LeaveRule_tableGenerationClause();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "tableGenerationClause"); }
		return retval;

	}
	// $ANTLR end "tableGenerationClause"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:278:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 43);
		TraceIn("innerJoin", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set174 = default(CommonToken);

		CommonTree set174_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(278, 1);
		try
		{
			// Scrape.g:279:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(279, 2);

			set174=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set174));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 43);
			LeaveRule("innerJoin", 43);
			LeaveRule_innerJoin();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:283:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 44);
		TraceIn("selectStatement", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT175 = default(CommonToken);
		CommonToken COMMA177 = default(CommonToken);
		CommonToken SELECT179 = default(CommonToken);
		CommonToken ASTERISK180 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT175_tree = default(CommonTree);
		CommonTree COMMA177_tree = default(CommonTree);
		CommonTree SELECT179_tree = default(CommonTree);
		CommonTree ASTERISK180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(283, 1);
		try
		{
			// Scrape.g:284:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==SELECT))
			{
				int LA36_2 = input.LA(2);

				if ((LA36_2==ASTERISK))
				{
					alt36 = 2;
				}
				else if ((LA36_2==CASE||LA36_2==COMMAND_VAR||LA36_2==ID||LA36_2==IDENTITY_VAR||LA36_2==INT||LA36_2==NULL||LA36_2==PICK||LA36_2==STRING_LITERAL))
				{
					alt36 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:284:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(284, 4);
				SELECT175=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1577); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT175);

				DebugLocation(284, 11);
				// Scrape.g:284:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					case ID:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA35_2 = input.LA(2);

						if ((EvaluatePredicate(synpred61_Scrape_fragment)))
						{
							alt35 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:284:12: selectArgs COMMA
						{
						DebugLocation(284, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1580);
						selectArgs176=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs176.Tree);
						DebugLocation(284, 23);
						COMMA177=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1582); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA177);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(284, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1586);
				selectArgs178=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs178.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(284, 45);
					// Scrape.g:284:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(284, 54);
					// Scrape.g:284:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(284, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:285:4: SELECT ASTERISK
				{
				DebugLocation(285, 4);
				SELECT179=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT179);

				DebugLocation(285, 11);
				ASTERISK180=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1602); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK180);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(285, 23);
					// Scrape.g:285:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(285, 32);
					// Scrape.g:285:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(285, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK180));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 44);
			LeaveRule("selectStatement", 44);
			LeaveRule_selectStatement();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:289:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 45);
		TraceIn("selectArgs", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS182 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg181 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS182_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(289, 1);
		try
		{
			// Scrape.g:290:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==COMMAND_VAR||LA38_1==ID||LA38_1==IDENTITY_VAR||LA38_1==INT||LA38_1==NULL||LA38_1==PICK||LA38_1==STRING_LITERAL))
			{
				alt38 = 1;
			}
			else if ((LA38_1==CASE))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:290:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(290, 4);
				// Scrape.g:290:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA37_2 = input.LA(2);

						if ((LA37_2==STRING_LITERAL))
						{
							switch (input.LA(3))
							{
							case TAKE:
								{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA37_5 = input.LA(5);

									if ((LA37_5==STRING_LITERAL))
									{
										int LA37_6 = input.LA(6);

										if ((LA37_6==MATCH))
										{
											int LA37_7 = input.LA(7);

											if ((LA37_7==STRING_LITERAL))
											{
												int LA37_8 = input.LA(8);

												if ((LA37_8==REPLACE))
												{
													int LA37_9 = input.LA(9);

													if ((LA37_9==STRING_LITERAL))
													{
														int LA37_10 = input.LA(10);

														if ((LA37_10==PLUS))
														{
															alt37 = 1;
														}


													}


												}
												else if ((LA37_8==PLUS))
												{
													alt37 = 1;
												}


											}


										}
										else if ((LA37_6==PLUS))
										{
											alt37 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA37_5 = input.LA(5);

									if ((LA37_5==MATCH))
									{
										int LA37_6 = input.LA(6);

										if ((LA37_6==STRING_LITERAL))
										{
											int LA37_7 = input.LA(7);

											if ((LA37_7==REPLACE))
											{
												int LA37_8 = input.LA(8);

												if ((LA37_8==STRING_LITERAL))
												{
													int LA37_9 = input.LA(9);

													if ((LA37_9==PLUS))
													{
														alt37 = 1;
													}


												}


											}
											else if ((LA37_7==PLUS))
											{
												alt37 = 1;
											}


										}


									}
									else if ((LA37_5==PLUS))
									{
										alt37 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA37_5 = input.LA(5);

									if ((LA37_5==MATCH))
									{
										int LA37_6 = input.LA(6);

										if ((LA37_6==STRING_LITERAL))
										{
											int LA37_7 = input.LA(7);

											if ((LA37_7==REPLACE))
											{
												int LA37_8 = input.LA(8);

												if ((LA37_8==STRING_LITERAL))
												{
													int LA37_9 = input.LA(9);

													if ((LA37_9==PLUS))
													{
														alt37 = 1;
													}


												}


											}
											else if ((LA37_7==PLUS))
											{
												alt37 = 1;
											}


										}


									}
									else if ((LA37_5==PLUS))
									{
										alt37 = 1;
									}


									}
									break;
								}

								}
								break;
							case MATCH:
								{
								int LA37_4 = input.LA(4);

								if ((LA37_4==STRING_LITERAL))
								{
									int LA37_5 = input.LA(5);

									if ((LA37_5==REPLACE))
									{
										int LA37_6 = input.LA(6);

										if ((LA37_6==STRING_LITERAL))
										{
											int LA37_7 = input.LA(7);

											if ((LA37_7==PLUS))
											{
												alt37 = 1;
											}


										}


									}
									else if ((LA37_5==PLUS))
									{
										alt37 = 1;
									}


								}


								}
								break;
							case PLUS:
								{
								alt37 = 1;
								}
								break;
							}

						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA37_2 = input.LA(2);

						if ((LA37_2==PLUS))
						{
							alt37 = 1;
						}


						}
						break;
					case ID:
						{
						int LA37_2 = input.LA(2);

						if ((LA37_2==DOT))
						{
							int LA37_3 = input.LA(3);

							if ((LA37_3==ID))
							{
								int LA37_4 = input.LA(4);

								if ((LA37_4==PLUS))
								{
									alt37 = 1;
								}


							}


						}
						else if ((LA37_2==PLUS))
						{
							alt37 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA37_2 = input.LA(2);

						if ((LA37_2==PLUS))
						{
							alt37 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA37_2 = input.LA(2);

						if ((LA37_2==PLUS))
						{
							alt37 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:290:5: selectArg PLUS
						{
						DebugLocation(290, 5);
						PushFollow(Follow._selectArg_in_selectArgs1628);
						selectArg181=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg181.Tree);
						DebugLocation(290, 15);
						PLUS182=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1630); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS182);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(290, 22);
				PushFollow(Follow._selectArg_in_selectArgs1634);
				selectArg183=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg183.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(290, 35);
					// Scrape.g:290:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(290, 48);
					// Scrape.g:290:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(290, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:291:4: caseStatement
				{
				DebugLocation(291, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1648);
				caseStatement184=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement184.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(291, 21);
					// Scrape.g:291:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(291, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 45);
			LeaveRule("selectArgs", 45);
			LeaveRule_selectArgs();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:296:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 46);
		TraceIn("caseStatement", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE185 = default(CommonToken);
		CommonToken ELSE187 = default(CommonToken);
		CommonToken END189 = default(CommonToken);
		CommonToken CASE190 = default(CommonToken);
		CommonToken ELSE193 = default(CommonToken);
		CommonToken END195 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression188 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE185_tree = default(CommonTree);
		CommonTree ELSE187_tree = default(CommonTree);
		CommonTree END189_tree = default(CommonTree);
		CommonTree CASE190_tree = default(CommonTree);
		CommonTree ELSE193_tree = default(CommonTree);
		CommonTree END195_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==CASE))
			{
				int LA43_2 = input.LA(2);

				if ((LA43_2==WHEN))
				{
					alt43 = 1;
				}
				else if ((LA43_2==COMMAND_VAR||LA43_2==ID||LA43_2==IDENTITY_VAR||LA43_2==INT||LA43_2==NULL||LA43_2==PICK||LA43_2==STRING_LITERAL))
				{
					alt43 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:297:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(297, 4);
				CASE185=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1670); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE185);

				DebugLocation(297, 9);
				// Scrape.g:297:9: ( whenBoolStatement )+
				int cnt39=0;
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==WHEN))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:297:9: whenBoolStatement
						{
						DebugLocation(297, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1672);
						whenBoolStatement186=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement186.Tree);

						}
						break;

					default:
						if (cnt39 >= 1)
							goto loop39;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee39 = new EarlyExitException( 39, input );
						DebugRecognitionException(eee39);
						throw eee39;
					}
					cnt39++;
				}
				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(297, 28);
				// Scrape.g:297:28: ( ELSE caseExpression )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==ELSE))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:297:29: ELSE caseExpression
					{
					DebugLocation(297, 29);
					ELSE187=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1676); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE187);

					DebugLocation(297, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1678);
					caseExpression188=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression188.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(297, 51);
				END189=(CommonToken)Match(input,END,Follow._END_in_caseStatement1682); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END189);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(297, 58);
					// Scrape.g:297:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(297, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(297, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(297, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(297, 89);
					// Scrape.g:297:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(297, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:298:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(298, 4);
				CASE190=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE190);

				DebugLocation(298, 9);
				PushFollow(Follow._selectArg_in_caseStatement1701);
				selectArg191=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg191.Tree);
				DebugLocation(298, 19);
				// Scrape.g:298:19: ( whenLiteralStatement )+
				int cnt41=0;
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_1 = input.LA(1);

					if ((LA41_1==WHEN))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:298:19: whenLiteralStatement
						{
						DebugLocation(298, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1703);
						whenLiteralStatement192=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement192.Tree);

						}
						break;

					default:
						if (cnt41 >= 1)
							goto loop41;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee41 = new EarlyExitException( 41, input );
						DebugRecognitionException(eee41);
						throw eee41;
					}
					cnt41++;
				}
				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(298, 41);
				// Scrape.g:298:41: ( ELSE caseExpression )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==ELSE))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:298:42: ELSE caseExpression
					{
					DebugLocation(298, 42);
					ELSE193=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1707); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE193);

					DebugLocation(298, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1709);
					caseExpression194=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression194.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(298, 64);
				END195=(CommonToken)Match(input,END,Follow._END_in_caseStatement1713); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END195);



				{
				// AST REWRITE
				// elements: whenLiteralStatement, selectArg, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(298, 71);
					// Scrape.g:298:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(298, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(298, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(298, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(298, 114);
					// Scrape.g:298:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(298, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 46);
			LeaveRule("caseStatement", 46);
			LeaveRule_caseStatement();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:301:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 47);
		TraceIn("caseExpression", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg196 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(301, 1);
		try
		{
			// Scrape.g:302:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:302:4: selectArg
			{
			DebugLocation(302, 4);
			PushFollow(Follow._selectArg_in_caseExpression1738);
			selectArg196=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg196.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(302, 17);
				// Scrape.g:302:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(302, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 47);
			LeaveRule("caseExpression", 47);
			LeaveRule_caseExpression();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:305:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 48);
		TraceIn("whenLiteralStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN197 = default(CommonToken);
		CommonToken THEN199 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal198 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN197_tree = default(CommonTree);
		CommonTree THEN199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(305, 1);
		try
		{
			// Scrape.g:306:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:306:4: WHEN literal THEN caseExpression
			{
			DebugLocation(306, 4);
			WHEN197=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1757); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN197);

			DebugLocation(306, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1759);
			literal198=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal198.Tree);
			DebugLocation(306, 17);
			THEN199=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1761); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN199);

			DebugLocation(306, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1763);
			caseExpression200=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression200.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 306:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(306, 40);
				// Scrape.g:306:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(306, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(306, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(306, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 48);
			LeaveRule("whenLiteralStatement", 48);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(307, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:309:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 49);
		TraceIn("whenBoolStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN201 = default(CommonToken);
		CommonToken THEN203 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression202 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN201_tree = default(CommonTree);
		CommonTree THEN203_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(309, 1);
		try
		{
			// Scrape.g:310:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:310:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(310, 4);
			WHEN201=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1784); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN201);

			DebugLocation(310, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1786);
			boolExpression202=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression202.Tree);
			DebugLocation(310, 24);
			THEN203=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1788); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN203);

			DebugLocation(310, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1790);
			caseExpression204=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression204.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 310:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(310, 47);
				// Scrape.g:310:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(310, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(310, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(310, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 49);
			LeaveRule("whenBoolStatement", 49);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:313:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 50);
		TraceIn("boolExpression", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR206 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression207 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR206_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(313, 1);
		try
		{
			// Scrape.g:314:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:314:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(314, 4);
			PushFollow(Follow._andExpression_in_boolExpression1811);
			andExpression205=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression205.Tree);
			DebugLocation(314, 18);
			// Scrape.g:314:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==OR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:314:19: OR ^ andExpression
					{
					DebugLocation(314, 21);
					OR206=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1814); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR206_tree = (CommonTree)adaptor.Create(OR206);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR206_tree, root_0);
					}
					DebugLocation(314, 23);
					PushFollow(Follow._andExpression_in_boolExpression1817);
					andExpression207=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression207.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 50);
			LeaveRule("boolExpression", 50);
			LeaveRule_boolExpression();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:317:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 51);
		TraceIn("andExpression", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND209 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND209_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(317, 1);
		try
		{
			// Scrape.g:318:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:318:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(318, 5);
			PushFollow(Follow._boolTerm_in_andExpression1831);
			boolTerm208=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm208.Tree);
			DebugLocation(318, 14);
			// Scrape.g:318:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==AND))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:318:15: AND ^ boolTerm
					{
					DebugLocation(318, 18);
					AND209=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1834); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND209_tree = (CommonTree)adaptor.Create(AND209);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND209_tree, root_0);
					}
					DebugLocation(318, 20);
					PushFollow(Follow._boolTerm_in_andExpression1837);
					boolTerm210=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm210.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 51);
			LeaveRule("andExpression", 51);
			LeaveRule_andExpression();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:321:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 52);
		TraceIn("boolTerm", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NODES211 = default(CommonToken);
		CommonToken EQUALS212 = default(CommonToken);
		CommonToken STRING_LITERAL213 = default(CommonToken);
		CommonToken OPENPAREN217 = default(CommonToken);
		CommonToken CLOSEPAREN219 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg214 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg216 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NODES211_tree = default(CommonTree);
		CommonTree EQUALS212_tree = default(CommonTree);
		CommonTree STRING_LITERAL213_tree = default(CommonTree);
		CommonTree OPENPAREN217_tree = default(CommonTree);
		CommonTree CLOSEPAREN219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(321, 1);
		try
		{
			// Scrape.g:322:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt47=3;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt47 = 1;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt47 = 2;
				}
				break;
			case OPENPAREN:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:322:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(322, 4);
				NODES211=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1852); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES211);

				DebugLocation(322, 10);
				EQUALS212=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS212);

				DebugLocation(322, 17);
				STRING_LITERAL213=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1856); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL213);



				{
				// AST REWRITE
				// elements: STRING_LITERAL, NODES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 322:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(322, 35);
					// Scrape.g:322:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(322, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(322, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES211));
					DebugLocation(322, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:323:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(323, 4);
				PushFollow(Follow._selectArg_in_boolTerm1872);
				selectArg214=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg214.Tree);
				DebugLocation(323, 14);
				// Scrape.g:323:14: ( boolOperator ^ selectArg )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==EQUALS||(LA46_1>=GREATERTHAN && LA46_1<=GREATERTHANEQUAL)||(LA46_1>=LESSTHAN && LA46_1<=LESSTHANEQUAL)||LA46_1==NOTEQUAL))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:323:15: boolOperator ^ selectArg
					{
					DebugLocation(323, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1875);
					boolOperator215=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator215.Tree, root_0);
					DebugLocation(323, 29);
					PushFollow(Follow._selectArg_in_boolTerm1878);
					selectArg216=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg216.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:324:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(324, 13);
				OPENPAREN217=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1886); if (state.failed) return retval;
				DebugLocation(324, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1889);
				boolExpression218=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression218.Tree);
				DebugLocation(324, 40);
				CLOSEPAREN219=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1891); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 52);
			LeaveRule("boolTerm", 52);
			LeaveRule_boolTerm();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:327:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 53);
		TraceIn("boolOperator", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set220 = default(CommonToken);

		CommonTree set220_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(327, 1);
		try
		{
			// Scrape.g:328:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(328, 2);

			set220=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set220));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 53);
			LeaveRule("boolOperator", 53);
			LeaveRule_boolOperator();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:336:1: selectArg : ( pickStatement | literal | selectVariable );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 54);
		TraceIn("selectArg", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(336, 1);
		try
		{
			// Scrape.g:337:2: ( pickStatement | literal | selectVariable )
			int alt48=3;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt48 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt48 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:337:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._pickStatement_in_selectArg1939);
				pickStatement221=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement221.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:338:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._literal_in_selectArg1944);
				literal222=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal222.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:339:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._selectVariable_in_selectArg1949);
				selectVariable223=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable223.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 54);
			LeaveRule("selectArg", 54);
			LeaveRule_selectArg();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:342:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 55);
		TraceIn("selectVariable", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID224 = default(CommonToken);
		CommonToken COMMAND_VAR225 = default(CommonToken);
		CommonToken IDENTITY_VAR226 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID224_tree = default(CommonTree);
		CommonTree COMMAND_VAR225_tree = default(CommonTree);
		CommonTree IDENTITY_VAR226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(342, 1);
		try
		{
			// Scrape.g:343:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt49=4;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA49_2 = input.LA(2);

				if ((LA49_2==DOT))
				{
					alt49 = 4;
				}
				else if ((LA49_2==EOF||LA49_2==AND||(LA49_2>=CLOSEBRACE && LA49_2<=COMMAND_VAR)||LA49_2==CREATE||(LA49_2>=EACH && LA49_2<=EXEC)||(LA49_2>=FROM && LA49_2<=GREATERTHANEQUAL)||LA49_2==ID||LA49_2==IDENTITY_VAR||(LA49_2>=INNER_JOIN && LA49_2<=INSERT_INTO)||LA49_2==INSERT_OVERWRITE||(LA49_2>=JOIN && LA49_2<=LESSTHANEQUAL)||LA49_2==NOTEQUAL||LA49_2==OR||LA49_2==PLUS||LA49_2==SELECT||LA49_2==THEN||(LA49_2>=TRUNCATE && LA49_2<=VAR)||LA49_2==WHEN||(LA49_2>=WHERE && LA49_2<=WHILE)))
				{
					alt49 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt49 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt49 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:343:4: ID
				{
				DebugLocation(343, 4);
				ID224=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable1960); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID224);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(343, 10);
					// Scrape.g:343:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID224), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:344:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(344, 4);
				COMMAND_VAR225=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable1972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR225_tree = (CommonTree)adaptor.Create(COMMAND_VAR225);
				adaptor.AddChild(root_0, COMMAND_VAR225_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:345:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(345, 4);
				IDENTITY_VAR226=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable1977); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR226_tree = (CommonTree)adaptor.Create(IDENTITY_VAR226);
				adaptor.AddChild(root_0, IDENTITY_VAR226_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:346:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(346, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable1982);
				tableMemberReference227=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference227.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 55);
			LeaveRule("selectVariable", 55);
			LeaveRule_selectVariable();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:349:1: pickStatement : PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 56);
		TraceIn("pickStatement", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK228 = default(CommonToken);
		CommonToken STRING_LITERAL229 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement230 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement231 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK228_tree = default(CommonTree);
		CommonTree STRING_LITERAL229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(349, 1);
		try
		{
			// Scrape.g:350:2: ( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:350:4: PICK STRING_LITERAL ( takeStatement )? ( matchStatement )?
			{
			DebugLocation(350, 4);
			PICK228=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1994); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK228);

			DebugLocation(350, 9);
			STRING_LITERAL229=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1996); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL229);

			DebugLocation(350, 24);
			// Scrape.g:350:24: ( takeStatement )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==TAKE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:350:24: takeStatement
				{
				DebugLocation(350, 24);
				PushFollow(Follow._takeStatement_in_pickStatement1998);
				takeStatement230=takeStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_takeStatement.Add(takeStatement230.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(350, 39);
			// Scrape.g:350:39: ( matchStatement )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==MATCH))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:350:39: matchStatement
				{
				DebugLocation(350, 39);
				PushFollow(Follow._matchStatement_in_pickStatement2001);
				matchStatement231=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement231.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: matchStatement, STRING_LITERAL, takeStatement, PICK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 350:55: -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? )
			{
				DebugLocation(350, 58);
				// Scrape.g:350:58: ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(350, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(350, 65);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(350, 80);
				// Scrape.g:350:80: ( takeStatement )?
				if (stream_takeStatement.HasNext)
				{
					DebugLocation(350, 80);
					adaptor.AddChild(root_1, stream_takeStatement.NextTree());

				}
				stream_takeStatement.Reset();
				DebugLocation(350, 95);
				// Scrape.g:350:95: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(350, 95);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 56);
			LeaveRule("pickStatement", 56);
			LeaveRule_pickStatement();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:353:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 57);
		TraceIn("takeStatement", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE232 = default(CommonToken);
		CommonToken ATTRIBUTE233 = default(CommonToken);
		CommonToken STRING_LITERAL234 = default(CommonToken);
		CommonToken TAKE235 = default(CommonToken);
		CommonToken TEXT236 = default(CommonToken);
		CommonToken TAKE237 = default(CommonToken);
		CommonToken HTML238 = default(CommonToken);

		CommonTree TAKE232_tree = default(CommonTree);
		CommonTree ATTRIBUTE233_tree = default(CommonTree);
		CommonTree STRING_LITERAL234_tree = default(CommonTree);
		CommonTree TAKE235_tree = default(CommonTree);
		CommonTree TEXT236_tree = default(CommonTree);
		CommonTree TAKE237_tree = default(CommonTree);
		CommonTree HTML238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(353, 1);
		try
		{
			// Scrape.g:354:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt52=3;
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt52 = 1;
					}
					break;
				case TEXT:
					{
					alt52 = 2;
					}
					break;
				case HTML:
					{
					alt52 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 52, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:354:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(354, 4);
				TAKE232=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2028); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE232);

				DebugLocation(354, 9);
				ATTRIBUTE233=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement2030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE233);

				DebugLocation(354, 19);
				STRING_LITERAL234=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement2032); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL234);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 354:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(354, 37);
					// Scrape.g:354:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(354, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(354, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:355:4: TAKE TEXT
				{
				DebugLocation(355, 4);
				TAKE235=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2045); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE235);

				DebugLocation(355, 9);
				TEXT236=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement2047); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT236);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(355, 17);
					// Scrape.g:355:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(355, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:356:4: TAKE HTML
				{
				DebugLocation(356, 4);
				TAKE237=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2058); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE237);

				DebugLocation(356, 9);
				HTML238=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement2060); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:14: -> ^( TAKE_HTML )
				{
					DebugLocation(356, 17);
					// Scrape.g:356:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 57);
			LeaveRule("takeStatement", 57);
			LeaveRule_takeStatement();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:359:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 58);
		TraceIn("matchStatement", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH239 = default(CommonToken);
		CommonToken STRING_LITERAL240 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH239_tree = default(CommonTree);
		CommonTree STRING_LITERAL240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(359, 1);
		try
		{
			// Scrape.g:360:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:360:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(360, 4);
			MATCH239=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement2078); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH239);

			DebugLocation(360, 10);
			STRING_LITERAL240=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement2080); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL240);

			DebugLocation(360, 25);
			// Scrape.g:360:25: ( replaceStatement )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_1 = input.LA(1);

			if ((LA53_1==REPLACE))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:360:25: replaceStatement
				{
				DebugLocation(360, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement2082);
				replaceStatement241=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement241.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, replaceStatement, MATCH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 360:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(360, 46);
				// Scrape.g:360:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(360, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(360, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(360, 69);
				// Scrape.g:360:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(360, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 58);
			LeaveRule("matchStatement", 58);
			LeaveRule_matchStatement();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:363:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 59);
		TraceIn("replaceStatement", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE242 = default(CommonToken);
		CommonToken STRING_LITERAL243 = default(CommonToken);

		CommonTree REPLACE242_tree = default(CommonTree);
		CommonTree STRING_LITERAL243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(363, 1);
		try
		{
			// Scrape.g:364:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:364:4: REPLACE STRING_LITERAL
			{
			DebugLocation(364, 4);
			REPLACE242=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement2105); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE242);

			DebugLocation(364, 12);
			STRING_LITERAL243=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement2107); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL243);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 364:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(364, 30);
				// Scrape.g:364:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(364, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(364, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 59);
			LeaveRule("replaceStatement", 59);
			LeaveRule_replaceStatement();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:368:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 60);
		TraceIn("createTableStatement", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE244 = default(CommonToken);
		CommonToken FILE245 = default(CommonToken);
		CommonToken ID246 = default(CommonToken);
		CommonToken OPENPAREN247 = default(CommonToken);
		CommonToken CLOSEPAREN249 = default(CommonToken);
		CommonToken CREATE252 = default(CommonToken);
		CommonToken BUFFER253 = default(CommonToken);
		CommonToken ID254 = default(CommonToken);
		CommonToken OPENPAREN255 = default(CommonToken);
		CommonToken CLOSEPAREN257 = default(CommonToken);
		CommonToken CREATE258 = default(CommonToken);
		CommonToken MSSQL259 = default(CommonToken);
		CommonToken ID260 = default(CommonToken);
		CommonToken OPENPAREN261 = default(CommonToken);
		CommonToken CLOSEPAREN263 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs248 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement250 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation251 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs256 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs262 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement264 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE244_tree = default(CommonTree);
		CommonTree FILE245_tree = default(CommonTree);
		CommonTree ID246_tree = default(CommonTree);
		CommonTree OPENPAREN247_tree = default(CommonTree);
		CommonTree CLOSEPAREN249_tree = default(CommonTree);
		CommonTree CREATE252_tree = default(CommonTree);
		CommonTree BUFFER253_tree = default(CommonTree);
		CommonTree ID254_tree = default(CommonTree);
		CommonTree OPENPAREN255_tree = default(CommonTree);
		CommonTree CLOSEPAREN257_tree = default(CommonTree);
		CommonTree CREATE258_tree = default(CommonTree);
		CommonTree MSSQL259_tree = default(CommonTree);
		CommonTree ID260_tree = default(CommonTree);
		CommonTree OPENPAREN261_tree = default(CommonTree);
		CommonTree CLOSEPAREN263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleITokenStream stream_MSSQL=new RewriteRuleITokenStream(adaptor,"token MSSQL");
		RewriteRuleSubtreeStream stream_sqlTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithStatement");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(368, 1);
		try
		{
			// Scrape.g:369:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==CREATE))
			{
				switch (input.LA(2))
				{
				case FILE:
					{
					alt58 = 1;
					}
					break;
				case BUFFER:
					{
					alt58 = 2;
					}
					break;
				case MSSQL:
					{
					alt58 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 58, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:369:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(369, 4);
				CREATE244=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2128); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE244);

				DebugLocation(369, 11);
				FILE245=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement2130); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE245);

				DebugLocation(369, 16);
				ID246=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2132); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID246);

				DebugLocation(369, 19);
				OPENPAREN247=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2134); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN247);

				DebugLocation(369, 29);
				// Scrape.g:369:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==ID))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:369:29: tableColumnArgs
						{
						DebugLocation(369, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2136);
						tableColumnArgs248=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs248.Tree);

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }

				DebugLocation(369, 46);
				CLOSEPAREN249=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2139); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN249);

				DebugLocation(369, 57);
				// Scrape.g:369:57: ( fileTableWithStatement )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==WITH))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:369:57: fileTableWithStatement
					{
					DebugLocation(369, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement2141);
					fileTableWithStatement250=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement250.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(369, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement2144);
				fileTableLocation251=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation251.Tree);


				{
				// AST REWRITE
				// elements: tableColumnArgs, fileTableLocation, fileTableWithStatement, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 369:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(369, 102);
					// Scrape.g:369:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(369, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(369, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(369, 118);
					// Scrape.g:369:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(369, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(369, 135);
					// Scrape.g:369:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(369, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(369, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:370:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(370, 4);
				CREATE252=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE252);

				DebugLocation(370, 11);
				BUFFER253=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement2167); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER253);

				DebugLocation(370, 18);
				ID254=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2169); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID254);

				DebugLocation(370, 21);
				OPENPAREN255=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2171); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN255);

				DebugLocation(370, 31);
				// Scrape.g:370:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==ID))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch ( alt56 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:370:31: tableColumnArgs
						{
						DebugLocation(370, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2173);
						tableColumnArgs256=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs256.Tree);

						}
						break;

					default:
						goto loop56;
					}
				}

				loop56:
					;

				} finally { DebugExitSubRule(56); }

				DebugLocation(370, 48);
				CLOSEPAREN257=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2176); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN257);



				{
				// AST REWRITE
				// elements: tableColumnArgs, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(370, 62);
					// Scrape.g:370:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(370, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(370, 80);
					// Scrape.g:370:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(370, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:371:4: CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement
				{
				DebugLocation(371, 4);
				CREATE258=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2192); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE258);

				DebugLocation(371, 11);
				MSSQL259=(CommonToken)Match(input,MSSQL,Follow._MSSQL_in_createTableStatement2194); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSSQL.Add(MSSQL259);

				DebugLocation(371, 17);
				ID260=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID260);

				DebugLocation(371, 20);
				OPENPAREN261=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN261);

				DebugLocation(371, 30);
				// Scrape.g:371:30: ( tableColumnArgs )*
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_1 = input.LA(1);

					if ((LA57_1==ID))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch ( alt57 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:371:30: tableColumnArgs
						{
						DebugLocation(371, 30);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2200);
						tableColumnArgs262=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs262.Tree);

						}
						break;

					default:
						goto loop57;
					}
				}

				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(371, 47);
				CLOSEPAREN263=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2203); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN263);

				DebugLocation(371, 58);
				PushFollow(Follow._sqlTableWithStatement_in_createTableStatement2205);
				sqlTableWithStatement264=sqlTableWithStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlTableWithStatement.Add(sqlTableWithStatement264.Tree);


				{
				// AST REWRITE
				// elements: tableColumnArgs, sqlTableWithStatement, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 371:80: -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
				{
					DebugLocation(371, 83);
					// Scrape.g:371:83: ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(371, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MSSQL_TABLE, "MSSQL_TABLE"), root_1);

					DebugLocation(371, 97);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(371, 100);
					// Scrape.g:371:100: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(371, 100);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(371, 117);
					adaptor.AddChild(root_1, stream_sqlTableWithStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 60);
			LeaveRule("createTableStatement", 60);
			LeaveRule_createTableStatement();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:374:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 61);
		TraceIn("fileTableLocation", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION265 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression266 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION265_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(374, 1);
		try
		{
			// Scrape.g:375:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:375:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(375, 12);
			LOCATION265=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation2229); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION265_tree = (CommonTree)adaptor.Create(LOCATION265);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION265_tree, root_0);
			}
			DebugLocation(375, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation2232);
			mathExpression266=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression266.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 61);
			LeaveRule("fileTableLocation", 61);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_sqlTableWithStatement();
	partial void LeaveRule_sqlTableWithStatement();
	// $ANTLR start "sqlTableWithStatement"
	// Scrape.g:378:1: sqlTableWithStatement : WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) ;
	[GrammarRule("sqlTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement()
	{
		EnterRule_sqlTableWithStatement();
		EnterRule("sqlTableWithStatement", 62);
		TraceIn("sqlTableWithStatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH267 = default(CommonToken);
		CommonToken OPENPAREN268 = default(CommonToken);
		CommonToken CLOSEPAREN270 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement269 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH267_tree = default(CommonTree);
		CommonTree OPENPAREN268_tree = default(CommonTree);
		CommonTree CLOSEPAREN270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithStatement");
		DebugLocation(378, 1);
		try
		{
			// Scrape.g:379:2: ( WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) )
			DebugEnterAlt(1);
			// Scrape.g:379:4: WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN
			{
			DebugLocation(379, 4);
			WITH267=(CommonToken)Match(input,WITH,Follow._WITH_in_sqlTableWithStatement2244); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH267);

			DebugLocation(379, 9);
			OPENPAREN268=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_sqlTableWithStatement2246); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN268);

			DebugLocation(379, 19);
			PushFollow(Follow._sqlTableWithVariablesStatement_in_sqlTableWithStatement2248);
			sqlTableWithVariablesStatement269=sqlTableWithVariablesStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariablesStatement.Add(sqlTableWithVariablesStatement269.Tree);
			DebugLocation(379, 50);
			CLOSEPAREN270=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_sqlTableWithStatement2250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN270);



			{
			// AST REWRITE
			// elements: sqlTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 379:61: -> ^( WITH sqlTableWithVariablesStatement )
			{
				DebugLocation(379, 64);
				// Scrape.g:379:64: ^( WITH sqlTableWithVariablesStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(379, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(379, 71);
				adaptor.AddChild(root_1, stream_sqlTableWithVariablesStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithStatement", 62);
			LeaveRule("sqlTableWithStatement", 62);
			LeaveRule_sqlTableWithStatement();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithStatement"

	partial void EnterRule_sqlTableWithVariablesStatement();
	partial void LeaveRule_sqlTableWithVariablesStatement();
	// $ANTLR start "sqlTableWithVariablesStatement"
	// Scrape.g:382:1: sqlTableWithVariablesStatement : ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* ;
	[GrammarRule("sqlTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement()
	{
		EnterRule_sqlTableWithVariablesStatement();
		EnterRule("sqlTableWithVariablesStatement", 63);
		TraceIn("sqlTableWithVariablesStatement", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA272 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement271 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement273 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA272_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_sqlTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariablesStatement");
		DebugLocation(382, 1);
		try
		{
			// Scrape.g:383:2: ( ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:383:4: ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement
			{
			DebugLocation(383, 4);
			// Scrape.g:383:4: ( sqlTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==CONNECTIONSTRING||LA59_1==DBTABLE))
				{
					int LA59_2 = input.LA(2);

					if ((LA59_2==EQUALS))
					{
						int LA59_3 = input.LA(3);

						if ((LA59_3==STRING_LITERAL))
						{
							int LA59_4 = input.LA(4);

							if ((LA59_4==COMMA))
							{
								alt59 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:383:5: sqlTableWithVariableStatement COMMA
					{
					DebugLocation(383, 5);
					PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2271);
					sqlTableWithVariableStatement271=sqlTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement271.Tree);
					DebugLocation(383, 35);
					COMMA272=(CommonToken)Match(input,COMMA,Follow._COMMA_in_sqlTableWithVariablesStatement2273); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA272);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(383, 43);
			PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2277);
			sqlTableWithVariableStatement273=sqlTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement273.Tree);


			{
			// AST REWRITE
			// elements: sqlTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 383:73: -> ( sqlTableWithVariableStatement )*
			{
				DebugLocation(383, 76);
				// Scrape.g:383:76: ( sqlTableWithVariableStatement )*
				while ( stream_sqlTableWithVariableStatement.HasNext )
				{
					DebugLocation(383, 76);
					adaptor.AddChild(root_0, stream_sqlTableWithVariableStatement.NextTree());

				}
				stream_sqlTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariablesStatement", 63);
			LeaveRule("sqlTableWithVariablesStatement", 63);
			LeaveRule_sqlTableWithVariablesStatement();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariablesStatement"

	partial void EnterRule_sqlTableWithVariableStatement();
	partial void LeaveRule_sqlTableWithVariableStatement();
	// $ANTLR start "sqlTableWithVariableStatement"
	// Scrape.g:386:1: sqlTableWithVariableStatement : ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("sqlTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement()
	{
		EnterRule_sqlTableWithVariableStatement();
		EnterRule("sqlTableWithVariableStatement", 64);
		TraceIn("sqlTableWithVariableStatement", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set274 = default(CommonToken);
		CommonToken EQUALS275 = default(CommonToken);
		CommonToken STRING_LITERAL276 = default(CommonToken);

		CommonTree set274_tree = default(CommonTree);
		CommonTree EQUALS275_tree = default(CommonTree);
		CommonTree STRING_LITERAL276_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariableStatement");
		DebugLocation(386, 1);
		try
		{
			// Scrape.g:387:2: ( ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:387:4: ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(387, 32);

			set274=(CommonToken)input.LT(1);
			set274=(CommonToken)input.LT(1);
			if (input.LA(1)==CONNECTIONSTRING||input.LA(1)==DBTABLE)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set274), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(387, 40);
			EQUALS275=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_sqlTableWithVariableStatement2303); if (state.failed) return retval;
			DebugLocation(387, 42);
			STRING_LITERAL276=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_sqlTableWithVariableStatement2306); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL276_tree = (CommonTree)adaptor.Create(STRING_LITERAL276);
			adaptor.AddChild(root_0, STRING_LITERAL276_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariableStatement", 64);
			LeaveRule("sqlTableWithVariableStatement", 64);
			LeaveRule_sqlTableWithVariableStatement();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariableStatement"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:390:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 65);
		TraceIn("fileTableWithStatement", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH277 = default(CommonToken);
		CommonToken OPENPAREN278 = default(CommonToken);
		CommonToken CLOSEPAREN280 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement279 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH277_tree = default(CommonTree);
		CommonTree OPENPAREN278_tree = default(CommonTree);
		CommonTree CLOSEPAREN280_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(390, 1);
		try
		{
			// Scrape.g:391:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:391:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(391, 4);
			WITH277=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement2317); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH277);

			DebugLocation(391, 9);
			OPENPAREN278=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2319); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN278);

			DebugLocation(391, 19);
			// Scrape.g:391:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==FIELD_TERMINATOR||LA60_1==ROW_TERMINATOR))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:391:19: fileTableWithVariablesStatement
					{
					DebugLocation(391, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2321);
					fileTableWithVariablesStatement279=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement279.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(391, 52);
			CLOSEPAREN280=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2324); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN280);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(391, 66);
				// Scrape.g:391:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(391, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(391, 73);
				// Scrape.g:391:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(391, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 65);
			LeaveRule("fileTableWithStatement", 65);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:394:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 66);
		TraceIn("fileTableWithVariablesStatement", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA282 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement281 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement283 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(394, 1);
		try
		{
			// Scrape.g:395:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:395:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(395, 4);
			// Scrape.g:395:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==FIELD_TERMINATOR||LA61_1==ROW_TERMINATOR))
				{
					int LA61_2 = input.LA(2);

					if ((LA61_2==EQUALS))
					{
						int LA61_3 = input.LA(3);

						if ((LA61_3==STRING_LITERAL))
						{
							int LA61_4 = input.LA(4);

							if ((LA61_4==COMMA))
							{
								alt61 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:395:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(395, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2347);
					fileTableWithVariableStatement281=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement281.Tree);
					DebugLocation(395, 36);
					COMMA282=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2349); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA282);


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(395, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2353);
			fileTableWithVariableStatement283=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement283.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 395:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(395, 78);
				// Scrape.g:395:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(395, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 66);
			LeaveRule("fileTableWithVariablesStatement", 66);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:398:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 67);
		TraceIn("fileTableWithVariableStatement", 67);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set284 = default(CommonToken);
		CommonToken EQUALS285 = default(CommonToken);
		CommonToken STRING_LITERAL286 = default(CommonToken);

		CommonTree set284_tree = default(CommonTree);
		CommonTree EQUALS285_tree = default(CommonTree);
		CommonTree STRING_LITERAL286_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(398, 1);
		try
		{
			// Scrape.g:399:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:399:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(399, 39);

			set284=(CommonToken)input.LT(1);
			set284=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set284), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(399, 47);
			EQUALS285=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2378); if (state.failed) return retval;
			DebugLocation(399, 49);
			STRING_LITERAL286=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2381); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL286_tree = (CommonTree)adaptor.Create(STRING_LITERAL286);
			adaptor.AddChild(root_0, STRING_LITERAL286_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 67);
			LeaveRule("fileTableWithVariableStatement", 67);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:402:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 68);
		TraceIn("tableColumnArgs", 68);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA288 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg287 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg289 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA288_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(402, 1);
		try
		{
			// Scrape.g:403:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:403:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(403, 4);
			// Scrape.g:403:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==ID))
				{
					int LA62_2 = input.LA(2);

					if ((LA62_2==FLOAT||LA62_2==IDENTITY||LA62_2==INTEGER||LA62_2==STRING))
					{
						int LA62_3 = input.LA(3);

						if ((LA62_3==COMMA))
						{
							alt62 = 1;
						}


					}


				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:403:5: tableColumnArg COMMA
					{
					DebugLocation(403, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2393);
					tableColumnArg287=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg287.Tree);
					DebugLocation(403, 20);
					COMMA288=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2395); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA288);


					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(403, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2399);
			tableColumnArg289=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg289.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(403, 46);
				// Scrape.g:403:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(403, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(403, 66);
				// Scrape.g:403:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(403, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 68);
			LeaveRule("tableColumnArgs", 68);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:406:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 69);
		TraceIn("tableColumnArg", 69);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID290 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType291 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID290_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(406, 1);
		try
		{
			// Scrape.g:407:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:407:4: ID dataType
			{
			DebugLocation(407, 4);
			ID290=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID290);

			DebugLocation(407, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2422);
			dataType291=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType291.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(407, 19);
				// Scrape.g:407:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(407, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(407, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(407, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 69);
			LeaveRule("tableColumnArg", 69);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:410:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 70);
		TraceIn("dataType", 70);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set292 = default(CommonToken);

		CommonTree set292_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(410, 1);
		try
		{
			// Scrape.g:411:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(411, 2);

			set292=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set292));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 70);
			LeaveRule("dataType", 70);
			LeaveRule_dataType();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred30_Scrape_fragment();
	partial void LeaveRule_synpred30_Scrape_fragment();

	// $ANTLR start synpred30_Scrape
	private void synpred30_Scrape_fragment()
	{
		EnterRule_synpred30_Scrape_fragment();
		EnterRule("synpred30_Scrape_fragment", 100);
		TraceIn("synpred30_Scrape_fragment", 100);
		try
		{
			// Scrape.g:190:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:190:4: mathExpression
			{
			DebugLocation(190, 4);
			PushFollow(Follow._mathExpression_in_synpred30_Scrape959);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_Scrape_fragment", 100);
			LeaveRule("synpred30_Scrape_fragment", 100);
			LeaveRule_synpred30_Scrape_fragment();
		}
	}
	// $ANTLR end synpred30_Scrape

	partial void EnterRule_synpred61_Scrape_fragment();
	partial void LeaveRule_synpred61_Scrape_fragment();

	// $ANTLR start synpred61_Scrape
	private void synpred61_Scrape_fragment()
	{
		EnterRule_synpred61_Scrape_fragment();
		EnterRule("synpred61_Scrape_fragment", 131);
		TraceIn("synpred61_Scrape_fragment", 131);
		try
		{
			// Scrape.g:284:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:284:12: selectArgs COMMA
			{
			DebugLocation(284, 12);
			PushFollow(Follow._selectArgs_in_synpred61_Scrape1580);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(284, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred61_Scrape1582); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_Scrape_fragment", 131);
			LeaveRule("synpred61_Scrape_fragment", 131);
			LeaveRule_synpred61_Scrape_fragment();
		}
	}
	// $ANTLR end synpred61_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program232 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program247 = new BitSet(new ulong[]{0xB280110240000UL,0x101C00000800000UL});
		public static readonly BitSet _noBraceBlock_in_program249 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition285 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition287 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition289 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition291 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition294 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _block_in_procedureDefinition296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatment_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable380 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _TABLE_in_truncateTable382 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_truncateTable384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall406 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_procedureCall408 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall410 = new BitSet(new ulong[]{0x10280000050000UL,0x40000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall412 = new BitSet(new ulong[]{0x10280000050000UL,0x40000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList438 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList440 = new BitSet(new ulong[]{0x10280000040000UL,0x40000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement476 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement478 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement480 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement482 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList506 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList508 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest532 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _TEST_in_proxyTest534 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest536 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest538 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement555 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_whileStatement557 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_whileStatement559 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_whileStatement561 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _block_in_whileStatement563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement585 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement587 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _VAR_in_eachStatement589 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_eachStatement593 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _IN_in_eachStatement595 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_eachStatement599 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement601 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _block_in_eachStatement603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock628 = new BitSet(new ulong[]{0xB280110240002UL,0x101C00000800000UL});
		public static readonly BitSet _OPENBRACE_in_block649 = new BitSet(new ulong[]{0xB280110248000UL,0x101C00000800000UL});
		public static readonly BitSet _statement_in_block651 = new BitSet(new ulong[]{0xB280110248000UL,0x101C00000800000UL});
		public static readonly BitSet _CLOSEBRACE_in_block654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression674 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression676 = new BitSet(new ulong[]{0x10280000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression678 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _TO_in_expandExpression680 = new BitSet(new ulong[]{0x10280000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression682 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression684 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _expandBlock_in_expandExpression686 = new BitSet(new ulong[]{0x2UL,0x80UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock711 = new BitSet(new ulong[]{0x10280000048000UL,0x800000040000120UL});
		public static readonly BitSet _mathExpression_in_expandBlock713 = new BitSet(new ulong[]{0x10280000048000UL,0x800000040000120UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion764 = new BitSet(new ulong[]{0x280000040000UL,0x40000100UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadPageExpresssion767 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _tableHint_in_downloadPageExpresssion769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression781 = new BitSet(new ulong[]{0x280000040000UL,0x40000100UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadImageExpression784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadExpressionArg795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadExpressionArg800 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _sqlStatement_in_downloadExpressionArg803 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadExpressionArg805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_downloadExpressionArg811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference857 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _DOT_in_tableMemberReference859 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement887 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement889 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement891 = new BitSet(new ulong[]{0x1028020C040000UL,0x800000040800120UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement914 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement916 = new BitSet(new ulong[]{0x1028020C040000UL,0x800000040800120UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator939 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator941 = new BitSet(new ulong[]{0x10000000040000UL,0x40000020UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1000 = new BitSet(new ulong[]{0x8000000000000002UL,0x1000UL});
		public static readonly BitSet _set_in_mathExpression1003 = new BitSet(new ulong[]{0x10280000040000UL,0x800000040000120UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1014 = new BitSet(new ulong[]{0x8000000000000002UL,0x1000UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1032 = new BitSet(new ulong[]{0x1000042UL});
		public static readonly BitSet _set_in_mathExpressionGroup1035 = new BitSet(new ulong[]{0x10280000040000UL,0x800000040000120UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1046 = new BitSet(new ulong[]{0x1000042UL});
		public static readonly BitSet _variableReference_in_atom1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_atom1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1094 = new BitSet(new ulong[]{0x10280000040000UL,0x800000040000120UL});
		public static readonly BitSet _mathExpression_in_atom1097 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1141 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_insertStatement1143 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1160 = new BitSet(new ulong[]{0x10280000040000UL,0x800000040000120UL});
		public static readonly BitSet _mathExpression_in_insertStatement1162 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1178 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_insertStatement1180 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatment1207 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_updateStatment1209 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _setArgs_in_updateStatment1211 = new BitSet(new ulong[]{0x8000000002UL,0x80000000000000UL});
		public static readonly BitSet _fromStatement_in_updateStatment1213 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _whereStatement_in_updateStatment1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setArgs1248 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _setArg_in_setArgs1251 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_setArgs1253 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _setArg_in_setArgs1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_setArg1277 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_setArg1279 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _selectArg_in_setArg1281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1305 = new BitSet(new ulong[]{0x8000000002UL,0x80000000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1307 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1337 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _boolExpression_in_whereStatement1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1359 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_fromStatement1363 = new BitSet(new ulong[]{0x40880000000002UL});
		public static readonly BitSet _ID_in_fromStatement1367 = new BitSet(new ulong[]{0x40800000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1397 = new BitSet(new ulong[]{0x20C000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1405 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_fromStatement1407 = new BitSet(new ulong[]{0x20C000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1409 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_fromStatement1411 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_fromStatement1413 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _tableHint_in_fromStatement1415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_tableHint1446 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_tableHint1449 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _hint_in_tableHint1452 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_tableHint1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THREAD_in_hint1466 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_hint1468 = new BitSet(new ulong[]{0x10000000000000UL});
		public static readonly BitSet _INT_in_hint1470 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1491 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1495 = new BitSet(new ulong[]{0x80000000000UL,0x1000000000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1499 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_innerJoinStatement1502 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1504 = new BitSet(new ulong[]{0x40800000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_tableGenerationClause1540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_tableGenerationClause1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_tableGenerationClause1550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1577 = new BitSet(new ulong[]{0x10280000040800UL,0x40000820UL});
		public static readonly BitSet _selectArgs_in_selectStatement1580 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1582 = new BitSet(new ulong[]{0x10280000040800UL,0x40000820UL});
		public static readonly BitSet _selectArgs_in_selectStatement1586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1600 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1628 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _PLUS_in_selectArgs1630 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _selectArg_in_selectArgs1634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1670 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1672 = new BitSet(new ulong[]{0x60000000UL,0x10000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1676 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _caseExpression_in_caseStatement1678 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _END_in_caseStatement1682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1699 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _selectArg_in_caseStatement1701 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1703 = new BitSet(new ulong[]{0x60000000UL,0x10000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1707 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _caseExpression_in_caseStatement1709 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _END_in_caseStatement1713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1757 = new BitSet(new ulong[]{0x10000000000000UL,0x40000020UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1759 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1761 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1784 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1786 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1788 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1811 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _OR_in_boolExpression1814 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _andExpression_in_boolExpression1817 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _boolTerm_in_andExpression1831 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1834 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _boolTerm_in_andExpression1837 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1852 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1854 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1872 = new BitSet(new ulong[]{0x180030080000002UL,0x10UL});
		public static readonly BitSet _boolOperator_in_boolTerm1875 = new BitSet(new ulong[]{0x10280000040000UL,0x40000820UL});
		public static readonly BitSet _selectArg_in_boolTerm1878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1886 = new BitSet(new ulong[]{0x10280000040000UL,0x40000928UL});
		public static readonly BitSet _boolExpression_in_boolTerm1889 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg1949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable1960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable1972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable1977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1994 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1996 = new BitSet(new ulong[]{0x2000000000000002UL,0x2000000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1998 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement2001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2028 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement2030 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2045 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement2047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2058 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _HTML_in_takeStatement2060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement2078 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement2080 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement2082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement2105 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement2107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2128 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _FILE_in_createTableStatement2130 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2132 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2134 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2136 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2139 = new BitSet(new ulong[]{0x1000000000000000UL,0x200000000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement2141 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement2144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2165 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement2167 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2169 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2171 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2173 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2192 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _MSSQL_in_createTableStatement2194 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2196 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2198 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2200 = new BitSet(new ulong[]{0x80000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2203 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _sqlTableWithStatement_in_createTableStatement2205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation2229 = new BitSet(new ulong[]{0x10280000040000UL,0x800000040000120UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_sqlTableWithStatement2244 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_sqlTableWithStatement2246 = new BitSet(new ulong[]{0x500000UL});
		public static readonly BitSet _sqlTableWithVariablesStatement_in_sqlTableWithStatement2248 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_sqlTableWithStatement2250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2271 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_sqlTableWithVariablesStatement2273 = new BitSet(new ulong[]{0x500000UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2277 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_sqlTableWithVariableStatement2294 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_sqlTableWithVariableStatement2303 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_sqlTableWithVariableStatement2306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement2317 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2319 = new BitSet(new ulong[]{0x800010000UL,0x400000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2321 = new BitSet(new ulong[]{0x800010000UL,0x400000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2347 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2349 = new BitSet(new ulong[]{0x800000000UL,0x400000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2369 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2378 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2393 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2395 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2420 = new BitSet(new ulong[]{0x20104000000000UL,0x20000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred30_Scrape959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred61_Scrape1580 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred61_Scrape1582 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
