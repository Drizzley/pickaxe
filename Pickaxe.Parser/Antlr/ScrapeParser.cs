//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-01-04 22:20:04

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NODES", "NOTEQUAL", "NULL", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "TRUNCATE", "VARIABLE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__109=109;
	public const int T__110=110;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMENT=18;
	public const int CREATE=19;
	public const int DIGIT=20;
	public const int DIV=21;
	public const int DOT=22;
	public const int DOWNLOAD_IMAGE=23;
	public const int DOWNLOAD_PAGE=24;
	public const int EACH=25;
	public const int ELSE=26;
	public const int END=27;
	public const int EQUALS=28;
	public const int EXEC=29;
	public const int EXPAND=30;
	public const int EXPAND_INTERATION_VARIABLE=31;
	public const int FIELD_TERMINATOR=32;
	public const int FILE=33;
	public const int FILE_TABLE=34;
	public const int FLOAT=35;
	public const int FROM=36;
	public const int GREATERTHAN=37;
	public const int GREATERTHANEQUAL=38;
	public const int HTML=39;
	public const int ID=40;
	public const int IDENTITY=41;
	public const int IN=42;
	public const int INNER_JOIN=43;
	public const int INSERT_DIRECTORY=44;
	public const int INSERT_INTO=45;
	public const int INSERT_INTO_DIRECTORY=46;
	public const int INSERT_OVERWRITE=47;
	public const int INT=48;
	public const int INTEGER=49;
	public const int JOIN=50;
	public const int LESSTHAN=51;
	public const int LESSTHANEQUAL=52;
	public const int LETTER=53;
	public const int LINE_COMMENT_DASH=54;
	public const int LINE_COMMENT_SLASH=55;
	public const int LOCATION=56;
	public const int MATCH=57;
	public const int MEMBER_REFERENCE=58;
	public const int MINIS=59;
	public const int NEWLINE=60;
	public const int NODES=61;
	public const int NOTEQUAL=62;
	public const int NULL=63;
	public const int OPENBRACE=64;
	public const int OPENPAREN=65;
	public const int OR=66;
	public const int OTHERCHARS=67;
	public const int PICK=68;
	public const int PLUS=69;
	public const int POST_PICK=70;
	public const int PRE_PICK=71;
	public const int PROCEDURE=72;
	public const int PROGRAM=73;
	public const int PROXIES=74;
	public const int PROXY_LIST=75;
	public const int QUOTE=76;
	public const int REPLACE=77;
	public const int ROW_REFERENCE=78;
	public const int ROW_TERMINATOR=79;
	public const int SELECT=80;
	public const int SELECT_ALL=81;
	public const int SELECT_ARG=82;
	public const int SELECT_ID=83;
	public const int SELECT_STATEMENT=84;
	public const int STRING=85;
	public const int STRING_LITERAL=86;
	public const int TABLE_COLUMN_ARG=87;
	public const int TABLE_COLUMN_ARGS=88;
	public const int TABLE_MEMBER_REFERENCE=89;
	public const int TABLE_VARIABLE_REFERENCE=90;
	public const int TAKE=91;
	public const int TAKE_ATTRIBUTE=92;
	public const int TAKE_HTML=93;
	public const int TAKE_TEXT=94;
	public const int TEST=95;
	public const int TEXT=96;
	public const int THEN=97;
	public const int TO=98;
	public const int TRUNCATE=99;
	public const int VARIABLE=100;
	public const int VARIABLE_DECLARATION=101;
	public const int VARIABLE_REFERENCE=102;
	public const int WHEN=103;
	public const int WHEN_BOOL_STATEMENT=104;
	public const int WHEN_LITERAL_STATEMENT=105;
	public const int WHERE=106;
	public const int WITH=107;
	public const int WS=108;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:62:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(62, 1);
		try
		{
			// Scrape.g:63:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:63:4: noBraceBlock EOF
				{
				DebugLocation(63, 4);
				PushFollow(Follow._noBraceBlock_in_program217);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(63, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 63:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(63, 24);
					// Scrape.g:63:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(63, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(63, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:64:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(64, 4);
				PushFollow(Follow._proxyStatement_in_program232);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(64, 19);
				PushFollow(Follow._noBraceBlock_in_program234);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(64, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program236); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(64, 39);
					// Scrape.g:64:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(64, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(64, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:65:4: procedureDefinition
				{
				DebugLocation(65, 4);
				PushFollow(Follow._procedureDefinition_in_program251);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(65, 27);
					// Scrape.g:65:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(65, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:68:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(68, 1);
		try
		{
			// Scrape.g:69:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:69:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(69, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition270); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(69, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition272); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(69, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition274); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(69, 27);
			// Scrape.g:69:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:69:27: tableColumnArgs
					{
					DebugLocation(69, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition276);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(69, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition279); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(69, 55);
			PushFollow(Follow._block_in_procedureDefinition281);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArgs, PROCEDURE, block, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 69:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(69, 64);
				// Scrape.g:69:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(69, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(69, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(69, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(69, 85);
				// Scrape.g:69:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(69, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:72:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(72, 1);
		try
		{
			// Scrape.g:73:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable )
			int alt3=7;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case ID:
				{
				alt3 = 3;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 4;
				}
				break;
			case EACH:
				{
				alt3 = 5;
				}
				break;
			case EXEC:
				{
				alt3 = 6;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:73:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._createTableStatement_in_statement309);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:74:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._sqlStatement_in_statement314);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:75:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement319);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:76:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._insertStatement_in_statement324);
				insertStatement16=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:77:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._eachStatement_in_statement329);
				eachStatement17=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:78:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._procedureCall_in_statement334);
				procedureCall18=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:79:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._truncateTable_in_statement339);
				truncateTable19=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable19.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:82:1: truncateTable : TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE20 = default(CommonToken);
		CommonToken ID21 = default(CommonToken);

		CommonTree TRUNCATE20_tree = default(CommonTree);
		CommonTree ID21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(82, 1);
		try
		{
			// Scrape.g:83:2: ( TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:83:4: TRUNCATE ID
			{
			DebugLocation(83, 4);
			TRUNCATE20=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable350); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE20);

			DebugLocation(83, 13);
			ID21=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable352); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID21);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 83:16: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(83, 19);
				// Scrape.g:83:19: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(83, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(83, 30);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID21));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:87:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC22 = default(CommonToken);
		CommonToken ID23 = default(CommonToken);
		CommonToken OPENPAREN24 = default(CommonToken);
		CommonToken CLOSEPAREN26 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC22_tree = default(CommonTree);
		CommonTree ID23_tree = default(CommonTree);
		CommonTree OPENPAREN24_tree = default(CommonTree);
		CommonTree CLOSEPAREN26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(87, 1);
		try
		{
			// Scrape.g:88:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:88:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(88, 5);
			EXEC22=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall374); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC22);

			DebugLocation(88, 10);
			ID23=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID23);

			DebugLocation(88, 13);
			OPENPAREN24=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall378); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN24);

			DebugLocation(88, 23);
			// Scrape.g:88:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ID||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:88:23: procedureCallList
					{
					DebugLocation(88, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall380);
					procedureCallList25=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList25.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(88, 42);
			CLOSEPAREN26=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall383); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN26);



			{
			// AST REWRITE
			// elements: ID, EXEC, procedureCallList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 88:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(88, 56);
				// Scrape.g:88:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(88, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(88, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(88, 66);
				// Scrape.g:88:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(88, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:91:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(91, 1);
		try
		{
			// Scrape.g:92:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:92:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(92, 4);
			// Scrape.g:92:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:92:5: callArgs COMMA
					{
					DebugLocation(92, 5);
					PushFollow(Follow._callArgs_in_procedureCallList406);
					callArgs27=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs27.Tree);
					DebugLocation(92, 14);
					COMMA28=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA28);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(92, 22);
			PushFollow(Follow._callArgs_in_procedureCallList412);
			callArgs29=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs29.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 92:31: -> ( callArgs )*
			{
				DebugLocation(92, 34);
				// Scrape.g:92:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(92, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:95:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(95, 1);
		try
		{
			// Scrape.g:96:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==ID||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:96:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(96, 4);
				PushFollow(Follow._expandVar_in_callArgs428);
				expandVar30=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar30.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:97:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(97, 4);
				STRING_LITERAL31=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs433); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL31_tree = (CommonTree)adaptor.Create(STRING_LITERAL31);
				adaptor.AddChild(root_0, STRING_LITERAL31_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:100:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES32 = default(CommonToken);
		CommonToken OPENPAREN33 = default(CommonToken);
		CommonToken CLOSEPAREN35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES32_tree = default(CommonTree);
		CommonTree OPENPAREN33_tree = default(CommonTree);
		CommonTree CLOSEPAREN35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(100, 1);
		try
		{
			// Scrape.g:101:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:101:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(101, 4);
			PROXIES32=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement444); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES32);

			DebugLocation(101, 12);
			OPENPAREN33=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement446); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN33);

			DebugLocation(101, 22);
			PushFollow(Follow._proxyList_in_proxyStatement448);
			proxyList34=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList34.Tree);
			DebugLocation(101, 32);
			CLOSEPAREN35=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement450); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN35);

			DebugLocation(101, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement452);
			proxyTest36=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest36.Tree);


			{
			// AST REWRITE
			// elements: PROXIES, proxyTest, proxyList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 101:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(101, 56);
				// Scrape.g:101:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(101, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(101, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(101, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:104:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL37 = default(CommonToken);
		CommonToken COMMA38 = default(CommonToken);
		CommonToken STRING_LITERAL39 = default(CommonToken);

		CommonTree STRING_LITERAL37_tree = default(CommonTree);
		CommonTree COMMA38_tree = default(CommonTree);
		CommonTree STRING_LITERAL39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(104, 1);
		try
		{
			// Scrape.g:105:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:105:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(105, 4);
			// Scrape.g:105:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:105:5: STRING_LITERAL COMMA
					{
					DebugLocation(105, 5);
					STRING_LITERAL37=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList474); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL37);

					DebugLocation(105, 20);
					COMMA38=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList476); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA38);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(105, 28);
			STRING_LITERAL39=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL39);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 105:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(105, 46);
				// Scrape.g:105:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(105, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(105, 59);
				// Scrape.g:105:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(105, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:108:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH40 = default(CommonToken);
		CommonToken TEST41 = default(CommonToken);
		CommonToken OPENBRACE42 = default(CommonToken);
		CommonToken CLOSEBRACE44 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH40_tree = default(CommonTree);
		CommonTree TEST41_tree = default(CommonTree);
		CommonTree OPENBRACE42_tree = default(CommonTree);
		CommonTree CLOSEBRACE44_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(108, 1);
		try
		{
			// Scrape.g:109:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:109:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(109, 4);
			WITH40=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest500); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH40);

			DebugLocation(109, 9);
			TEST41=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest502); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST41);

			DebugLocation(109, 14);
			OPENBRACE42=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest504); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE42);

			DebugLocation(109, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest506);
			sqlStatement43=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement43.Tree);
			DebugLocation(109, 37);
			CLOSEBRACE44=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest508); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE44);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 109:48: -> sqlStatement
			{
				DebugLocation(109, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:112:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 11);
		TraceIn("eachStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH45 = default(CommonToken);
		CommonToken OPENPAREN46 = default(CommonToken);
		CommonToken IN47 = default(CommonToken);
		CommonToken CLOSEPAREN48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH45_tree = default(CommonTree);
		CommonTree OPENPAREN46_tree = default(CommonTree);
		CommonTree IN47_tree = default(CommonTree);
		CommonTree CLOSEPAREN48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(112, 1);
		try
		{
			// Scrape.g:113:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:113:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(113, 4);
			EACH45=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH45);

			DebugLocation(113, 9);
			OPENPAREN46=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN46);

			DebugLocation(113, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement529); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(113, 24);
			IN47=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement531); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN47);

			DebugLocation(113, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement535); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(113, 32);
			CLOSEPAREN48=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement537); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN48);

			DebugLocation(113, 43);
			PushFollow(Follow._block_in_eachStatement539);
			block49=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block49.Tree);


			{
			// AST REWRITE
			// elements: EACH, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 113:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(113, 52);
				// Scrape.g:113:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(113, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(113, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(113, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(113, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 11);
			LeaveRule("eachStatement", 11);
			LeaveRule_eachStatement();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:116:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 12);
		TraceIn("noBraceBlock", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(116, 1);
		try
		{
			// Scrape.g:117:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:117:4: ( statement )*
			{
			DebugLocation(117, 4);
			// Scrape.g:117:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||LA8_1==TRUNCATE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:117:4: statement
					{
					DebugLocation(117, 4);
					PushFollow(Follow._statement_in_noBraceBlock564);
					statement50=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement50.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 117:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(117, 18);
				// Scrape.g:117:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(117, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(117, 26);
				// Scrape.g:117:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(117, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 12);
			LeaveRule("noBraceBlock", 12);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:120:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 13);
		TraceIn("block", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE51 = default(CommonToken);
		CommonToken CLOSEBRACE53 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE51_tree = default(CommonTree);
		CommonTree CLOSEBRACE53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(120, 1);
		try
		{
			// Scrape.g:121:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:121:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(121, 4);
			OPENBRACE51=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block585); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE51);

			DebugLocation(121, 14);
			// Scrape.g:121:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||LA9_1==TRUNCATE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:121:14: statement
					{
					DebugLocation(121, 14);
					PushFollow(Follow._statement_in_block587);
					statement52=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement52.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(121, 25);
			CLOSEBRACE53=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block590); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE53);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 121:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(121, 39);
				// Scrape.g:121:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(121, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(121, 47);
				// Scrape.g:121:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(121, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 13);
			LeaveRule("block", 13);
			LeaveRule_block();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:124:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 14);
		TraceIn("expandExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken TO57 = default(CommonToken);
		CommonToken CLOSEPAREN59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar58 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree TO57_tree = default(CommonTree);
		CommonTree CLOSEPAREN59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(124, 1);
		try
		{
			// Scrape.g:125:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:125:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(125, 4);
			EXPAND54=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression610); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND54);

			DebugLocation(125, 11);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression612); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(125, 21);
			PushFollow(Follow._expandVar_in_expandExpression614);
			expandVar56=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar56.Tree);
			DebugLocation(125, 31);
			TO57=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression616); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO57);

			DebugLocation(125, 34);
			PushFollow(Follow._expandVar_in_expandExpression618);
			expandVar58=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar58.Tree);
			DebugLocation(125, 44);
			CLOSEPAREN59=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression620); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN59);

			DebugLocation(125, 55);
			// Scrape.g:125:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:125:55: expandBlock
					{
					DebugLocation(125, 55);
					PushFollow(Follow._expandBlock_in_expandExpression622);
					expandBlock60=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock60.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandVar, expandVar, expandBlock, EXPAND
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 125:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(125, 71);
				// Scrape.g:125:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(125, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(125, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(125, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(125, 100);
				// Scrape.g:125:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(125, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 14);
			LeaveRule("expandExpression", 14);
			LeaveRule_expandExpression();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:128:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 15);
		TraceIn("expandBlock", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(128, 1);
		try
		{
			// Scrape.g:129:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:129:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(129, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock647); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(129, 14);
			// Scrape.g:129:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==ID||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==109))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:129:14: mathExpression
					{
					DebugLocation(129, 14);
					PushFollow(Follow._mathExpression_in_expandBlock649);
					mathExpression62=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression62.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(129, 30);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock652); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 129:41: -> ( mathExpression )*
			{
				DebugLocation(129, 44);
				// Scrape.g:129:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(129, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 15);
			LeaveRule("expandBlock", 15);
			LeaveRule_expandBlock();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:132:1: expandVar : ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 16);
		TraceIn("expandVar", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT64 = default(CommonToken);
		CommonToken ID66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT64_tree = default(CommonTree);
		CommonTree ID66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(132, 1);
		try
		{
			// Scrape.g:133:2: ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==ID))
			{
				int LA12_2 = input.LA(2);

				if ((LA12_2==DOT))
				{
					alt12 = 2;
				}
				else if ((LA12_2==EOF||(LA12_2>=CLOSEPAREN && LA12_2<=COMMA)||LA12_2==ID||LA12_2==INT||LA12_2==STRING_LITERAL||LA12_2==TO))
				{
					alt12 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:133:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 4);
				INT64=(CommonToken)Match(input,INT,Follow._INT_in_expandVar668); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT64_tree = (CommonTree)adaptor.Create(INT64);
				adaptor.AddChild(root_0, INT64_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:134:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 4);
				PushFollow(Follow._tableMemberReference_in_expandVar673);
				tableMemberReference65=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference65.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:135:4: ID
				{
				DebugLocation(135, 4);
				ID66=(CommonToken)Match(input,ID,Follow._ID_in_expandVar678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID66);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 135:7: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(135, 10);
					// Scrape.g:135:10: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(135, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID66), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 16);
			LeaveRule("expandVar", 16);
			LeaveRule_expandVar();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:138:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 17);
		TraceIn("downloadExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(138, 1);
		try
		{
			// Scrape.g:139:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:139:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression696);
				downloadPageExpresssion67=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion67.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:140:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression701);
				downloadImageExpression68=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression68.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 17);
			LeaveRule("downloadExpression", 17);
			LeaveRule_downloadExpression();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:143:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 18);
		TraceIn("downloadPageExpresssion", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE69 = default(CommonToken);
		CommonToken STRING_LITERAL70 = default(CommonToken);
		CommonToken OPENPAREN71 = default(CommonToken);
		CommonToken CLOSEPAREN73 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE74 = default(CommonToken);
		CommonToken ID75 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE76 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE69_tree = default(CommonTree);
		CommonTree STRING_LITERAL70_tree = default(CommonTree);
		CommonTree OPENPAREN71_tree = default(CommonTree);
		CommonTree CLOSEPAREN73_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE74_tree = default(CommonTree);
		CommonTree ID75_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE76_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(143, 1);
		try
		{
			// Scrape.g:144:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_PAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==ID))
				{
					int LA15_3 = input.LA(3);

					if ((LA15_3==DOT))
					{
						alt15 = 3;
					}
					else if ((LA15_3==EOF||(LA15_3>=CLOSEBRACE && LA15_3<=CLOSEPAREN)||LA15_3==CREATE||LA15_3==EACH||LA15_3==EXEC||LA15_3==ID||(LA15_3>=INNER_JOIN && LA15_3<=INSERT_INTO)||LA15_3==INSERT_OVERWRITE||LA15_3==JOIN||LA15_3==SELECT||LA15_3==TRUNCATE||LA15_3==WHERE))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA15_2==OPENPAREN||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:144:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 17);
				DOWNLOAD_PAGE69=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion712); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_PAGE69_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE69);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE69_tree, root_0);
				}
				DebugLocation(144, 19);
				// Scrape.g:144:19: ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==OPENPAREN))
				{
					alt14 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:144:20: STRING_LITERAL
					{
					DebugLocation(144, 20);
					STRING_LITERAL70=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion716); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL70_tree = (CommonTree)adaptor.Create(STRING_LITERAL70);
					adaptor.AddChild(root_0, STRING_LITERAL70_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:144:37: OPENPAREN sqlStatement CLOSEPAREN
					{
					DebugLocation(144, 37);
					OPENPAREN71=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadPageExpresssion720); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPENPAREN71_tree = (CommonTree)adaptor.Create(OPENPAREN71);
					adaptor.AddChild(root_0, OPENPAREN71_tree);
					}
					DebugLocation(144, 47);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion722);
					sqlStatement72=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement72.Tree);
					DebugLocation(144, 60);
					CLOSEPAREN73=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadPageExpresssion724); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CLOSEPAREN73_tree = (CommonTree)adaptor.Create(CLOSEPAREN73);
					adaptor.AddChild(root_0, CLOSEPAREN73_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:145:4: DOWNLOAD_PAGE ID
				{
				DebugLocation(145, 4);
				DOWNLOAD_PAGE74=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion730); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE74);

				DebugLocation(145, 18);
				ID75=(CommonToken)Match(input,ID,Follow._ID_in_downloadPageExpresssion732); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID75);



				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 145:21: -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(145, 24);
					// Scrape.g:145:24: ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(145, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(145, 40);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID75));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:146:4: DOWNLOAD_PAGE tableMemberReference
				{
				DebugLocation(146, 4);
				DOWNLOAD_PAGE76=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion746); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE76);

				DebugLocation(146, 18);
				PushFollow(Follow._tableMemberReference_in_downloadPageExpresssion748);
				tableMemberReference77=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference77.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE, tableMemberReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 146:39: -> ^( DOWNLOAD_PAGE tableMemberReference )
				{
					DebugLocation(146, 42);
					// Scrape.g:146:42: ^( DOWNLOAD_PAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(146, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(146, 58);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 18);
			LeaveRule("downloadPageExpresssion", 18);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:149:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 19);
		TraceIn("downloadImageExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE78 = default(CommonToken);
		CommonToken STRING_LITERAL79 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		CommonToken ID82 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE83 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE78_tree = default(CommonTree);
		CommonTree STRING_LITERAL79_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		CommonTree ID82_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(149, 1);
		try
		{
			// Scrape.g:150:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==DOWNLOAD_IMAGE))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==ID))
				{
					int LA17_3 = input.LA(3);

					if ((LA17_3==DOT))
					{
						alt17 = 3;
					}
					else if ((LA17_3==EOF||(LA17_3>=CLOSEBRACE && LA17_3<=CLOSEPAREN)||LA17_3==CREATE||LA17_3==EACH||LA17_3==EXEC||LA17_3==ID||(LA17_3>=INNER_JOIN && LA17_3<=INSERT_INTO)||LA17_3==INSERT_OVERWRITE||LA17_3==JOIN||LA17_3==SELECT||LA17_3==TRUNCATE||LA17_3==WHERE))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_2==SELECT||LA17_2==STRING_LITERAL))
				{
					alt17 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:150:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 18);
				DOWNLOAD_IMAGE78=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_IMAGE78_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE78);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE78_tree, root_0);
				}
				DebugLocation(150, 20);
				// Scrape.g:150:20: ( STRING_LITERAL | sqlStatement )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==STRING_LITERAL))
				{
					alt16 = 1;
				}
				else if ((LA16_1==SELECT))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:150:21: STRING_LITERAL
					{
					DebugLocation(150, 21);
					STRING_LITERAL79=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression771); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL79_tree = (CommonTree)adaptor.Create(STRING_LITERAL79);
					adaptor.AddChild(root_0, STRING_LITERAL79_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:150:38: sqlStatement
					{
					DebugLocation(150, 38);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression775);
					sqlStatement80=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement80.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:151:4: DOWNLOAD_IMAGE ID
				{
				DebugLocation(151, 4);
				DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression781); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE81);

				DebugLocation(151, 19);
				ID82=(CommonToken)Match(input,ID,Follow._ID_in_downloadImageExpression783); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID82);



				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:22: -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(151, 25);
					// Scrape.g:151:25: ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(151, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID82));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:152:4: DOWNLOAD_IMAGE tableMemberReference
				{
				DebugLocation(152, 4);
				DOWNLOAD_IMAGE83=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression797); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE83);

				DebugLocation(152, 19);
				PushFollow(Follow._tableMemberReference_in_downloadImageExpression799);
				tableMemberReference84=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference84.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 152:40: -> ^( DOWNLOAD_IMAGE tableMemberReference )
				{
					DebugLocation(152, 43);
					// Scrape.g:152:43: ^( DOWNLOAD_IMAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(152, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(152, 60);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 19);
			LeaveRule("downloadImageExpression", 19);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:156:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 20);
		TraceIn("tableMemberReference", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT85 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(156, 1);
		try
		{
			// Scrape.g:157:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:157:4: t= ID DOT m= ID
			{
			DebugLocation(157, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference822); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(157, 9);
			DOT85=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference824); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT85);

			DebugLocation(157, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference828); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 157:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(157, 21);
				// Scrape.g:157:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(157, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(157, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(157, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 20);
			LeaveRule("tableMemberReference", 20);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:160:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 21);
		TraceIn("variableDeclarationStatement", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID86 = default(CommonToken);
		CommonToken EQUALS87 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID86_tree = default(CommonTree);
		CommonTree EQUALS87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(160, 1);
		try
		{
			// Scrape.g:161:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:161:4: ID EQUALS assignmentExpression
			{
			DebugLocation(161, 4);
			ID86=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement852); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID86);

			DebugLocation(161, 7);
			EQUALS87=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement854); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS87);

			DebugLocation(161, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement856);
			assignmentExpression88=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression88.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 161:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(161, 38);
				// Scrape.g:161:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(161, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(161, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(161, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 21);
			LeaveRule("variableDeclarationStatement", 21);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:164:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 22);
		TraceIn("assignmentExpression", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(164, 1);
		try
		{
			// Scrape.g:165:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 109:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:165:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression877);
				mathExpression89=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression89.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:166:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression882);
				downloadExpression90=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression90.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:167:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression887);
				expandExpression91=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression91.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:168:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression892);
				sqlStatement92=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement92.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 22);
			LeaveRule("assignmentExpression", 22);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:171:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 23);
		TraceIn("mathExpression", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set94 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set94_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(171, 5);
		try
		{
			// Scrape.g:172:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:172:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(172, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression908);
			mathExpressionGroup93=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup93.Tree);
			DebugLocation(172, 29);
			// Scrape.g:172:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:172:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(172, 46);

					set94=(CommonToken)input.LT(1);
					set94=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set94), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(172, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression922);
					mathExpressionGroup95=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup95.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 23);
			LeaveRule("mathExpression", 23);
			LeaveRule_mathExpression();
		}
		DebugLocation(173, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:175:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 24);
		TraceIn("mathExpressionGroup", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set97 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(175, 3);
		try
		{
			// Scrape.g:176:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:176:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(176, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup940);
			atom96=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom96.Tree);
			DebugLocation(176, 9);
			// Scrape.g:176:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:176:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(176, 28);

					set97=(CommonToken)input.LT(1);
					set97=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set97), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(176, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup954);
					atom98=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom98.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 24);
			LeaveRule("mathExpressionGroup", 24);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(177, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:179:1: atom : ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 25);
		TraceIn("atom", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID99 = default(CommonToken);
		CommonToken char_literal100 = default(CommonToken);
		CommonToken OPENPAREN103 = default(CommonToken);
		CommonToken CLOSEPAREN105 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID99_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree OPENPAREN103_tree = default(CommonTree);
		CommonTree CLOSEPAREN105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(179, 5);
		try
		{
			// Scrape.g:180:6: ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=5;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==DOT))
				{
					alt21 = 3;
				}
				else if ((LA21_2==EOF||LA21_2==ASTERISK||(LA21_2>=CLOSEBRACE && LA21_2<=CLOSEPAREN)||LA21_2==CREATE||LA21_2==DIV||LA21_2==EACH||LA21_2==EXEC||LA21_2==ID||(LA21_2>=INSERT_DIRECTORY && LA21_2<=INSERT_INTO)||(LA21_2>=INSERT_OVERWRITE && LA21_2<=INT)||LA21_2==MINIS||LA21_2==NULL||LA21_2==OPENPAREN||LA21_2==PLUS||LA21_2==SELECT||LA21_2==STRING_LITERAL||LA21_2==TRUNCATE||LA21_2==109))
				{
					alt21 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 109:
				{
				alt21 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 4;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:180:8: ID
				{
				DebugLocation(180, 8);
				ID99=(CommonToken)Match(input,ID,Follow._ID_in_atom975); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID99);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 180:11: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(180, 14);
					// Scrape.g:180:14: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(180, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID99), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:181:5: '$'
				{
				DebugLocation(181, 5);
				char_literal100=(CommonToken)Match(input,109,Follow._109_in_atom988); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal100);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 181:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(181, 12);
					// Scrape.g:181:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(181, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:182:5: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 5);
				PushFollow(Follow._tableMemberReference_in_atom1000);
				tableMemberReference101=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference101.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:183:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 5);
				PushFollow(Follow._literal_in_atom1006);
				literal102=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal102.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:184:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 17);
				OPENPAREN103=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1015); if (state.failed) return retval;
				DebugLocation(184, 19);
				PushFollow(Follow._mathExpression_in_atom1018);
				mathExpression104=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression104.Tree);
				DebugLocation(184, 44);
				CLOSEPAREN105=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1020); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 25);
			LeaveRule("atom", 25);
			LeaveRule_atom();
		}
		DebugLocation(185, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:187:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 26);
		TraceIn("literal", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set106 = default(CommonToken);

		CommonTree set106_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(187, 1);
		try
		{
			// Scrape.g:188:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(188, 2);

			set106=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set106));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 26);
			LeaveRule("literal", 26);
			LeaveRule_literal();
		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:196:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 27);
		TraceIn("insertStatement", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO107 = default(CommonToken);
		CommonToken ID108 = default(CommonToken);
		CommonToken INSERT_DIRECTORY110 = default(CommonToken);
		CommonToken INSERT_OVERWRITE113 = default(CommonToken);
		CommonToken ID114 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO107_tree = default(CommonTree);
		CommonTree ID108_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY110_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE113_tree = default(CommonTree);
		CommonTree ID114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(196, 1);
		try
		{
			// Scrape.g:197:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:197:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(197, 4);
				INSERT_INTO107=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1062); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO107);

				DebugLocation(197, 16);
				ID108=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1064); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID108);

				DebugLocation(197, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1066);
				sqlStatement109=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement109.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(197, 34);
					// Scrape.g:197:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(197, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID108));
					DebugLocation(197, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:198:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(198, 4);
				INSERT_DIRECTORY110=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY110);

				DebugLocation(198, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1083);
				mathExpression111=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression111.Tree);
				DebugLocation(198, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1085);
				sqlStatement112=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement112.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, mathExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(198, 51);
					// Scrape.g:198:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(198, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(198, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:199:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(199, 4);
				INSERT_OVERWRITE113=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1099); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE113);

				DebugLocation(199, 21);
				ID114=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1101); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID114);

				DebugLocation(199, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1103);
				sqlStatement115=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement115.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 199:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(199, 39);
					// Scrape.g:199:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(199, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(199, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID114));
					DebugLocation(199, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 27);
			LeaveRule("insertStatement", 27);
			LeaveRule_insertStatement();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:204:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 28);
		TraceIn("sqlStatement", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(204, 1);
		try
		{
			// Scrape.g:205:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:205:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(205, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1127);
			selectStatement116=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement116.Tree);
			DebugLocation(205, 20);
			// Scrape.g:205:20: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:205:20: fromStatement
				{
				DebugLocation(205, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1129);
				fromStatement117=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement117.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(205, 35);
			// Scrape.g:205:35: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				int LA24_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Scrape_fragment)))
				{
					alt24 = 1;
				}
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:205:35: whereStatement
				{
				DebugLocation(205, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1132);
				whereStatement118=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement118.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: whereStatement, fromStatement, selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(205, 54);
				// Scrape.g:205:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(205, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(205, 89);
				// Scrape.g:205:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(205, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(205, 104);
				// Scrape.g:205:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(205, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 28);
			LeaveRule("sqlStatement", 28);
			LeaveRule_sqlStatement();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:208:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 29);
		TraceIn("whereStatement", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE119 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(208, 1);
		try
		{
			// Scrape.g:209:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:209:5: WHERE boolExpression
			{
			DebugLocation(209, 5);
			WHERE119=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1159); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE119);

			DebugLocation(209, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1161);
			boolExpression120=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression120.Tree);


			{
			// AST REWRITE
			// elements: WHERE, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 209:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(209, 29);
				// Scrape.g:209:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(209, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(209, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 29);
			LeaveRule("whereStatement", 29);
			LeaveRule_whereStatement();
		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:212:1: fromStatement : ( FROM ID ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) ( innerJoinStatement )? );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 30);
		TraceIn("fromStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FROM121 = default(CommonToken);
		CommonToken ID122 = default(CommonToken);
		CommonToken FROM124 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FROM121_tree = default(CommonTree);
		CommonTree ID122_tree = default(CommonTree);
		CommonTree FROM124_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(212, 1);
		try
		{
			// Scrape.g:213:2: ( FROM ID ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) ( innerJoinStatement )? )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==FROM))
			{
				int LA28_2 = input.LA(2);

				if ((LA28_2==ID))
				{
					alt28 = 1;
				}
				else if (((LA28_2>=DOWNLOAD_IMAGE && LA28_2<=DOWNLOAD_PAGE)||LA28_2==EXPAND))
				{
					alt28 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:213:4: FROM ID ( innerJoinStatement )?
				{
				DebugLocation(213, 4);
				FROM121=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM121);

				DebugLocation(213, 9);
				ID122=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID122);

				DebugLocation(213, 12);
				// Scrape.g:213:12: ( innerJoinStatement )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==INNER_JOIN||LA25_1==JOIN))
				{
					int LA25_2 = input.LA(2);

					if ((LA25_2==ID))
					{
						int LA25_3 = input.LA(3);

						if ((LA25_3==110))
						{
							int LA25_4 = input.LA(4);

							if ((LA25_4==ID))
							{
								int LA25_5 = input.LA(5);

								if ((LA25_5==DOT))
								{
									int LA25_6 = input.LA(6);

									if ((LA25_6==ID))
									{
										int LA25_7 = input.LA(7);

										if ((LA25_7==EQUALS))
										{
											int LA25_8 = input.LA(8);

											if ((LA25_8==ID))
											{
												int LA25_9 = input.LA(9);

												if ((LA25_9==DOT))
												{
													int LA25_10 = input.LA(10);

													if ((LA25_10==ID))
													{
														int LA25_11 = input.LA(11);

														if ((EvaluatePredicate(synpred44_Scrape_fragment)))
														{
															alt25 = 1;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:213:12: innerJoinStatement
					{
					DebugLocation(213, 12);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1185);
					innerJoinStatement123=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement123.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 213:32: -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ( innerJoinStatement )? )
				{
					DebugLocation(213, 35);
					// Scrape.g:213:35: ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(213, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(213, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID122));
					DebugLocation(213, 72);
					// Scrape.g:213:72: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(213, 72);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:214:4: FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) ( innerJoinStatement )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 8);
				FROM124=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM124_tree = (CommonTree)adaptor.Create(FROM124);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM124_tree, root_0);
				}
				DebugLocation(214, 10);
				// Scrape.g:214:10: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
				int alt26=3;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				switch (input.LA(1))
				{
				case DOWNLOAD_PAGE:
					{
					alt26 = 1;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt26 = 2;
					}
					break;
				case EXPAND:
					{
					alt26 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:214:11: downloadPageExpresssion
					{
					DebugLocation(214, 11);
					PushFollow(Follow._downloadPageExpresssion_in_fromStatement1208);
					downloadPageExpresssion125=downloadPageExpresssion();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion125.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:214:37: downloadImageExpression
					{
					DebugLocation(214, 37);
					PushFollow(Follow._downloadImageExpression_in_fromStatement1212);
					downloadImageExpression126=downloadImageExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression126.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Scrape.g:214:63: expandExpression
					{
					DebugLocation(214, 63);
					PushFollow(Follow._expandExpression_in_fromStatement1216);
					expandExpression127=expandExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression127.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(214, 81);
				// Scrape.g:214:81: ( innerJoinStatement )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==INNER_JOIN||LA27_1==JOIN))
				{
					int LA27_2 = input.LA(2);

					if ((EvaluatePredicate(synpred48_Scrape_fragment)))
					{
						alt27 = 1;
					}
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:214:81: innerJoinStatement
					{
					DebugLocation(214, 81);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1219);
					innerJoinStatement128=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, innerJoinStatement128.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 30);
			LeaveRule("fromStatement", 30);
			LeaveRule_fromStatement();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:217:1: innerJoinStatement : innerJoin ID 'on' tableMemberReference EQUALS tableMemberReference ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$ID] tableMemberReference tableMemberReference ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 31);
		TraceIn("innerJoinStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID130 = default(CommonToken);
		CommonToken string_literal131 = default(CommonToken);
		CommonToken EQUALS133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin129 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID130_tree = default(CommonTree);
		CommonTree string_literal131_tree = default(CommonTree);
		CommonTree EQUALS133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(217, 1);
		try
		{
			// Scrape.g:218:2: ( innerJoin ID 'on' tableMemberReference EQUALS tableMemberReference ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$ID] tableMemberReference tableMemberReference ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:218:4: innerJoin ID 'on' tableMemberReference EQUALS tableMemberReference ( innerJoinStatement )?
			{
			DebugLocation(218, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1231);
			innerJoin129=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin129.Tree);
			DebugLocation(218, 14);
			ID130=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1233); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID130);

			DebugLocation(218, 17);
			string_literal131=(CommonToken)Match(input,110,Follow._110_in_innerJoinStatement1235); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal131);

			DebugLocation(218, 22);
			PushFollow(Follow._tableMemberReference_in_innerJoinStatement1237);
			tableMemberReference132=tableMemberReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference132.Tree);
			DebugLocation(218, 43);
			EQUALS133=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_innerJoinStatement1239); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS133);

			DebugLocation(218, 50);
			PushFollow(Follow._tableMemberReference_in_innerJoinStatement1241);
			tableMemberReference134=tableMemberReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference134.Tree);
			DebugLocation(218, 71);
			// Scrape.g:218:71: ( innerJoinStatement )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==INNER_JOIN||LA29_1==JOIN))
			{
				int LA29_2 = input.LA(2);

				if ((LA29_2==ID))
				{
					int LA29_3 = input.LA(3);

					if ((LA29_3==110))
					{
						int LA29_4 = input.LA(4);

						if ((LA29_4==ID))
						{
							int LA29_5 = input.LA(5);

							if ((LA29_5==DOT))
							{
								int LA29_6 = input.LA(6);

								if ((LA29_6==ID))
								{
									int LA29_7 = input.LA(7);

									if ((LA29_7==EQUALS))
									{
										int LA29_8 = input.LA(8);

										if ((LA29_8==ID))
										{
											int LA29_9 = input.LA(9);

											if ((LA29_9==DOT))
											{
												int LA29_10 = input.LA(10);

												if ((LA29_10==ID))
												{
													int LA29_11 = input.LA(11);

													if ((EvaluatePredicate(synpred49_Scrape_fragment)))
													{
														alt29 = 1;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:218:71: innerJoinStatement
				{
				DebugLocation(218, 71);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1243);
				innerJoinStatement135=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: tableMemberReference, tableMemberReference, innerJoinStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 218:91: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$ID] tableMemberReference tableMemberReference ( innerJoinStatement )? )
			{
				DebugLocation(218, 94);
				// Scrape.g:218:94: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$ID] tableMemberReference tableMemberReference ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(218, 96);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(218, 107);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID130));
				DebugLocation(218, 137);
				adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());
				DebugLocation(218, 158);
				adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());
				DebugLocation(218, 179);
				// Scrape.g:218:179: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(218, 179);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 31);
			LeaveRule("innerJoinStatement", 31);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:221:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 32);
		TraceIn("innerJoin", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set136 = default(CommonToken);

		CommonTree set136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(221, 1);
		try
		{
			// Scrape.g:222:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(222, 2);

			set136=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set136));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 32);
			LeaveRule("innerJoin", 32);
			LeaveRule_innerJoin();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:226:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 33);
		TraceIn("selectStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT137 = default(CommonToken);
		CommonToken COMMA139 = default(CommonToken);
		CommonToken SELECT141 = default(CommonToken);
		CommonToken ASTERISK142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT137_tree = default(CommonTree);
		CommonTree COMMA139_tree = default(CommonTree);
		CommonTree SELECT141_tree = default(CommonTree);
		CommonTree ASTERISK142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(226, 1);
		try
		{
			// Scrape.g:227:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==SELECT))
			{
				int LA31_2 = input.LA(2);

				if ((LA31_2==ASTERISK))
				{
					alt31 = 2;
				}
				else if ((LA31_2==CASE||LA31_2==ID||LA31_2==INT||LA31_2==NULL||LA31_2==PICK||LA31_2==STRING_LITERAL))
				{
					alt31 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:227:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(227, 4);
				SELECT137=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1287); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT137);

				DebugLocation(227, 11);
				// Scrape.g:227:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA30_2 = input.LA(2);

						if ((EvaluatePredicate(synpred51_Scrape_fragment)))
						{
							alt30 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA30_2 = input.LA(2);

						if ((EvaluatePredicate(synpred51_Scrape_fragment)))
						{
							alt30 = 1;
						}


						}
						break;
					case ID:
						{
						int LA30_2 = input.LA(2);

						if ((EvaluatePredicate(synpred51_Scrape_fragment)))
						{
							alt30 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA30_2 = input.LA(2);

						if ((EvaluatePredicate(synpred51_Scrape_fragment)))
						{
							alt30 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:227:12: selectArgs COMMA
						{
						DebugLocation(227, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1290);
						selectArgs138=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs138.Tree);
						DebugLocation(227, 23);
						COMMA139=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1292); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA139);


						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(227, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1296);
				selectArgs140=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs140.Tree);


				{
				// AST REWRITE
				// elements: selectArgs, SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(227, 45);
					// Scrape.g:227:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(227, 54);
					// Scrape.g:227:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(227, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:228:4: SELECT ASTERISK
				{
				DebugLocation(228, 4);
				SELECT141=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1310); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT141);

				DebugLocation(228, 11);
				ASTERISK142=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1312); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK142);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 228:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(228, 23);
					// Scrape.g:228:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(228, 32);
					// Scrape.g:228:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(228, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK142));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 33);
			LeaveRule("selectStatement", 33);
			LeaveRule_selectStatement();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:232:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 34);
		TraceIn("selectArgs", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS144 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(232, 1);
		try
		{
			// Scrape.g:233:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==ID||LA33_1==INT||LA33_1==NULL||LA33_1==PICK||LA33_1==STRING_LITERAL))
			{
				alt33 = 1;
			}
			else if ((LA33_1==CASE))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:233:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(233, 4);
				// Scrape.g:233:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA32_2 = input.LA(2);

						if ((LA32_2==STRING_LITERAL))
						{
							int LA32_3 = input.LA(3);

							if ((LA32_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA32_5 = input.LA(5);

									if ((LA32_5==STRING_LITERAL))
									{
										int LA32_6 = input.LA(6);

										if ((LA32_6==MATCH))
										{
											int LA32_7 = input.LA(7);

											if ((LA32_7==STRING_LITERAL))
											{
												int LA32_8 = input.LA(8);

												if ((LA32_8==REPLACE))
												{
													int LA32_9 = input.LA(9);

													if ((LA32_9==STRING_LITERAL))
													{
														int LA32_10 = input.LA(10);

														if ((LA32_10==PLUS))
														{
															alt32 = 1;
														}


													}


												}
												else if ((LA32_8==PLUS))
												{
													alt32 = 1;
												}


											}


										}
										else if ((LA32_6==PLUS))
										{
											alt32 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA32_5 = input.LA(5);

									if ((LA32_5==MATCH))
									{
										int LA32_6 = input.LA(6);

										if ((LA32_6==STRING_LITERAL))
										{
											int LA32_7 = input.LA(7);

											if ((LA32_7==REPLACE))
											{
												int LA32_8 = input.LA(8);

												if ((LA32_8==STRING_LITERAL))
												{
													int LA32_9 = input.LA(9);

													if ((LA32_9==PLUS))
													{
														alt32 = 1;
													}


												}


											}
											else if ((LA32_7==PLUS))
											{
												alt32 = 1;
											}


										}


									}
									else if ((LA32_5==PLUS))
									{
										alt32 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA32_5 = input.LA(5);

									if ((LA32_5==MATCH))
									{
										int LA32_6 = input.LA(6);

										if ((LA32_6==STRING_LITERAL))
										{
											int LA32_7 = input.LA(7);

											if ((LA32_7==REPLACE))
											{
												int LA32_8 = input.LA(8);

												if ((LA32_8==STRING_LITERAL))
												{
													int LA32_9 = input.LA(9);

													if ((LA32_9==PLUS))
													{
														alt32 = 1;
													}


												}


											}
											else if ((LA32_7==PLUS))
											{
												alt32 = 1;
											}


										}


									}
									else if ((LA32_5==PLUS))
									{
										alt32 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA32_2 = input.LA(2);

						if ((LA32_2==PLUS))
						{
							alt32 = 1;
						}


						}
						break;
					case ID:
						{
						int LA32_2 = input.LA(2);

						if ((LA32_2==DOT))
						{
							int LA32_3 = input.LA(3);

							if ((LA32_3==ID))
							{
								int LA32_4 = input.LA(4);

								if ((LA32_4==PLUS))
								{
									alt32 = 1;
								}


							}


						}
						else if ((LA32_2==PLUS))
						{
							alt32 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:233:5: selectArg PLUS
						{
						DebugLocation(233, 5);
						PushFollow(Follow._selectArg_in_selectArgs1338);
						selectArg143=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg143.Tree);
						DebugLocation(233, 15);
						PLUS144=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1340); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS144);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(233, 22);
				PushFollow(Follow._selectArg_in_selectArgs1344);
				selectArg145=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg145.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(233, 35);
					// Scrape.g:233:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(233, 48);
					// Scrape.g:233:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(233, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:234:4: caseStatement
				{
				DebugLocation(234, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1358);
				caseStatement146=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement146.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 234:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(234, 21);
					// Scrape.g:234:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(234, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 34);
			LeaveRule("selectArgs", 34);
			LeaveRule_selectArgs();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:239:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 35);
		TraceIn("caseStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE147 = default(CommonToken);
		CommonToken ELSE149 = default(CommonToken);
		CommonToken END151 = default(CommonToken);
		CommonToken CASE152 = default(CommonToken);
		CommonToken ELSE155 = default(CommonToken);
		CommonToken END157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE147_tree = default(CommonTree);
		CommonTree ELSE149_tree = default(CommonTree);
		CommonTree END151_tree = default(CommonTree);
		CommonTree CASE152_tree = default(CommonTree);
		CommonTree ELSE155_tree = default(CommonTree);
		CommonTree END157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(239, 1);
		try
		{
			// Scrape.g:240:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==CASE))
			{
				int LA38_2 = input.LA(2);

				if ((LA38_2==WHEN))
				{
					alt38 = 1;
				}
				else if ((LA38_2==ID||LA38_2==INT||LA38_2==NULL||LA38_2==PICK||LA38_2==STRING_LITERAL))
				{
					alt38 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:240:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(240, 4);
				CASE147=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1380); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE147);

				DebugLocation(240, 9);
				// Scrape.g:240:9: ( whenBoolStatement )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_1 = input.LA(1);

					if ((LA34_1==WHEN))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:240:9: whenBoolStatement
						{
						DebugLocation(240, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1382);
						whenBoolStatement148=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement148.Tree);

						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(240, 28);
				// Scrape.g:240:28: ( ELSE caseExpression )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ELSE))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:240:29: ELSE caseExpression
					{
					DebugLocation(240, 29);
					ELSE149=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1386); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE149);

					DebugLocation(240, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1388);
					caseExpression150=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression150.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(240, 51);
				END151=(CommonToken)Match(input,END,Follow._END_in_caseStatement1392); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END151);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(240, 58);
					// Scrape.g:240:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(240, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(240, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(240, 89);
					// Scrape.g:240:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(240, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:241:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(241, 4);
				CASE152=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1409); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE152);

				DebugLocation(241, 9);
				PushFollow(Follow._selectArg_in_caseStatement1411);
				selectArg153=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg153.Tree);
				DebugLocation(241, 19);
				// Scrape.g:241:19: ( whenLiteralStatement )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_1 = input.LA(1);

					if ((LA36_1==WHEN))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:241:19: whenLiteralStatement
						{
						DebugLocation(241, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1413);
						whenLiteralStatement154=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement154.Tree);

						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(241, 41);
				// Scrape.g:241:41: ( ELSE caseExpression )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==ELSE))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:241:42: ELSE caseExpression
					{
					DebugLocation(241, 42);
					ELSE155=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1417); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE155);

					DebugLocation(241, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1419);
					caseExpression156=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression156.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(241, 64);
				END157=(CommonToken)Match(input,END,Follow._END_in_caseStatement1423); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END157);



				{
				// AST REWRITE
				// elements: caseExpression, whenLiteralStatement, selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(241, 71);
					// Scrape.g:241:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(241, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(241, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(241, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(241, 114);
					// Scrape.g:241:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(241, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 35);
			LeaveRule("caseStatement", 35);
			LeaveRule_caseStatement();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:244:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 36);
		TraceIn("caseExpression", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(244, 1);
		try
		{
			// Scrape.g:245:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:245:4: selectArg
			{
			DebugLocation(245, 4);
			PushFollow(Follow._selectArg_in_caseExpression1448);
			selectArg158=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg158.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(245, 17);
				// Scrape.g:245:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(245, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(245, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 36);
			LeaveRule("caseExpression", 36);
			LeaveRule_caseExpression();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:248:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 37);
		TraceIn("whenLiteralStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN159 = default(CommonToken);
		CommonToken THEN161 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN159_tree = default(CommonTree);
		CommonTree THEN161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(248, 1);
		try
		{
			// Scrape.g:249:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:249:4: WHEN literal THEN caseExpression
			{
			DebugLocation(249, 4);
			WHEN159=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1467); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN159);

			DebugLocation(249, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1469);
			literal160=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal160.Tree);
			DebugLocation(249, 17);
			THEN161=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1471); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN161);

			DebugLocation(249, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1473);
			caseExpression162=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression162.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 249:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(249, 40);
				// Scrape.g:249:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(249, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(249, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(249, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 37);
			LeaveRule("whenLiteralStatement", 37);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:252:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 38);
		TraceIn("whenBoolStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN163 = default(CommonToken);
		CommonToken THEN165 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN163_tree = default(CommonTree);
		CommonTree THEN165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(252, 1);
		try
		{
			// Scrape.g:253:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:253:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(253, 4);
			WHEN163=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1494); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN163);

			DebugLocation(253, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1496);
			boolExpression164=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression164.Tree);
			DebugLocation(253, 24);
			THEN165=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1498); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN165);

			DebugLocation(253, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1500);
			caseExpression166=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression166.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(253, 47);
				// Scrape.g:253:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(253, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(253, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 38);
			LeaveRule("whenBoolStatement", 38);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:256:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 39);
		TraceIn("boolExpression", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR168 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR168_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(256, 1);
		try
		{
			// Scrape.g:257:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:257:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._andExpression_in_boolExpression1521);
			andExpression167=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression167.Tree);
			DebugLocation(257, 18);
			// Scrape.g:257:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==OR))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:257:19: OR ^ andExpression
					{
					DebugLocation(257, 21);
					OR168=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1524); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR168_tree = (CommonTree)adaptor.Create(OR168);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR168_tree, root_0);
					}
					DebugLocation(257, 23);
					PushFollow(Follow._andExpression_in_boolExpression1527);
					andExpression169=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression169.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 39);
			LeaveRule("boolExpression", 39);
			LeaveRule_boolExpression();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:260:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 40);
		TraceIn("andExpression", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(260, 1);
		try
		{
			// Scrape.g:261:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:261:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(261, 5);
			PushFollow(Follow._boolTerm_in_andExpression1541);
			boolTerm170=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm170.Tree);
			DebugLocation(261, 14);
			// Scrape.g:261:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==AND))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:261:15: AND ^ boolTerm
					{
					DebugLocation(261, 18);
					AND171=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1544); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND171_tree = (CommonTree)adaptor.Create(AND171);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND171_tree, root_0);
					}
					DebugLocation(261, 20);
					PushFollow(Follow._boolTerm_in_andExpression1547);
					boolTerm172=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm172.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 40);
			LeaveRule("andExpression", 40);
			LeaveRule_andExpression();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:264:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 41);
		TraceIn("boolTerm", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NODES173 = default(CommonToken);
		CommonToken EQUALS174 = default(CommonToken);
		CommonToken STRING_LITERAL175 = default(CommonToken);
		CommonToken OPENPAREN179 = default(CommonToken);
		CommonToken CLOSEPAREN181 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NODES173_tree = default(CommonTree);
		CommonTree EQUALS174_tree = default(CommonTree);
		CommonTree STRING_LITERAL175_tree = default(CommonTree);
		CommonTree OPENPAREN179_tree = default(CommonTree);
		CommonTree CLOSEPAREN181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt42=3;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt42 = 1;
				}
				break;
			case ID:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt42 = 2;
				}
				break;
			case OPENPAREN:
				{
				alt42 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:265:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(265, 4);
				NODES173=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1562); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES173);

				DebugLocation(265, 10);
				EQUALS174=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1564); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS174);

				DebugLocation(265, 17);
				STRING_LITERAL175=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1566); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL175);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(265, 35);
					// Scrape.g:265:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(265, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES173));
					DebugLocation(265, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:266:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._selectArg_in_boolTerm1582);
				selectArg176=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg176.Tree);
				DebugLocation(266, 14);
				// Scrape.g:266:14: ( boolOperator ^ selectArg )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==EQUALS||(LA41_1>=GREATERTHAN && LA41_1<=GREATERTHANEQUAL)||(LA41_1>=LESSTHAN && LA41_1<=LESSTHANEQUAL)||LA41_1==NOTEQUAL))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:266:15: boolOperator ^ selectArg
					{
					DebugLocation(266, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1585);
					boolOperator177=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator177.Tree, root_0);
					DebugLocation(266, 29);
					PushFollow(Follow._selectArg_in_boolTerm1588);
					selectArg178=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg178.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:267:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 13);
				OPENPAREN179=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1596); if (state.failed) return retval;
				DebugLocation(267, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1599);
				boolExpression180=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression180.Tree);
				DebugLocation(267, 40);
				CLOSEPAREN181=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1601); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 41);
			LeaveRule("boolTerm", 41);
			LeaveRule_boolTerm();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:270:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 42);
		TraceIn("boolOperator", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set182 = default(CommonToken);

		CommonTree set182_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(270, 1);
		try
		{
			// Scrape.g:271:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(271, 2);

			set182=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set182));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 42);
			LeaveRule("boolOperator", 42);
			LeaveRule_boolOperator();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:279:1: selectArg : ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 43);
		TraceIn("selectArg", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID185 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(279, 1);
		try
		{
			// Scrape.g:280:2: ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference )
			int alt43=4;
			try { DebugEnterDecision(43, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt43 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt43 = 2;
				}
				break;
			case ID:
				{
				int LA43_2 = input.LA(2);

				if ((LA43_2==DOT))
				{
					alt43 = 4;
				}
				else if ((LA43_2==EOF||LA43_2==AND||(LA43_2>=CLOSEBRACE && LA43_2<=COMMA)||LA43_2==CREATE||(LA43_2>=EACH && LA43_2<=EXEC)||(LA43_2>=FROM && LA43_2<=GREATERTHANEQUAL)||LA43_2==ID||(LA43_2>=INNER_JOIN && LA43_2<=INSERT_INTO)||LA43_2==INSERT_OVERWRITE||(LA43_2>=JOIN && LA43_2<=LESSTHANEQUAL)||LA43_2==NOTEQUAL||LA43_2==OR||LA43_2==PLUS||LA43_2==SELECT||LA43_2==THEN||LA43_2==TRUNCATE||LA43_2==WHEN||LA43_2==WHERE))
				{
					alt43 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:280:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._pickStatement_in_selectArg1649);
				pickStatement183=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:281:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._literal_in_selectArg1654);
				literal184=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal184.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:282:4: ID
				{
				DebugLocation(282, 4);
				ID185=(CommonToken)Match(input,ID,Follow._ID_in_selectArg1659); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(282, 10);
					// Scrape.g:282:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID185), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:283:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(283, 4);
				PushFollow(Follow._tableMemberReference_in_selectArg1671);
				tableMemberReference186=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference186.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 43);
			LeaveRule("selectArg", 43);
			LeaveRule_selectArg();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:286:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 44);
		TraceIn("pickStatement", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK187 = default(CommonToken);
		CommonToken STRING_LITERAL188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK187_tree = default(CommonTree);
		CommonTree STRING_LITERAL188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(286, 1);
		try
		{
			// Scrape.g:287:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:287:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(287, 4);
			PICK187=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1683); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK187);

			DebugLocation(287, 9);
			STRING_LITERAL188=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1685); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL188);

			DebugLocation(287, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1687);
			takeStatement189=takeStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_takeStatement.Add(takeStatement189.Tree);
			DebugLocation(287, 38);
			// Scrape.g:287:38: ( matchStatement )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==MATCH))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:287:38: matchStatement
				{
				DebugLocation(287, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1689);
				matchStatement190=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement190.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, PICK, matchStatement, takeStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(287, 57);
				// Scrape.g:287:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(287, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(287, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(287, 93);
				// Scrape.g:287:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(287, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 44);
			LeaveRule("pickStatement", 44);
			LeaveRule_pickStatement();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:290:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 45);
		TraceIn("takeStatement", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE191 = default(CommonToken);
		CommonToken ATTRIBUTE192 = default(CommonToken);
		CommonToken STRING_LITERAL193 = default(CommonToken);
		CommonToken TAKE194 = default(CommonToken);
		CommonToken TEXT195 = default(CommonToken);
		CommonToken TAKE196 = default(CommonToken);
		CommonToken HTML197 = default(CommonToken);

		CommonTree TAKE191_tree = default(CommonTree);
		CommonTree ATTRIBUTE192_tree = default(CommonTree);
		CommonTree STRING_LITERAL193_tree = default(CommonTree);
		CommonTree TAKE194_tree = default(CommonTree);
		CommonTree TEXT195_tree = default(CommonTree);
		CommonTree TAKE196_tree = default(CommonTree);
		CommonTree HTML197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(290, 1);
		try
		{
			// Scrape.g:291:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt45 = 1;
					}
					break;
				case TEXT:
					{
					alt45 = 2;
					}
					break;
				case HTML:
					{
					alt45 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:291:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(291, 4);
				TAKE191=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1715); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE191);

				DebugLocation(291, 9);
				ATTRIBUTE192=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE192);

				DebugLocation(291, 19);
				STRING_LITERAL193=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL193);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(291, 37);
					// Scrape.g:291:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(291, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:292:4: TAKE TEXT
				{
				DebugLocation(292, 4);
				TAKE194=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1732); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE194);

				DebugLocation(292, 9);
				TEXT195=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1734); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT195);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(292, 17);
					// Scrape.g:292:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:293:4: TAKE HTML
				{
				DebugLocation(293, 4);
				TAKE196=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1745); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE196);

				DebugLocation(293, 9);
				HTML197=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML197);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:14: -> ^( TAKE_HTML )
				{
					DebugLocation(293, 17);
					// Scrape.g:293:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 45);
			LeaveRule("takeStatement", 45);
			LeaveRule_takeStatement();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:296:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 46);
		TraceIn("matchStatement", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH198 = default(CommonToken);
		CommonToken STRING_LITERAL199 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH198_tree = default(CommonTree);
		CommonTree STRING_LITERAL199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:297:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(297, 4);
			MATCH198=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1765); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH198);

			DebugLocation(297, 10);
			STRING_LITERAL199=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1767); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL199);

			DebugLocation(297, 25);
			// Scrape.g:297:25: ( replaceStatement )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==REPLACE))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:297:25: replaceStatement
				{
				DebugLocation(297, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1769);
				replaceStatement200=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement200.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, replaceStatement, MATCH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(297, 46);
				// Scrape.g:297:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(297, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(297, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(297, 69);
				// Scrape.g:297:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(297, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 46);
			LeaveRule("matchStatement", 46);
			LeaveRule_matchStatement();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:300:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 47);
		TraceIn("replaceStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE201 = default(CommonToken);
		CommonToken STRING_LITERAL202 = default(CommonToken);

		CommonTree REPLACE201_tree = default(CommonTree);
		CommonTree STRING_LITERAL202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(300, 1);
		try
		{
			// Scrape.g:301:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:301:4: REPLACE STRING_LITERAL
			{
			DebugLocation(301, 4);
			REPLACE201=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1792); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE201);

			DebugLocation(301, 12);
			STRING_LITERAL202=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1794); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL202);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(301, 30);
				// Scrape.g:301:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(301, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(301, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 47);
			LeaveRule("replaceStatement", 47);
			LeaveRule_replaceStatement();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:305:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 48);
		TraceIn("createTableStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE203 = default(CommonToken);
		CommonToken FILE204 = default(CommonToken);
		CommonToken ID205 = default(CommonToken);
		CommonToken OPENPAREN206 = default(CommonToken);
		CommonToken CLOSEPAREN208 = default(CommonToken);
		CommonToken CREATE211 = default(CommonToken);
		CommonToken BUFFER212 = default(CommonToken);
		CommonToken ID213 = default(CommonToken);
		CommonToken OPENPAREN214 = default(CommonToken);
		CommonToken CLOSEPAREN216 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs207 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement209 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE203_tree = default(CommonTree);
		CommonTree FILE204_tree = default(CommonTree);
		CommonTree ID205_tree = default(CommonTree);
		CommonTree OPENPAREN206_tree = default(CommonTree);
		CommonTree CLOSEPAREN208_tree = default(CommonTree);
		CommonTree CREATE211_tree = default(CommonTree);
		CommonTree BUFFER212_tree = default(CommonTree);
		CommonTree ID213_tree = default(CommonTree);
		CommonTree OPENPAREN214_tree = default(CommonTree);
		CommonTree CLOSEPAREN216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(305, 1);
		try
		{
			// Scrape.g:306:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==CREATE))
			{
				int LA50_2 = input.LA(2);

				if ((LA50_2==FILE))
				{
					alt50 = 1;
				}
				else if ((LA50_2==BUFFER))
				{
					alt50 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:306:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(306, 4);
				CREATE203=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1815); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE203);

				DebugLocation(306, 11);
				FILE204=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1817); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE204);

				DebugLocation(306, 16);
				ID205=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1819); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID205);

				DebugLocation(306, 19);
				OPENPAREN206=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN206);

				DebugLocation(306, 29);
				// Scrape.g:306:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_1 = input.LA(1);

					if ((LA47_1==ID))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:306:29: tableColumnArgs
						{
						DebugLocation(306, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1823);
						tableColumnArgs207=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs207.Tree);

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(306, 46);
				CLOSEPAREN208=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1826); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN208);

				DebugLocation(306, 57);
				// Scrape.g:306:57: ( fileTableWithStatement )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==WITH))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:306:57: fileTableWithStatement
					{
					DebugLocation(306, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1828);
					fileTableWithStatement209=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement209.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(306, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1831);
				fileTableLocation210=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation210.Tree);


				{
				// AST REWRITE
				// elements: tableColumnArgs, fileTableLocation, ID, fileTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(306, 102);
					// Scrape.g:306:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(306, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(306, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(306, 118);
					// Scrape.g:306:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(306, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(306, 135);
					// Scrape.g:306:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(306, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(306, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:307:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(307, 4);
				CREATE211=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1852); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE211);

				DebugLocation(307, 11);
				BUFFER212=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1854); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER212);

				DebugLocation(307, 18);
				ID213=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1856); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID213);

				DebugLocation(307, 21);
				OPENPAREN214=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1858); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN214);

				DebugLocation(307, 31);
				// Scrape.g:307:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_1 = input.LA(1);

					if ((LA49_1==ID))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:307:31: tableColumnArgs
						{
						DebugLocation(307, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1860);
						tableColumnArgs215=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs215.Tree);

						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(307, 48);
				CLOSEPAREN216=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN216);



				{
				// AST REWRITE
				// elements: tableColumnArgs, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 307:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(307, 62);
					// Scrape.g:307:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(307, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(307, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(307, 80);
					// Scrape.g:307:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(307, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 48);
			LeaveRule("createTableStatement", 48);
			LeaveRule_createTableStatement();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:310:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 49);
		TraceIn("fileTableLocation", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION217 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION217_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(310, 1);
		try
		{
			// Scrape.g:311:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:311:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(311, 12);
			LOCATION217=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1885); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION217_tree = (CommonTree)adaptor.Create(LOCATION217);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION217_tree, root_0);
			}
			DebugLocation(311, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation1888);
			mathExpression218=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression218.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 49);
			LeaveRule("fileTableLocation", 49);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:314:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 50);
		TraceIn("fileTableWithStatement", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH219 = default(CommonToken);
		CommonToken OPENPAREN220 = default(CommonToken);
		CommonToken CLOSEPAREN222 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH219_tree = default(CommonTree);
		CommonTree OPENPAREN220_tree = default(CommonTree);
		CommonTree CLOSEPAREN222_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(314, 1);
		try
		{
			// Scrape.g:315:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:315:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(315, 4);
			WITH219=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1900); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH219);

			DebugLocation(315, 9);
			OPENPAREN220=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1902); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN220);

			DebugLocation(315, 19);
			// Scrape.g:315:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==FIELD_TERMINATOR||LA51_1==ROW_TERMINATOR))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:315:19: fileTableWithVariablesStatement
					{
					DebugLocation(315, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1904);
					fileTableWithVariablesStatement221=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement221.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(315, 52);
			CLOSEPAREN222=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1907); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN222);



			{
			// AST REWRITE
			// elements: fileTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 315:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(315, 66);
				// Scrape.g:315:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(315, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(315, 73);
				// Scrape.g:315:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(315, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 50);
			LeaveRule("fileTableWithStatement", 50);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:318:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 51);
		TraceIn("fileTableWithVariablesStatement", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA224 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement225 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(318, 1);
		try
		{
			// Scrape.g:319:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:319:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(319, 4);
			// Scrape.g:319:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==FIELD_TERMINATOR||LA52_1==ROW_TERMINATOR))
				{
					int LA52_2 = input.LA(2);

					if ((LA52_2==EQUALS))
					{
						int LA52_3 = input.LA(3);

						if ((LA52_3==STRING_LITERAL))
						{
							int LA52_4 = input.LA(4);

							if ((LA52_4==COMMA))
							{
								alt52 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:319:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(319, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1930);
					fileTableWithVariableStatement223=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement223.Tree);
					DebugLocation(319, 36);
					COMMA224=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1932); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA224);


					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }

			DebugLocation(319, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1936);
			fileTableWithVariableStatement225=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement225.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(319, 78);
				// Scrape.g:319:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(319, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 51);
			LeaveRule("fileTableWithVariablesStatement", 51);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:322:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 52);
		TraceIn("fileTableWithVariableStatement", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set226 = default(CommonToken);
		CommonToken EQUALS227 = default(CommonToken);
		CommonToken STRING_LITERAL228 = default(CommonToken);

		CommonTree set226_tree = default(CommonTree);
		CommonTree EQUALS227_tree = default(CommonTree);
		CommonTree STRING_LITERAL228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(322, 1);
		try
		{
			// Scrape.g:323:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:323:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(323, 39);

			set226=(CommonToken)input.LT(1);
			set226=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set226), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(323, 47);
			EQUALS227=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement1961); if (state.failed) return retval;
			DebugLocation(323, 49);
			STRING_LITERAL228=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement1964); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL228_tree = (CommonTree)adaptor.Create(STRING_LITERAL228);
			adaptor.AddChild(root_0, STRING_LITERAL228_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 52);
			LeaveRule("fileTableWithVariableStatement", 52);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:326:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 53);
		TraceIn("tableColumnArgs", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA230 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg229 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg231 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(326, 1);
		try
		{
			// Scrape.g:327:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:327:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(327, 4);
			// Scrape.g:327:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==ID))
				{
					int LA53_2 = input.LA(2);

					if ((LA53_2==FLOAT||LA53_2==IDENTITY||LA53_2==INTEGER||LA53_2==STRING))
					{
						int LA53_3 = input.LA(3);

						if ((LA53_3==COMMA))
						{
							alt53 = 1;
						}


					}


				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:327:5: tableColumnArg COMMA
					{
					DebugLocation(327, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs1976);
					tableColumnArg229=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg229.Tree);
					DebugLocation(327, 20);
					COMMA230=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs1978); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA230);


					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }

			DebugLocation(327, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs1982);
			tableColumnArg231=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg231.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(327, 46);
				// Scrape.g:327:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(327, 66);
				// Scrape.g:327:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(327, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 53);
			LeaveRule("tableColumnArgs", 53);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:330:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 54);
		TraceIn("tableColumnArg", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID232 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType233 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(330, 1);
		try
		{
			// Scrape.g:331:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:331:4: ID dataType
			{
			DebugLocation(331, 4);
			ID232=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2003); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID232);

			DebugLocation(331, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2005);
			dataType233=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType233.Tree);


			{
			// AST REWRITE
			// elements: dataType, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(331, 19);
				// Scrape.g:331:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(331, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(331, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(331, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 54);
			LeaveRule("tableColumnArg", 54);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:334:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 55);
		TraceIn("dataType", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set234 = default(CommonToken);

		CommonTree set234_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(334, 1);
		try
		{
			// Scrape.g:335:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(335, 2);

			set234=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set234));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 55);
			LeaveRule("dataType", 55);
			LeaveRule_dataType();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred43_Scrape_fragment();
	partial void LeaveRule_synpred43_Scrape_fragment();

	// $ANTLR start synpred43_Scrape
	private void synpred43_Scrape_fragment()
	{
		EnterRule_synpred43_Scrape_fragment();
		EnterRule("synpred43_Scrape_fragment", 98);
		TraceIn("synpred43_Scrape_fragment", 98);
		try
		{
			// Scrape.g:205:35: ( whereStatement )
			DebugEnterAlt(1);
			// Scrape.g:205:35: whereStatement
			{
			DebugLocation(205, 35);
			PushFollow(Follow._whereStatement_in_synpred43_Scrape1132);
			whereStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Scrape_fragment", 98);
			LeaveRule("synpred43_Scrape_fragment", 98);
			LeaveRule_synpred43_Scrape_fragment();
		}
	}
	// $ANTLR end synpred43_Scrape

	partial void EnterRule_synpred44_Scrape_fragment();
	partial void LeaveRule_synpred44_Scrape_fragment();

	// $ANTLR start synpred44_Scrape
	private void synpred44_Scrape_fragment()
	{
		EnterRule_synpred44_Scrape_fragment();
		EnterRule("synpred44_Scrape_fragment", 99);
		TraceIn("synpred44_Scrape_fragment", 99);
		try
		{
			// Scrape.g:213:12: ( innerJoinStatement )
			DebugEnterAlt(1);
			// Scrape.g:213:12: innerJoinStatement
			{
			DebugLocation(213, 12);
			PushFollow(Follow._innerJoinStatement_in_synpred44_Scrape1185);
			innerJoinStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred44_Scrape_fragment", 99);
			LeaveRule("synpred44_Scrape_fragment", 99);
			LeaveRule_synpred44_Scrape_fragment();
		}
	}
	// $ANTLR end synpred44_Scrape

	partial void EnterRule_synpred48_Scrape_fragment();
	partial void LeaveRule_synpred48_Scrape_fragment();

	// $ANTLR start synpred48_Scrape
	private void synpred48_Scrape_fragment()
	{
		EnterRule_synpred48_Scrape_fragment();
		EnterRule("synpred48_Scrape_fragment", 103);
		TraceIn("synpred48_Scrape_fragment", 103);
		try
		{
			// Scrape.g:214:81: ( innerJoinStatement )
			DebugEnterAlt(1);
			// Scrape.g:214:81: innerJoinStatement
			{
			DebugLocation(214, 81);
			PushFollow(Follow._innerJoinStatement_in_synpred48_Scrape1219);
			innerJoinStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred48_Scrape_fragment", 103);
			LeaveRule("synpred48_Scrape_fragment", 103);
			LeaveRule_synpred48_Scrape_fragment();
		}
	}
	// $ANTLR end synpred48_Scrape

	partial void EnterRule_synpred49_Scrape_fragment();
	partial void LeaveRule_synpred49_Scrape_fragment();

	// $ANTLR start synpred49_Scrape
	private void synpred49_Scrape_fragment()
	{
		EnterRule_synpred49_Scrape_fragment();
		EnterRule("synpred49_Scrape_fragment", 104);
		TraceIn("synpred49_Scrape_fragment", 104);
		try
		{
			// Scrape.g:218:71: ( innerJoinStatement )
			DebugEnterAlt(1);
			// Scrape.g:218:71: innerJoinStatement
			{
			DebugLocation(218, 71);
			PushFollow(Follow._innerJoinStatement_in_synpred49_Scrape1243);
			innerJoinStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred49_Scrape_fragment", 104);
			LeaveRule("synpred49_Scrape_fragment", 104);
			LeaveRule_synpred49_Scrape_fragment();
		}
	}
	// $ANTLR end synpred49_Scrape

	partial void EnterRule_synpred51_Scrape_fragment();
	partial void LeaveRule_synpred51_Scrape_fragment();

	// $ANTLR start synpred51_Scrape
	private void synpred51_Scrape_fragment()
	{
		EnterRule_synpred51_Scrape_fragment();
		EnterRule("synpred51_Scrape_fragment", 106);
		TraceIn("synpred51_Scrape_fragment", 106);
		try
		{
			// Scrape.g:227:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:227:12: selectArgs COMMA
			{
			DebugLocation(227, 12);
			PushFollow(Follow._selectArgs_in_synpred51_Scrape1290);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(227, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred51_Scrape1292); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred51_Scrape_fragment", 106);
			LeaveRule("synpred51_Scrape_fragment", 106);
			LeaveRule_synpred51_Scrape_fragment();
		}
	}
	// $ANTLR end synpred51_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program217 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program232 = new BitSet(new ulong[]{0xB10022080000UL,0x800010000UL});
		public static readonly BitSet _noBraceBlock_in_program234 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition270 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition272 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition274 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition276 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition279 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _block_in_procedureDefinition281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable350 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_truncateTable352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall374 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_procedureCall376 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall378 = new BitSet(new ulong[]{0x1010000010000UL,0x400000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall380 = new BitSet(new ulong[]{0x1010000010000UL,0x400000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList406 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList408 = new BitSet(new ulong[]{0x1010000000000UL,0x400000UL});
		public static readonly BitSet _callArgs_in_procedureCallList412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement444 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement446 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _proxyList_in_proxyStatement448 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement450 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList474 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList476 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest500 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _TEST_in_proxyTest502 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest504 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest506 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement523 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement525 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_eachStatement529 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IN_in_eachStatement531 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_eachStatement535 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement537 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _block_in_eachStatement539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock564 = new BitSet(new ulong[]{0xB10022080002UL,0x800010000UL});
		public static readonly BitSet _OPENBRACE_in_block585 = new BitSet(new ulong[]{0xB10022088000UL,0x800010000UL});
		public static readonly BitSet _statement_in_block587 = new BitSet(new ulong[]{0xB10022088000UL,0x800010000UL});
		public static readonly BitSet _CLOSEBRACE_in_block590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression610 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression612 = new BitSet(new ulong[]{0x1010000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression614 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _TO_in_expandExpression616 = new BitSet(new ulong[]{0x1010000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression618 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression620 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _expandBlock_in_expandExpression622 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock647 = new BitSet(new ulong[]{0x8001010000008000UL,0x200000400002UL});
		public static readonly BitSet _mathExpression_in_expandBlock649 = new BitSet(new ulong[]{0x8001010000008000UL,0x200000400002UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_expandVar673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_expandVar678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion712 = new BitSet(new ulong[]{0x0UL,0x400002UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadPageExpresssion720 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion722 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadPageExpresssion724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion730 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_downloadPageExpresssion732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion746 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadPageExpresssion748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression767 = new BitSet(new ulong[]{0x0UL,0x410000UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression781 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_downloadImageExpression783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression797 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadImageExpression799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference822 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _DOT_in_tableMemberReference824 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement852 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement854 = new BitSet(new ulong[]{0x8001010041800000UL,0x200000410002UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression908 = new BitSet(new ulong[]{0x800000000000002UL,0x20UL});
		public static readonly BitSet _set_in_mathExpression911 = new BitSet(new ulong[]{0x8001010000000000UL,0x200000400002UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression922 = new BitSet(new ulong[]{0x800000000000002UL,0x20UL});
		public static readonly BitSet _atom_in_mathExpressionGroup940 = new BitSet(new ulong[]{0x200042UL});
		public static readonly BitSet _set_in_mathExpressionGroup943 = new BitSet(new ulong[]{0x8001010000000000UL,0x200000400002UL});
		public static readonly BitSet _atom_in_mathExpressionGroup954 = new BitSet(new ulong[]{0x200042UL});
		public static readonly BitSet _ID_in_atom975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_atom988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_atom1000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1015 = new BitSet(new ulong[]{0x8001010000000000UL,0x200000400002UL});
		public static readonly BitSet _mathExpression_in_atom1018 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1062 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_insertStatement1064 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1081 = new BitSet(new ulong[]{0x8001010000000000UL,0x200000400002UL});
		public static readonly BitSet _mathExpression_in_insertStatement1083 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1099 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_insertStatement1101 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1127 = new BitSet(new ulong[]{0x1000000002UL,0x40000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1129 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1159 = new BitSet(new ulong[]{0xA001010000000000UL,0x400012UL});
		public static readonly BitSet _boolExpression_in_whereStatement1161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1181 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_fromStatement1183 = new BitSet(new ulong[]{0x4080000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1204 = new BitSet(new ulong[]{0x41800000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1208 = new BitSet(new ulong[]{0x4080000000002UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1212 = new BitSet(new ulong[]{0x4080000000002UL});
		public static readonly BitSet _expandExpression_in_fromStatement1216 = new BitSet(new ulong[]{0x4080000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1231 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1233 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_innerJoinStatement1235 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_innerJoinStatement1237 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_innerJoinStatement1239 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_innerJoinStatement1241 = new BitSet(new ulong[]{0x4080000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1287 = new BitSet(new ulong[]{0x8001010000000800UL,0x400010UL});
		public static readonly BitSet _selectArgs_in_selectStatement1290 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1292 = new BitSet(new ulong[]{0x8001010000000800UL,0x400010UL});
		public static readonly BitSet _selectArgs_in_selectStatement1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1310 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1338 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _PLUS_in_selectArgs1340 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _selectArg_in_selectArgs1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1380 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1382 = new BitSet(new ulong[]{0xC000000UL,0x8000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1386 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _caseExpression_in_caseStatement1388 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _END_in_caseStatement1392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1409 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _selectArg_in_caseStatement1411 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1413 = new BitSet(new ulong[]{0xC000000UL,0x8000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1417 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _caseExpression_in_caseStatement1419 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _END_in_caseStatement1423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1467 = new BitSet(new ulong[]{0x8001000000000000UL,0x400000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1469 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1471 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1494 = new BitSet(new ulong[]{0xA001010000000000UL,0x400012UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1496 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1498 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1521 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _OR_in_boolExpression1524 = new BitSet(new ulong[]{0xA001010000000000UL,0x400012UL});
		public static readonly BitSet _andExpression_in_boolExpression1527 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _boolTerm_in_andExpression1541 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1544 = new BitSet(new ulong[]{0xA001010000000000UL,0x400012UL});
		public static readonly BitSet _boolTerm_in_andExpression1547 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1562 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1564 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1582 = new BitSet(new ulong[]{0x4018006010000002UL});
		public static readonly BitSet _boolOperator_in_boolTerm1585 = new BitSet(new ulong[]{0x8001010000000000UL,0x400010UL});
		public static readonly BitSet _selectArg_in_boolTerm1588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1596 = new BitSet(new ulong[]{0xA001010000000000UL,0x400012UL});
		public static readonly BitSet _boolExpression_in_boolTerm1599 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectArg1659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectArg1671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1683 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1685 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1687 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1715 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1717 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1732 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1745 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1765 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1767 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1792 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1815 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1817 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1819 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1821 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1823 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1826 = new BitSet(new ulong[]{0x100000000000000UL,0x80000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1828 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1852 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1854 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1856 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1858 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1860 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1885 = new BitSet(new ulong[]{0x8001010000000000UL,0x200000400002UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation1888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1900 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1902 = new BitSet(new ulong[]{0x100010000UL,0x8000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1904 = new BitSet(new ulong[]{0x100010000UL,0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1930 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1932 = new BitSet(new ulong[]{0x100000000UL,0x8000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement1952 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement1961 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement1964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1976 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs1978 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2003 = new BitSet(new ulong[]{0x2020800000000UL,0x200000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whereStatement_in_synpred43_Scrape1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoinStatement_in_synpred44_Scrape1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoinStatement_in_synpred48_Scrape1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoinStatement_in_synpred49_Scrape1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred51_Scrape1290 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred51_Scrape1292 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
