//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2015-12-16 22:12:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NOTEQUAL", "NULL", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "VARIABLE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'"
	};
	public const int EOF=-1;
	public const int T__105=105;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMENT=18;
	public const int CREATE=19;
	public const int DIGIT=20;
	public const int DIV=21;
	public const int DOT=22;
	public const int DOWNLOAD_IMAGE=23;
	public const int DOWNLOAD_PAGE=24;
	public const int EACH=25;
	public const int ELSE=26;
	public const int END=27;
	public const int EQUALS=28;
	public const int EXEC=29;
	public const int EXPAND=30;
	public const int EXPAND_INTERATION_VARIABLE=31;
	public const int FIELD_TERMINATOR=32;
	public const int FILE=33;
	public const int FILE_TABLE=34;
	public const int FLOAT=35;
	public const int FROM=36;
	public const int GREATERTHAN=37;
	public const int GREATERTHANEQUAL=38;
	public const int HTML=39;
	public const int ID=40;
	public const int IDENTITY=41;
	public const int IN=42;
	public const int INSERT_DIRECTORY=43;
	public const int INSERT_INTO=44;
	public const int INSERT_INTO_DIRECTORY=45;
	public const int INSERT_OVERWRITE=46;
	public const int INT=47;
	public const int INTEGER=48;
	public const int LESSTHAN=49;
	public const int LESSTHANEQUAL=50;
	public const int LETTER=51;
	public const int LINE_COMMENT_DASH=52;
	public const int LINE_COMMENT_SLASH=53;
	public const int LOCATION=54;
	public const int MATCH=55;
	public const int MEMBER_REFERENCE=56;
	public const int MINIS=57;
	public const int NEWLINE=58;
	public const int NOTEQUAL=59;
	public const int NULL=60;
	public const int OPENBRACE=61;
	public const int OPENPAREN=62;
	public const int OR=63;
	public const int OTHERCHARS=64;
	public const int PICK=65;
	public const int PLUS=66;
	public const int POST_PICK=67;
	public const int PRE_PICK=68;
	public const int PROCEDURE=69;
	public const int PROGRAM=70;
	public const int PROXIES=71;
	public const int PROXY_LIST=72;
	public const int QUOTE=73;
	public const int REPLACE=74;
	public const int ROW_REFERENCE=75;
	public const int ROW_TERMINATOR=76;
	public const int SELECT=77;
	public const int SELECT_ALL=78;
	public const int SELECT_ARG=79;
	public const int SELECT_ID=80;
	public const int SELECT_STATEMENT=81;
	public const int STRING=82;
	public const int STRING_LITERAL=83;
	public const int TABLE_COLUMN_ARG=84;
	public const int TABLE_COLUMN_ARGS=85;
	public const int TABLE_MEMBER_REFERENCE=86;
	public const int TABLE_VARIABLE_REFERENCE=87;
	public const int TAKE=88;
	public const int TAKE_ATTRIBUTE=89;
	public const int TAKE_HTML=90;
	public const int TAKE_TEXT=91;
	public const int TEST=92;
	public const int TEXT=93;
	public const int THEN=94;
	public const int TO=95;
	public const int VARIABLE=96;
	public const int VARIABLE_DECLARATION=97;
	public const int VARIABLE_REFERENCE=98;
	public const int WHEN=99;
	public const int WHEN_BOOL_STATEMENT=100;
	public const int WHEN_LITERAL_STATEMENT=101;
	public const int WHERE=102;
	public const int WITH=103;
	public const int WS=104;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:62:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(62, 1);
		try
		{
			// Scrape.g:63:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:63:4: noBraceBlock EOF
				{
				DebugLocation(63, 4);
				PushFollow(Follow._noBraceBlock_in_program217);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(63, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 63:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(63, 24);
					// Scrape.g:63:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(63, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(63, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:64:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(64, 4);
				PushFollow(Follow._proxyStatement_in_program232);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(64, 19);
				PushFollow(Follow._noBraceBlock_in_program234);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(64, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program236); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: proxyStatement, noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(64, 39);
					// Scrape.g:64:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(64, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(64, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:65:4: procedureDefinition
				{
				DebugLocation(65, 4);
				PushFollow(Follow._procedureDefinition_in_program251);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(65, 27);
					// Scrape.g:65:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(65, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:68:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(68, 1);
		try
		{
			// Scrape.g:69:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:69:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(69, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition270); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(69, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition272); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(69, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition274); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(69, 27);
			// Scrape.g:69:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:69:27: tableColumnArgs
					{
					DebugLocation(69, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition276);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(69, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition279); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(69, 55);
			PushFollow(Follow._block_in_procedureDefinition281);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArgs, block, ID, PROCEDURE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 69:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(69, 64);
				// Scrape.g:69:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(69, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(69, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(69, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(69, 85);
				// Scrape.g:69:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(69, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:72:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(72, 1);
		try
		{
			// Scrape.g:73:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall )
			int alt3=6;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case ID:
				{
				alt3 = 3;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 4;
				}
				break;
			case EACH:
				{
				alt3 = 5;
				}
				break;
			case EXEC:
				{
				alt3 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:73:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._createTableStatement_in_statement309);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:74:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._sqlStatement_in_statement314);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:75:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement319);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:76:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._insertStatement_in_statement324);
				insertStatement16=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:77:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._eachStatement_in_statement329);
				eachStatement17=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:78:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._procedureCall_in_statement334);
				procedureCall18=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall18.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:81:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 4);
		TraceIn("procedureCall", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC19 = default(CommonToken);
		CommonToken ID20 = default(CommonToken);
		CommonToken OPENPAREN21 = default(CommonToken);
		CommonToken CLOSEPAREN23 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC19_tree = default(CommonTree);
		CommonTree ID20_tree = default(CommonTree);
		CommonTree OPENPAREN21_tree = default(CommonTree);
		CommonTree CLOSEPAREN23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(81, 1);
		try
		{
			// Scrape.g:82:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:82:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(82, 5);
			EXEC19=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall346); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC19);

			DebugLocation(82, 10);
			ID20=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall348); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID20);

			DebugLocation(82, 13);
			OPENPAREN21=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall350); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN21);

			DebugLocation(82, 23);
			// Scrape.g:82:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ID||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:82:23: procedureCallList
					{
					DebugLocation(82, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall352);
					procedureCallList22=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList22.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(82, 42);
			CLOSEPAREN23=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN23);



			{
			// AST REWRITE
			// elements: procedureCallList, ID, EXEC
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 82:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(82, 56);
				// Scrape.g:82:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(82, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(82, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(82, 66);
				// Scrape.g:82:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(82, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 4);
			LeaveRule("procedureCall", 4);
			LeaveRule_procedureCall();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:85:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 5);
		TraceIn("procedureCallList", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA25 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs24 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs26 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(85, 1);
		try
		{
			// Scrape.g:86:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:86:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(86, 4);
			// Scrape.g:86:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:86:5: callArgs COMMA
					{
					DebugLocation(86, 5);
					PushFollow(Follow._callArgs_in_procedureCallList378);
					callArgs24=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs24.Tree);
					DebugLocation(86, 14);
					COMMA25=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList380); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA25);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(86, 22);
			PushFollow(Follow._callArgs_in_procedureCallList384);
			callArgs26=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs26.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 86:31: -> ( callArgs )*
			{
				DebugLocation(86, 34);
				// Scrape.g:86:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(86, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 5);
			LeaveRule("procedureCallList", 5);
			LeaveRule_procedureCallList();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:89:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 6);
		TraceIn("callArgs", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL28_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(89, 1);
		try
		{
			// Scrape.g:90:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==ID||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:90:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(90, 4);
				PushFollow(Follow._expandVar_in_callArgs400);
				expandVar27=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar27.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:91:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(91, 4);
				STRING_LITERAL28=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs405); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL28_tree = (CommonTree)adaptor.Create(STRING_LITERAL28);
				adaptor.AddChild(root_0, STRING_LITERAL28_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 6);
			LeaveRule("callArgs", 6);
			LeaveRule_callArgs();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:94:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 7);
		TraceIn("proxyStatement", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES29 = default(CommonToken);
		CommonToken OPENPAREN30 = default(CommonToken);
		CommonToken CLOSEPAREN32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest33 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES29_tree = default(CommonTree);
		CommonTree OPENPAREN30_tree = default(CommonTree);
		CommonTree CLOSEPAREN32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(94, 1);
		try
		{
			// Scrape.g:95:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:95:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(95, 4);
			PROXIES29=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement416); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES29);

			DebugLocation(95, 12);
			OPENPAREN30=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN30);

			DebugLocation(95, 22);
			PushFollow(Follow._proxyList_in_proxyStatement420);
			proxyList31=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList31.Tree);
			DebugLocation(95, 32);
			CLOSEPAREN32=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement422); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN32);

			DebugLocation(95, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement424);
			proxyTest33=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest33.Tree);


			{
			// AST REWRITE
			// elements: PROXIES, proxyTest, proxyList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 95:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(95, 56);
				// Scrape.g:95:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(95, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(95, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(95, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 7);
			LeaveRule("proxyStatement", 7);
			LeaveRule_proxyStatement();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:98:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 8);
		TraceIn("proxyList", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL34 = default(CommonToken);
		CommonToken COMMA35 = default(CommonToken);
		CommonToken STRING_LITERAL36 = default(CommonToken);

		CommonTree STRING_LITERAL34_tree = default(CommonTree);
		CommonTree COMMA35_tree = default(CommonTree);
		CommonTree STRING_LITERAL36_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(98, 1);
		try
		{
			// Scrape.g:99:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:99:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(99, 4);
			// Scrape.g:99:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:99:5: STRING_LITERAL COMMA
					{
					DebugLocation(99, 5);
					STRING_LITERAL34=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL34);

					DebugLocation(99, 20);
					COMMA35=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList448); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA35);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(99, 28);
			STRING_LITERAL36=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList452); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL36);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 99:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(99, 46);
				// Scrape.g:99:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(99, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(99, 59);
				// Scrape.g:99:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(99, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 8);
			LeaveRule("proxyList", 8);
			LeaveRule_proxyList();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:102:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 9);
		TraceIn("proxyTest", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH37 = default(CommonToken);
		CommonToken TEST38 = default(CommonToken);
		CommonToken OPENBRACE39 = default(CommonToken);
		CommonToken CLOSEBRACE41 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH37_tree = default(CommonTree);
		CommonTree TEST38_tree = default(CommonTree);
		CommonTree OPENBRACE39_tree = default(CommonTree);
		CommonTree CLOSEBRACE41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(102, 1);
		try
		{
			// Scrape.g:103:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:103:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(103, 4);
			WITH37=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest472); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH37);

			DebugLocation(103, 9);
			TEST38=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest474); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST38);

			DebugLocation(103, 14);
			OPENBRACE39=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest476); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE39);

			DebugLocation(103, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest478);
			sqlStatement40=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement40.Tree);
			DebugLocation(103, 37);
			CLOSEBRACE41=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE41);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 103:48: -> sqlStatement
			{
				DebugLocation(103, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 9);
			LeaveRule("proxyTest", 9);
			LeaveRule_proxyTest();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:106:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 10);
		TraceIn("eachStatement", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH42 = default(CommonToken);
		CommonToken OPENPAREN43 = default(CommonToken);
		CommonToken IN44 = default(CommonToken);
		CommonToken CLOSEPAREN45 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block46 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH42_tree = default(CommonTree);
		CommonTree OPENPAREN43_tree = default(CommonTree);
		CommonTree IN44_tree = default(CommonTree);
		CommonTree CLOSEPAREN45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(106, 1);
		try
		{
			// Scrape.g:107:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:107:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(107, 4);
			EACH42=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH42);

			DebugLocation(107, 9);
			OPENPAREN43=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement497); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN43);

			DebugLocation(107, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement501); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(107, 24);
			IN44=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement503); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN44);

			DebugLocation(107, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(107, 32);
			CLOSEPAREN45=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement509); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN45);

			DebugLocation(107, 43);
			PushFollow(Follow._block_in_eachStatement511);
			block46=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block46.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 107:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(107, 52);
				// Scrape.g:107:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(107, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(107, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(107, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(107, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 10);
			LeaveRule("eachStatement", 10);
			LeaveRule_eachStatement();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:110:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 11);
		TraceIn("noBraceBlock", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(110, 1);
		try
		{
			// Scrape.g:111:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:111:4: ( statement )*
			{
			DebugLocation(111, 4);
			// Scrape.g:111:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:111:4: statement
					{
					DebugLocation(111, 4);
					PushFollow(Follow._statement_in_noBraceBlock536);
					statement47=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement47.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 111:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(111, 18);
				// Scrape.g:111:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(111, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(111, 26);
				// Scrape.g:111:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(111, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 11);
			LeaveRule("noBraceBlock", 11);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:114:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 12);
		TraceIn("block", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE48 = default(CommonToken);
		CommonToken CLOSEBRACE50 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE48_tree = default(CommonTree);
		CommonTree CLOSEBRACE50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(114, 1);
		try
		{
			// Scrape.g:115:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:115:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(115, 4);
			OPENBRACE48=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE48);

			DebugLocation(115, 14);
			// Scrape.g:115:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:115:14: statement
					{
					DebugLocation(115, 14);
					PushFollow(Follow._statement_in_block559);
					statement49=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement49.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(115, 25);
			CLOSEBRACE50=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block562); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE50);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 115:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(115, 39);
				// Scrape.g:115:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(115, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(115, 47);
				// Scrape.g:115:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(115, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 12);
			LeaveRule("block", 12);
			LeaveRule_block();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:118:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 13);
		TraceIn("expandExpression", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND51 = default(CommonToken);
		CommonToken OPENPAREN52 = default(CommonToken);
		CommonToken TO54 = default(CommonToken);
		CommonToken CLOSEPAREN56 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar55 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock57 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND51_tree = default(CommonTree);
		CommonTree OPENPAREN52_tree = default(CommonTree);
		CommonTree TO54_tree = default(CommonTree);
		CommonTree CLOSEPAREN56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(118, 1);
		try
		{
			// Scrape.g:119:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:119:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(119, 4);
			EXPAND51=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression582); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND51);

			DebugLocation(119, 11);
			OPENPAREN52=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression584); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN52);

			DebugLocation(119, 21);
			PushFollow(Follow._expandVar_in_expandExpression586);
			expandVar53=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar53.Tree);
			DebugLocation(119, 31);
			TO54=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression588); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO54);

			DebugLocation(119, 34);
			PushFollow(Follow._expandVar_in_expandExpression590);
			expandVar55=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar55.Tree);
			DebugLocation(119, 44);
			CLOSEPAREN56=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN56);

			DebugLocation(119, 55);
			// Scrape.g:119:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:119:55: expandBlock
					{
					DebugLocation(119, 55);
					PushFollow(Follow._expandBlock_in_expandExpression594);
					expandBlock57=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock57.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandBlock, EXPAND, expandVar, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 119:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(119, 71);
				// Scrape.g:119:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(119, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(119, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(119, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(119, 100);
				// Scrape.g:119:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(119, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 13);
			LeaveRule("expandExpression", 13);
			LeaveRule_expandExpression();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:122:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 14);
		TraceIn("expandBlock", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE58 = default(CommonToken);
		CommonToken CLOSEBRACE60 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE58_tree = default(CommonTree);
		CommonTree CLOSEBRACE60_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(122, 1);
		try
		{
			// Scrape.g:123:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:123:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(123, 4);
			OPENBRACE58=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock619); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE58);

			DebugLocation(123, 14);
			// Scrape.g:123:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==ID||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==105))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:123:14: mathExpression
					{
					DebugLocation(123, 14);
					PushFollow(Follow._mathExpression_in_expandBlock621);
					mathExpression59=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression59.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(123, 30);
			CLOSEBRACE60=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock624); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE60);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 123:41: -> ( mathExpression )*
			{
				DebugLocation(123, 44);
				// Scrape.g:123:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(123, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 14);
			LeaveRule("expandBlock", 14);
			LeaveRule_expandBlock();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:126:1: expandVar : ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 15);
		TraceIn("expandVar", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT61 = default(CommonToken);
		CommonToken ID63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT61_tree = default(CommonTree);
		CommonTree ID63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(126, 1);
		try
		{
			// Scrape.g:127:2: ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==ID))
			{
				int LA12_2 = input.LA(2);

				if ((LA12_2==DOT))
				{
					alt12 = 2;
				}
				else if ((LA12_2==EOF||(LA12_2>=CLOSEPAREN && LA12_2<=COMMA)||LA12_2==ID||LA12_2==INT||LA12_2==STRING_LITERAL||LA12_2==TO))
				{
					alt12 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:127:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(127, 4);
				INT61=(CommonToken)Match(input,INT,Follow._INT_in_expandVar640); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT61_tree = (CommonTree)adaptor.Create(INT61);
				adaptor.AddChild(root_0, INT61_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:128:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(128, 4);
				PushFollow(Follow._tableMemberReference_in_expandVar645);
				tableMemberReference62=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference62.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:129:4: ID
				{
				DebugLocation(129, 4);
				ID63=(CommonToken)Match(input,ID,Follow._ID_in_expandVar650); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID63);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 129:7: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(129, 10);
					// Scrape.g:129:10: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(129, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID63), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 15);
			LeaveRule("expandVar", 15);
			LeaveRule_expandVar();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:132:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 16);
		TraceIn("downloadExpression", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(132, 1);
		try
		{
			// Scrape.g:133:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:133:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression668);
				downloadPageExpresssion64=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion64.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:134:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression673);
				downloadImageExpression65=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression65.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 16);
			LeaveRule("downloadExpression", 16);
			LeaveRule_downloadExpression();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:137:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 17);
		TraceIn("downloadPageExpresssion", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE66 = default(CommonToken);
		CommonToken STRING_LITERAL67 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE69 = default(CommonToken);
		CommonToken ID70 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE71 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE66_tree = default(CommonTree);
		CommonTree STRING_LITERAL67_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE69_tree = default(CommonTree);
		CommonTree ID70_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(137, 1);
		try
		{
			// Scrape.g:138:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_PAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==ID))
				{
					int LA15_3 = input.LA(3);

					if ((LA15_3==DOT))
					{
						alt15 = 3;
					}
					else if ((LA15_3==EOF||LA15_3==CLOSEBRACE||LA15_3==CREATE||LA15_3==EACH||LA15_3==EXEC||LA15_3==ID||(LA15_3>=INSERT_DIRECTORY && LA15_3<=INSERT_INTO)||LA15_3==INSERT_OVERWRITE||LA15_3==SELECT||LA15_3==WHERE))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA15_2==SELECT||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:138:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 17);
				DOWNLOAD_PAGE66=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion684); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_PAGE66_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE66);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE66_tree, root_0);
				}
				DebugLocation(138, 19);
				// Scrape.g:138:19: ( STRING_LITERAL | sqlStatement )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==SELECT))
				{
					alt14 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:138:20: STRING_LITERAL
					{
					DebugLocation(138, 20);
					STRING_LITERAL67=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion688); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL67_tree = (CommonTree)adaptor.Create(STRING_LITERAL67);
					adaptor.AddChild(root_0, STRING_LITERAL67_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:138:37: sqlStatement
					{
					DebugLocation(138, 37);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion692);
					sqlStatement68=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement68.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:139:4: DOWNLOAD_PAGE ID
				{
				DebugLocation(139, 4);
				DOWNLOAD_PAGE69=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion698); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE69);

				DebugLocation(139, 18);
				ID70=(CommonToken)Match(input,ID,Follow._ID_in_downloadPageExpresssion700); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID70);



				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 139:21: -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(139, 24);
					// Scrape.g:139:24: ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(139, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(139, 40);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID70));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:140:4: DOWNLOAD_PAGE tableMemberReference
				{
				DebugLocation(140, 4);
				DOWNLOAD_PAGE71=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion714); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE71);

				DebugLocation(140, 18);
				PushFollow(Follow._tableMemberReference_in_downloadPageExpresssion716);
				tableMemberReference72=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference72.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 140:39: -> ^( DOWNLOAD_PAGE tableMemberReference )
				{
					DebugLocation(140, 42);
					// Scrape.g:140:42: ^( DOWNLOAD_PAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(140, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(140, 58);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 17);
			LeaveRule("downloadPageExpresssion", 17);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:143:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 18);
		TraceIn("downloadImageExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE73 = default(CommonToken);
		CommonToken STRING_LITERAL74 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE76 = default(CommonToken);
		CommonToken ID77 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE73_tree = default(CommonTree);
		CommonTree STRING_LITERAL74_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE76_tree = default(CommonTree);
		CommonTree ID77_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(143, 1);
		try
		{
			// Scrape.g:144:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==DOWNLOAD_IMAGE))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==ID))
				{
					int LA17_3 = input.LA(3);

					if ((LA17_3==DOT))
					{
						alt17 = 3;
					}
					else if ((LA17_3==EOF||LA17_3==CLOSEBRACE||LA17_3==CREATE||LA17_3==EACH||LA17_3==EXEC||LA17_3==ID||(LA17_3>=INSERT_DIRECTORY && LA17_3<=INSERT_INTO)||LA17_3==INSERT_OVERWRITE||LA17_3==SELECT||LA17_3==WHERE))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_2==SELECT||LA17_2==STRING_LITERAL))
				{
					alt17 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:144:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 18);
				DOWNLOAD_IMAGE73=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression735); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_IMAGE73_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE73);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE73_tree, root_0);
				}
				DebugLocation(144, 20);
				// Scrape.g:144:20: ( STRING_LITERAL | sqlStatement )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==STRING_LITERAL))
				{
					alt16 = 1;
				}
				else if ((LA16_1==SELECT))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:144:21: STRING_LITERAL
					{
					DebugLocation(144, 21);
					STRING_LITERAL74=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression739); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL74_tree = (CommonTree)adaptor.Create(STRING_LITERAL74);
					adaptor.AddChild(root_0, STRING_LITERAL74_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:144:38: sqlStatement
					{
					DebugLocation(144, 38);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression743);
					sqlStatement75=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement75.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:145:4: DOWNLOAD_IMAGE ID
				{
				DebugLocation(145, 4);
				DOWNLOAD_IMAGE76=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression749); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE76);

				DebugLocation(145, 19);
				ID77=(CommonToken)Match(input,ID,Follow._ID_in_downloadImageExpression751); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID77);



				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 145:22: -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(145, 25);
					// Scrape.g:145:25: ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(145, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(145, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID77));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:146:4: DOWNLOAD_IMAGE tableMemberReference
				{
				DebugLocation(146, 4);
				DOWNLOAD_IMAGE78=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE78);

				DebugLocation(146, 19);
				PushFollow(Follow._tableMemberReference_in_downloadImageExpression767);
				tableMemberReference79=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableMemberReference.Add(tableMemberReference79.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE, tableMemberReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 146:40: -> ^( DOWNLOAD_IMAGE tableMemberReference )
				{
					DebugLocation(146, 43);
					// Scrape.g:146:43: ^( DOWNLOAD_IMAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(146, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(146, 60);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 18);
			LeaveRule("downloadImageExpression", 18);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:150:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 19);
		TraceIn("tableMemberReference", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT80 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(150, 1);
		try
		{
			// Scrape.g:151:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:151:4: t= ID DOT m= ID
			{
			DebugLocation(151, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference790); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(151, 9);
			DOT80=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference792); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT80);

			DebugLocation(151, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference796); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 151:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(151, 21);
				// Scrape.g:151:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(151, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(151, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(151, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 19);
			LeaveRule("tableMemberReference", 19);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:154:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 20);
		TraceIn("variableDeclarationStatement", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID81 = default(CommonToken);
		CommonToken EQUALS82 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID81_tree = default(CommonTree);
		CommonTree EQUALS82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(154, 1);
		try
		{
			// Scrape.g:155:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:155:4: ID EQUALS assignmentExpression
			{
			DebugLocation(155, 4);
			ID81=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement820); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID81);

			DebugLocation(155, 7);
			EQUALS82=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement822); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS82);

			DebugLocation(155, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement824);
			assignmentExpression83=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression83.Tree);


			{
			// AST REWRITE
			// elements: ID, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 155:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(155, 38);
				// Scrape.g:155:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(155, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(155, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(155, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 20);
			LeaveRule("variableDeclarationStatement", 20);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:158:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 21);
		TraceIn("assignmentExpression", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression86 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(158, 1);
		try
		{
			// Scrape.g:159:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 105:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:159:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression845);
				mathExpression84=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression84.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:160:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression850);
				downloadExpression85=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression85.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:161:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression855);
				expandExpression86=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression86.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:162:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression860);
				sqlStatement87=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement87.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 21);
			LeaveRule("assignmentExpression", 21);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:165:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 22);
		TraceIn("mathExpression", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set89 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set89_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(165, 5);
		try
		{
			// Scrape.g:166:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:166:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(166, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression876);
			mathExpressionGroup88=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup88.Tree);
			DebugLocation(166, 29);
			// Scrape.g:166:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:166:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(166, 46);

					set89=(CommonToken)input.LT(1);
					set89=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set89), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(166, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression890);
					mathExpressionGroup90=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup90.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 22);
			LeaveRule("mathExpression", 22);
			LeaveRule_mathExpression();
		}
		DebugLocation(167, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:169:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 23);
		TraceIn("mathExpressionGroup", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set92 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(169, 3);
		try
		{
			// Scrape.g:170:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:170:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(170, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup908);
			atom91=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom91.Tree);
			DebugLocation(170, 9);
			// Scrape.g:170:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:170:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(170, 28);

					set92=(CommonToken)input.LT(1);
					set92=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set92), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(170, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup922);
					atom93=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom93.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 23);
			LeaveRule("mathExpressionGroup", 23);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(171, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:173:1: atom : ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 24);
		TraceIn("atom", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID94 = default(CommonToken);
		CommonToken char_literal95 = default(CommonToken);
		CommonToken OPENPAREN98 = default(CommonToken);
		CommonToken CLOSEPAREN100 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID94_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		CommonTree OPENPAREN98_tree = default(CommonTree);
		CommonTree CLOSEPAREN100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(173, 5);
		try
		{
			// Scrape.g:174:6: ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=5;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==DOT))
				{
					alt21 = 3;
				}
				else if ((LA21_2==EOF||LA21_2==ASTERISK||(LA21_2>=CLOSEBRACE && LA21_2<=CLOSEPAREN)||LA21_2==CREATE||LA21_2==DIV||LA21_2==EACH||LA21_2==EXEC||LA21_2==ID||(LA21_2>=INSERT_DIRECTORY && LA21_2<=INSERT_INTO)||(LA21_2>=INSERT_OVERWRITE && LA21_2<=INT)||LA21_2==MINIS||LA21_2==NULL||LA21_2==OPENPAREN||LA21_2==PLUS||LA21_2==SELECT||LA21_2==STRING_LITERAL||LA21_2==105))
				{
					alt21 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 105:
				{
				alt21 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 4;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:174:8: ID
				{
				DebugLocation(174, 8);
				ID94=(CommonToken)Match(input,ID,Follow._ID_in_atom943); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID94);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 174:11: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(174, 14);
					// Scrape.g:174:14: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(174, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID94), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:175:5: '$'
				{
				DebugLocation(175, 5);
				char_literal95=(CommonToken)Match(input,105,Follow._105_in_atom956); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(char_literal95);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 175:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(175, 12);
					// Scrape.g:175:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(175, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:176:5: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 5);
				PushFollow(Follow._tableMemberReference_in_atom968);
				tableMemberReference96=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference96.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:177:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 5);
				PushFollow(Follow._literal_in_atom974);
				literal97=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal97.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:178:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(178, 17);
				OPENPAREN98=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom983); if (state.failed) return retval;
				DebugLocation(178, 19);
				PushFollow(Follow._mathExpression_in_atom986);
				mathExpression99=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression99.Tree);
				DebugLocation(178, 44);
				CLOSEPAREN100=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom988); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 24);
			LeaveRule("atom", 24);
			LeaveRule_atom();
		}
		DebugLocation(179, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:181:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 25);
		TraceIn("literal", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set101 = default(CommonToken);

		CommonTree set101_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(181, 1);
		try
		{
			// Scrape.g:182:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 2);

			set101=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set101));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 25);
			LeaveRule("literal", 25);
			LeaveRule_literal();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:190:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 26);
		TraceIn("insertStatement", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO102 = default(CommonToken);
		CommonToken ID103 = default(CommonToken);
		CommonToken INSERT_DIRECTORY105 = default(CommonToken);
		CommonToken INSERT_OVERWRITE108 = default(CommonToken);
		CommonToken ID109 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO102_tree = default(CommonTree);
		CommonTree ID103_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY105_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE108_tree = default(CommonTree);
		CommonTree ID109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(190, 1);
		try
		{
			// Scrape.g:191:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:191:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(191, 4);
				INSERT_INTO102=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1030); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO102);

				DebugLocation(191, 16);
				ID103=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1032); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID103);

				DebugLocation(191, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1034);
				sqlStatement104=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement104.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 191:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(191, 34);
					// Scrape.g:191:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(191, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID103));
					DebugLocation(191, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:192:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(192, 4);
				INSERT_DIRECTORY105=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1049); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY105);

				DebugLocation(192, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1051);
				mathExpression106=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression106.Tree);
				DebugLocation(192, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1053);
				sqlStatement107=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement107.Tree);


				{
				// AST REWRITE
				// elements: mathExpression, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 192:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(192, 51);
					// Scrape.g:192:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(192, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(192, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(192, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:193:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(193, 4);
				INSERT_OVERWRITE108=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1067); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE108);

				DebugLocation(193, 21);
				ID109=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1069); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID109);

				DebugLocation(193, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1071);
				sqlStatement110=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement110.Tree);


				{
				// AST REWRITE
				// elements: INSERT_OVERWRITE, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 193:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(193, 39);
					// Scrape.g:193:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(193, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(193, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID109));
					DebugLocation(193, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 26);
			LeaveRule("insertStatement", 26);
			LeaveRule_insertStatement();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:198:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 27);
		TraceIn("sqlStatement", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(198, 1);
		try
		{
			// Scrape.g:199:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:199:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(199, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1095);
			selectStatement111=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement111.Tree);
			DebugLocation(199, 20);
			// Scrape.g:199:20: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:199:20: fromStatement
				{
				DebugLocation(199, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1097);
				fromStatement112=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement112.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(199, 35);
			// Scrape.g:199:35: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				int LA24_2 = input.LA(2);

				if ((EvaluatePredicate(synpred42_Scrape_fragment)))
				{
					alt24 = 1;
				}
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:199:35: whereStatement
				{
				DebugLocation(199, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1100);
				whereStatement113=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement113.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: fromStatement, whereStatement, selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 199:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(199, 54);
				// Scrape.g:199:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(199, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(199, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(199, 89);
				// Scrape.g:199:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(199, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(199, 104);
				// Scrape.g:199:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(199, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 27);
			LeaveRule("sqlStatement", 27);
			LeaveRule_sqlStatement();
		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:202:1: whereStatement : WHERE ^ ID EQUALS ! STRING_LITERAL ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 28);
		TraceIn("whereStatement", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE114 = default(CommonToken);
		CommonToken ID115 = default(CommonToken);
		CommonToken EQUALS116 = default(CommonToken);
		CommonToken STRING_LITERAL117 = default(CommonToken);

		CommonTree WHERE114_tree = default(CommonTree);
		CommonTree ID115_tree = default(CommonTree);
		CommonTree EQUALS116_tree = default(CommonTree);
		CommonTree STRING_LITERAL117_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(202, 1);
		try
		{
			// Scrape.g:203:2: ( WHERE ^ ID EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:203:4: WHERE ^ ID EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(203, 9);
			WHERE114=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1126); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WHERE114_tree = (CommonTree)adaptor.Create(WHERE114);
			root_0 = (CommonTree)adaptor.BecomeRoot(WHERE114_tree, root_0);
			}
			DebugLocation(203, 11);
			ID115=(CommonToken)Match(input,ID,Follow._ID_in_whereStatement1129); if (state.failed) return retval;
			if (state.backtracking == 0) {
			ID115_tree = (CommonTree)adaptor.Create(ID115);
			adaptor.AddChild(root_0, ID115_tree);
			}
			DebugLocation(203, 20);
			EQUALS116=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_whereStatement1131); if (state.failed) return retval;
			DebugLocation(203, 22);
			STRING_LITERAL117=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_whereStatement1134); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL117_tree = (CommonTree)adaptor.Create(STRING_LITERAL117);
			adaptor.AddChild(root_0, STRING_LITERAL117_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 28);
			LeaveRule("whereStatement", 28);
			LeaveRule_whereStatement();
		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:206:1: fromStatement : ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 29);
		TraceIn("fromStatement", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FROM118 = default(CommonToken);
		CommonToken ID119 = default(CommonToken);
		CommonToken FROM120 = default(CommonToken);
		CommonToken FROM122 = default(CommonToken);
		CommonToken FROM124 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FROM118_tree = default(CommonTree);
		CommonTree ID119_tree = default(CommonTree);
		CommonTree FROM120_tree = default(CommonTree);
		CommonTree FROM122_tree = default(CommonTree);
		CommonTree FROM124_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(206, 1);
		try
		{
			// Scrape.g:207:2: ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression )
			int alt25=4;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt25 = 1;
					}
					break;
				case DOWNLOAD_PAGE:
					{
					alt25 = 2;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt25 = 3;
					}
					break;
				case EXPAND:
					{
					alt25 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 25, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:207:4: FROM ID
				{
				DebugLocation(207, 4);
				FROM118=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1145); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM118);

				DebugLocation(207, 9);
				ID119=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1147); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID119);



				{
				// AST REWRITE
				// elements: FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 207:12: -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(207, 15);
					// Scrape.g:207:15: ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(207, 17);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(207, 22);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID119));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:208:4: FROM ^ downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(208, 8);
				FROM120=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1161); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM120_tree = (CommonTree)adaptor.Create(FROM120);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM120_tree, root_0);
				}
				DebugLocation(208, 10);
				PushFollow(Follow._downloadPageExpresssion_in_fromStatement1164);
				downloadPageExpresssion121=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion121.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:209:4: FROM ^ downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 8);
				FROM122=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1169); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM122_tree = (CommonTree)adaptor.Create(FROM122);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM122_tree, root_0);
				}
				DebugLocation(209, 10);
				PushFollow(Follow._downloadImageExpression_in_fromStatement1172);
				downloadImageExpression123=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression123.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:210:4: FROM ^ expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 8);
				FROM124=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1177); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM124_tree = (CommonTree)adaptor.Create(FROM124);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM124_tree, root_0);
				}
				DebugLocation(210, 10);
				PushFollow(Follow._expandExpression_in_fromStatement1180);
				expandExpression125=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression125.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 29);
			LeaveRule("fromStatement", 29);
			LeaveRule_fromStatement();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:213:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 30);
		TraceIn("selectStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT126 = default(CommonToken);
		CommonToken COMMA128 = default(CommonToken);
		CommonToken SELECT130 = default(CommonToken);
		CommonToken ASTERISK131 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs129 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT126_tree = default(CommonTree);
		CommonTree COMMA128_tree = default(CommonTree);
		CommonTree SELECT130_tree = default(CommonTree);
		CommonTree ASTERISK131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(213, 1);
		try
		{
			// Scrape.g:214:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==SELECT))
			{
				int LA27_2 = input.LA(2);

				if ((LA27_2==ASTERISK))
				{
					alt27 = 2;
				}
				else if ((LA27_2==CASE||LA27_2==ID||LA27_2==INT||LA27_2==NULL||LA27_2==PICK||LA27_2==STRING_LITERAL))
				{
					alt27 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:214:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(214, 4);
				SELECT126=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1191); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT126);

				DebugLocation(214, 11);
				// Scrape.g:214:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA26_2 = input.LA(2);

						if ((EvaluatePredicate(synpred46_Scrape_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA26_2 = input.LA(2);

						if ((EvaluatePredicate(synpred46_Scrape_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case ID:
						{
						int LA26_2 = input.LA(2);

						if ((EvaluatePredicate(synpred46_Scrape_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA26_2 = input.LA(2);

						if ((EvaluatePredicate(synpred46_Scrape_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:214:12: selectArgs COMMA
						{
						DebugLocation(214, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1194);
						selectArgs127=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs127.Tree);
						DebugLocation(214, 23);
						COMMA128=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1196); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA128);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(214, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1200);
				selectArgs129=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs129.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 214:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(214, 45);
					// Scrape.g:214:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(214, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(214, 54);
					// Scrape.g:214:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(214, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:215:4: SELECT ASTERISK
				{
				DebugLocation(215, 4);
				SELECT130=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1214); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT130);

				DebugLocation(215, 11);
				ASTERISK131=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1216); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK131);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 215:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(215, 23);
					// Scrape.g:215:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(215, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(215, 32);
					// Scrape.g:215:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(215, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(215, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK131));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 30);
			LeaveRule("selectStatement", 30);
			LeaveRule_selectStatement();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:219:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 31);
		TraceIn("selectArgs", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(219, 1);
		try
		{
			// Scrape.g:220:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==ID||LA29_1==INT||LA29_1==NULL||LA29_1==PICK||LA29_1==STRING_LITERAL))
			{
				alt29 = 1;
			}
			else if ((LA29_1==CASE))
			{
				alt29 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:220:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(220, 4);
				// Scrape.g:220:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==STRING_LITERAL))
						{
							int LA28_3 = input.LA(3);

							if ((LA28_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==STRING_LITERAL))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==MATCH))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==STRING_LITERAL))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==REPLACE))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==STRING_LITERAL))
													{
														int LA28_10 = input.LA(10);

														if ((LA28_10==PLUS))
														{
															alt28 = 1;
														}


													}


												}
												else if ((LA28_8==PLUS))
												{
													alt28 = 1;
												}


											}


										}
										else if ((LA28_6==PLUS))
										{
											alt28 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==MATCH))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==STRING_LITERAL))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==REPLACE))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==STRING_LITERAL))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==PLUS))
													{
														alt28 = 1;
													}


												}


											}
											else if ((LA28_7==PLUS))
											{
												alt28 = 1;
											}


										}


									}
									else if ((LA28_5==PLUS))
									{
										alt28 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==MATCH))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==STRING_LITERAL))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==REPLACE))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==STRING_LITERAL))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==PLUS))
													{
														alt28 = 1;
													}


												}


											}
											else if ((LA28_7==PLUS))
											{
												alt28 = 1;
											}


										}


									}
									else if ((LA28_5==PLUS))
									{
										alt28 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==PLUS))
						{
							alt28 = 1;
						}


						}
						break;
					case ID:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==DOT))
						{
							int LA28_3 = input.LA(3);

							if ((LA28_3==ID))
							{
								int LA28_4 = input.LA(4);

								if ((LA28_4==PLUS))
								{
									alt28 = 1;
								}


							}


						}
						else if ((LA28_2==PLUS))
						{
							alt28 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:220:5: selectArg PLUS
						{
						DebugLocation(220, 5);
						PushFollow(Follow._selectArg_in_selectArgs1242);
						selectArg132=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg132.Tree);
						DebugLocation(220, 15);
						PLUS133=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1244); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS133);


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(220, 22);
				PushFollow(Follow._selectArg_in_selectArgs1248);
				selectArg134=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg134.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 220:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(220, 35);
					// Scrape.g:220:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(220, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(220, 48);
					// Scrape.g:220:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(220, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:221:4: caseStatement
				{
				DebugLocation(221, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1262);
				caseStatement135=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement135.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 221:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(221, 21);
					// Scrape.g:221:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(221, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(221, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 31);
			LeaveRule("selectArgs", 31);
			LeaveRule_selectArgs();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:226:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 32);
		TraceIn("caseStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE136 = default(CommonToken);
		CommonToken ELSE138 = default(CommonToken);
		CommonToken END140 = default(CommonToken);
		CommonToken CASE141 = default(CommonToken);
		CommonToken ELSE144 = default(CommonToken);
		CommonToken END146 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression139 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE136_tree = default(CommonTree);
		CommonTree ELSE138_tree = default(CommonTree);
		CommonTree END140_tree = default(CommonTree);
		CommonTree CASE141_tree = default(CommonTree);
		CommonTree ELSE144_tree = default(CommonTree);
		CommonTree END146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(226, 1);
		try
		{
			// Scrape.g:227:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==CASE))
			{
				int LA34_2 = input.LA(2);

				if ((LA34_2==WHEN))
				{
					alt34 = 1;
				}
				else if ((LA34_2==ID||LA34_2==INT||LA34_2==NULL||LA34_2==PICK||LA34_2==STRING_LITERAL))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:227:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(227, 4);
				CASE136=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1284); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE136);

				DebugLocation(227, 9);
				// Scrape.g:227:9: ( whenBoolStatement )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if ((LA30_1==WHEN))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:227:9: whenBoolStatement
						{
						DebugLocation(227, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1286);
						whenBoolStatement137=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement137.Tree);

						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(227, 28);
				// Scrape.g:227:28: ( ELSE caseExpression )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ELSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:227:29: ELSE caseExpression
					{
					DebugLocation(227, 29);
					ELSE138=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1290); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE138);

					DebugLocation(227, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1292);
					caseExpression139=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression139.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(227, 51);
				END140=(CommonToken)Match(input,END,Follow._END_in_caseStatement1296); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END140);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(227, 58);
					// Scrape.g:227:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(227, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(227, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(227, 89);
					// Scrape.g:227:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(227, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:228:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(228, 4);
				CASE141=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1313); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE141);

				DebugLocation(228, 9);
				PushFollow(Follow._selectArg_in_caseStatement1315);
				selectArg142=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg142.Tree);
				DebugLocation(228, 19);
				// Scrape.g:228:19: ( whenLiteralStatement )+
				int cnt32=0;
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_1 = input.LA(1);

					if ((LA32_1==WHEN))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:228:19: whenLiteralStatement
						{
						DebugLocation(228, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1317);
						whenLiteralStatement143=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement143.Tree);

						}
						break;

					default:
						if (cnt32 >= 1)
							goto loop32;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee32 = new EarlyExitException( 32, input );
						DebugRecognitionException(eee32);
						throw eee32;
					}
					cnt32++;
				}
				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(228, 41);
				// Scrape.g:228:41: ( ELSE caseExpression )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==ELSE))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:228:42: ELSE caseExpression
					{
					DebugLocation(228, 42);
					ELSE144=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1321); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE144);

					DebugLocation(228, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1323);
					caseExpression145=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression145.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(228, 64);
				END146=(CommonToken)Match(input,END,Follow._END_in_caseStatement1327); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END146);



				{
				// AST REWRITE
				// elements: caseExpression, selectArg, whenLiteralStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 228:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(228, 71);
					// Scrape.g:228:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(228, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(228, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(228, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(228, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(228, 114);
					// Scrape.g:228:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(228, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 32);
			LeaveRule("caseStatement", 32);
			LeaveRule_caseStatement();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:231:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 33);
		TraceIn("caseExpression", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(231, 1);
		try
		{
			// Scrape.g:232:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:232:4: selectArg
			{
			DebugLocation(232, 4);
			PushFollow(Follow._selectArg_in_caseExpression1352);
			selectArg147=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg147.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 232:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(232, 17);
				// Scrape.g:232:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(232, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(232, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 33);
			LeaveRule("caseExpression", 33);
			LeaveRule_caseExpression();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:235:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 34);
		TraceIn("whenLiteralStatement", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN148 = default(CommonToken);
		CommonToken THEN150 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN148_tree = default(CommonTree);
		CommonTree THEN150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(235, 1);
		try
		{
			// Scrape.g:236:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:236:4: WHEN literal THEN caseExpression
			{
			DebugLocation(236, 4);
			WHEN148=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1371); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN148);

			DebugLocation(236, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1373);
			literal149=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal149.Tree);
			DebugLocation(236, 17);
			THEN150=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1375); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN150);

			DebugLocation(236, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1377);
			caseExpression151=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression151.Tree);


			{
			// AST REWRITE
			// elements: literal, caseExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(236, 40);
				// Scrape.g:236:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(236, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(236, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 34);
			LeaveRule("whenLiteralStatement", 34);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:239:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 35);
		TraceIn("whenBoolStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN152 = default(CommonToken);
		CommonToken THEN154 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN152_tree = default(CommonTree);
		CommonTree THEN154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(239, 1);
		try
		{
			// Scrape.g:240:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:240:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(240, 4);
			WHEN152=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN152);

			DebugLocation(240, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1400);
			boolExpression153=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression153.Tree);
			DebugLocation(240, 24);
			THEN154=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1402); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN154);

			DebugLocation(240, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1404);
			caseExpression155=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression155.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(240, 47);
				// Scrape.g:240:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(240, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(240, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 35);
			LeaveRule("whenBoolStatement", 35);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:243:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 36);
		TraceIn("boolExpression", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR157_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(243, 1);
		try
		{
			// Scrape.g:244:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:244:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(244, 4);
			PushFollow(Follow._andExpression_in_boolExpression1425);
			andExpression156=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression156.Tree);
			DebugLocation(244, 18);
			// Scrape.g:244:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==OR))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:244:19: OR ^ andExpression
					{
					DebugLocation(244, 21);
					OR157=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1428); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR157_tree = (CommonTree)adaptor.Create(OR157);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR157_tree, root_0);
					}
					DebugLocation(244, 23);
					PushFollow(Follow._andExpression_in_boolExpression1431);
					andExpression158=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression158.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 36);
			LeaveRule("boolExpression", 36);
			LeaveRule_boolExpression();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:247:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 37);
		TraceIn("andExpression", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND160 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND160_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(247, 1);
		try
		{
			// Scrape.g:248:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:248:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(248, 5);
			PushFollow(Follow._boolTerm_in_andExpression1445);
			boolTerm159=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm159.Tree);
			DebugLocation(248, 14);
			// Scrape.g:248:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==AND))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:248:15: AND ^ boolTerm
					{
					DebugLocation(248, 18);
					AND160=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1448); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND160_tree = (CommonTree)adaptor.Create(AND160);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND160_tree, root_0);
					}
					DebugLocation(248, 20);
					PushFollow(Follow._boolTerm_in_andExpression1451);
					boolTerm161=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm161.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 37);
			LeaveRule("andExpression", 37);
			LeaveRule_andExpression();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:251:1: boolTerm : ( selectArg ( boolOperator ^ selectArg )? | OPENPAREN boolExpression CLOSEPAREN );
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 38);
		TraceIn("boolTerm", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENPAREN165 = default(CommonToken);
		CommonToken CLOSEPAREN167 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator163 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENPAREN165_tree = default(CommonTree);
		CommonTree CLOSEPAREN167_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(251, 1);
		try
		{
			// Scrape.g:252:2: ( selectArg ( boolOperator ^ selectArg )? | OPENPAREN boolExpression CLOSEPAREN )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==ID||LA38_1==INT||LA38_1==NULL||LA38_1==PICK||LA38_1==STRING_LITERAL))
			{
				alt38 = 1;
			}
			else if ((LA38_1==OPENPAREN))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:252:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(252, 4);
				PushFollow(Follow._selectArg_in_boolTerm1466);
				selectArg162=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg162.Tree);
				DebugLocation(252, 14);
				// Scrape.g:252:14: ( boolOperator ^ selectArg )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==EQUALS||(LA37_1>=GREATERTHAN && LA37_1<=GREATERTHANEQUAL)||(LA37_1>=LESSTHAN && LA37_1<=LESSTHANEQUAL)||LA37_1==NOTEQUAL))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:252:15: boolOperator ^ selectArg
					{
					DebugLocation(252, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1469);
					boolOperator163=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator163.Tree, root_0);
					DebugLocation(252, 29);
					PushFollow(Follow._selectArg_in_boolTerm1472);
					selectArg164=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg164.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:253:4: OPENPAREN boolExpression CLOSEPAREN
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(253, 4);
				OPENPAREN165=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1480); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPENPAREN165_tree = (CommonTree)adaptor.Create(OPENPAREN165);
				adaptor.AddChild(root_0, OPENPAREN165_tree);
				}
				DebugLocation(253, 14);
				PushFollow(Follow._boolExpression_in_boolTerm1482);
				boolExpression166=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression166.Tree);
				DebugLocation(253, 29);
				CLOSEPAREN167=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSEPAREN167_tree = (CommonTree)adaptor.Create(CLOSEPAREN167);
				adaptor.AddChild(root_0, CLOSEPAREN167_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 38);
			LeaveRule("boolTerm", 38);
			LeaveRule_boolTerm();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:256:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 39);
		TraceIn("boolOperator", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set168 = default(CommonToken);

		CommonTree set168_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(256, 1);
		try
		{
			// Scrape.g:257:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(257, 2);

			set168=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set168));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 39);
			LeaveRule("boolOperator", 39);
			LeaveRule_boolOperator();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:265:1: selectArg : ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 40);
		TraceIn("selectArg", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(265, 1);
		try
		{
			// Scrape.g:266:2: ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt39 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt39 = 2;
				}
				break;
			case ID:
				{
				int LA39_2 = input.LA(2);

				if ((LA39_2==DOT))
				{
					alt39 = 4;
				}
				else if ((LA39_2==EOF||LA39_2==AND||(LA39_2>=CLOSEBRACE && LA39_2<=COMMA)||LA39_2==CREATE||(LA39_2>=EACH && LA39_2<=EXEC)||(LA39_2>=FROM && LA39_2<=GREATERTHANEQUAL)||LA39_2==ID||(LA39_2>=INSERT_DIRECTORY && LA39_2<=INSERT_INTO)||LA39_2==INSERT_OVERWRITE||(LA39_2>=LESSTHAN && LA39_2<=LESSTHANEQUAL)||LA39_2==NOTEQUAL||LA39_2==OR||LA39_2==PLUS||LA39_2==SELECT||LA39_2==THEN||LA39_2==WHEN||LA39_2==WHERE))
				{
					alt39 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:266:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(266, 4);
				PushFollow(Follow._pickStatement_in_selectArg1531);
				pickStatement169=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement169.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:267:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._literal_in_selectArg1536);
				literal170=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal170.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:268:4: ID
				{
				DebugLocation(268, 4);
				ID171=(CommonToken)Match(input,ID,Follow._ID_in_selectArg1541); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID171);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 268:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(268, 10);
					// Scrape.g:268:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(268, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID171), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:269:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._tableMemberReference_in_selectArg1553);
				tableMemberReference172=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference172.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 40);
			LeaveRule("selectArg", 40);
			LeaveRule_selectArg();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:272:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 41);
		TraceIn("pickStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK173 = default(CommonToken);
		CommonToken STRING_LITERAL174 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK173_tree = default(CommonTree);
		CommonTree STRING_LITERAL174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:273:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(273, 4);
			PICK173=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK173);

			DebugLocation(273, 9);
			STRING_LITERAL174=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1567); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL174);

			DebugLocation(273, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1569);
			takeStatement175=takeStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_takeStatement.Add(takeStatement175.Tree);
			DebugLocation(273, 38);
			// Scrape.g:273:38: ( matchStatement )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==MATCH))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:273:38: matchStatement
				{
				DebugLocation(273, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1571);
				matchStatement176=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement176.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }



			{
			// AST REWRITE
			// elements: PICK, matchStatement, takeStatement, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(273, 57);
				// Scrape.g:273:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(273, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(273, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(273, 93);
				// Scrape.g:273:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(273, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 41);
			LeaveRule("pickStatement", 41);
			LeaveRule_pickStatement();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:276:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 42);
		TraceIn("takeStatement", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE177 = default(CommonToken);
		CommonToken ATTRIBUTE178 = default(CommonToken);
		CommonToken STRING_LITERAL179 = default(CommonToken);
		CommonToken TAKE180 = default(CommonToken);
		CommonToken TEXT181 = default(CommonToken);
		CommonToken TAKE182 = default(CommonToken);
		CommonToken HTML183 = default(CommonToken);

		CommonTree TAKE177_tree = default(CommonTree);
		CommonTree ATTRIBUTE178_tree = default(CommonTree);
		CommonTree STRING_LITERAL179_tree = default(CommonTree);
		CommonTree TAKE180_tree = default(CommonTree);
		CommonTree TEXT181_tree = default(CommonTree);
		CommonTree TAKE182_tree = default(CommonTree);
		CommonTree HTML183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(276, 1);
		try
		{
			// Scrape.g:277:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt41=3;
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt41 = 1;
					}
					break;
				case TEXT:
					{
					alt41 = 2;
					}
					break;
				case HTML:
					{
					alt41 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 41, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:277:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(277, 4);
				TAKE177=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE177);

				DebugLocation(277, 9);
				ATTRIBUTE178=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1599); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE178);

				DebugLocation(277, 19);
				STRING_LITERAL179=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1601); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL179);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 277:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(277, 37);
					// Scrape.g:277:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(277, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(277, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:278:4: TAKE TEXT
				{
				DebugLocation(278, 4);
				TAKE180=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1614); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE180);

				DebugLocation(278, 9);
				TEXT181=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1616); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT181);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(278, 17);
					// Scrape.g:278:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:279:4: TAKE HTML
				{
				DebugLocation(279, 4);
				TAKE182=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1627); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE182);

				DebugLocation(279, 9);
				HTML183=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1629); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML183);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:14: -> ^( TAKE_HTML )
				{
					DebugLocation(279, 17);
					// Scrape.g:279:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 42);
			LeaveRule("takeStatement", 42);
			LeaveRule_takeStatement();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:282:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 43);
		TraceIn("matchStatement", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH184 = default(CommonToken);
		CommonToken STRING_LITERAL185 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH184_tree = default(CommonTree);
		CommonTree STRING_LITERAL185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(282, 1);
		try
		{
			// Scrape.g:283:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:283:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(283, 4);
			MATCH184=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1647); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH184);

			DebugLocation(283, 10);
			STRING_LITERAL185=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1649); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL185);

			DebugLocation(283, 25);
			// Scrape.g:283:25: ( replaceStatement )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==REPLACE))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:283:25: replaceStatement
				{
				DebugLocation(283, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1651);
				replaceStatement186=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement186.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: replaceStatement, STRING_LITERAL, MATCH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(283, 46);
				// Scrape.g:283:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(283, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(283, 69);
				// Scrape.g:283:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(283, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 43);
			LeaveRule("matchStatement", 43);
			LeaveRule_matchStatement();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:286:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 44);
		TraceIn("replaceStatement", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE187 = default(CommonToken);
		CommonToken STRING_LITERAL188 = default(CommonToken);

		CommonTree REPLACE187_tree = default(CommonTree);
		CommonTree STRING_LITERAL188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(286, 1);
		try
		{
			// Scrape.g:287:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:287:4: REPLACE STRING_LITERAL
			{
			DebugLocation(287, 4);
			REPLACE187=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE187);

			DebugLocation(287, 12);
			STRING_LITERAL188=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1676); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL188);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(287, 30);
				// Scrape.g:287:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(287, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 44);
			LeaveRule("replaceStatement", 44);
			LeaveRule_replaceStatement();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:291:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 45);
		TraceIn("createTableStatement", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE189 = default(CommonToken);
		CommonToken FILE190 = default(CommonToken);
		CommonToken ID191 = default(CommonToken);
		CommonToken OPENPAREN192 = default(CommonToken);
		CommonToken CLOSEPAREN194 = default(CommonToken);
		CommonToken CREATE197 = default(CommonToken);
		CommonToken BUFFER198 = default(CommonToken);
		CommonToken ID199 = default(CommonToken);
		CommonToken OPENPAREN200 = default(CommonToken);
		CommonToken CLOSEPAREN202 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement195 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation196 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE189_tree = default(CommonTree);
		CommonTree FILE190_tree = default(CommonTree);
		CommonTree ID191_tree = default(CommonTree);
		CommonTree OPENPAREN192_tree = default(CommonTree);
		CommonTree CLOSEPAREN194_tree = default(CommonTree);
		CommonTree CREATE197_tree = default(CommonTree);
		CommonTree BUFFER198_tree = default(CommonTree);
		CommonTree ID199_tree = default(CommonTree);
		CommonTree OPENPAREN200_tree = default(CommonTree);
		CommonTree CLOSEPAREN202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(291, 1);
		try
		{
			// Scrape.g:292:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==CREATE))
			{
				int LA46_2 = input.LA(2);

				if ((LA46_2==FILE))
				{
					alt46 = 1;
				}
				else if ((LA46_2==BUFFER))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:292:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(292, 4);
				CREATE189=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1697); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE189);

				DebugLocation(292, 11);
				FILE190=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE190);

				DebugLocation(292, 16);
				ID191=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1701); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID191);

				DebugLocation(292, 19);
				OPENPAREN192=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1703); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN192);

				DebugLocation(292, 29);
				// Scrape.g:292:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==ID))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:292:29: tableColumnArgs
						{
						DebugLocation(292, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1705);
						tableColumnArgs193=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs193.Tree);

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(292, 46);
				CLOSEPAREN194=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1708); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN194);

				DebugLocation(292, 57);
				// Scrape.g:292:57: ( fileTableWithStatement )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==WITH))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:292:57: fileTableWithStatement
					{
					DebugLocation(292, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1710);
					fileTableWithStatement195=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement195.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(292, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1713);
				fileTableLocation196=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation196.Tree);


				{
				// AST REWRITE
				// elements: tableColumnArgs, ID, fileTableLocation, fileTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(292, 102);
					// Scrape.g:292:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(292, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(292, 118);
					// Scrape.g:292:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(292, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(292, 135);
					// Scrape.g:292:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(292, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(292, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:293:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(293, 4);
				CREATE197=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1734); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE197);

				DebugLocation(293, 11);
				BUFFER198=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1736); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER198);

				DebugLocation(293, 18);
				ID199=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID199);

				DebugLocation(293, 21);
				OPENPAREN200=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1740); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN200);

				DebugLocation(293, 31);
				// Scrape.g:293:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==ID))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:293:31: tableColumnArgs
						{
						DebugLocation(293, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1742);
						tableColumnArgs201=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs201.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(293, 48);
				CLOSEPAREN202=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1745); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN202);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(293, 62);
					// Scrape.g:293:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(293, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(293, 80);
					// Scrape.g:293:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(293, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 45);
			LeaveRule("createTableStatement", 45);
			LeaveRule_createTableStatement();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:296:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 46);
		TraceIn("fileTableLocation", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION203 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION203_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:297:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(297, 12);
			LOCATION203=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1767); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION203_tree = (CommonTree)adaptor.Create(LOCATION203);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION203_tree, root_0);
			}
			DebugLocation(297, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation1770);
			mathExpression204=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression204.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 46);
			LeaveRule("fileTableLocation", 46);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:300:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 47);
		TraceIn("fileTableWithStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH205 = default(CommonToken);
		CommonToken OPENPAREN206 = default(CommonToken);
		CommonToken CLOSEPAREN208 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement207 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH205_tree = default(CommonTree);
		CommonTree OPENPAREN206_tree = default(CommonTree);
		CommonTree CLOSEPAREN208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(300, 1);
		try
		{
			// Scrape.g:301:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:301:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(301, 4);
			WITH205=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1782); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH205);

			DebugLocation(301, 9);
			OPENPAREN206=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1784); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN206);

			DebugLocation(301, 19);
			// Scrape.g:301:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==FIELD_TERMINATOR||LA47_1==ROW_TERMINATOR))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:301:19: fileTableWithVariablesStatement
					{
					DebugLocation(301, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1786);
					fileTableWithVariablesStatement207=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement207.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }

			DebugLocation(301, 52);
			CLOSEPAREN208=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1789); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN208);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(301, 66);
				// Scrape.g:301:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(301, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(301, 73);
				// Scrape.g:301:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(301, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 47);
			LeaveRule("fileTableWithStatement", 47);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:304:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 48);
		TraceIn("fileTableWithVariablesStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA210 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement209 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement211 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(304, 1);
		try
		{
			// Scrape.g:305:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:305:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(305, 4);
			// Scrape.g:305:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==FIELD_TERMINATOR||LA48_1==ROW_TERMINATOR))
				{
					int LA48_2 = input.LA(2);

					if ((LA48_2==EQUALS))
					{
						int LA48_3 = input.LA(3);

						if ((LA48_3==STRING_LITERAL))
						{
							int LA48_4 = input.LA(4);

							if ((LA48_4==COMMA))
							{
								alt48 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:305:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(305, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1812);
					fileTableWithVariableStatement209=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement209.Tree);
					DebugLocation(305, 36);
					COMMA210=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1814); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA210);


					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }

			DebugLocation(305, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1818);
			fileTableWithVariableStatement211=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement211.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 305:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(305, 78);
				// Scrape.g:305:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(305, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 48);
			LeaveRule("fileTableWithVariablesStatement", 48);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:308:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 49);
		TraceIn("fileTableWithVariableStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set212 = default(CommonToken);
		CommonToken EQUALS213 = default(CommonToken);
		CommonToken STRING_LITERAL214 = default(CommonToken);

		CommonTree set212_tree = default(CommonTree);
		CommonTree EQUALS213_tree = default(CommonTree);
		CommonTree STRING_LITERAL214_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(308, 1);
		try
		{
			// Scrape.g:309:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:309:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(309, 39);

			set212=(CommonToken)input.LT(1);
			set212=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set212), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(309, 47);
			EQUALS213=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement1843); if (state.failed) return retval;
			DebugLocation(309, 49);
			STRING_LITERAL214=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement1846); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL214_tree = (CommonTree)adaptor.Create(STRING_LITERAL214);
			adaptor.AddChild(root_0, STRING_LITERAL214_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 49);
			LeaveRule("fileTableWithVariableStatement", 49);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:312:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 50);
		TraceIn("tableColumnArgs", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA216 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg217 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(312, 1);
		try
		{
			// Scrape.g:313:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:313:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(313, 4);
			// Scrape.g:313:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==ID))
				{
					int LA49_2 = input.LA(2);

					if ((LA49_2==FLOAT||LA49_2==IDENTITY||LA49_2==INTEGER||LA49_2==STRING))
					{
						int LA49_3 = input.LA(3);

						if ((LA49_3==COMMA))
						{
							alt49 = 1;
						}


					}


				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:313:5: tableColumnArg COMMA
					{
					DebugLocation(313, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs1858);
					tableColumnArg215=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg215.Tree);
					DebugLocation(313, 20);
					COMMA216=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs1860); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA216);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(313, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs1864);
			tableColumnArg217=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg217.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 313:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(313, 46);
				// Scrape.g:313:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(313, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(313, 66);
				// Scrape.g:313:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(313, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 50);
			LeaveRule("tableColumnArgs", 50);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:316:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 51);
		TraceIn("tableColumnArg", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID218 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType219 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(316, 1);
		try
		{
			// Scrape.g:317:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:317:4: ID dataType
			{
			DebugLocation(317, 4);
			ID218=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg1885); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID218);

			DebugLocation(317, 7);
			PushFollow(Follow._dataType_in_tableColumnArg1887);
			dataType219=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType219.Tree);


			{
			// AST REWRITE
			// elements: dataType, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(317, 19);
				// Scrape.g:317:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(317, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(317, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(317, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 51);
			LeaveRule("tableColumnArg", 51);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:320:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 52);
		TraceIn("dataType", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set220 = default(CommonToken);

		CommonTree set220_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(320, 1);
		try
		{
			// Scrape.g:321:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(321, 2);

			set220=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set220));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 52);
			LeaveRule("dataType", 52);
			LeaveRule_dataType();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred42_Scrape_fragment();
	partial void LeaveRule_synpred42_Scrape_fragment();

	// $ANTLR start synpred42_Scrape
	private void synpred42_Scrape_fragment()
	{
		EnterRule_synpred42_Scrape_fragment();
		EnterRule("synpred42_Scrape_fragment", 94);
		TraceIn("synpred42_Scrape_fragment", 94);
		try
		{
			// Scrape.g:199:35: ( whereStatement )
			DebugEnterAlt(1);
			// Scrape.g:199:35: whereStatement
			{
			DebugLocation(199, 35);
			PushFollow(Follow._whereStatement_in_synpred42_Scrape1100);
			whereStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_Scrape_fragment", 94);
			LeaveRule("synpred42_Scrape_fragment", 94);
			LeaveRule_synpred42_Scrape_fragment();
		}
	}
	// $ANTLR end synpred42_Scrape

	partial void EnterRule_synpred46_Scrape_fragment();
	partial void LeaveRule_synpred46_Scrape_fragment();

	// $ANTLR start synpred46_Scrape
	private void synpred46_Scrape_fragment()
	{
		EnterRule_synpred46_Scrape_fragment();
		EnterRule("synpred46_Scrape_fragment", 98);
		TraceIn("synpred46_Scrape_fragment", 98);
		try
		{
			// Scrape.g:214:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:214:12: selectArgs COMMA
			{
			DebugLocation(214, 12);
			PushFollow(Follow._selectArgs_in_synpred46_Scrape1194);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(214, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred46_Scrape1196); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_Scrape_fragment", 98);
			LeaveRule("synpred46_Scrape_fragment", 98);
			LeaveRule_synpred46_Scrape_fragment();
		}
	}
	// $ANTLR end synpred46_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program217 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program232 = new BitSet(new ulong[]{0x590022080000UL,0x2000UL});
		public static readonly BitSet _noBraceBlock_in_program234 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition270 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition272 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition274 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition276 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition279 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _block_in_procedureDefinition281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall346 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_procedureCall348 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall350 = new BitSet(new ulong[]{0x810000010000UL,0x80000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall352 = new BitSet(new ulong[]{0x810000010000UL,0x80000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList378 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList380 = new BitSet(new ulong[]{0x810000000000UL,0x80000UL});
		public static readonly BitSet _callArgs_in_procedureCallList384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement416 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement418 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _proxyList_in_proxyStatement420 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement422 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList446 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList448 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest472 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _TEST_in_proxyTest474 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest476 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest478 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement495 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement497 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_eachStatement501 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IN_in_eachStatement503 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_eachStatement507 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement509 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _block_in_eachStatement511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock536 = new BitSet(new ulong[]{0x590022080002UL,0x2000UL});
		public static readonly BitSet _OPENBRACE_in_block557 = new BitSet(new ulong[]{0x590022088000UL,0x2000UL});
		public static readonly BitSet _statement_in_block559 = new BitSet(new ulong[]{0x590022088000UL,0x2000UL});
		public static readonly BitSet _CLOSEBRACE_in_block562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression582 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression584 = new BitSet(new ulong[]{0x810000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression586 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _TO_in_expandExpression588 = new BitSet(new ulong[]{0x810000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression590 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression592 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _expandBlock_in_expandExpression594 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock619 = new BitSet(new ulong[]{0x5000810000008000UL,0x20000080000UL});
		public static readonly BitSet _mathExpression_in_expandBlock621 = new BitSet(new ulong[]{0x5000810000008000UL,0x20000080000UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_expandVar645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_expandVar650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion684 = new BitSet(new ulong[]{0x0UL,0x82000UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion698 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_downloadPageExpresssion700 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion714 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadPageExpresssion716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression735 = new BitSet(new ulong[]{0x0UL,0x82000UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression749 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_downloadImageExpression751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression765 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadImageExpression767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference790 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _DOT_in_tableMemberReference792 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement820 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement822 = new BitSet(new ulong[]{0x5000810041800000UL,0x20000082000UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression876 = new BitSet(new ulong[]{0x200000000000002UL,0x4UL});
		public static readonly BitSet _set_in_mathExpression879 = new BitSet(new ulong[]{0x5000810000000000UL,0x20000080000UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression890 = new BitSet(new ulong[]{0x200000000000002UL,0x4UL});
		public static readonly BitSet _atom_in_mathExpressionGroup908 = new BitSet(new ulong[]{0x200042UL});
		public static readonly BitSet _set_in_mathExpressionGroup911 = new BitSet(new ulong[]{0x5000810000000000UL,0x20000080000UL});
		public static readonly BitSet _atom_in_mathExpressionGroup922 = new BitSet(new ulong[]{0x200042UL});
		public static readonly BitSet _ID_in_atom943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_atom956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_atom968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom983 = new BitSet(new ulong[]{0x5000810000000000UL,0x20000080000UL});
		public static readonly BitSet _mathExpression_in_atom986 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1030 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_insertStatement1032 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1034 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1049 = new BitSet(new ulong[]{0x5000810000000000UL,0x20000080000UL});
		public static readonly BitSet _mathExpression_in_insertStatement1051 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1067 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_insertStatement1069 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1095 = new BitSet(new ulong[]{0x1000000002UL,0x4000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1097 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1126 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_whereStatement1129 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_whereStatement1131 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_whereStatement1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1145 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_fromStatement1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1161 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1169 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1177 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _expandExpression_in_fromStatement1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1191 = new BitSet(new ulong[]{0x1000810000000800UL,0x80002UL});
		public static readonly BitSet _selectArgs_in_selectStatement1194 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1196 = new BitSet(new ulong[]{0x1000810000000800UL,0x80002UL});
		public static readonly BitSet _selectArgs_in_selectStatement1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1214 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1242 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _PLUS_in_selectArgs1244 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _selectArg_in_selectArgs1248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1284 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1286 = new BitSet(new ulong[]{0xC000000UL,0x800000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1290 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _caseExpression_in_caseStatement1292 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _END_in_caseStatement1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1313 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _selectArg_in_caseStatement1315 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1317 = new BitSet(new ulong[]{0xC000000UL,0x800000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1321 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _caseExpression_in_caseStatement1323 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _END_in_caseStatement1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1371 = new BitSet(new ulong[]{0x1000800000000000UL,0x80000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1373 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1375 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1398 = new BitSet(new ulong[]{0x5000810000000000UL,0x80002UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1400 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1402 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1425 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _OR_in_boolExpression1428 = new BitSet(new ulong[]{0x5000810000000000UL,0x80002UL});
		public static readonly BitSet _andExpression_in_boolExpression1431 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _boolTerm_in_andExpression1445 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1448 = new BitSet(new ulong[]{0x5000810000000000UL,0x80002UL});
		public static readonly BitSet _boolTerm_in_andExpression1451 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _selectArg_in_boolTerm1466 = new BitSet(new ulong[]{0x806006010000002UL});
		public static readonly BitSet _boolOperator_in_boolTerm1469 = new BitSet(new ulong[]{0x1000810000000000UL,0x80002UL});
		public static readonly BitSet _selectArg_in_boolTerm1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1480 = new BitSet(new ulong[]{0x5000810000000000UL,0x80002UL});
		public static readonly BitSet _boolExpression_in_boolTerm1482 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectArg1541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectArg1553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1565 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1567 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1569 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1597 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1599 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1614 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1627 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1647 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1649 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1674 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1697 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1699 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1701 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1703 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1705 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1708 = new BitSet(new ulong[]{0x40000000000000UL,0x8000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1710 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1734 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1736 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1738 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1740 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1742 = new BitSet(new ulong[]{0x10000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1767 = new BitSet(new ulong[]{0x5000810000000000UL,0x20000080000UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation1770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1782 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1784 = new BitSet(new ulong[]{0x100010000UL,0x1000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1786 = new BitSet(new ulong[]{0x100010000UL,0x1000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1812 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1814 = new BitSet(new ulong[]{0x100000000UL,0x1000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement1834 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement1843 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1858 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs1860 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg1885 = new BitSet(new ulong[]{0x1020800000000UL,0x40000UL});
		public static readonly BitSet _dataType_in_tableColumnArg1887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whereStatement_in_synpred42_Scrape1100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred46_Scrape1194 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred46_Scrape1196 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
