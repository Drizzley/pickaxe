//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-03-23 21:23:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NODES", "NOTEQUAL", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "SET", "STRING", "STRING_LITERAL", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "THREAD", "TO", "TRUNCATE", "UPDATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__117=117;
	public const int T__118=118;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CREATE=20;
	public const int DIGIT=21;
	public const int DIV=22;
	public const int DOT=23;
	public const int DOWNLOAD_IMAGE=24;
	public const int DOWNLOAD_PAGE=25;
	public const int EACH=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EQUALS=29;
	public const int EXEC=30;
	public const int EXPAND=31;
	public const int EXPAND_INTERATION_VARIABLE=32;
	public const int FIELD_TERMINATOR=33;
	public const int FILE=34;
	public const int FILE_TABLE=35;
	public const int FLOAT=36;
	public const int FROM=37;
	public const int GREATERTHAN=38;
	public const int GREATERTHANEQUAL=39;
	public const int HTML=40;
	public const int ID=41;
	public const int IDENTITY=42;
	public const int IDENTITY_VAR=43;
	public const int IN=44;
	public const int INNER_JOIN=45;
	public const int INSERT_DIRECTORY=46;
	public const int INSERT_INTO=47;
	public const int INSERT_INTO_DIRECTORY=48;
	public const int INSERT_OVERWRITE=49;
	public const int INT=50;
	public const int INTEGER=51;
	public const int JOIN=52;
	public const int LESSTHAN=53;
	public const int LESSTHANEQUAL=54;
	public const int LETTER=55;
	public const int LINE_COMMENT_DASH=56;
	public const int LINE_COMMENT_SLASH=57;
	public const int LOCATION=58;
	public const int MATCH=59;
	public const int MEMBER_REFERENCE=60;
	public const int MINIS=61;
	public const int NEWLINE=62;
	public const int NODES=63;
	public const int NOTEQUAL=64;
	public const int NULL=65;
	public const int NULL_OPERATOR=66;
	public const int OPENBRACE=67;
	public const int OPENPAREN=68;
	public const int OR=69;
	public const int OTHERCHARS=70;
	public const int PICK=71;
	public const int PLUS=72;
	public const int POST_PICK=73;
	public const int PRE_PICK=74;
	public const int PROCEDURE=75;
	public const int PROGRAM=76;
	public const int PROXIES=77;
	public const int PROXY_LIST=78;
	public const int QUOTE=79;
	public const int REPLACE=80;
	public const int ROW_REFERENCE=81;
	public const int ROW_TERMINATOR=82;
	public const int SELECT=83;
	public const int SELECT_ALL=84;
	public const int SELECT_ARG=85;
	public const int SELECT_ID=86;
	public const int SELECT_STATEMENT=87;
	public const int SET=88;
	public const int STRING=89;
	public const int STRING_LITERAL=90;
	public const int TABLE_ALIAS=91;
	public const int TABLE_COLUMN_ARG=92;
	public const int TABLE_COLUMN_ARGS=93;
	public const int TABLE_MEMBER_REFERENCE=94;
	public const int TABLE_VARIABLE_REFERENCE=95;
	public const int TAKE=96;
	public const int TAKE_ATTRIBUTE=97;
	public const int TAKE_HTML=98;
	public const int TAKE_TEXT=99;
	public const int TEST=100;
	public const int TEXT=101;
	public const int THEN=102;
	public const int THREAD=103;
	public const int TO=104;
	public const int TRUNCATE=105;
	public const int UPDATE=106;
	public const int VAR=107;
	public const int VARIABLE_ASSIGNMENT=108;
	public const int VARIABLE_DECLARATION=109;
	public const int VARIABLE_REFERENCE=110;
	public const int WHEN=111;
	public const int WHEN_BOOL_STATEMENT=112;
	public const int WHEN_LITERAL_STATEMENT=113;
	public const int WHERE=114;
	public const int WITH=115;
	public const int WS=116;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:64:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(64, 1);
		try
		{
			// Scrape.g:65:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case UPDATE:
			case VAR:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:65:4: noBraceBlock EOF
				{
				DebugLocation(65, 4);
				PushFollow(Follow._noBraceBlock_in_program227);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(65, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program229); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(65, 24);
					// Scrape.g:65:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(65, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:66:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(66, 4);
				PushFollow(Follow._proxyStatement_in_program242);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(66, 19);
				PushFollow(Follow._noBraceBlock_in_program244);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(66, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program246); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 66:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(66, 39);
					// Scrape.g:66:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(66, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(66, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(66, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:67:4: procedureDefinition
				{
				DebugLocation(67, 4);
				PushFollow(Follow._procedureDefinition_in_program261);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 67:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(67, 27);
					// Scrape.g:67:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(67, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(67, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(68, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:70:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(70, 1);
		try
		{
			// Scrape.g:71:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:71:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(71, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition280); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(71, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition282); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(71, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition284); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(71, 27);
			// Scrape.g:71:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:71:27: tableColumnArgs
					{
					DebugLocation(71, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition286);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(71, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(71, 55);
			PushFollow(Follow._block_in_procedureDefinition291);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: PROCEDURE, ID, tableColumnArgs, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 71:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(71, 64);
				// Scrape.g:71:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(71, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(71, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(71, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(71, 85);
				// Scrape.g:71:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(71, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:74:1: statement : ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(74, 1);
		try
		{
			// Scrape.g:75:2: ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | procedureCall | truncateTable )
			int alt3=9;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case UPDATE:
				{
				alt3 = 3;
				}
				break;
			case VAR:
				{
				alt3 = 4;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 5;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 6;
				}
				break;
			case EACH:
				{
				alt3 = 7;
				}
				break;
			case EXEC:
				{
				alt3 = 8;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:75:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._createTableStatement_in_statement319);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:76:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._sqlStatement_in_statement324);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:77:4: updateStatment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._updateStatment_in_statement329);
				updateStatment15=updateStatment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, updateStatment15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:78:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement334);
				variableDeclarationStatement16=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:79:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement339);
				variableAssignmentStatement17=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:80:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._insertStatement_in_statement344);
				insertStatement18=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:81:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._eachStatement_in_statement349);
				eachStatement19=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:82:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._procedureCall_in_statement354);
				procedureCall20=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall20.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Scrape.g:83:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._truncateTable_in_statement359);
				truncateTable21=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable21.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:86:1: truncateTable : TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE22 = default(CommonToken);
		CommonToken ID23 = default(CommonToken);

		CommonTree TRUNCATE22_tree = default(CommonTree);
		CommonTree ID23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(86, 1);
		try
		{
			// Scrape.g:87:2: ( TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:87:4: TRUNCATE ID
			{
			DebugLocation(87, 4);
			TRUNCATE22=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable370); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE22);

			DebugLocation(87, 13);
			ID23=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable372); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID23);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 87:16: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(87, 19);
				// Scrape.g:87:19: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(87, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(87, 30);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID23));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:91:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC24 = default(CommonToken);
		CommonToken ID25 = default(CommonToken);
		CommonToken OPENPAREN26 = default(CommonToken);
		CommonToken CLOSEPAREN28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC24_tree = default(CommonTree);
		CommonTree ID25_tree = default(CommonTree);
		CommonTree OPENPAREN26_tree = default(CommonTree);
		CommonTree CLOSEPAREN28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(91, 1);
		try
		{
			// Scrape.g:92:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:92:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(92, 5);
			EXEC24=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall394); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC24);

			DebugLocation(92, 10);
			ID25=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall396); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID25);

			DebugLocation(92, 13);
			OPENPAREN26=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN26);

			DebugLocation(92, 23);
			// Scrape.g:92:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:92:23: procedureCallList
					{
					DebugLocation(92, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall400);
					procedureCallList27=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList27.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(92, 42);
			CLOSEPAREN28=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN28);



			{
			// AST REWRITE
			// elements: procedureCallList, EXEC, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 92:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(92, 56);
				// Scrape.g:92:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(92, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(92, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(92, 66);
				// Scrape.g:92:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(92, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:95:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(95, 1);
		try
		{
			// Scrape.g:96:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:96:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(96, 4);
			// Scrape.g:96:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:96:5: callArgs COMMA
					{
					DebugLocation(96, 5);
					PushFollow(Follow._callArgs_in_procedureCallList426);
					callArgs29=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs29.Tree);
					DebugLocation(96, 14);
					COMMA30=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList428); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA30);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(96, 22);
			PushFollow(Follow._callArgs_in_procedureCallList432);
			callArgs31=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs31.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 96:31: -> ( callArgs )*
			{
				DebugLocation(96, 34);
				// Scrape.g:96:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(96, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:99:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL33 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar32 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL33_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(99, 1);
		try
		{
			// Scrape.g:100:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:100:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(100, 4);
				PushFollow(Follow._expandVar_in_callArgs448);
				expandVar32=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar32.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:101:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(101, 4);
				STRING_LITERAL33=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL33_tree = (CommonTree)adaptor.Create(STRING_LITERAL33);
				adaptor.AddChild(root_0, STRING_LITERAL33_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:104:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES34 = default(CommonToken);
		CommonToken OPENPAREN35 = default(CommonToken);
		CommonToken CLOSEPAREN37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES34_tree = default(CommonTree);
		CommonTree OPENPAREN35_tree = default(CommonTree);
		CommonTree CLOSEPAREN37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(104, 1);
		try
		{
			// Scrape.g:105:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:105:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(105, 4);
			PROXIES34=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement464); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES34);

			DebugLocation(105, 12);
			OPENPAREN35=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement466); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN35);

			DebugLocation(105, 22);
			PushFollow(Follow._proxyList_in_proxyStatement468);
			proxyList36=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList36.Tree);
			DebugLocation(105, 32);
			CLOSEPAREN37=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement470); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN37);

			DebugLocation(105, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement472);
			proxyTest38=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest38.Tree);


			{
			// AST REWRITE
			// elements: proxyTest, proxyList, PROXIES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 105:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(105, 56);
				// Scrape.g:105:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(105, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(105, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(105, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:108:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL39 = default(CommonToken);
		CommonToken COMMA40 = default(CommonToken);
		CommonToken STRING_LITERAL41 = default(CommonToken);

		CommonTree STRING_LITERAL39_tree = default(CommonTree);
		CommonTree COMMA40_tree = default(CommonTree);
		CommonTree STRING_LITERAL41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(108, 1);
		try
		{
			// Scrape.g:109:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:109:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(109, 4);
			// Scrape.g:109:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:109:5: STRING_LITERAL COMMA
					{
					DebugLocation(109, 5);
					STRING_LITERAL39=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList494); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL39);

					DebugLocation(109, 20);
					COMMA40=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList496); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA40);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(109, 28);
			STRING_LITERAL41=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList500); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL41);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 109:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(109, 46);
				// Scrape.g:109:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(109, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(109, 59);
				// Scrape.g:109:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(109, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:112:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH42 = default(CommonToken);
		CommonToken TEST43 = default(CommonToken);
		CommonToken OPENBRACE44 = default(CommonToken);
		CommonToken CLOSEBRACE46 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH42_tree = default(CommonTree);
		CommonTree TEST43_tree = default(CommonTree);
		CommonTree OPENBRACE44_tree = default(CommonTree);
		CommonTree CLOSEBRACE46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(112, 1);
		try
		{
			// Scrape.g:113:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:113:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(113, 4);
			WITH42=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest520); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH42);

			DebugLocation(113, 9);
			TEST43=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest522); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST43);

			DebugLocation(113, 14);
			OPENBRACE44=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest524); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE44);

			DebugLocation(113, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest526);
			sqlStatement45=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement45.Tree);
			DebugLocation(113, 37);
			CLOSEBRACE46=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest528); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE46);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 113:48: -> sqlStatement
			{
				DebugLocation(113, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:116:1: eachStatement : EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 11);
		TraceIn("eachStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH47 = default(CommonToken);
		CommonToken OPENPAREN48 = default(CommonToken);
		CommonToken VAR49 = default(CommonToken);
		CommonToken IN50 = default(CommonToken);
		CommonToken CLOSEPAREN51 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH47_tree = default(CommonTree);
		CommonTree OPENPAREN48_tree = default(CommonTree);
		CommonTree VAR49_tree = default(CommonTree);
		CommonTree IN50_tree = default(CommonTree);
		CommonTree CLOSEPAREN51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(116, 1);
		try
		{
			// Scrape.g:117:2: ( EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:117:4: EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(117, 4);
			EACH47=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement543); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH47);

			DebugLocation(117, 9);
			OPENPAREN48=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement545); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN48);

			DebugLocation(117, 19);
			VAR49=(CommonToken)Match(input,VAR,Follow._VAR_in_eachStatement547); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR49);

			DebugLocation(117, 24);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement551); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(117, 28);
			IN50=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement553); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN50);

			DebugLocation(117, 32);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(117, 36);
			CLOSEPAREN51=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement559); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN51);

			DebugLocation(117, 47);
			PushFollow(Follow._block_in_eachStatement561);
			block52=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block52.Tree);


			{
			// AST REWRITE
			// elements: EACH, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 117:53: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(117, 56);
				// Scrape.g:117:56: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(117, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(117, 63);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(117, 88);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(117, 117);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 11);
			LeaveRule("eachStatement", 11);
			LeaveRule_eachStatement();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:120:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 12);
		TraceIn("noBraceBlock", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(120, 1);
		try
		{
			// Scrape.g:121:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:121:4: ( statement )*
			{
			DebugLocation(121, 4);
			// Scrape.g:121:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:121:4: statement
					{
					DebugLocation(121, 4);
					PushFollow(Follow._statement_in_noBraceBlock586);
					statement53=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement53.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 121:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(121, 18);
				// Scrape.g:121:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(121, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(121, 26);
				// Scrape.g:121:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(121, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 12);
			LeaveRule("noBraceBlock", 12);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:124:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 13);
		TraceIn("block", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE54 = default(CommonToken);
		CommonToken CLOSEBRACE56 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement55 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE54_tree = default(CommonTree);
		CommonTree CLOSEBRACE56_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(124, 1);
		try
		{
			// Scrape.g:125:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:125:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(125, 4);
			OPENBRACE54=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block607); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE54);

			DebugLocation(125, 14);
			// Scrape.g:125:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:125:14: statement
					{
					DebugLocation(125, 14);
					PushFollow(Follow._statement_in_block609);
					statement55=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement55.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(125, 25);
			CLOSEBRACE56=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block612); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE56);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 125:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(125, 39);
				// Scrape.g:125:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(125, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(125, 47);
				// Scrape.g:125:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(125, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 13);
			LeaveRule("block", 13);
			LeaveRule_block();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:128:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 14);
		TraceIn("expandExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND57 = default(CommonToken);
		CommonToken OPENPAREN58 = default(CommonToken);
		CommonToken TO60 = default(CommonToken);
		CommonToken CLOSEPAREN62 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar61 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock63 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND57_tree = default(CommonTree);
		CommonTree OPENPAREN58_tree = default(CommonTree);
		CommonTree TO60_tree = default(CommonTree);
		CommonTree CLOSEPAREN62_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(128, 1);
		try
		{
			// Scrape.g:129:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:129:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(129, 4);
			EXPAND57=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression632); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND57);

			DebugLocation(129, 11);
			OPENPAREN58=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN58);

			DebugLocation(129, 21);
			PushFollow(Follow._expandVar_in_expandExpression636);
			expandVar59=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar59.Tree);
			DebugLocation(129, 31);
			TO60=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression638); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO60);

			DebugLocation(129, 34);
			PushFollow(Follow._expandVar_in_expandExpression640);
			expandVar61=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar61.Tree);
			DebugLocation(129, 44);
			CLOSEPAREN62=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression642); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN62);

			DebugLocation(129, 55);
			// Scrape.g:129:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:129:55: expandBlock
					{
					DebugLocation(129, 55);
					PushFollow(Follow._expandBlock_in_expandExpression644);
					expandBlock63=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock63.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandBlock, expandVar, expandVar, EXPAND
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 129:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(129, 71);
				// Scrape.g:129:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(129, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(129, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(129, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(129, 100);
				// Scrape.g:129:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(129, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 14);
			LeaveRule("expandExpression", 14);
			LeaveRule_expandExpression();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:132:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 15);
		TraceIn("expandBlock", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE64 = default(CommonToken);
		CommonToken CLOSEBRACE66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE64_tree = default(CommonTree);
		CommonTree CLOSEBRACE66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(132, 1);
		try
		{
			// Scrape.g:133:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:133:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(133, 4);
			OPENBRACE64=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock669); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE64);

			DebugLocation(133, 14);
			// Scrape.g:133:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==117))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:133:14: mathExpression
					{
					DebugLocation(133, 14);
					PushFollow(Follow._mathExpression_in_expandBlock671);
					mathExpression65=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression65.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(133, 30);
			CLOSEBRACE66=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE66);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 133:41: -> ( mathExpression )*
			{
				DebugLocation(133, 44);
				// Scrape.g:133:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(133, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 15);
			LeaveRule("expandBlock", 15);
			LeaveRule_expandBlock();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:136:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 16);
		TraceIn("expandVar", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT67 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT67_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(136, 1);
		try
		{
			// Scrape.g:137:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:137:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(137, 4);
				INT67=(CommonToken)Match(input,INT,Follow._INT_in_expandVar690); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT67_tree = (CommonTree)adaptor.Create(INT67);
				adaptor.AddChild(root_0, INT67_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:138:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._variableReference_in_expandVar695);
				variableReference68=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference68.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 16);
			LeaveRule("expandVar", 16);
			LeaveRule_expandVar();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:141:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 17);
		TraceIn("downloadExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion69 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(141, 1);
		try
		{
			// Scrape.g:142:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:142:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression706);
				downloadPageExpresssion69=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion69.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:143:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression711);
				downloadImageExpression70=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression70.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 17);
			LeaveRule("downloadExpression", 17);
			LeaveRule_downloadExpression();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:146:1: downloadPageExpresssion : DOWNLOAD_PAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 18);
		TraceIn("downloadPageExpresssion", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE71 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE71_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(146, 1);
		try
		{
			// Scrape.g:147:2: ( DOWNLOAD_PAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:147:4: DOWNLOAD_PAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 17);
			DOWNLOAD_PAGE71=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion722); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_PAGE71_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE71);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE71_tree, root_0);
			}
			DebugLocation(147, 19);
			PushFollow(Follow._downloadExpressionArg_in_downloadPageExpresssion725);
			downloadExpressionArg72=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg72.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 18);
			LeaveRule("downloadPageExpresssion", 18);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:150:1: downloadImageExpression : DOWNLOAD_IMAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 19);
		TraceIn("downloadImageExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE73_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(150, 1);
		try
		{
			// Scrape.g:151:2: ( DOWNLOAD_IMAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:151:4: DOWNLOAD_IMAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(151, 18);
			DOWNLOAD_IMAGE73=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression736); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_IMAGE73_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE73);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE73_tree, root_0);
			}
			DebugLocation(151, 20);
			PushFollow(Follow._downloadExpressionArg_in_downloadImageExpression739);
			downloadExpressionArg74=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg74.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 19);
			LeaveRule("downloadImageExpression", 19);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_downloadExpressionArg();
	partial void LeaveRule_downloadExpressionArg();
	// $ANTLR start "downloadExpressionArg"
	// Scrape.g:154:1: downloadExpressionArg : ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference );
	[GrammarRule("downloadExpressionArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg()
	{
		EnterRule_downloadExpressionArg();
		EnterRule("downloadExpressionArg", 20);
		TraceIn("downloadExpressionArg", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL75 = default(CommonToken);
		CommonToken OPENPAREN76 = default(CommonToken);
		CommonToken CLOSEPAREN78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL75_tree = default(CommonTree);
		CommonTree OPENPAREN76_tree = default(CommonTree);
		CommonTree CLOSEPAREN78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadExpressionArg");
		DebugLocation(154, 1);
		try
		{
			// Scrape.g:155:2: ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case STRING_LITERAL:
				{
				alt14 = 1;
				}
				break;
			case OPENPAREN:
				{
				alt14 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:155:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				STRING_LITERAL75=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadExpressionArg750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL75_tree = (CommonTree)adaptor.Create(STRING_LITERAL75);
				adaptor.AddChild(root_0, STRING_LITERAL75_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:156:4: OPENPAREN ! sqlStatement CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 13);
				OPENPAREN76=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadExpressionArg755); if (state.failed) return retval;
				DebugLocation(156, 15);
				PushFollow(Follow._sqlStatement_in_downloadExpressionArg758);
				sqlStatement77=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement77.Tree);
				DebugLocation(156, 38);
				CLOSEPAREN78=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadExpressionArg760); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:157:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._variableReference_in_downloadExpressionArg766);
				variableReference79=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference79.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpressionArg", 20);
			LeaveRule("downloadExpressionArg", 20);
			LeaveRule_downloadExpressionArg();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpressionArg"); }
		return retval;

	}
	// $ANTLR end "downloadExpressionArg"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:160:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 21);
		TraceIn("variableReference", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID80 = default(CommonToken);
		CommonToken COMMAND_VAR81 = default(CommonToken);
		CommonToken IDENTITY_VAR82 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference83 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID80_tree = default(CommonTree);
		CommonTree COMMAND_VAR81_tree = default(CommonTree);
		CommonTree IDENTITY_VAR82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(160, 1);
		try
		{
			// Scrape.g:161:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA15_2 = input.LA(2);

				if ((LA15_2==DOT))
				{
					alt15 = 4;
				}
				else if ((LA15_2==EOF||LA15_2==ASTERISK||(LA15_2>=CLOSEBRACE && LA15_2<=COMMAND_VAR)||LA15_2==CREATE||LA15_2==DIV||LA15_2==EACH||(LA15_2>=EQUALS && LA15_2<=EXEC)||LA15_2==ID||LA15_2==IDENTITY_VAR||(LA15_2>=INSERT_DIRECTORY && LA15_2<=INSERT_INTO)||(LA15_2>=INSERT_OVERWRITE && LA15_2<=INT)||LA15_2==MINIS||LA15_2==NULL||LA15_2==OPENPAREN||LA15_2==PLUS||LA15_2==SELECT||LA15_2==STRING_LITERAL||(LA15_2>=TO && LA15_2<=VAR)||(LA15_2>=WHERE && LA15_2<=WITH)||LA15_2==117))
				{
					alt15 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt15 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:161:4: ID
				{
				DebugLocation(161, 4);
				ID80=(CommonToken)Match(input,ID,Follow._ID_in_variableReference778); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID80);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 161:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(161, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID80));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:162:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				COMMAND_VAR81=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference788); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR81_tree = (CommonTree)adaptor.Create(COMMAND_VAR81);
				adaptor.AddChild(root_0, COMMAND_VAR81_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:163:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 4);
				IDENTITY_VAR82=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference793); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR82_tree = (CommonTree)adaptor.Create(IDENTITY_VAR82);
				adaptor.AddChild(root_0, IDENTITY_VAR82_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:164:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference798);
				tableMemberReference83=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference83.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 21);
			LeaveRule("variableReference", 21);
			LeaveRule_variableReference();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:167:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 22);
		TraceIn("tableMemberReference", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT84 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT84_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(167, 1);
		try
		{
			// Scrape.g:168:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:168:4: t= ID DOT m= ID
			{
			DebugLocation(168, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference812); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(168, 9);
			DOT84=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference814); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT84);

			DebugLocation(168, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference818); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 168:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(168, 21);
				// Scrape.g:168:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(168, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(168, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(168, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 22);
			LeaveRule("tableMemberReference", 22);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:171:1: variableDeclarationStatement : VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 23);
		TraceIn("variableDeclarationStatement", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR85 = default(CommonToken);
		CommonToken ID86 = default(CommonToken);
		CommonToken EQUALS87 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR85_tree = default(CommonTree);
		CommonTree ID86_tree = default(CommonTree);
		CommonTree EQUALS87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(171, 1);
		try
		{
			// Scrape.g:172:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:172:4: VAR ID EQUALS assignmentExpression
			{
			DebugLocation(172, 4);
			VAR85=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement842); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR85);

			DebugLocation(172, 8);
			ID86=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement844); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID86);

			DebugLocation(172, 11);
			EQUALS87=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement846); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS87);

			DebugLocation(172, 18);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement848);
			assignmentExpression88=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression88.Tree);


			{
			// AST REWRITE
			// elements: ID, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(172, 42);
				// Scrape.g:172:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(172, 65);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(172, 68);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 23);
			LeaveRule("variableDeclarationStatement", 23);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:175:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 24);
		TraceIn("variableAssignmentStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(175, 1);
		try
		{
			// Scrape.g:176:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:176:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(176, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement869);
			variableReference89=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference89.Tree);
			DebugLocation(176, 22);
			EQUALS90=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement871); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS90);

			DebugLocation(176, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement873);
			assignmentExpression91=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression91.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 176:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(176, 53);
				// Scrape.g:176:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(176, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(176, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(176, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 24);
			LeaveRule("variableAssignmentStatement", 24);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:179:1: nullOperator : COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 25);
		TraceIn("nullOperator", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMAND_VAR92 = default(CommonToken);
		CommonToken NULL_OPERATOR93 = default(CommonToken);
		CommonToken COMMAND_VAR94 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMAND_VAR92_tree = default(CommonTree);
		CommonTree NULL_OPERATOR93_tree = default(CommonTree);
		CommonTree COMMAND_VAR94_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(179, 1);
		try
		{
			// Scrape.g:180:2: ( COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:180:4: COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(180, 4);
			COMMAND_VAR92=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator894); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMAND_VAR92_tree = (CommonTree)adaptor.Create(COMMAND_VAR92);
			adaptor.AddChild(root_0, COMMAND_VAR92_tree);
			}
			DebugLocation(180, 29);
			NULL_OPERATOR93=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator896); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR93_tree = (CommonTree)adaptor.Create(NULL_OPERATOR93);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR93_tree, root_0);
			}
			DebugLocation(180, 31);
			// Scrape.g:180:31: ( COMMAND_VAR | literal )
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==COMMAND_VAR))
			{
				alt16 = 1;
			}
			else if ((LA16_1==INT||LA16_1==NULL||LA16_1==STRING_LITERAL))
			{
				alt16 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:180:32: COMMAND_VAR
				{
				DebugLocation(180, 32);
				COMMAND_VAR94=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR94_tree = (CommonTree)adaptor.Create(COMMAND_VAR94);
				adaptor.AddChild(root_0, COMMAND_VAR94_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:180:44: literal
				{
				DebugLocation(180, 44);
				PushFollow(Follow._literal_in_nullOperator902);
				literal95=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal95.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 25);
			LeaveRule("nullOperator", 25);
			LeaveRule_nullOperator();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:183:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 26);
		TraceIn("assignmentExpression", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(183, 1);
		try
		{
			// Scrape.g:184:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt17=6;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA17_2 = input.LA(2);

				if ((EvaluatePredicate(synpred28_Scrape_fragment)))
				{
					alt17 = 1;
				}
				else if ((true))
				{
					alt17 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA17_2 = input.LA(2);

				if ((LA17_2==NULL_OPERATOR))
				{
					alt17 = 5;
				}
				else if ((EvaluatePredicate(synpred28_Scrape_fragment)))
				{
					alt17 = 1;
				}
				else if ((true))
				{
					alt17 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA17_2 = input.LA(2);

				if ((EvaluatePredicate(synpred28_Scrape_fragment)))
				{
					alt17 = 1;
				}
				else if ((true))
				{
					alt17 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 117:
				{
				alt17 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt17 = 2;
				}
				break;
			case EXPAND:
				{
				alt17 = 3;
				}
				break;
			case SELECT:
				{
				alt17 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:184:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression914);
				mathExpression96=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression96.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:185:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression919);
				downloadExpression97=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression97.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:186:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression924);
				expandExpression98=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression98.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:187:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression929);
				sqlStatement99=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement99.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:188:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression934);
				nullOperator100=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator100.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:189:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression939);
				variableReference101=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference101.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 26);
			LeaveRule("assignmentExpression", 26);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:192:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 27);
		TraceIn("mathExpression", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set103 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set103_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(192, 5);
		try
		{
			// Scrape.g:193:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:193:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(193, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression955);
			mathExpressionGroup102=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup102.Tree);
			DebugLocation(193, 29);
			// Scrape.g:193:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==MINIS||LA18_1==PLUS))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:193:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(193, 46);

					set103=(CommonToken)input.LT(1);
					set103=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set103), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(193, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression969);
					mathExpressionGroup104=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup104.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 27);
			LeaveRule("mathExpression", 27);
			LeaveRule_mathExpression();
		}
		DebugLocation(194, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:196:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 28);
		TraceIn("mathExpressionGroup", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set106 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set106_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(196, 3);
		try
		{
			// Scrape.g:197:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:197:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(197, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup987);
			atom105=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom105.Tree);
			DebugLocation(197, 9);
			// Scrape.g:197:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==ASTERISK||LA19_1==DIV))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:197:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(197, 28);

					set106=(CommonToken)input.LT(1);
					set106=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set106), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(197, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1001);
					atom107=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom107.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 28);
			LeaveRule("mathExpressionGroup", 28);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(198, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:200:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 29);
		TraceIn("atom", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal109 = default(CommonToken);
		CommonToken OPENPAREN111 = default(CommonToken);
		CommonToken CLOSEPAREN113 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree OPENPAREN111_tree = default(CommonTree);
		CommonTree CLOSEPAREN113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(200, 5);
		try
		{
			// Scrape.g:201:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt20=4;
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt20 = 1;
				}
				break;
			case 117:
				{
				alt20 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt20 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt20 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:201:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(201, 8);
				PushFollow(Follow._variableReference_in_atom1022);
				variableReference108=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference108.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:202:5: '$'
				{
				DebugLocation(202, 5);
				char_literal109=(CommonToken)Match(input,117,Follow._117_in_atom1028); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(char_literal109);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 202:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(202, 12);
					// Scrape.g:202:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(202, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:203:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(203, 5);
				PushFollow(Follow._literal_in_atom1040);
				literal110=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal110.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:204:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(204, 17);
				OPENPAREN111=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1049); if (state.failed) return retval;
				DebugLocation(204, 19);
				PushFollow(Follow._mathExpression_in_atom1052);
				mathExpression112=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression112.Tree);
				DebugLocation(204, 44);
				CLOSEPAREN113=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1054); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 29);
			LeaveRule("atom", 29);
			LeaveRule_atom();
		}
		DebugLocation(205, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:207:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 30);
		TraceIn("literal", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set114 = default(CommonToken);

		CommonTree set114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(207, 1);
		try
		{
			// Scrape.g:208:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(208, 2);

			set114=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set114));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 30);
			LeaveRule("literal", 30);
			LeaveRule_literal();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:216:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 31);
		TraceIn("insertStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO115 = default(CommonToken);
		CommonToken ID116 = default(CommonToken);
		CommonToken INSERT_DIRECTORY118 = default(CommonToken);
		CommonToken INSERT_OVERWRITE121 = default(CommonToken);
		CommonToken ID122 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression119 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO115_tree = default(CommonTree);
		CommonTree ID116_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY118_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE121_tree = default(CommonTree);
		CommonTree ID122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(216, 1);
		try
		{
			// Scrape.g:217:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt21 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt21 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt21 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:217:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(217, 4);
				INSERT_INTO115=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1096); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO115);

				DebugLocation(217, 16);
				ID116=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1098); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID116);

				DebugLocation(217, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1100);
				sqlStatement117=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement117.Tree);


				{
				// AST REWRITE
				// elements: INSERT_INTO, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 217:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(217, 34);
					// Scrape.g:217:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(217, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(217, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID116));
					DebugLocation(217, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:218:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(218, 4);
				INSERT_DIRECTORY118=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY118);

				DebugLocation(218, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1117);
				mathExpression119=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression119.Tree);
				DebugLocation(218, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1119);
				sqlStatement120=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement120.Tree);


				{
				// AST REWRITE
				// elements: mathExpression, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 218:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(218, 51);
					// Scrape.g:218:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(218, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(218, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(218, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:219:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(219, 4);
				INSERT_OVERWRITE121=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1133); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE121);

				DebugLocation(219, 21);
				ID122=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1135); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID122);

				DebugLocation(219, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1137);
				sqlStatement123=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement123.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 219:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(219, 39);
					// Scrape.g:219:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(219, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(219, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID122));
					DebugLocation(219, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 31);
			LeaveRule("insertStatement", 31);
			LeaveRule_insertStatement();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_updateStatment();
	partial void LeaveRule_updateStatment();
	// $ANTLR start "updateStatment"
	// Scrape.g:225:1: updateStatment : UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("updateStatment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment()
	{
		EnterRule_updateStatment();
		EnterRule("updateStatment", 32);
		TraceIn("updateStatment", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UPDATE124 = default(CommonToken);
		CommonToken ID125 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArgs126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UPDATE124_tree = default(CommonTree);
		CommonTree ID125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		RewriteRuleSubtreeStream stream_setArgs=new RewriteRuleSubtreeStream(adaptor,"rule setArgs");
		try { DebugEnterRule(GrammarFileName, "updateStatment");
		DebugLocation(225, 1);
		try
		{
			// Scrape.g:226:2: ( UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:226:4: UPDATE ID setArgs ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(226, 4);
			UPDATE124=(CommonToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatment1162); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE124);

			DebugLocation(226, 11);
			ID125=(CommonToken)Match(input,ID,Follow._ID_in_updateStatment1164); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID125);

			DebugLocation(226, 14);
			PushFollow(Follow._setArgs_in_updateStatment1166);
			setArgs126=setArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArgs.Add(setArgs126.Tree);
			DebugLocation(226, 22);
			// Scrape.g:226:22: ( fromStatement )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==FROM))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:226:22: fromStatement
				{
				DebugLocation(226, 22);
				PushFollow(Follow._fromStatement_in_updateStatment1168);
				fromStatement127=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement127.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(226, 37);
			// Scrape.g:226:37: ( whereStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==WHERE))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:226:37: whereStatement
				{
				DebugLocation(226, 37);
				PushFollow(Follow._whereStatement_in_updateStatment1171);
				whereStatement128=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: whereStatement, setArgs, UPDATE, ID, fromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 226:53: -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(226, 56);
				// Scrape.g:226:56: ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(226, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(226, 65);
				// Scrape.g:226:65: ^( TABLE_ALIAS ID )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(226, 67);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

				DebugLocation(226, 79);
				adaptor.AddChild(root_2, stream_ID.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(226, 83);
				adaptor.AddChild(root_1, stream_setArgs.NextTree());
				DebugLocation(226, 91);
				// Scrape.g:226:91: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(226, 91);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(226, 106);
				// Scrape.g:226:106: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(226, 106);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatment", 32);
			LeaveRule("updateStatment", 32);
			LeaveRule_updateStatment();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatment"); }
		return retval;

	}
	// $ANTLR end "updateStatment"

	partial void EnterRule_setArgs();
	partial void LeaveRule_setArgs();
	// $ANTLR start "setArgs"
	// Scrape.g:229:1: setArgs : SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) ;
	[GrammarRule("setArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArgs()
	{
		EnterRule_setArgs();
		EnterRule("setArgs", 33);
		TraceIn("setArgs", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SET129 = default(CommonToken);
		CommonToken COMMA131 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SET129_tree = default(CommonTree);
		CommonTree COMMA131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_setArg=new RewriteRuleSubtreeStream(adaptor,"rule setArg");
		try { DebugEnterRule(GrammarFileName, "setArgs");
		DebugLocation(229, 1);
		try
		{
			// Scrape.g:230:2: ( SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:230:4: SET ( setArg COMMA )* setArg
			{
			DebugLocation(230, 4);
			SET129=(CommonToken)Match(input,SET,Follow._SET_in_setArgs1203); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET129);

			DebugLocation(230, 8);
			// Scrape.g:230:8: ( setArg COMMA )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA24_2 = input.LA(2);

					if ((LA24_2==STRING_LITERAL))
					{
						int LA24_3 = input.LA(3);

						if ((LA24_3==TAKE))
						{
							switch (input.LA(4))
							{
							case ATTRIBUTE:
								{
								int LA24_5 = input.LA(5);

								if ((LA24_5==STRING_LITERAL))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==MATCH))
									{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==REPLACE))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==EQUALS))
													{
														switch (input.LA(11))
														{
														case PICK:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==TAKE))
																{
																	switch (input.LA(14))
																	{
																	case ATTRIBUTE:
																		{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==MATCH))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==REPLACE))
																					{
																						int LA24_19 = input.LA(19);

																						if ((LA24_19==STRING_LITERAL))
																						{
																							int LA24_20 = input.LA(20);

																							if ((LA24_20==COMMA))
																							{
																								alt24 = 1;
																							}


																						}


																					}
																					else if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																		}
																		break;
																	case TEXT:
																		{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==MATCH))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==REPLACE))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==STRING_LITERAL))
																					{
																						int LA24_19 = input.LA(19);

																						if ((LA24_19==COMMA))
																						{
																							alt24 = 1;
																						}


																					}


																				}
																				else if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																		}
																		break;
																	case HTML:
																		{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==MATCH))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==REPLACE))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==STRING_LITERAL))
																					{
																						int LA24_19 = input.LA(19);

																						if ((LA24_19==COMMA))
																						{
																							alt24 = 1;
																						}


																					}


																				}
																				else if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																		}
																		break;
																	}

																}


															}


															}
															break;
														case INT:
														case NULL:
														case STRING_LITERAL:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														case ID:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==DOT))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==ID))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														case COMMAND_VAR:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														case IDENTITY_VAR:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														}

													}


												}


											}
											else if ((LA24_8==EQUALS))
											{
												switch (input.LA(9))
												{
												case PICK:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==TAKE))
														{
															switch (input.LA(12))
															{
															case ATTRIBUTE:
																{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==MATCH))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==REPLACE))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


																}
																break;
															case TEXT:
																{
																int LA24_13 = input.LA(13);

																if ((LA24_13==MATCH))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==REPLACE))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


																}
																break;
															case HTML:
																{
																int LA24_13 = input.LA(13);

																if ((LA24_13==MATCH))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==REPLACE))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


																}
																break;
															}

														}


													}


													}
													break;
												case INT:
												case NULL:
												case STRING_LITERAL:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												case ID:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==DOT))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==ID))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												case COMMAND_VAR:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												case IDENTITY_VAR:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												}

											}


										}


									}
									else if ((LA24_6==EQUALS))
									{
										switch (input.LA(7))
										{
										case PICK:
											{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==TAKE))
												{
													switch (input.LA(10))
													{
													case ATTRIBUTE:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==MATCH))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==REPLACE))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


														}
														break;
													case TEXT:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==MATCH))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==REPLACE))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case HTML:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==MATCH))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==REPLACE))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													}

												}


											}


											}
											break;
										case INT:
										case NULL:
										case STRING_LITERAL:
											{
											int LA24_8 = input.LA(8);

											if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


											}
											break;
										case ID:
											{
											int LA24_8 = input.LA(8);

											if ((LA24_8==DOT))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==ID))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


											}
											else if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


											}
											break;
										case COMMAND_VAR:
											{
											int LA24_8 = input.LA(8);

											if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


											}
											break;
										case IDENTITY_VAR:
											{
											int LA24_8 = input.LA(8);

											if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


											}
											break;
										}

									}


								}


								}
								break;
							case TEXT:
								{
								int LA24_5 = input.LA(5);

								if ((LA24_5==MATCH))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==STRING_LITERAL))
									{
										int LA24_7 = input.LA(7);

										if ((LA24_7==REPLACE))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==EQUALS))
												{
													switch (input.LA(10))
													{
													case PICK:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==TAKE))
															{
																switch (input.LA(13))
																{
																case ATTRIBUTE:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==MATCH))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==REPLACE))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==STRING_LITERAL))
																					{
																						int LA24_19 = input.LA(19);

																						if ((LA24_19==COMMA))
																						{
																							alt24 = 1;
																						}


																					}


																				}
																				else if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																	}
																	break;
																case TEXT:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==MATCH))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==REPLACE))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																	}
																	break;
																case HTML:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==MATCH))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==REPLACE))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																	}
																	break;
																}

															}


														}


														}
														break;
													case INT:
													case NULL:
													case STRING_LITERAL:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case ID:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==DOT))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==ID))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case COMMAND_VAR:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case IDENTITY_VAR:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													}

												}


											}


										}
										else if ((LA24_7==EQUALS))
										{
											switch (input.LA(8))
											{
											case PICK:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==TAKE))
													{
														switch (input.LA(11))
														{
														case ATTRIBUTE:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==MATCH))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==REPLACE))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


															}
															break;
														case TEXT:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==MATCH))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==REPLACE))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														case HTML:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==MATCH))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==REPLACE))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														}

													}


												}


												}
												break;
											case INT:
											case NULL:
											case STRING_LITERAL:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case ID:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==DOT))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==ID))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case COMMAND_VAR:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case IDENTITY_VAR:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											}

										}


									}


								}
								else if ((LA24_5==EQUALS))
								{
									switch (input.LA(6))
									{
									case PICK:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==TAKE))
											{
												switch (input.LA(9))
												{
												case ATTRIBUTE:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==MATCH))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==REPLACE))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


													}
													break;
												case TEXT:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==MATCH))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==REPLACE))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												case HTML:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==MATCH))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==REPLACE))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												}

											}


										}


										}
										break;
									case INT:
									case NULL:
									case STRING_LITERAL:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case ID:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==DOT))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==ID))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case COMMAND_VAR:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case IDENTITY_VAR:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


								}
								break;
							case HTML:
								{
								int LA24_5 = input.LA(5);

								if ((LA24_5==MATCH))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==STRING_LITERAL))
									{
										int LA24_7 = input.LA(7);

										if ((LA24_7==REPLACE))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==EQUALS))
												{
													switch (input.LA(10))
													{
													case PICK:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==TAKE))
															{
																switch (input.LA(13))
																{
																case ATTRIBUTE:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==MATCH))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==REPLACE))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==STRING_LITERAL))
																					{
																						int LA24_19 = input.LA(19);

																						if ((LA24_19==COMMA))
																						{
																							alt24 = 1;
																						}


																					}


																				}
																				else if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																	}
																	break;
																case TEXT:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==MATCH))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==REPLACE))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																	}
																	break;
																case HTML:
																	{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==MATCH))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==REPLACE))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==STRING_LITERAL))
																				{
																					int LA24_18 = input.LA(18);

																					if ((LA24_18==COMMA))
																					{
																						alt24 = 1;
																					}


																				}


																			}
																			else if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																	}
																	break;
																}

															}


														}


														}
														break;
													case INT:
													case NULL:
													case STRING_LITERAL:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case ID:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==DOT))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==ID))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case COMMAND_VAR:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													case IDENTITY_VAR:
														{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


														}
														break;
													}

												}


											}


										}
										else if ((LA24_7==EQUALS))
										{
											switch (input.LA(8))
											{
											case PICK:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==TAKE))
													{
														switch (input.LA(11))
														{
														case ATTRIBUTE:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==MATCH))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==REPLACE))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==STRING_LITERAL))
																			{
																				int LA24_17 = input.LA(17);

																				if ((LA24_17==COMMA))
																				{
																					alt24 = 1;
																				}


																			}


																		}
																		else if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


															}
															break;
														case TEXT:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==MATCH))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==REPLACE))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														case HTML:
															{
															int LA24_12 = input.LA(12);

															if ((LA24_12==MATCH))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==REPLACE))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==STRING_LITERAL))
																		{
																			int LA24_16 = input.LA(16);

																			if ((LA24_16==COMMA))
																			{
																				alt24 = 1;
																			}


																		}


																	}
																	else if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


															}
															break;
														}

													}


												}


												}
												break;
											case INT:
											case NULL:
											case STRING_LITERAL:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case ID:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==DOT))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==ID))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case COMMAND_VAR:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case IDENTITY_VAR:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											}

										}


									}


								}
								else if ((LA24_5==EQUALS))
								{
									switch (input.LA(6))
									{
									case PICK:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==TAKE))
											{
												switch (input.LA(9))
												{
												case ATTRIBUTE:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==MATCH))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==REPLACE))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==STRING_LITERAL))
																	{
																		int LA24_15 = input.LA(15);

																		if ((LA24_15==COMMA))
																		{
																			alt24 = 1;
																		}


																	}


																}
																else if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


													}
													break;
												case TEXT:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==MATCH))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==REPLACE))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												case HTML:
													{
													int LA24_10 = input.LA(10);

													if ((LA24_10==MATCH))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==REPLACE))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


													}
													break;
												}

											}


										}


										}
										break;
									case INT:
									case NULL:
									case STRING_LITERAL:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case ID:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==DOT))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==ID))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case COMMAND_VAR:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case IDENTITY_VAR:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


								}
								break;
							}

						}


					}


					}
					break;
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA24_2 = input.LA(2);

					if ((LA24_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==STRING_LITERAL))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==TAKE))
								{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==MATCH))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==REPLACE))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


											}
											else if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case ID:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==DOT))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==ID))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


								}


							}
							else if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case ID:
					{
					int LA24_2 = input.LA(2);

					if ((LA24_2==DOT))
					{
						int LA24_3 = input.LA(3);

						if ((LA24_3==ID))
						{
							int LA24_4 = input.LA(4);

							if ((LA24_4==EQUALS))
							{
								switch (input.LA(5))
								{
								case PICK:
									{
									int LA24_6 = input.LA(6);

									if ((LA24_6==STRING_LITERAL))
									{
										int LA24_7 = input.LA(7);

										if ((LA24_7==TAKE))
										{
											switch (input.LA(8))
											{
											case ATTRIBUTE:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==MATCH))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==REPLACE))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==STRING_LITERAL))
																{
																	int LA24_14 = input.LA(14);

																	if ((LA24_14==COMMA))
																	{
																		alt24 = 1;
																	}


																}


															}
															else if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


												}
												break;
											case TEXT:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==MATCH))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==REPLACE))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											case HTML:
												{
												int LA24_9 = input.LA(9);

												if ((LA24_9==MATCH))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==REPLACE))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==STRING_LITERAL))
															{
																int LA24_13 = input.LA(13);

																if ((LA24_13==COMMA))
																{
																	alt24 = 1;
																}


															}


														}
														else if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


												}
												break;
											}

										}


									}


									}
									break;
								case INT:
								case NULL:
								case STRING_LITERAL:
									{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


									}
									break;
								case ID:
									{
									int LA24_6 = input.LA(6);

									if ((LA24_6==DOT))
									{
										int LA24_7 = input.LA(7);

										if ((LA24_7==ID))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


										}


									}
									else if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


									}
									break;
								case COMMAND_VAR:
									{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


									}
									break;
								case IDENTITY_VAR:
									{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


									}
									break;
								}

							}


						}


					}
					else if ((LA24_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==STRING_LITERAL))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==TAKE))
								{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==MATCH))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==REPLACE))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


											}
											else if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case ID:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==DOT))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==ID))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


								}


							}
							else if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA24_2 = input.LA(2);

					if ((LA24_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==STRING_LITERAL))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==TAKE))
								{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==MATCH))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==REPLACE))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


											}
											else if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case ID:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==DOT))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==ID))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


								}


							}
							else if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA24_2 = input.LA(2);

					if ((LA24_2==EQUALS))
					{
						switch (input.LA(3))
						{
						case PICK:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==STRING_LITERAL))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==TAKE))
								{
									switch (input.LA(6))
									{
									case ATTRIBUTE:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==STRING_LITERAL))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==MATCH))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==STRING_LITERAL))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==REPLACE))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==STRING_LITERAL))
														{
															int LA24_12 = input.LA(12);

															if ((LA24_12==COMMA))
															{
																alt24 = 1;
															}


														}


													}
													else if ((LA24_10==COMMA))
													{
														alt24 = 1;
													}


												}


											}
											else if ((LA24_8==COMMA))
											{
												alt24 = 1;
											}


										}


										}
										break;
									case TEXT:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									case HTML:
										{
										int LA24_7 = input.LA(7);

										if ((LA24_7==MATCH))
										{
											int LA24_8 = input.LA(8);

											if ((LA24_8==STRING_LITERAL))
											{
												int LA24_9 = input.LA(9);

												if ((LA24_9==REPLACE))
												{
													int LA24_10 = input.LA(10);

													if ((LA24_10==STRING_LITERAL))
													{
														int LA24_11 = input.LA(11);

														if ((LA24_11==COMMA))
														{
															alt24 = 1;
														}


													}


												}
												else if ((LA24_9==COMMA))
												{
													alt24 = 1;
												}


											}


										}
										else if ((LA24_7==COMMA))
										{
											alt24 = 1;
										}


										}
										break;
									}

								}


							}


							}
							break;
						case INT:
						case NULL:
						case STRING_LITERAL:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case ID:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==DOT))
							{
								int LA24_5 = input.LA(5);

								if ((LA24_5==ID))
								{
									int LA24_6 = input.LA(6);

									if ((LA24_6==COMMA))
									{
										alt24 = 1;
									}


								}


							}
							else if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case COMMAND_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						case IDENTITY_VAR:
							{
							int LA24_4 = input.LA(4);

							if ((LA24_4==COMMA))
							{
								alt24 = 1;
							}


							}
							break;
						}

					}


					}
					break;
				}

				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:230:9: setArg COMMA
					{
					DebugLocation(230, 9);
					PushFollow(Follow._setArg_in_setArgs1206);
					setArg130=setArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setArg.Add(setArg130.Tree);
					DebugLocation(230, 16);
					COMMA131=(CommonToken)Match(input,COMMA,Follow._COMMA_in_setArgs1208); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA131);


					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(230, 24);
			PushFollow(Follow._setArg_in_setArgs1212);
			setArg132=setArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArg.Add(setArg132.Tree);


			{
			// AST REWRITE
			// elements: setArg, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 230:31: -> ^( SET ( setArg )* )
			{
				DebugLocation(230, 34);
				// Scrape.g:230:34: ^( SET ( setArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(230, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(230, 40);
				// Scrape.g:230:40: ( setArg )*
				while ( stream_setArg.HasNext )
				{
					DebugLocation(230, 40);
					adaptor.AddChild(root_1, stream_setArg.NextTree());

				}
				stream_setArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArgs", 33);
			LeaveRule("setArgs", 33);
			LeaveRule_setArgs();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "setArgs"); }
		return retval;

	}
	// $ANTLR end "setArgs"

	partial void EnterRule_setArg();
	partial void LeaveRule_setArg();
	// $ANTLR start "setArg"
	// Scrape.g:233:1: setArg : selectArg EQUALS selectArg -> ^( VARIABLE_ASSIGNMENT selectArg selectArg ) ;
	[GrammarRule("setArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArg()
	{
		EnterRule_setArg();
		EnterRule("setArg", 34);
		TraceIn("setArg", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS134 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "setArg");
		DebugLocation(233, 1);
		try
		{
			// Scrape.g:234:2: ( selectArg EQUALS selectArg -> ^( VARIABLE_ASSIGNMENT selectArg selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:234:4: selectArg EQUALS selectArg
			{
			DebugLocation(234, 4);
			PushFollow(Follow._selectArg_in_setArg1232);
			selectArg133=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg133.Tree);
			DebugLocation(234, 14);
			EQUALS134=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_setArg1234); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS134);

			DebugLocation(234, 21);
			PushFollow(Follow._selectArg_in_setArg1236);
			selectArg135=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg135.Tree);


			{
			// AST REWRITE
			// elements: selectArg, selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:31: -> ^( VARIABLE_ASSIGNMENT selectArg selectArg )
			{
				DebugLocation(234, 34);
				// Scrape.g:234:34: ^( VARIABLE_ASSIGNMENT selectArg selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(234, 56);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());
				DebugLocation(234, 66);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArg", 34);
			LeaveRule("setArg", 34);
			LeaveRule_setArg();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "setArg"); }
		return retval;

	}
	// $ANTLR end "setArg"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:239:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 35);
		TraceIn("sqlStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(239, 1);
		try
		{
			// Scrape.g:240:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:240:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(240, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1260);
			selectStatement136=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement136.Tree);
			DebugLocation(240, 20);
			// Scrape.g:240:20: ( fromStatement )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==FROM))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:240:20: fromStatement
				{
				DebugLocation(240, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1262);
				fromStatement137=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(240, 35);
			// Scrape.g:240:35: ( whereStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==WHERE))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:240:35: whereStatement
				{
				DebugLocation(240, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1265);
				whereStatement138=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement138.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: fromStatement, selectStatement, whereStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(240, 54);
				// Scrape.g:240:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(240, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(240, 89);
				// Scrape.g:240:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(240, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(240, 104);
				// Scrape.g:240:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(240, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 35);
			LeaveRule("sqlStatement", 35);
			LeaveRule_sqlStatement();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:243:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 36);
		TraceIn("whereStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE139 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(243, 1);
		try
		{
			// Scrape.g:244:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:244:5: WHERE boolExpression
			{
			DebugLocation(244, 5);
			WHERE139=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE139);

			DebugLocation(244, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1294);
			boolExpression140=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression140.Tree);


			{
			// AST REWRITE
			// elements: WHERE, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(244, 29);
				// Scrape.g:244:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(244, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 36);
			LeaveRule("whereStatement", 36);
			LeaveRule_whereStatement();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:247:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ tableGenerationClause ( tableHint )? | FROM OPENPAREN tableGenerationClause CLOSEPAREN ID -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 37);
		TraceIn("fromStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM141 = default(CommonToken);
		CommonToken FROM143 = default(CommonToken);
		CommonToken FROM146 = default(CommonToken);
		CommonToken OPENPAREN147 = default(CommonToken);
		CommonToken CLOSEPAREN149 = default(CommonToken);
		CommonToken ID150 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM141_tree = default(CommonTree);
		CommonTree FROM143_tree = default(CommonTree);
		CommonTree FROM146_tree = default(CommonTree);
		CommonTree OPENPAREN147_tree = default(CommonTree);
		CommonTree CLOSEPAREN149_tree = default(CommonTree);
		CommonTree ID150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableGenerationClause=new RewriteRuleSubtreeStream(adaptor,"rule tableGenerationClause");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(247, 1);
		try
		{
			// Scrape.g:248:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ tableGenerationClause ( tableHint )? | FROM OPENPAREN tableGenerationClause CLOSEPAREN ID -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) ) )
			int alt30=3;
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt30 = 1;
					}
					break;
				case OPENPAREN:
					{
					alt30 = 3;
					}
					break;
				case DOWNLOAD_IMAGE:
				case DOWNLOAD_PAGE:
				case EXPAND:
					{
					alt30 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:248:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(248, 4);
				FROM141=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1314); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM141);

				DebugLocation(248, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1318); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(248, 15);
				// Scrape.g:248:15: (a= ID )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ID))
				{
					int LA27_2 = input.LA(2);

					if ((LA27_2==EOF||(LA27_2>=CLOSEBRACE && LA27_2<=CLOSEPAREN)||LA27_2==COMMAND_VAR||LA27_2==CREATE||LA27_2==EACH||LA27_2==EXEC||LA27_2==ID||LA27_2==IDENTITY_VAR||(LA27_2>=INNER_JOIN && LA27_2<=INSERT_INTO)||LA27_2==INSERT_OVERWRITE||LA27_2==JOIN||LA27_2==SELECT||(LA27_2>=TRUNCATE && LA27_2<=VAR)||LA27_2==WHERE))
					{
						alt27 = 1;
					}
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:248:15: a= ID
					{
					DebugLocation(248, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1322); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(248, 20);
				// Scrape.g:248:20: ( innerJoinStatement )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==INNER_JOIN||LA28_1==JOIN))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:248:20: innerJoinStatement
					{
					DebugLocation(248, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1325);
					innerJoinStatement142=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement142.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, FROM, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(248, 43);
					// Scrape.g:248:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(248, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(248, 79);
					// Scrape.g:248:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(248, 79);
						// Scrape.g:248:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(248, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(248, 98);
					// Scrape.g:248:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(248, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:249:4: FROM ^ tableGenerationClause ( tableHint )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(249, 8);
				FROM143=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1352); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM143_tree = (CommonTree)adaptor.Create(FROM143);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM143_tree, root_0);
				}
				DebugLocation(249, 10);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1355);
				tableGenerationClause144=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableGenerationClause144.Tree);
				DebugLocation(249, 32);
				// Scrape.g:249:32: ( tableHint )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==WITH))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:249:32: tableHint
					{
					DebugLocation(249, 32);
					PushFollow(Follow._tableHint_in_fromStatement1357);
					tableHint145=tableHint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tableHint145.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:250:4: FROM OPENPAREN tableGenerationClause CLOSEPAREN ID
				{
				DebugLocation(250, 4);
				FROM146=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1363); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM146);

				DebugLocation(250, 9);
				OPENPAREN147=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fromStatement1365); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN147);

				DebugLocation(250, 19);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1367);
				tableGenerationClause148=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableGenerationClause.Add(tableGenerationClause148.Tree);
				DebugLocation(250, 41);
				CLOSEPAREN149=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fromStatement1369); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN149);

				DebugLocation(250, 52);
				ID150=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1371); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID150);



				{
				// AST REWRITE
				// elements: FROM, tableGenerationClause, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 250:55: -> ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) )
				{
					DebugLocation(250, 58);
					// Scrape.g:250:58: ^( FROM tableGenerationClause ^( TABLE_ALIAS ID ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(250, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(250, 65);
					adaptor.AddChild(root_1, stream_tableGenerationClause.NextTree());
					DebugLocation(250, 87);
					// Scrape.g:250:87: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(250, 89);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(250, 101);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 37);
			LeaveRule("fromStatement", 37);
			LeaveRule_fromStatement();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_tableHint();
	partial void LeaveRule_tableHint();
	// $ANTLR start "tableHint"
	// Scrape.g:254:1: tableHint : WITH ! OPENPAREN ! hint CLOSEPAREN !;
	[GrammarRule("tableHint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableHint()
	{
		EnterRule_tableHint();
		EnterRule("tableHint", 38);
		TraceIn("tableHint", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH151 = default(CommonToken);
		CommonToken OPENPAREN152 = default(CommonToken);
		CommonToken CLOSEPAREN154 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH151_tree = default(CommonTree);
		CommonTree OPENPAREN152_tree = default(CommonTree);
		CommonTree CLOSEPAREN154_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "tableHint");
		DebugLocation(254, 1);
		try
		{
			// Scrape.g:255:2: ( WITH ! OPENPAREN ! hint CLOSEPAREN !)
			DebugEnterAlt(1);
			// Scrape.g:255:4: WITH ! OPENPAREN ! hint CLOSEPAREN !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(255, 8);
			WITH151=(CommonToken)Match(input,WITH,Follow._WITH_in_tableHint1398); if (state.failed) return retval;
			DebugLocation(255, 19);
			OPENPAREN152=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_tableHint1401); if (state.failed) return retval;
			DebugLocation(255, 21);
			PushFollow(Follow._hint_in_tableHint1404);
			hint153=hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, hint153.Tree);
			DebugLocation(255, 36);
			CLOSEPAREN154=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_tableHint1406); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableHint", 38);
			LeaveRule("tableHint", 38);
			LeaveRule_tableHint();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "tableHint"); }
		return retval;

	}
	// $ANTLR end "tableHint"

	partial void EnterRule_hint();
	partial void LeaveRule_hint();
	// $ANTLR start "hint"
	// Scrape.g:258:1: hint : THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) ;
	[GrammarRule("hint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> hint()
	{
		EnterRule_hint();
		EnterRule("hint", 39);
		TraceIn("hint", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken THREAD155 = default(CommonToken);
		CommonToken OPENPAREN156 = default(CommonToken);
		CommonToken INT157 = default(CommonToken);
		CommonToken CLOSEPAREN158 = default(CommonToken);

		CommonTree THREAD155_tree = default(CommonTree);
		CommonTree OPENPAREN156_tree = default(CommonTree);
		CommonTree INT157_tree = default(CommonTree);
		CommonTree CLOSEPAREN158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THREAD=new RewriteRuleITokenStream(adaptor,"token THREAD");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		try { DebugEnterRule(GrammarFileName, "hint");
		DebugLocation(258, 1);
		try
		{
			// Scrape.g:259:2: ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) )
			DebugEnterAlt(1);
			// Scrape.g:259:4: THREAD OPENPAREN INT CLOSEPAREN
			{
			DebugLocation(259, 4);
			THREAD155=(CommonToken)Match(input,THREAD,Follow._THREAD_in_hint1418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THREAD.Add(THREAD155);

			DebugLocation(259, 11);
			OPENPAREN156=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN156);

			DebugLocation(259, 21);
			INT157=(CommonToken)Match(input,INT,Follow._INT_in_hint1422); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INT.Add(INT157);

			DebugLocation(259, 25);
			CLOSEPAREN158=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1424); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN158);



			{
			// AST REWRITE
			// elements: THREAD, INT
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:36: -> ^( THREAD INT )
			{
				DebugLocation(259, 39);
				// Scrape.g:259:39: ^( THREAD INT )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_THREAD.NextNode(), root_1);

				DebugLocation(259, 48);
				adaptor.AddChild(root_1, stream_INT.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hint", 39);
			LeaveRule("hint", 39);
			LeaveRule_hint();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "hint"); }
		return retval;

	}
	// $ANTLR end "hint"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:262:1: innerJoinStatement : innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 40);
		TraceIn("innerJoinStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal160 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(262, 1);
		try
		{
			// Scrape.g:263:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:263:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
			{
			DebugLocation(263, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1443);
			innerJoin159=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin159.Tree);
			DebugLocation(263, 15);
			t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1447); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(263, 20);
			// Scrape.g:263:20: (a= ID )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==ID))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:263:20: a= ID
				{
				DebugLocation(263, 20);
				a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1451); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(a);


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(263, 25);
			string_literal160=(CommonToken)Match(input,118,Follow._118_in_innerJoinStatement1454); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(string_literal160);

			DebugLocation(263, 30);
			PushFollow(Follow._boolExpression_in_innerJoinStatement1456);
			boolExpression161=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression161.Tree);
			DebugLocation(263, 45);
			// Scrape.g:263:45: ( innerJoinStatement )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==INNER_JOIN||LA32_1==JOIN))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:263:45: innerJoinStatement
				{
				DebugLocation(263, 45);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1458);
				innerJoinStatement162=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement162.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: innerJoinStatement, a, boolExpression
			// token labels: a
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
			{
				DebugLocation(263, 68);
				// Scrape.g:263:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(263, 81);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(263, 110);
				// Scrape.g:263:110: ( ^( TABLE_ALIAS $a) )?
				if (stream_a.HasNext)
				{
					DebugLocation(263, 110);
					// Scrape.g:263:110: ^( TABLE_ALIAS $a)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(263, 112);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(263, 125);
					adaptor.AddChild(root_2, stream_a.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_a.Reset();
				DebugLocation(263, 129);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(263, 144);
				// Scrape.g:263:144: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(263, 144);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 40);
			LeaveRule("innerJoinStatement", 40);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_tableGenerationClause();
	partial void LeaveRule_tableGenerationClause();
	// $ANTLR start "tableGenerationClause"
	// Scrape.g:266:1: tableGenerationClause : ( downloadPageExpresssion | downloadImageExpression | expandExpression );
	[GrammarRule("tableGenerationClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause()
	{
		EnterRule_tableGenerationClause();
		EnterRule("tableGenerationClause", 41);
		TraceIn("tableGenerationClause", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion163 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "tableGenerationClause");
		DebugLocation(266, 1);
		try
		{
			// Scrape.g:267:2: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
			int alt33=3;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case DOWNLOAD_PAGE:
				{
				alt33 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
				{
				alt33 = 2;
				}
				break;
			case EXPAND:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:267:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 4);
				PushFollow(Follow._downloadPageExpresssion_in_tableGenerationClause1492);
				downloadPageExpresssion163=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion163.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:268:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(268, 4);
				PushFollow(Follow._downloadImageExpression_in_tableGenerationClause1497);
				downloadImageExpression164=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression164.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:269:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._expandExpression_in_tableGenerationClause1502);
				expandExpression165=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression165.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableGenerationClause", 41);
			LeaveRule("tableGenerationClause", 41);
			LeaveRule_tableGenerationClause();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "tableGenerationClause"); }
		return retval;

	}
	// $ANTLR end "tableGenerationClause"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:272:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 42);
		TraceIn("innerJoin", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set166 = default(CommonToken);

		CommonTree set166_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(273, 2);

			set166=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set166));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 42);
			LeaveRule("innerJoin", 42);
			LeaveRule_innerJoin();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:277:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 43);
		TraceIn("selectStatement", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT167 = default(CommonToken);
		CommonToken COMMA169 = default(CommonToken);
		CommonToken SELECT171 = default(CommonToken);
		CommonToken ASTERISK172 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT167_tree = default(CommonTree);
		CommonTree COMMA169_tree = default(CommonTree);
		CommonTree SELECT171_tree = default(CommonTree);
		CommonTree ASTERISK172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(277, 1);
		try
		{
			// Scrape.g:278:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==SELECT))
			{
				int LA35_2 = input.LA(2);

				if ((LA35_2==ASTERISK))
				{
					alt35 = 2;
				}
				else if ((LA35_2==CASE||LA35_2==COMMAND_VAR||LA35_2==ID||LA35_2==IDENTITY_VAR||LA35_2==INT||LA35_2==NULL||LA35_2==PICK||LA35_2==STRING_LITERAL))
				{
					alt35 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:278:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(278, 4);
				SELECT167=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1529); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT167);

				DebugLocation(278, 11);
				// Scrape.g:278:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case ID:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred59_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:278:12: selectArgs COMMA
						{
						DebugLocation(278, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1532);
						selectArgs168=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs168.Tree);
						DebugLocation(278, 23);
						COMMA169=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1534); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA169);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(278, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1538);
				selectArgs170=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs170.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(278, 45);
					// Scrape.g:278:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(278, 54);
					// Scrape.g:278:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(278, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:279:4: SELECT ASTERISK
				{
				DebugLocation(279, 4);
				SELECT171=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1552); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT171);

				DebugLocation(279, 11);
				ASTERISK172=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK172);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(279, 23);
					// Scrape.g:279:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(279, 32);
					// Scrape.g:279:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(279, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(279, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK172));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 43);
			LeaveRule("selectStatement", 43);
			LeaveRule_selectStatement();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:283:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 44);
		TraceIn("selectArgs", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS174 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(283, 1);
		try
		{
			// Scrape.g:284:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==COMMAND_VAR||LA37_1==ID||LA37_1==IDENTITY_VAR||LA37_1==INT||LA37_1==NULL||LA37_1==PICK||LA37_1==STRING_LITERAL))
			{
				alt37 = 1;
			}
			else if ((LA37_1==CASE))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:284:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(284, 4);
				// Scrape.g:284:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==STRING_LITERAL))
						{
							int LA36_3 = input.LA(3);

							if ((LA36_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==STRING_LITERAL))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==MATCH))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==STRING_LITERAL))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==REPLACE))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==STRING_LITERAL))
													{
														int LA36_10 = input.LA(10);

														if ((LA36_10==PLUS))
														{
															alt36 = 1;
														}


													}


												}
												else if ((LA36_8==PLUS))
												{
													alt36 = 1;
												}


											}


										}
										else if ((LA36_6==PLUS))
										{
											alt36 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==MATCH))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==STRING_LITERAL))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==REPLACE))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==STRING_LITERAL))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==PLUS))
													{
														alt36 = 1;
													}


												}


											}
											else if ((LA36_7==PLUS))
											{
												alt36 = 1;
											}


										}


									}
									else if ((LA36_5==PLUS))
									{
										alt36 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==MATCH))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==STRING_LITERAL))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==REPLACE))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==STRING_LITERAL))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==PLUS))
													{
														alt36 = 1;
													}


												}


											}
											else if ((LA36_7==PLUS))
											{
												alt36 = 1;
											}


										}


									}
									else if ((LA36_5==PLUS))
									{
										alt36 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case ID:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==DOT))
						{
							int LA36_3 = input.LA(3);

							if ((LA36_3==ID))
							{
								int LA36_4 = input.LA(4);

								if ((LA36_4==PLUS))
								{
									alt36 = 1;
								}


							}


						}
						else if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:284:5: selectArg PLUS
						{
						DebugLocation(284, 5);
						PushFollow(Follow._selectArg_in_selectArgs1580);
						selectArg173=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg173.Tree);
						DebugLocation(284, 15);
						PLUS174=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1582); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS174);


						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(284, 22);
				PushFollow(Follow._selectArg_in_selectArgs1586);
				selectArg175=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg175.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(284, 35);
					// Scrape.g:284:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(284, 48);
					// Scrape.g:284:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(284, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:285:4: caseStatement
				{
				DebugLocation(285, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1600);
				caseStatement176=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement176.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(285, 21);
					// Scrape.g:285:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(285, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 44);
			LeaveRule("selectArgs", 44);
			LeaveRule_selectArgs();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:290:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 45);
		TraceIn("caseStatement", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE177 = default(CommonToken);
		CommonToken ELSE179 = default(CommonToken);
		CommonToken END181 = default(CommonToken);
		CommonToken CASE182 = default(CommonToken);
		CommonToken ELSE185 = default(CommonToken);
		CommonToken END187 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE177_tree = default(CommonTree);
		CommonTree ELSE179_tree = default(CommonTree);
		CommonTree END181_tree = default(CommonTree);
		CommonTree CASE182_tree = default(CommonTree);
		CommonTree ELSE185_tree = default(CommonTree);
		CommonTree END187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(290, 1);
		try
		{
			// Scrape.g:291:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==CASE))
			{
				int LA42_2 = input.LA(2);

				if ((LA42_2==WHEN))
				{
					alt42 = 1;
				}
				else if ((LA42_2==COMMAND_VAR||LA42_2==ID||LA42_2==IDENTITY_VAR||LA42_2==INT||LA42_2==NULL||LA42_2==PICK||LA42_2==STRING_LITERAL))
				{
					alt42 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:291:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(291, 4);
				CASE177=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE177);

				DebugLocation(291, 9);
				// Scrape.g:291:9: ( whenBoolStatement )+
				int cnt38=0;
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_1 = input.LA(1);

					if ((LA38_1==WHEN))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:291:9: whenBoolStatement
						{
						DebugLocation(291, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1624);
						whenBoolStatement178=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement178.Tree);

						}
						break;

					default:
						if (cnt38 >= 1)
							goto loop38;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee38 = new EarlyExitException( 38, input );
						DebugRecognitionException(eee38);
						throw eee38;
					}
					cnt38++;
				}
				loop38:
					;

				} finally { DebugExitSubRule(38); }

				DebugLocation(291, 28);
				// Scrape.g:291:28: ( ELSE caseExpression )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==ELSE))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:291:29: ELSE caseExpression
					{
					DebugLocation(291, 29);
					ELSE179=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1628); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE179);

					DebugLocation(291, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1630);
					caseExpression180=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression180.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(291, 51);
				END181=(CommonToken)Match(input,END,Follow._END_in_caseStatement1634); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END181);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(291, 58);
					// Scrape.g:291:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(291, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(291, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(291, 89);
					// Scrape.g:291:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(291, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:292:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(292, 4);
				CASE182=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1651); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE182);

				DebugLocation(292, 9);
				PushFollow(Follow._selectArg_in_caseStatement1653);
				selectArg183=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg183.Tree);
				DebugLocation(292, 19);
				// Scrape.g:292:19: ( whenLiteralStatement )+
				int cnt40=0;
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==WHEN))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:292:19: whenLiteralStatement
						{
						DebugLocation(292, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1655);
						whenLiteralStatement184=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement184.Tree);

						}
						break;

					default:
						if (cnt40 >= 1)
							goto loop40;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee40 = new EarlyExitException( 40, input );
						DebugRecognitionException(eee40);
						throw eee40;
					}
					cnt40++;
				}
				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(292, 41);
				// Scrape.g:292:41: ( ELSE caseExpression )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==ELSE))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:292:42: ELSE caseExpression
					{
					DebugLocation(292, 42);
					ELSE185=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1659); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE185);

					DebugLocation(292, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1661);
					caseExpression186=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression186.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(292, 64);
				END187=(CommonToken)Match(input,END,Follow._END_in_caseStatement1665); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END187);



				{
				// AST REWRITE
				// elements: caseExpression, whenLiteralStatement, selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(292, 71);
					// Scrape.g:292:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(292, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(292, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(292, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(292, 114);
					// Scrape.g:292:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(292, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 45);
			LeaveRule("caseStatement", 45);
			LeaveRule_caseStatement();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:295:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 46);
		TraceIn("caseExpression", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg188 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(295, 1);
		try
		{
			// Scrape.g:296:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:296:4: selectArg
			{
			DebugLocation(296, 4);
			PushFollow(Follow._selectArg_in_caseExpression1690);
			selectArg188=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg188.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 296:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(296, 17);
				// Scrape.g:296:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(296, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(296, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 46);
			LeaveRule("caseExpression", 46);
			LeaveRule_caseExpression();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:299:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 47);
		TraceIn("whenLiteralStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN189 = default(CommonToken);
		CommonToken THEN191 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN189_tree = default(CommonTree);
		CommonTree THEN191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(299, 1);
		try
		{
			// Scrape.g:300:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:300:4: WHEN literal THEN caseExpression
			{
			DebugLocation(300, 4);
			WHEN189=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1709); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN189);

			DebugLocation(300, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1711);
			literal190=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal190.Tree);
			DebugLocation(300, 17);
			THEN191=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1713); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN191);

			DebugLocation(300, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1715);
			caseExpression192=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression192.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 300:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(300, 40);
				// Scrape.g:300:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(300, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(300, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(300, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 47);
			LeaveRule("whenLiteralStatement", 47);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:303:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 48);
		TraceIn("whenBoolStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN193 = default(CommonToken);
		CommonToken THEN195 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression196 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN193_tree = default(CommonTree);
		CommonTree THEN195_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(303, 1);
		try
		{
			// Scrape.g:304:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:304:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(304, 4);
			WHEN193=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1736); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN193);

			DebugLocation(304, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1738);
			boolExpression194=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression194.Tree);
			DebugLocation(304, 24);
			THEN195=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1740); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN195);

			DebugLocation(304, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1742);
			caseExpression196=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression196.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 304:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(304, 47);
				// Scrape.g:304:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(304, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(304, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(304, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 48);
			LeaveRule("whenBoolStatement", 48);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:307:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 49);
		TraceIn("boolExpression", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR198 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR198_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(307, 1);
		try
		{
			// Scrape.g:308:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:308:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(308, 4);
			PushFollow(Follow._andExpression_in_boolExpression1763);
			andExpression197=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression197.Tree);
			DebugLocation(308, 18);
			// Scrape.g:308:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==OR))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:308:19: OR ^ andExpression
					{
					DebugLocation(308, 21);
					OR198=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1766); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR198_tree = (CommonTree)adaptor.Create(OR198);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR198_tree, root_0);
					}
					DebugLocation(308, 23);
					PushFollow(Follow._andExpression_in_boolExpression1769);
					andExpression199=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression199.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 49);
			LeaveRule("boolExpression", 49);
			LeaveRule_boolExpression();
		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:311:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 50);
		TraceIn("andExpression", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND201 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm202 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND201_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(311, 1);
		try
		{
			// Scrape.g:312:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:312:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(312, 5);
			PushFollow(Follow._boolTerm_in_andExpression1783);
			boolTerm200=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm200.Tree);
			DebugLocation(312, 14);
			// Scrape.g:312:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==AND))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:312:15: AND ^ boolTerm
					{
					DebugLocation(312, 18);
					AND201=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1786); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND201_tree = (CommonTree)adaptor.Create(AND201);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND201_tree, root_0);
					}
					DebugLocation(312, 20);
					PushFollow(Follow._boolTerm_in_andExpression1789);
					boolTerm202=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm202.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 50);
			LeaveRule("andExpression", 50);
			LeaveRule_andExpression();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:315:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 51);
		TraceIn("boolTerm", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NODES203 = default(CommonToken);
		CommonToken EQUALS204 = default(CommonToken);
		CommonToken STRING_LITERAL205 = default(CommonToken);
		CommonToken OPENPAREN209 = default(CommonToken);
		CommonToken CLOSEPAREN211 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg206 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator207 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NODES203_tree = default(CommonTree);
		CommonTree EQUALS204_tree = default(CommonTree);
		CommonTree STRING_LITERAL205_tree = default(CommonTree);
		CommonTree OPENPAREN209_tree = default(CommonTree);
		CommonTree CLOSEPAREN211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(315, 1);
		try
		{
			// Scrape.g:316:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt46=3;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt46 = 1;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt46 = 2;
				}
				break;
			case OPENPAREN:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:316:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(316, 4);
				NODES203=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1804); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES203);

				DebugLocation(316, 10);
				EQUALS204=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1806); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS204);

				DebugLocation(316, 17);
				STRING_LITERAL205=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL205);



				{
				// AST REWRITE
				// elements: STRING_LITERAL, NODES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(316, 35);
					// Scrape.g:316:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(316, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES203));
					DebugLocation(316, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:317:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._selectArg_in_boolTerm1824);
				selectArg206=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg206.Tree);
				DebugLocation(317, 14);
				// Scrape.g:317:14: ( boolOperator ^ selectArg )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==EQUALS||(LA45_1>=GREATERTHAN && LA45_1<=GREATERTHANEQUAL)||(LA45_1>=LESSTHAN && LA45_1<=LESSTHANEQUAL)||LA45_1==NOTEQUAL))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:317:15: boolOperator ^ selectArg
					{
					DebugLocation(317, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1827);
					boolOperator207=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator207.Tree, root_0);
					DebugLocation(317, 29);
					PushFollow(Follow._selectArg_in_boolTerm1830);
					selectArg208=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg208.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:318:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(318, 13);
				OPENPAREN209=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1838); if (state.failed) return retval;
				DebugLocation(318, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1841);
				boolExpression210=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression210.Tree);
				DebugLocation(318, 40);
				CLOSEPAREN211=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1843); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 51);
			LeaveRule("boolTerm", 51);
			LeaveRule_boolTerm();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:321:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 52);
		TraceIn("boolOperator", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set212 = default(CommonToken);

		CommonTree set212_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(321, 1);
		try
		{
			// Scrape.g:322:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(322, 2);

			set212=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set212));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 52);
			LeaveRule("boolOperator", 52);
			LeaveRule_boolOperator();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:330:1: selectArg : ( pickStatement | literal | selectVariable );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 53);
		TraceIn("selectArg", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal214 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(330, 1);
		try
		{
			// Scrape.g:331:2: ( pickStatement | literal | selectVariable )
			int alt47=3;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt47 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt47 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:331:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(331, 4);
				PushFollow(Follow._pickStatement_in_selectArg1891);
				pickStatement213=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement213.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:332:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(332, 4);
				PushFollow(Follow._literal_in_selectArg1896);
				literal214=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal214.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:333:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(333, 4);
				PushFollow(Follow._selectVariable_in_selectArg1901);
				selectVariable215=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable215.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 53);
			LeaveRule("selectArg", 53);
			LeaveRule_selectArg();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:336:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 54);
		TraceIn("selectVariable", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID216 = default(CommonToken);
		CommonToken COMMAND_VAR217 = default(CommonToken);
		CommonToken IDENTITY_VAR218 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference219 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID216_tree = default(CommonTree);
		CommonTree COMMAND_VAR217_tree = default(CommonTree);
		CommonTree IDENTITY_VAR218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(336, 1);
		try
		{
			// Scrape.g:337:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt48=4;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA48_2 = input.LA(2);

				if ((LA48_2==DOT))
				{
					alt48 = 4;
				}
				else if ((LA48_2==EOF||LA48_2==AND||(LA48_2>=CLOSEBRACE && LA48_2<=COMMAND_VAR)||LA48_2==CREATE||(LA48_2>=EACH && LA48_2<=EXEC)||(LA48_2>=FROM && LA48_2<=GREATERTHANEQUAL)||LA48_2==ID||LA48_2==IDENTITY_VAR||(LA48_2>=INNER_JOIN && LA48_2<=INSERT_INTO)||LA48_2==INSERT_OVERWRITE||(LA48_2>=JOIN && LA48_2<=LESSTHANEQUAL)||LA48_2==NOTEQUAL||LA48_2==OR||LA48_2==PLUS||LA48_2==SELECT||LA48_2==THEN||(LA48_2>=TRUNCATE && LA48_2<=VAR)||LA48_2==WHEN||LA48_2==WHERE))
				{
					alt48 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt48 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:337:4: ID
				{
				DebugLocation(337, 4);
				ID216=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable1912); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID216);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 337:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(337, 10);
					// Scrape.g:337:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(337, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID216), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:338:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				COMMAND_VAR217=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable1924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR217_tree = (CommonTree)adaptor.Create(COMMAND_VAR217);
				adaptor.AddChild(root_0, COMMAND_VAR217_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:339:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				IDENTITY_VAR218=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable1929); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR218_tree = (CommonTree)adaptor.Create(IDENTITY_VAR218);
				adaptor.AddChild(root_0, IDENTITY_VAR218_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:340:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable1934);
				tableMemberReference219=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference219.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 54);
			LeaveRule("selectVariable", 54);
			LeaveRule_selectVariable();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:343:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 55);
		TraceIn("pickStatement", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK220 = default(CommonToken);
		CommonToken STRING_LITERAL221 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK220_tree = default(CommonTree);
		CommonTree STRING_LITERAL221_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(343, 1);
		try
		{
			// Scrape.g:344:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:344:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(344, 4);
			PICK220=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1946); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK220);

			DebugLocation(344, 9);
			STRING_LITERAL221=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1948); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL221);

			DebugLocation(344, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1950);
			takeStatement222=takeStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_takeStatement.Add(takeStatement222.Tree);
			DebugLocation(344, 38);
			// Scrape.g:344:38: ( matchStatement )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==MATCH))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:344:38: matchStatement
				{
				DebugLocation(344, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1952);
				matchStatement223=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement223.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: PICK, takeStatement, STRING_LITERAL, matchStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 344:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(344, 57);
				// Scrape.g:344:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(344, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(344, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(344, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(344, 93);
				// Scrape.g:344:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(344, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 55);
			LeaveRule("pickStatement", 55);
			LeaveRule_pickStatement();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:347:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 56);
		TraceIn("takeStatement", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE224 = default(CommonToken);
		CommonToken ATTRIBUTE225 = default(CommonToken);
		CommonToken STRING_LITERAL226 = default(CommonToken);
		CommonToken TAKE227 = default(CommonToken);
		CommonToken TEXT228 = default(CommonToken);
		CommonToken TAKE229 = default(CommonToken);
		CommonToken HTML230 = default(CommonToken);

		CommonTree TAKE224_tree = default(CommonTree);
		CommonTree ATTRIBUTE225_tree = default(CommonTree);
		CommonTree STRING_LITERAL226_tree = default(CommonTree);
		CommonTree TAKE227_tree = default(CommonTree);
		CommonTree TEXT228_tree = default(CommonTree);
		CommonTree TAKE229_tree = default(CommonTree);
		CommonTree HTML230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(347, 1);
		try
		{
			// Scrape.g:348:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt50 = 1;
					}
					break;
				case TEXT:
					{
					alt50 = 2;
					}
					break;
				case HTML:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:348:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(348, 4);
				TAKE224=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1978); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE224);

				DebugLocation(348, 9);
				ATTRIBUTE225=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1980); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE225);

				DebugLocation(348, 19);
				STRING_LITERAL226=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1982); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL226);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(348, 37);
					// Scrape.g:348:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(348, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(348, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:349:4: TAKE TEXT
				{
				DebugLocation(349, 4);
				TAKE227=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1995); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE227);

				DebugLocation(349, 9);
				TEXT228=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1997); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT228);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(349, 17);
					// Scrape.g:349:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(349, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:350:4: TAKE HTML
				{
				DebugLocation(350, 4);
				TAKE229=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2008); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE229);

				DebugLocation(350, 9);
				HTML230=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement2010); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML230);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 350:14: -> ^( TAKE_HTML )
				{
					DebugLocation(350, 17);
					// Scrape.g:350:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(350, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 56);
			LeaveRule("takeStatement", 56);
			LeaveRule_takeStatement();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:353:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 57);
		TraceIn("matchStatement", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH231 = default(CommonToken);
		CommonToken STRING_LITERAL232 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement233 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH231_tree = default(CommonTree);
		CommonTree STRING_LITERAL232_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(353, 1);
		try
		{
			// Scrape.g:354:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:354:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(354, 4);
			MATCH231=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement2028); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH231);

			DebugLocation(354, 10);
			STRING_LITERAL232=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement2030); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL232);

			DebugLocation(354, 25);
			// Scrape.g:354:25: ( replaceStatement )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==REPLACE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:354:25: replaceStatement
				{
				DebugLocation(354, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement2032);
				replaceStatement233=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement233.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, MATCH, replaceStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 354:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(354, 46);
				// Scrape.g:354:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(354, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(354, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(354, 69);
				// Scrape.g:354:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(354, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 57);
			LeaveRule("matchStatement", 57);
			LeaveRule_matchStatement();
		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:357:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 58);
		TraceIn("replaceStatement", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE234 = default(CommonToken);
		CommonToken STRING_LITERAL235 = default(CommonToken);

		CommonTree REPLACE234_tree = default(CommonTree);
		CommonTree STRING_LITERAL235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(357, 1);
		try
		{
			// Scrape.g:358:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:358:4: REPLACE STRING_LITERAL
			{
			DebugLocation(358, 4);
			REPLACE234=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement2055); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE234);

			DebugLocation(358, 12);
			STRING_LITERAL235=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement2057); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL235);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 358:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(358, 30);
				// Scrape.g:358:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(358, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(358, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 58);
			LeaveRule("replaceStatement", 58);
			LeaveRule_replaceStatement();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:362:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 59);
		TraceIn("createTableStatement", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE236 = default(CommonToken);
		CommonToken FILE237 = default(CommonToken);
		CommonToken ID238 = default(CommonToken);
		CommonToken OPENPAREN239 = default(CommonToken);
		CommonToken CLOSEPAREN241 = default(CommonToken);
		CommonToken CREATE244 = default(CommonToken);
		CommonToken BUFFER245 = default(CommonToken);
		CommonToken ID246 = default(CommonToken);
		CommonToken OPENPAREN247 = default(CommonToken);
		CommonToken CLOSEPAREN249 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs240 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement242 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation243 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs248 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE236_tree = default(CommonTree);
		CommonTree FILE237_tree = default(CommonTree);
		CommonTree ID238_tree = default(CommonTree);
		CommonTree OPENPAREN239_tree = default(CommonTree);
		CommonTree CLOSEPAREN241_tree = default(CommonTree);
		CommonTree CREATE244_tree = default(CommonTree);
		CommonTree BUFFER245_tree = default(CommonTree);
		CommonTree ID246_tree = default(CommonTree);
		CommonTree OPENPAREN247_tree = default(CommonTree);
		CommonTree CLOSEPAREN249_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(362, 1);
		try
		{
			// Scrape.g:363:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==CREATE))
			{
				int LA55_2 = input.LA(2);

				if ((LA55_2==FILE))
				{
					alt55 = 1;
				}
				else if ((LA55_2==BUFFER))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:363:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(363, 4);
				CREATE236=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2078); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE236);

				DebugLocation(363, 11);
				FILE237=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement2080); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE237);

				DebugLocation(363, 16);
				ID238=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID238);

				DebugLocation(363, 19);
				OPENPAREN239=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2084); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN239);

				DebugLocation(363, 29);
				// Scrape.g:363:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==ID))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:363:29: tableColumnArgs
						{
						DebugLocation(363, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2086);
						tableColumnArgs240=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs240.Tree);

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(363, 46);
				CLOSEPAREN241=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2089); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN241);

				DebugLocation(363, 57);
				// Scrape.g:363:57: ( fileTableWithStatement )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==WITH))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:363:57: fileTableWithStatement
					{
					DebugLocation(363, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement2091);
					fileTableWithStatement242=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement242.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(363, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement2094);
				fileTableLocation243=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation243.Tree);


				{
				// AST REWRITE
				// elements: fileTableLocation, tableColumnArgs, fileTableWithStatement, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 363:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(363, 102);
					// Scrape.g:363:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(363, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(363, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(363, 118);
					// Scrape.g:363:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(363, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(363, 135);
					// Scrape.g:363:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(363, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(363, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:364:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(364, 4);
				CREATE244=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE244);

				DebugLocation(364, 11);
				BUFFER245=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement2117); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER245);

				DebugLocation(364, 18);
				ID246=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2119); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID246);

				DebugLocation(364, 21);
				OPENPAREN247=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2121); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN247);

				DebugLocation(364, 31);
				// Scrape.g:364:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==ID))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:364:31: tableColumnArgs
						{
						DebugLocation(364, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2123);
						tableColumnArgs248=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs248.Tree);

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }

				DebugLocation(364, 48);
				CLOSEPAREN249=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2126); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN249);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(364, 62);
					// Scrape.g:364:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(364, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(364, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(364, 80);
					// Scrape.g:364:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(364, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 59);
			LeaveRule("createTableStatement", 59);
			LeaveRule_createTableStatement();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:367:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 60);
		TraceIn("fileTableLocation", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION250 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression251 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION250_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(367, 1);
		try
		{
			// Scrape.g:368:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:368:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(368, 12);
			LOCATION250=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation2148); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION250_tree = (CommonTree)adaptor.Create(LOCATION250);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION250_tree, root_0);
			}
			DebugLocation(368, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation2151);
			mathExpression251=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression251.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 60);
			LeaveRule("fileTableLocation", 60);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:371:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 61);
		TraceIn("fileTableWithStatement", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH252 = default(CommonToken);
		CommonToken OPENPAREN253 = default(CommonToken);
		CommonToken CLOSEPAREN255 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement254 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH252_tree = default(CommonTree);
		CommonTree OPENPAREN253_tree = default(CommonTree);
		CommonTree CLOSEPAREN255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(371, 1);
		try
		{
			// Scrape.g:372:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:372:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(372, 4);
			WITH252=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement2163); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH252);

			DebugLocation(372, 9);
			OPENPAREN253=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2165); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN253);

			DebugLocation(372, 19);
			// Scrape.g:372:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==FIELD_TERMINATOR||LA56_1==ROW_TERMINATOR))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:372:19: fileTableWithVariablesStatement
					{
					DebugLocation(372, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2167);
					fileTableWithVariablesStatement254=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement254.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(372, 52);
			CLOSEPAREN255=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2170); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN255);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 372:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(372, 66);
				// Scrape.g:372:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(372, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(372, 73);
				// Scrape.g:372:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(372, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 61);
			LeaveRule("fileTableWithStatement", 61);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:375:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 62);
		TraceIn("fileTableWithVariablesStatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA257 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement256 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement258 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA257_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(375, 1);
		try
		{
			// Scrape.g:376:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:376:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(376, 4);
			// Scrape.g:376:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==FIELD_TERMINATOR||LA57_1==ROW_TERMINATOR))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==EQUALS))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==STRING_LITERAL))
						{
							int LA57_4 = input.LA(4);

							if ((LA57_4==COMMA))
							{
								alt57 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:376:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(376, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2193);
					fileTableWithVariableStatement256=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement256.Tree);
					DebugLocation(376, 36);
					COMMA257=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2195); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA257);


					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(376, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2199);
			fileTableWithVariableStatement258=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement258.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 376:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(376, 78);
				// Scrape.g:376:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(376, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 62);
			LeaveRule("fileTableWithVariablesStatement", 62);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:379:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 63);
		TraceIn("fileTableWithVariableStatement", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set259 = default(CommonToken);
		CommonToken EQUALS260 = default(CommonToken);
		CommonToken STRING_LITERAL261 = default(CommonToken);

		CommonTree set259_tree = default(CommonTree);
		CommonTree EQUALS260_tree = default(CommonTree);
		CommonTree STRING_LITERAL261_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(379, 1);
		try
		{
			// Scrape.g:380:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:380:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(380, 39);

			set259=(CommonToken)input.LT(1);
			set259=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set259), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(380, 47);
			EQUALS260=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2224); if (state.failed) return retval;
			DebugLocation(380, 49);
			STRING_LITERAL261=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2227); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL261_tree = (CommonTree)adaptor.Create(STRING_LITERAL261);
			adaptor.AddChild(root_0, STRING_LITERAL261_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 63);
			LeaveRule("fileTableWithVariableStatement", 63);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:383:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 64);
		TraceIn("tableColumnArgs", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA263 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg262 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg264 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(383, 1);
		try
		{
			// Scrape.g:384:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:384:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(384, 4);
			// Scrape.g:384:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==ID))
				{
					int LA58_2 = input.LA(2);

					if ((LA58_2==FLOAT||LA58_2==IDENTITY||LA58_2==INTEGER||LA58_2==STRING))
					{
						int LA58_3 = input.LA(3);

						if ((LA58_3==COMMA))
						{
							alt58 = 1;
						}


					}


				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:384:5: tableColumnArg COMMA
					{
					DebugLocation(384, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2239);
					tableColumnArg262=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg262.Tree);
					DebugLocation(384, 20);
					COMMA263=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2241); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA263);


					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(384, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2245);
			tableColumnArg264=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg264.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 384:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(384, 46);
				// Scrape.g:384:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(384, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(384, 66);
				// Scrape.g:384:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(384, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 64);
			LeaveRule("tableColumnArgs", 64);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:387:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 65);
		TraceIn("tableColumnArg", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID265 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType266 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID265_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(387, 1);
		try
		{
			// Scrape.g:388:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:388:4: ID dataType
			{
			DebugLocation(388, 4);
			ID265=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2266); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID265);

			DebugLocation(388, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2268);
			dataType266=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType266.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 388:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(388, 19);
				// Scrape.g:388:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(388, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(388, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(388, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 65);
			LeaveRule("tableColumnArg", 65);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:391:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 66);
		TraceIn("dataType", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set267 = default(CommonToken);

		CommonTree set267_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(391, 1);
		try
		{
			// Scrape.g:392:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(392, 2);

			set267=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set267));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 66);
			LeaveRule("dataType", 66);
			LeaveRule_dataType();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred28_Scrape_fragment();
	partial void LeaveRule_synpred28_Scrape_fragment();

	// $ANTLR start synpred28_Scrape
	private void synpred28_Scrape_fragment()
	{
		EnterRule_synpred28_Scrape_fragment();
		EnterRule("synpred28_Scrape_fragment", 94);
		TraceIn("synpred28_Scrape_fragment", 94);
		try
		{
			// Scrape.g:184:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:184:4: mathExpression
			{
			DebugLocation(184, 4);
			PushFollow(Follow._mathExpression_in_synpred28_Scrape914);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred28_Scrape_fragment", 94);
			LeaveRule("synpred28_Scrape_fragment", 94);
			LeaveRule_synpred28_Scrape_fragment();
		}
	}
	// $ANTLR end synpred28_Scrape

	partial void EnterRule_synpred59_Scrape_fragment();
	partial void LeaveRule_synpred59_Scrape_fragment();

	// $ANTLR start synpred59_Scrape
	private void synpred59_Scrape_fragment()
	{
		EnterRule_synpred59_Scrape_fragment();
		EnterRule("synpred59_Scrape_fragment", 125);
		TraceIn("synpred59_Scrape_fragment", 125);
		try
		{
			// Scrape.g:278:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:278:12: selectArgs COMMA
			{
			DebugLocation(278, 12);
			PushFollow(Follow._selectArgs_in_synpred59_Scrape1532);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(278, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred59_Scrape1534); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Scrape_fragment", 125);
			LeaveRule("synpred59_Scrape_fragment", 125);
			LeaveRule_synpred59_Scrape_fragment();
		}
	}
	// $ANTLR end synpred59_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program227 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program242 = new BitSet(new ulong[]{0x2CA0044140000UL,0xE0000080000UL});
		public static readonly BitSet _noBraceBlock_in_program244 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition280 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition282 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition284 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition286 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition289 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_procedureDefinition291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatment_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable370 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_truncateTable372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall394 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureCall396 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall398 = new BitSet(new ulong[]{0x40A0000050000UL,0x4000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall400 = new BitSet(new ulong[]{0x40A0000050000UL,0x4000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList426 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList428 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement464 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement466 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement468 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement470 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList494 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList496 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest520 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _TEST_in_proxyTest522 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest524 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest526 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement543 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement545 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _VAR_in_eachStatement547 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement551 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _IN_in_eachStatement553 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement557 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement559 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_eachStatement561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock586 = new BitSet(new ulong[]{0x2CA0044140002UL,0xE0000080000UL});
		public static readonly BitSet _OPENBRACE_in_block607 = new BitSet(new ulong[]{0x2CA0044148000UL,0xE0000080000UL});
		public static readonly BitSet _statement_in_block609 = new BitSet(new ulong[]{0x2CA0044148000UL,0xE0000080000UL});
		public static readonly BitSet _CLOSEBRACE_in_block612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression632 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression634 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression636 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _TO_in_expandExpression638 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression640 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression642 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _expandBlock_in_expandExpression644 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock669 = new BitSet(new ulong[]{0x40A0000048000UL,0x20000004000012UL});
		public static readonly BitSet _mathExpression_in_expandBlock671 = new BitSet(new ulong[]{0x40A0000048000UL,0x20000004000012UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion722 = new BitSet(new ulong[]{0xA0000040000UL,0x4000010UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadPageExpresssion725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression736 = new BitSet(new ulong[]{0xA0000040000UL,0x4000010UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadImageExpression739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadExpressionArg750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadExpressionArg755 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_downloadExpressionArg758 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadExpressionArg760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_downloadExpressionArg766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference812 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _DOT_in_tableMemberReference814 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement842 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement844 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement846 = new BitSet(new ulong[]{0x40A0083040000UL,0x20000004080012UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement869 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement871 = new BitSet(new ulong[]{0x40A0083040000UL,0x20000004080012UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator894 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator896 = new BitSet(new ulong[]{0x4000000040000UL,0x4000002UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression955 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _set_in_mathExpression958 = new BitSet(new ulong[]{0x40A0000040000UL,0x20000004000012UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression969 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _atom_in_mathExpressionGroup987 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _set_in_mathExpressionGroup990 = new BitSet(new ulong[]{0x40A0000040000UL,0x20000004000012UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1001 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _variableReference_in_atom1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_atom1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1049 = new BitSet(new ulong[]{0x40A0000040000UL,0x20000004000012UL});
		public static readonly BitSet _mathExpression_in_atom1052 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1096 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1098 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1115 = new BitSet(new ulong[]{0x40A0000040000UL,0x20000004000012UL});
		public static readonly BitSet _mathExpression_in_insertStatement1117 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1133 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1135 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatment1162 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_updateStatment1164 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _setArgs_in_updateStatment1166 = new BitSet(new ulong[]{0x2000000002UL,0x4000000000000UL});
		public static readonly BitSet _fromStatement_in_updateStatment1168 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _whereStatement_in_updateStatment1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setArgs1203 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _setArg_in_setArgs1206 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_setArgs1208 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _setArg_in_setArgs1212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_setArg1232 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_setArg1234 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _selectArg_in_setArg1236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1260 = new BitSet(new ulong[]{0x2000000002UL,0x4000000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1262 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1292 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _boolExpression_in_whereStatement1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1314 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_fromStatement1318 = new BitSet(new ulong[]{0x10220000000002UL});
		public static readonly BitSet _ID_in_fromStatement1322 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1352 = new BitSet(new ulong[]{0x83000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1355 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _tableHint_in_fromStatement1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1363 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_fromStatement1365 = new BitSet(new ulong[]{0x83000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1367 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_fromStatement1369 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_fromStatement1371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_tableHint1398 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_tableHint1401 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _hint_in_tableHint1404 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_tableHint1406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THREAD_in_hint1418 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_hint1420 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _INT_in_hint1422 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1443 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1447 = new BitSet(new ulong[]{0x20000000000UL,0x40000000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1451 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_innerJoinStatement1454 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1456 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_tableGenerationClause1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_tableGenerationClause1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_tableGenerationClause1502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1529 = new BitSet(new ulong[]{0x40A0000040800UL,0x4000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1532 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1534 = new BitSet(new ulong[]{0x40A0000040800UL,0x4000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1552 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1580 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _PLUS_in_selectArgs1582 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _selectArg_in_selectArgs1586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1622 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1624 = new BitSet(new ulong[]{0x18000000UL,0x800000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1628 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1630 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1651 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _selectArg_in_caseStatement1653 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1655 = new BitSet(new ulong[]{0x18000000UL,0x800000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1659 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1661 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1709 = new BitSet(new ulong[]{0x4000000000000UL,0x4000002UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1711 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1713 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1736 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1738 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1740 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1763 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _OR_in_boolExpression1766 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _andExpression_in_boolExpression1769 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _boolTerm_in_andExpression1783 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1786 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _boolTerm_in_andExpression1789 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1804 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1806 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1824 = new BitSet(new ulong[]{0x6000C020000002UL,0x1UL});
		public static readonly BitSet _boolOperator_in_boolTerm1827 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000082UL});
		public static readonly BitSet _selectArg_in_boolTerm1830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1838 = new BitSet(new ulong[]{0x80040A0000040000UL,0x4000092UL});
		public static readonly BitSet _boolExpression_in_boolTerm1841 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg1901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable1912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable1924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable1929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable1934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1946 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1948 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1950 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1978 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1980 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1995 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2008 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _HTML_in_takeStatement2010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement2028 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement2030 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement2055 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement2057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2078 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _FILE_in_createTableStatement2080 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2082 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2084 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2086 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2089 = new BitSet(new ulong[]{0x400000000000000UL,0x8000000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement2091 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement2094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2115 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement2117 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2119 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2121 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2123 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation2148 = new BitSet(new ulong[]{0x40A0000040000UL,0x20000004000012UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement2163 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2165 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2167 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2193 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2195 = new BitSet(new ulong[]{0x200000000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2215 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2224 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2239 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2241 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2266 = new BitSet(new ulong[]{0x8041000000000UL,0x2000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred28_Scrape914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred59_Scrape1532 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred59_Scrape1534 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
