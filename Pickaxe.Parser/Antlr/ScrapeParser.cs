//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-12-31 22:01:46

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "AS", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CONNECTIONSTRING", "CREATE", "DATETIME", "DBTABLE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FL", "FLOAT", "FROM", "GETDATE", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "JS", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LIKE", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "MSSQL", "MSSQL_TABLE", "NESTED_SELECT_STATEMENT", "NEWLINE", "NODES", "NOTEQUAL", "NOTLIKE", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PIPE", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "SET", "STRING", "STRING_LITERAL", "TABLE", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "THREAD", "TO", "TRUNCATE", "UPDATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WHILE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__132=132;
	public const int T__133=133;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int AS=6;
	public const int ASTERISK=7;
	public const int ATTRIBUTE=8;
	public const int BLOCK=9;
	public const int BUFFER=10;
	public const int BUFFER_TABLE=11;
	public const int CASE=12;
	public const int CASE_BOOL=13;
	public const int CASE_EXPRESSION=14;
	public const int CASE_VAR=15;
	public const int CLOSEBRACE=16;
	public const int CLOSEPAREN=17;
	public const int COMMA=18;
	public const int COMMAND_VAR=19;
	public const int COMMENT=20;
	public const int CONNECTIONSTRING=21;
	public const int CREATE=22;
	public const int DATETIME=23;
	public const int DBTABLE=24;
	public const int DIGIT=25;
	public const int DIV=26;
	public const int DOT=27;
	public const int DOWNLOAD_IMAGE=28;
	public const int DOWNLOAD_PAGE=29;
	public const int EACH=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EQUALS=33;
	public const int EXEC=34;
	public const int EXPAND=35;
	public const int EXPAND_INTERATION_VARIABLE=36;
	public const int FIELD_TERMINATOR=37;
	public const int FILE=38;
	public const int FILE_TABLE=39;
	public const int FL=40;
	public const int FLOAT=41;
	public const int FROM=42;
	public const int GETDATE=43;
	public const int GREATERTHAN=44;
	public const int GREATERTHANEQUAL=45;
	public const int HTML=46;
	public const int ID=47;
	public const int IDENTITY=48;
	public const int IDENTITY_VAR=49;
	public const int IN=50;
	public const int INNER_JOIN=51;
	public const int INSERT_DIRECTORY=52;
	public const int INSERT_INTO=53;
	public const int INSERT_INTO_DIRECTORY=54;
	public const int INSERT_OVERWRITE=55;
	public const int INT=56;
	public const int INTEGER=57;
	public const int JOIN=58;
	public const int JS=59;
	public const int LESSTHAN=60;
	public const int LESSTHANEQUAL=61;
	public const int LETTER=62;
	public const int LIKE=63;
	public const int LINE_COMMENT_DASH=64;
	public const int LINE_COMMENT_SLASH=65;
	public const int LOCATION=66;
	public const int MATCH=67;
	public const int MEMBER_REFERENCE=68;
	public const int MINIS=69;
	public const int MSSQL=70;
	public const int MSSQL_TABLE=71;
	public const int NESTED_SELECT_STATEMENT=72;
	public const int NEWLINE=73;
	public const int NODES=74;
	public const int NOTEQUAL=75;
	public const int NOTLIKE=76;
	public const int NULL=77;
	public const int NULL_OPERATOR=78;
	public const int OPENBRACE=79;
	public const int OPENPAREN=80;
	public const int OR=81;
	public const int OTHERCHARS=82;
	public const int PICK=83;
	public const int PIPE=84;
	public const int PLUS=85;
	public const int POST_PICK=86;
	public const int PRE_PICK=87;
	public const int PROCEDURE=88;
	public const int PROGRAM=89;
	public const int PROXIES=90;
	public const int PROXY_LIST=91;
	public const int QUOTE=92;
	public const int REPLACE=93;
	public const int ROW_REFERENCE=94;
	public const int ROW_TERMINATOR=95;
	public const int SELECT=96;
	public const int SELECT_ALL=97;
	public const int SELECT_ARG=98;
	public const int SELECT_ID=99;
	public const int SELECT_STATEMENT=100;
	public const int SET=101;
	public const int STRING=102;
	public const int STRING_LITERAL=103;
	public const int TABLE=104;
	public const int TABLE_ALIAS=105;
	public const int TABLE_COLUMN_ARG=106;
	public const int TABLE_COLUMN_ARGS=107;
	public const int TABLE_MEMBER_REFERENCE=108;
	public const int TABLE_VARIABLE_REFERENCE=109;
	public const int TAKE=110;
	public const int TAKE_ATTRIBUTE=111;
	public const int TAKE_HTML=112;
	public const int TAKE_TEXT=113;
	public const int TEST=114;
	public const int TEXT=115;
	public const int THEN=116;
	public const int THREAD=117;
	public const int TO=118;
	public const int TRUNCATE=119;
	public const int UPDATE=120;
	public const int VAR=121;
	public const int VARIABLE_ASSIGNMENT=122;
	public const int VARIABLE_DECLARATION=123;
	public const int VARIABLE_REFERENCE=124;
	public const int WHEN=125;
	public const int WHEN_BOOL_STATEMENT=126;
	public const int WHEN_LITERAL_STATEMENT=127;
	public const int WHERE=128;
	public const int WHILE=129;
	public const int WITH=130;
	public const int WS=131;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:66:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(66, 1);
		try
		{
			// Scrape.g:67:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case UPDATE:
			case VAR:
			case WHILE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:67:4: noBraceBlock EOF
				{
				DebugLocation(67, 4);
				PushFollow(Follow._noBraceBlock_in_program237);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(67, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program239); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 67:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(67, 24);
					// Scrape.g:67:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(67, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(67, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:68:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(68, 4);
				PushFollow(Follow._proxyStatement_in_program252);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(68, 19);
				PushFollow(Follow._noBraceBlock_in_program254);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(68, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program256); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: proxyStatement, noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 68:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(68, 39);
					// Scrape.g:68:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(68, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(68, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(68, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:69:4: procedureDefinition
				{
				DebugLocation(69, 4);
				PushFollow(Follow._procedureDefinition_in_program271);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 69:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(69, 27);
					// Scrape.g:69:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(69, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(69, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:72:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(72, 1);
		try
		{
			// Scrape.g:73:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:73:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(73, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition290); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(73, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(73, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition294); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(73, 27);
			// Scrape.g:73:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:73:27: tableColumnArgs
					{
					DebugLocation(73, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition296);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(73, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition299); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(73, 55);
			PushFollow(Follow._block_in_procedureDefinition301);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: block, tableColumnArgs, ID, PROCEDURE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 73:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(73, 64);
				// Scrape.g:73:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(73, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(73, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(73, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(73, 85);
				// Scrape.g:73:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(73, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:76:1: statement : ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(76, 1);
		try
		{
			// Scrape.g:77:2: ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable )
			int alt3=10;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case UPDATE:
				{
				alt3 = 3;
				}
				break;
			case VAR:
				{
				alt3 = 4;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 5;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 6;
				}
				break;
			case EACH:
				{
				alt3 = 7;
				}
				break;
			case WHILE:
				{
				alt3 = 8;
				}
				break;
			case EXEC:
				{
				alt3 = 9;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:77:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._createTableStatement_in_statement329);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:78:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._sqlStatement_in_statement334);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:79:4: updateStatment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._updateStatment_in_statement339);
				updateStatment15=updateStatment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, updateStatment15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:80:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement344);
				variableDeclarationStatement16=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:81:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement349);
				variableAssignmentStatement17=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:82:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._insertStatement_in_statement354);
				insertStatement18=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:83:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._eachStatement_in_statement359);
				eachStatement19=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:84:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._whileStatement_in_statement364);
				whileStatement20=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement20.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Scrape.g:85:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(85, 4);
				PushFollow(Follow._procedureCall_in_statement369);
				procedureCall21=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall21.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Scrape.g:86:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(86, 4);
				PushFollow(Follow._truncateTable_in_statement374);
				truncateTable22=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable22.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:89:1: truncateTable : TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE23 = default(CommonToken);
		CommonToken TABLE24 = default(CommonToken);
		CommonToken ID25 = default(CommonToken);

		CommonTree TRUNCATE23_tree = default(CommonTree);
		CommonTree TABLE24_tree = default(CommonTree);
		CommonTree ID25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(89, 1);
		try
		{
			// Scrape.g:90:2: ( TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:90:4: TRUNCATE TABLE ID
			{
			DebugLocation(90, 4);
			TRUNCATE23=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable385); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE23);

			DebugLocation(90, 13);
			TABLE24=(CommonToken)Match(input,TABLE,Follow._TABLE_in_truncateTable387); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE24);

			DebugLocation(90, 19);
			ID25=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID25);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 90:22: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(90, 25);
				// Scrape.g:90:25: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(90, 27);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(90, 36);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID25));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:94:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC26 = default(CommonToken);
		CommonToken ID27 = default(CommonToken);
		CommonToken OPENPAREN28 = default(CommonToken);
		CommonToken CLOSEPAREN30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC26_tree = default(CommonTree);
		CommonTree ID27_tree = default(CommonTree);
		CommonTree OPENPAREN28_tree = default(CommonTree);
		CommonTree CLOSEPAREN30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(94, 1);
		try
		{
			// Scrape.g:95:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:95:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(95, 5);
			EXEC26=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall411); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC26);

			DebugLocation(95, 10);
			ID27=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall413); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID27);

			DebugLocation(95, 13);
			OPENPAREN28=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN28);

			DebugLocation(95, 23);
			// Scrape.g:95:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:95:23: procedureCallList
					{
					DebugLocation(95, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall417);
					procedureCallList29=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList29.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(95, 42);
			CLOSEPAREN30=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN30);



			{
			// AST REWRITE
			// elements: EXEC, ID, procedureCallList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 95:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(95, 56);
				// Scrape.g:95:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(95, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(95, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(95, 66);
				// Scrape.g:95:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(95, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:98:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs33 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(98, 1);
		try
		{
			// Scrape.g:99:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:99:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(99, 4);
			// Scrape.g:99:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:99:5: callArgs COMMA
					{
					DebugLocation(99, 5);
					PushFollow(Follow._callArgs_in_procedureCallList443);
					callArgs31=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs31.Tree);
					DebugLocation(99, 14);
					COMMA32=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList445); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA32);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(99, 22);
			PushFollow(Follow._callArgs_in_procedureCallList449);
			callArgs33=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs33.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 99:31: -> ( callArgs )*
			{
				DebugLocation(99, 34);
				// Scrape.g:99:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(99, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:102:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(102, 1);
		try
		{
			// Scrape.g:103:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:103:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(103, 4);
				PushFollow(Follow._expandVar_in_callArgs465);
				expandVar34=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:104:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(104, 4);
				STRING_LITERAL35=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs470); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL35_tree = (CommonTree)adaptor.Create(STRING_LITERAL35);
				adaptor.AddChild(root_0, STRING_LITERAL35_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:107:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES36 = default(CommonToken);
		CommonToken OPENPAREN37 = default(CommonToken);
		CommonToken CLOSEPAREN39 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES36_tree = default(CommonTree);
		CommonTree OPENPAREN37_tree = default(CommonTree);
		CommonTree CLOSEPAREN39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(107, 1);
		try
		{
			// Scrape.g:108:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:108:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(108, 4);
			PROXIES36=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement481); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES36);

			DebugLocation(108, 12);
			OPENPAREN37=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement483); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN37);

			DebugLocation(108, 22);
			PushFollow(Follow._proxyList_in_proxyStatement485);
			proxyList38=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList38.Tree);
			DebugLocation(108, 32);
			CLOSEPAREN39=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement487); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN39);

			DebugLocation(108, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement489);
			proxyTest40=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest40.Tree);


			{
			// AST REWRITE
			// elements: proxyTest, PROXIES, proxyList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(108, 56);
				// Scrape.g:108:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(108, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(108, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(108, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:111:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL41 = default(CommonToken);
		CommonToken COMMA42 = default(CommonToken);
		CommonToken STRING_LITERAL43 = default(CommonToken);

		CommonTree STRING_LITERAL41_tree = default(CommonTree);
		CommonTree COMMA42_tree = default(CommonTree);
		CommonTree STRING_LITERAL43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(111, 1);
		try
		{
			// Scrape.g:112:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:112:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(112, 4);
			// Scrape.g:112:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:112:5: STRING_LITERAL COMMA
					{
					DebugLocation(112, 5);
					STRING_LITERAL41=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList511); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL41);

					DebugLocation(112, 20);
					COMMA42=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList513); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA42);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(112, 28);
			STRING_LITERAL43=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList517); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL43);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 112:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(112, 46);
				// Scrape.g:112:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(112, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(112, 59);
				// Scrape.g:112:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(112, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:115:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH44 = default(CommonToken);
		CommonToken TEST45 = default(CommonToken);
		CommonToken OPENBRACE46 = default(CommonToken);
		CommonToken CLOSEBRACE48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH44_tree = default(CommonTree);
		CommonTree TEST45_tree = default(CommonTree);
		CommonTree OPENBRACE46_tree = default(CommonTree);
		CommonTree CLOSEBRACE48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(115, 1);
		try
		{
			// Scrape.g:116:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:116:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(116, 4);
			WITH44=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest537); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH44);

			DebugLocation(116, 9);
			TEST45=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest539); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST45);

			DebugLocation(116, 14);
			OPENBRACE46=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest541); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE46);

			DebugLocation(116, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest543);
			sqlStatement47=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement47.Tree);
			DebugLocation(116, 37);
			CLOSEBRACE48=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest545); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE48);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 116:48: -> sqlStatement
			{
				DebugLocation(116, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Scrape.g:119:1: whileStatement : WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 11);
		TraceIn("whileStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHILE49 = default(CommonToken);
		CommonToken OPENPAREN50 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		CommonToken CLOSEPAREN52 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHILE49_tree = default(CommonTree);
		CommonTree OPENPAREN50_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		CommonTree CLOSEPAREN52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(119, 1);
		try
		{
			// Scrape.g:120:2: ( WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) )
			DebugEnterAlt(1);
			// Scrape.g:120:4: WHILE OPENPAREN ID CLOSEPAREN block
			{
			DebugLocation(120, 4);
			WHILE49=(CommonToken)Match(input,WHILE,Follow._WHILE_in_whileStatement560); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE49);

			DebugLocation(120, 10);
			OPENPAREN50=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_whileStatement562); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN50);

			DebugLocation(120, 20);
			ID51=(CommonToken)Match(input,ID,Follow._ID_in_whileStatement564); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID51);

			DebugLocation(120, 23);
			CLOSEPAREN52=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_whileStatement566); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN52);

			DebugLocation(120, 34);
			PushFollow(Follow._block_in_whileStatement568);
			block53=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block53.Tree);


			{
			// AST REWRITE
			// elements: block, WHILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 120:40: -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
			{
				DebugLocation(120, 43);
				// Scrape.g:120:43: ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(120, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(120, 51);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID51));
				DebugLocation(120, 81);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 11);
			LeaveRule("whileStatement", 11);
			LeaveRule_whileStatement();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:123:1: eachStatement : EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 12);
		TraceIn("eachStatement", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken VAR56 = default(CommonToken);
		CommonToken IN57 = default(CommonToken);
		CommonToken CLOSEPAREN58 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree VAR56_tree = default(CommonTree);
		CommonTree IN57_tree = default(CommonTree);
		CommonTree CLOSEPAREN58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(123, 1);
		try
		{
			// Scrape.g:124:2: ( EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:124:4: EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(124, 4);
			EACH54=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement590); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH54);

			DebugLocation(124, 9);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(124, 19);
			VAR56=(CommonToken)Match(input,VAR,Follow._VAR_in_eachStatement594); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR56);

			DebugLocation(124, 24);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement598); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(124, 28);
			IN57=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN57);

			DebugLocation(124, 32);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement604); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(124, 36);
			CLOSEPAREN58=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement606); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN58);

			DebugLocation(124, 47);
			PushFollow(Follow._block_in_eachStatement608);
			block59=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block59.Tree);


			{
			// AST REWRITE
			// elements: EACH, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 124:53: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(124, 56);
				// Scrape.g:124:56: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(124, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(124, 63);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(124, 88);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(124, 117);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 12);
			LeaveRule("eachStatement", 12);
			LeaveRule_eachStatement();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:127:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 13);
		TraceIn("noBraceBlock", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(127, 1);
		try
		{
			// Scrape.g:128:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:128:4: ( statement )*
			{
			DebugLocation(128, 4);
			// Scrape.g:128:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)||LA8_1==WHILE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:128:4: statement
					{
					DebugLocation(128, 4);
					PushFollow(Follow._statement_in_noBraceBlock633);
					statement60=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement60.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 128:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(128, 18);
				// Scrape.g:128:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(128, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(128, 26);
				// Scrape.g:128:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(128, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 13);
			LeaveRule("noBraceBlock", 13);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:131:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 14);
		TraceIn("block", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(131, 1);
		try
		{
			// Scrape.g:132:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:132:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(132, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block654); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(132, 14);
			// Scrape.g:132:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)||LA9_1==WHILE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:132:14: statement
					{
					DebugLocation(132, 14);
					PushFollow(Follow._statement_in_block656);
					statement62=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement62.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(132, 25);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block659); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 132:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(132, 39);
				// Scrape.g:132:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(132, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(132, 47);
				// Scrape.g:132:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(132, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 14);
			LeaveRule("block", 14);
			LeaveRule_block();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:135:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 15);
		TraceIn("expandExpression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND64 = default(CommonToken);
		CommonToken OPENPAREN65 = default(CommonToken);
		CommonToken TO67 = default(CommonToken);
		CommonToken CLOSEPAREN69 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND64_tree = default(CommonTree);
		CommonTree OPENPAREN65_tree = default(CommonTree);
		CommonTree TO67_tree = default(CommonTree);
		CommonTree CLOSEPAREN69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(135, 1);
		try
		{
			// Scrape.g:136:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:136:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(136, 4);
			EXPAND64=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression679); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND64);

			DebugLocation(136, 11);
			OPENPAREN65=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression681); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN65);

			DebugLocation(136, 21);
			PushFollow(Follow._expandVar_in_expandExpression683);
			expandVar66=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar66.Tree);
			DebugLocation(136, 31);
			TO67=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression685); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO67);

			DebugLocation(136, 34);
			PushFollow(Follow._expandVar_in_expandExpression687);
			expandVar68=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar68.Tree);
			DebugLocation(136, 44);
			CLOSEPAREN69=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression689); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN69);

			DebugLocation(136, 55);
			// Scrape.g:136:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:136:55: expandBlock
					{
					DebugLocation(136, 55);
					PushFollow(Follow._expandBlock_in_expandExpression691);
					expandBlock70=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock70.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandBlock, expandVar, expandVar, EXPAND
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 136:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(136, 71);
				// Scrape.g:136:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(136, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(136, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(136, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(136, 100);
				// Scrape.g:136:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(136, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 15);
			LeaveRule("expandExpression", 15);
			LeaveRule_expandExpression();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:139:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 16);
		TraceIn("expandBlock", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE71 = default(CommonToken);
		CommonToken CLOSEBRACE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE71_tree = default(CommonTree);
		CommonTree CLOSEBRACE73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(139, 1);
		try
		{
			// Scrape.g:140:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:140:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(140, 4);
			OPENBRACE71=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock716); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE71);

			DebugLocation(140, 14);
			// Scrape.g:140:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==FL||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==132))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:140:14: mathExpression
					{
					DebugLocation(140, 14);
					PushFollow(Follow._mathExpression_in_expandBlock718);
					mathExpression72=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression72.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(140, 30);
			CLOSEBRACE73=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock721); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE73);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 140:41: -> ( mathExpression )*
			{
				DebugLocation(140, 44);
				// Scrape.g:140:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(140, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 16);
			LeaveRule("expandBlock", 16);
			LeaveRule_expandBlock();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:143:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 17);
		TraceIn("expandVar", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(143, 1);
		try
		{
			// Scrape.g:144:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:144:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 4);
				INT74=(CommonToken)Match(input,INT,Follow._INT_in_expandVar737); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT74_tree = (CommonTree)adaptor.Create(INT74);
				adaptor.AddChild(root_0, INT74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:145:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(145, 4);
				PushFollow(Follow._variableReference_in_expandVar742);
				variableReference75=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference75.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 17);
			LeaveRule("expandVar", 17);
			LeaveRule_expandVar();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:148:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 18);
		TraceIn("downloadExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(148, 1);
		try
		{
			// Scrape.g:149:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:149:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression753);
				downloadPageExpresssion76=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion76.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:150:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression758);
				downloadImageExpression77=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression77.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 18);
			LeaveRule("downloadExpression", 18);
			LeaveRule_downloadExpression();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:153:1: downloadPageExpresssion : DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ;
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 19);
		TraceIn("downloadPageExpresssion", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(153, 1);
		try
		{
			// Scrape.g:154:2: ( DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? )
			DebugEnterAlt(1);
			// Scrape.g:154:4: DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(154, 17);
			DOWNLOAD_PAGE78=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion769); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_PAGE78_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE78);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE78_tree, root_0);
			}
			DebugLocation(154, 19);
			PushFollow(Follow._downloadExpressionArg_in_downloadPageExpresssion772);
			downloadExpressionArg79=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg79.Tree);
			DebugLocation(154, 41);
			// Scrape.g:154:41: ( tableHint )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:154:41: tableHint
				{
				DebugLocation(154, 41);
				PushFollow(Follow._tableHint_in_downloadPageExpresssion774);
				tableHint80=tableHint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableHint80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 19);
			LeaveRule("downloadPageExpresssion", 19);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(155, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:157:1: downloadImageExpression : DOWNLOAD_IMAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 20);
		TraceIn("downloadImageExpression", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(157, 1);
		try
		{
			// Scrape.g:158:2: ( DOWNLOAD_IMAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:158:4: DOWNLOAD_IMAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(158, 18);
			DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression786); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_IMAGE81_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE81);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE81_tree, root_0);
			}
			DebugLocation(158, 20);
			PushFollow(Follow._downloadExpressionArg_in_downloadImageExpression789);
			downloadExpressionArg82=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg82.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 20);
			LeaveRule("downloadImageExpression", 20);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_downloadExpressionArg();
	partial void LeaveRule_downloadExpressionArg();
	// $ANTLR start "downloadExpressionArg"
	// Scrape.g:161:1: downloadExpressionArg : ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference );
	[GrammarRule("downloadExpressionArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg()
	{
		EnterRule_downloadExpressionArg();
		EnterRule("downloadExpressionArg", 21);
		TraceIn("downloadExpressionArg", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL83 = default(CommonToken);
		CommonToken OPENPAREN84 = default(CommonToken);
		CommonToken CLOSEPAREN86 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL83_tree = default(CommonTree);
		CommonTree OPENPAREN84_tree = default(CommonTree);
		CommonTree CLOSEPAREN86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadExpressionArg");
		DebugLocation(161, 1);
		try
		{
			// Scrape.g:162:2: ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case STRING_LITERAL:
				{
				alt15 = 1;
				}
				break;
			case OPENPAREN:
				{
				alt15 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:162:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				STRING_LITERAL83=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadExpressionArg800); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL83_tree = (CommonTree)adaptor.Create(STRING_LITERAL83);
				adaptor.AddChild(root_0, STRING_LITERAL83_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:163:4: OPENPAREN ! sqlStatement CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 13);
				OPENPAREN84=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadExpressionArg805); if (state.failed) return retval;
				DebugLocation(163, 15);
				PushFollow(Follow._sqlStatement_in_downloadExpressionArg808);
				sqlStatement85=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement85.Tree);
				DebugLocation(163, 38);
				CLOSEPAREN86=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadExpressionArg810); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:164:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 4);
				PushFollow(Follow._variableReference_in_downloadExpressionArg816);
				variableReference87=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference87.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpressionArg", 21);
			LeaveRule("downloadExpressionArg", 21);
			LeaveRule_downloadExpressionArg();
		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpressionArg"); }
		return retval;

	}
	// $ANTLR end "downloadExpressionArg"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:167:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 22);
		TraceIn("variableReference", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID88 = default(CommonToken);
		CommonToken COMMAND_VAR89 = default(CommonToken);
		CommonToken IDENTITY_VAR90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID88_tree = default(CommonTree);
		CommonTree COMMAND_VAR89_tree = default(CommonTree);
		CommonTree IDENTITY_VAR90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(167, 1);
		try
		{
			// Scrape.g:168:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==DOT))
				{
					alt16 = 4;
				}
				else if ((LA16_2==EOF||LA16_2==ASTERISK||(LA16_2>=CLOSEBRACE && LA16_2<=COMMAND_VAR)||LA16_2==CREATE||LA16_2==DIV||LA16_2==EACH||(LA16_2>=EQUALS && LA16_2<=EXEC)||LA16_2==FL||LA16_2==ID||LA16_2==IDENTITY_VAR||(LA16_2>=INNER_JOIN && LA16_2<=INSERT_INTO)||(LA16_2>=INSERT_OVERWRITE && LA16_2<=INT)||LA16_2==JOIN||LA16_2==MINIS||LA16_2==NULL||LA16_2==OPENPAREN||LA16_2==PLUS||LA16_2==SELECT||LA16_2==STRING_LITERAL||(LA16_2>=TO && LA16_2<=VAR)||(LA16_2>=WHERE && LA16_2<=WITH)||LA16_2==132))
				{
					alt16 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt16 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:168:4: ID
				{
				DebugLocation(168, 4);
				ID88=(CommonToken)Match(input,ID,Follow._ID_in_variableReference828); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID88);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 168:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(168, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID88));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:169:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				COMMAND_VAR89=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference838); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR89_tree = (CommonTree)adaptor.Create(COMMAND_VAR89);
				adaptor.AddChild(root_0, COMMAND_VAR89_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:170:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(170, 4);
				IDENTITY_VAR90=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR90_tree = (CommonTree)adaptor.Create(IDENTITY_VAR90);
				adaptor.AddChild(root_0, IDENTITY_VAR90_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:171:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference848);
				tableMemberReference91=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference91.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 22);
			LeaveRule("variableReference", 22);
			LeaveRule_variableReference();
		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:174:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 23);
		TraceIn("tableMemberReference", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT92 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(174, 1);
		try
		{
			// Scrape.g:175:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:175:4: t= ID DOT m= ID
			{
			DebugLocation(175, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference862); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(175, 9);
			DOT92=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference864); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT92);

			DebugLocation(175, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference868); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 175:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(175, 21);
				// Scrape.g:175:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(175, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(175, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(175, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 23);
			LeaveRule("tableMemberReference", 23);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:178:1: variableDeclarationStatement : VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 24);
		TraceIn("variableDeclarationStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR93 = default(CommonToken);
		CommonToken ID94 = default(CommonToken);
		CommonToken EQUALS95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR93_tree = default(CommonTree);
		CommonTree ID94_tree = default(CommonTree);
		CommonTree EQUALS95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(178, 1);
		try
		{
			// Scrape.g:179:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:179:4: VAR ID EQUALS assignmentExpression
			{
			DebugLocation(179, 4);
			VAR93=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement892); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR93);

			DebugLocation(179, 8);
			ID94=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement894); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID94);

			DebugLocation(179, 11);
			EQUALS95=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement896); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS95);

			DebugLocation(179, 18);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement898);
			assignmentExpression96=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression96.Tree);


			{
			// AST REWRITE
			// elements: ID, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 179:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(179, 42);
				// Scrape.g:179:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(179, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(179, 65);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(179, 68);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 24);
			LeaveRule("variableDeclarationStatement", 24);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:182:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 25);
		TraceIn("variableAssignmentStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS98 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(182, 1);
		try
		{
			// Scrape.g:183:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:183:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(183, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement919);
			variableReference97=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference97.Tree);
			DebugLocation(183, 22);
			EQUALS98=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement921); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS98);

			DebugLocation(183, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement923);
			assignmentExpression99=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression99.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 183:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(183, 53);
				// Scrape.g:183:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(183, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(183, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(183, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 25);
			LeaveRule("variableAssignmentStatement", 25);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:186:1: nullOperator : COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 26);
		TraceIn("nullOperator", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMAND_VAR100 = default(CommonToken);
		CommonToken NULL_OPERATOR101 = default(CommonToken);
		CommonToken COMMAND_VAR102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMAND_VAR100_tree = default(CommonTree);
		CommonTree NULL_OPERATOR101_tree = default(CommonTree);
		CommonTree COMMAND_VAR102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(186, 1);
		try
		{
			// Scrape.g:187:2: ( COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:187:4: COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(187, 4);
			COMMAND_VAR100=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator944); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMAND_VAR100_tree = (CommonTree)adaptor.Create(COMMAND_VAR100);
			adaptor.AddChild(root_0, COMMAND_VAR100_tree);
			}
			DebugLocation(187, 29);
			NULL_OPERATOR101=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator946); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR101_tree = (CommonTree)adaptor.Create(NULL_OPERATOR101);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR101_tree, root_0);
			}
			DebugLocation(187, 31);
			// Scrape.g:187:31: ( COMMAND_VAR | literal )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==COMMAND_VAR))
			{
				alt17 = 1;
			}
			else if ((LA17_1==FL||LA17_1==INT||LA17_1==NULL||LA17_1==STRING_LITERAL))
			{
				alt17 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:187:32: COMMAND_VAR
				{
				DebugLocation(187, 32);
				COMMAND_VAR102=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator950); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR102_tree = (CommonTree)adaptor.Create(COMMAND_VAR102);
				adaptor.AddChild(root_0, COMMAND_VAR102_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:187:44: literal
				{
				DebugLocation(187, 44);
				PushFollow(Follow._literal_in_nullOperator952);
				literal103=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 26);
			LeaveRule("nullOperator", 26);
			LeaveRule_nullOperator();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:190:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 27);
		TraceIn("assignmentExpression", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(190, 1);
		try
		{
			// Scrape.g:191:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt18=6;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==NULL_OPERATOR))
				{
					alt18 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FL:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 132:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:191:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression964);
				mathExpression104=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression104.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:192:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression969);
				downloadExpression105=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:193:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression974);
				expandExpression106=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression106.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:194:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression979);
				sqlStatement107=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement107.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:195:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression984);
				nullOperator108=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator108.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:196:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(196, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression989);
				variableReference109=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference109.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 27);
			LeaveRule("assignmentExpression", 27);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:199:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 28);
		TraceIn("mathExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set111 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(199, 5);
		try
		{
			// Scrape.g:200:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:200:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(200, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression1005);
			mathExpressionGroup110=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup110.Tree);
			DebugLocation(200, 29);
			// Scrape.g:200:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:200:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(200, 46);

					set111=(CommonToken)input.LT(1);
					set111=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set111), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(200, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression1019);
					mathExpressionGroup112=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup112.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 28);
			LeaveRule("mathExpression", 28);
			LeaveRule_mathExpression();
		}
		DebugLocation(201, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:203:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 29);
		TraceIn("mathExpressionGroup", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set114 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(203, 3);
		try
		{
			// Scrape.g:204:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:204:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup1037);
			atom113=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom113.Tree);
			DebugLocation(204, 9);
			// Scrape.g:204:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:204:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(204, 28);

					set114=(CommonToken)input.LT(1);
					set114=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set114), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(204, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1051);
					atom115=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom115.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 29);
			LeaveRule("mathExpressionGroup", 29);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(205, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:207:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 30);
		TraceIn("atom", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal117 = default(CommonToken);
		CommonToken OPENPAREN119 = default(CommonToken);
		CommonToken CLOSEPAREN121 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree OPENPAREN119_tree = default(CommonTree);
		CommonTree CLOSEPAREN121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(207, 5);
		try
		{
			// Scrape.g:208:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=4;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt21 = 1;
				}
				break;
			case 132:
				{
				alt21 = 2;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:208:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(208, 8);
				PushFollow(Follow._variableReference_in_atom1072);
				variableReference116=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference116.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:209:5: '$'
				{
				DebugLocation(209, 5);
				char_literal117=(CommonToken)Match(input,132,Follow._132_in_atom1078); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal117);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 209:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(209, 12);
					// Scrape.g:209:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(209, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:210:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 5);
				PushFollow(Follow._literal_in_atom1090);
				literal118=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal118.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:211:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 17);
				OPENPAREN119=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1099); if (state.failed) return retval;
				DebugLocation(211, 19);
				PushFollow(Follow._mathExpression_in_atom1102);
				mathExpression120=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression120.Tree);
				DebugLocation(211, 44);
				CLOSEPAREN121=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1104); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 30);
			LeaveRule("atom", 30);
			LeaveRule_atom();
		}
		DebugLocation(212, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:214:1: literal : ( INT | STRING_LITERAL | NULL | FL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 31);
		TraceIn("literal", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set122 = default(CommonToken);

		CommonTree set122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(214, 1);
		try
		{
			// Scrape.g:215:2: ( INT | STRING_LITERAL | NULL | FL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(215, 2);

			set122=(CommonToken)input.LT(1);
			if (input.LA(1)==FL||input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set122));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 31);
			LeaveRule("literal", 31);
			LeaveRule_literal();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:224:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 32);
		TraceIn("insertStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO123 = default(CommonToken);
		CommonToken ID124 = default(CommonToken);
		CommonToken INSERT_DIRECTORY126 = default(CommonToken);
		CommonToken INSERT_OVERWRITE129 = default(CommonToken);
		CommonToken ID130 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO123_tree = default(CommonTree);
		CommonTree ID124_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY126_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE129_tree = default(CommonTree);
		CommonTree ID130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(224, 1);
		try
		{
			// Scrape.g:225:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:225:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(225, 4);
				INSERT_INTO123=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1151); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO123);

				DebugLocation(225, 16);
				ID124=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1153); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID124);

				DebugLocation(225, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1155);
				sqlStatement125=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement125.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 225:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(225, 34);
					// Scrape.g:225:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(225, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(225, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID124));
					DebugLocation(225, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:226:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(226, 4);
				INSERT_DIRECTORY126=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY126);

				DebugLocation(226, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1172);
				mathExpression127=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression127.Tree);
				DebugLocation(226, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1174);
				sqlStatement128=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement128.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, mathExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(226, 51);
					// Scrape.g:226:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(226, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(226, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:227:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(227, 4);
				INSERT_OVERWRITE129=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1188); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE129);

				DebugLocation(227, 21);
				ID130=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID130);

				DebugLocation(227, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1192);
				sqlStatement131=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement131.Tree);


				{
				// AST REWRITE
				// elements: INSERT_OVERWRITE, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(227, 39);
					// Scrape.g:227:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(227, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID130));
					DebugLocation(227, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 32);
			LeaveRule("insertStatement", 32);
			LeaveRule_insertStatement();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_updateStatment();
	partial void LeaveRule_updateStatment();
	// $ANTLR start "updateStatment"
	// Scrape.g:233:1: updateStatment : UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("updateStatment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment()
	{
		EnterRule_updateStatment();
		EnterRule("updateStatment", 33);
		TraceIn("updateStatment", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UPDATE132 = default(CommonToken);
		CommonToken ID133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArgs134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UPDATE132_tree = default(CommonTree);
		CommonTree ID133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		RewriteRuleSubtreeStream stream_setArgs=new RewriteRuleSubtreeStream(adaptor,"rule setArgs");
		try { DebugEnterRule(GrammarFileName, "updateStatment");
		DebugLocation(233, 1);
		try
		{
			// Scrape.g:234:2: ( UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:234:4: UPDATE ID setArgs ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(234, 4);
			UPDATE132=(CommonToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatment1217); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE132);

			DebugLocation(234, 11);
			ID133=(CommonToken)Match(input,ID,Follow._ID_in_updateStatment1219); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID133);

			DebugLocation(234, 14);
			PushFollow(Follow._setArgs_in_updateStatment1221);
			setArgs134=setArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArgs.Add(setArgs134.Tree);
			DebugLocation(234, 22);
			// Scrape.g:234:22: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:234:22: fromStatement
				{
				DebugLocation(234, 22);
				PushFollow(Follow._fromStatement_in_updateStatment1223);
				fromStatement135=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(234, 37);
			// Scrape.g:234:37: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:234:37: whereStatement
				{
				DebugLocation(234, 37);
				PushFollow(Follow._whereStatement_in_updateStatment1226);
				whereStatement136=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: ID, setArgs, whereStatement, UPDATE, fromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:53: -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(234, 56);
				// Scrape.g:234:56: ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(234, 65);
				// Scrape.g:234:65: ^( TABLE_ALIAS ID )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 67);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

				DebugLocation(234, 79);
				adaptor.AddChild(root_2, stream_ID.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(234, 83);
				adaptor.AddChild(root_1, stream_setArgs.NextTree());
				DebugLocation(234, 91);
				// Scrape.g:234:91: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(234, 91);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(234, 106);
				// Scrape.g:234:106: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(234, 106);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatment", 33);
			LeaveRule("updateStatment", 33);
			LeaveRule_updateStatment();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatment"); }
		return retval;

	}
	// $ANTLR end "updateStatment"

	partial void EnterRule_setArgs();
	partial void LeaveRule_setArgs();
	// $ANTLR start "setArgs"
	// Scrape.g:237:1: setArgs : SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) ;
	[GrammarRule("setArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArgs()
	{
		EnterRule_setArgs();
		EnterRule("setArgs", 34);
		TraceIn("setArgs", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SET137 = default(CommonToken);
		CommonToken COMMA139 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SET137_tree = default(CommonTree);
		CommonTree COMMA139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_setArg=new RewriteRuleSubtreeStream(adaptor,"rule setArg");
		try { DebugEnterRule(GrammarFileName, "setArgs");
		DebugLocation(237, 1);
		try
		{
			// Scrape.g:238:2: ( SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:238:4: SET ( setArg COMMA )* setArg
			{
			DebugLocation(238, 4);
			SET137=(CommonToken)Match(input,SET,Follow._SET_in_setArgs1258); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET137);

			DebugLocation(238, 8);
			// Scrape.g:238:8: ( setArg COMMA )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case FL:
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case ID:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case GETDATE:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:238:9: setArg COMMA
					{
					DebugLocation(238, 9);
					PushFollow(Follow._setArg_in_setArgs1261);
					setArg138=setArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setArg.Add(setArg138.Tree);
					DebugLocation(238, 16);
					COMMA139=(CommonToken)Match(input,COMMA,Follow._COMMA_in_setArgs1263); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA139);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(238, 24);
			PushFollow(Follow._setArg_in_setArgs1267);
			setArg140=setArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArg.Add(setArg140.Tree);


			{
			// AST REWRITE
			// elements: setArg, SET
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 238:31: -> ^( SET ( setArg )* )
			{
				DebugLocation(238, 34);
				// Scrape.g:238:34: ^( SET ( setArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(238, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(238, 40);
				// Scrape.g:238:40: ( setArg )*
				while ( stream_setArg.HasNext )
				{
					DebugLocation(238, 40);
					adaptor.AddChild(root_1, stream_setArg.NextTree());

				}
				stream_setArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArgs", 34);
			LeaveRule("setArgs", 34);
			LeaveRule_setArgs();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "setArgs"); }
		return retval;

	}
	// $ANTLR end "setArgs"

	partial void EnterRule_setArg();
	partial void LeaveRule_setArg();
	// $ANTLR start "setArg"
	// Scrape.g:241:1: setArg : selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) ;
	[GrammarRule("setArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArg()
	{
		EnterRule_setArg();
		EnterRule("setArg", 35);
		TraceIn("setArg", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "setArg");
		DebugLocation(241, 1);
		try
		{
			// Scrape.g:242:2: ( selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) )
			DebugEnterAlt(1);
			// Scrape.g:242:4: selectArg EQUALS selectArgs
			{
			DebugLocation(242, 4);
			PushFollow(Follow._selectArg_in_setArg1287);
			selectArg141=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg141.Tree);
			DebugLocation(242, 14);
			EQUALS142=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_setArg1289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS142);

			DebugLocation(242, 21);
			PushFollow(Follow._selectArgs_in_setArg1291);
			selectArgs143=selectArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArgs.Add(selectArgs143.Tree);


			{
			// AST REWRITE
			// elements: selectArgs, selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 242:32: -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
			{
				DebugLocation(242, 35);
				// Scrape.g:242:35: ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(242, 37);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(242, 57);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());
				DebugLocation(242, 67);
				adaptor.AddChild(root_1, stream_selectArgs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArg", 35);
			LeaveRule("setArg", 35);
			LeaveRule_setArg();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "setArg"); }
		return retval;

	}
	// $ANTLR end "setArg"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:247:1: sqlStatement : selectStatement ^ ( fromStatement )? ( whereStatement )? ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 36);
		TraceIn("sqlStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(247, 1);
		try
		{
			// Scrape.g:248:2: ( selectStatement ^ ( fromStatement )? ( whereStatement )? )
			DebugEnterAlt(1);
			// Scrape.g:248:4: selectStatement ^ ( fromStatement )? ( whereStatement )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(248, 19);
			PushFollow(Follow._selectStatement_in_sqlStatement1315);
			selectStatement144=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(selectStatement144.Tree, root_0);
			DebugLocation(248, 21);
			// Scrape.g:248:21: ( fromStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==FROM))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:248:21: fromStatement
				{
				DebugLocation(248, 21);
				PushFollow(Follow._fromStatement_in_sqlStatement1318);
				fromStatement145=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fromStatement145.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(248, 36);
			// Scrape.g:248:36: ( whereStatement )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==WHERE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:248:36: whereStatement
				{
				DebugLocation(248, 36);
				PushFollow(Follow._whereStatement_in_sqlStatement1321);
				whereStatement146=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whereStatement146.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 36);
			LeaveRule("sqlStatement", 36);
			LeaveRule_sqlStatement();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_nestedSqlStatement();
	partial void LeaveRule_nestedSqlStatement();
	// $ANTLR start "nestedSqlStatement"
	// Scrape.g:251:1: nestedSqlStatement : nestedSelectStatement ^ ( fromStatement )? ( whereStatement )? ;
	[GrammarRule("nestedSqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement()
	{
		EnterRule_nestedSqlStatement();
		EnterRule("nestedSqlStatement", 37);
		TraceIn("nestedSqlStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSelectStatement147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "nestedSqlStatement");
		DebugLocation(251, 1);
		try
		{
			// Scrape.g:252:2: ( nestedSelectStatement ^ ( fromStatement )? ( whereStatement )? )
			DebugEnterAlt(1);
			// Scrape.g:252:4: nestedSelectStatement ^ ( fromStatement )? ( whereStatement )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(252, 25);
			PushFollow(Follow._nestedSelectStatement_in_nestedSqlStatement1333);
			nestedSelectStatement147=nestedSelectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(nestedSelectStatement147.Tree, root_0);
			DebugLocation(252, 27);
			// Scrape.g:252:27: ( fromStatement )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==FROM))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:252:27: fromStatement
				{
				DebugLocation(252, 27);
				PushFollow(Follow._fromStatement_in_nestedSqlStatement1336);
				fromStatement148=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fromStatement148.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(252, 42);
			// Scrape.g:252:42: ( whereStatement )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==WHERE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:252:42: whereStatement
				{
				DebugLocation(252, 42);
				PushFollow(Follow._whereStatement_in_nestedSqlStatement1339);
				whereStatement149=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whereStatement149.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nestedSqlStatement", 37);
			LeaveRule("nestedSqlStatement", 37);
			LeaveRule_nestedSqlStatement();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "nestedSqlStatement"); }
		return retval;

	}
	// $ANTLR end "nestedSqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:255:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 38);
		TraceIn("whereStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE150 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(255, 1);
		try
		{
			// Scrape.g:256:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:256:5: WHERE boolExpression
			{
			DebugLocation(256, 5);
			WHERE150=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1352); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE150);

			DebugLocation(256, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1354);
			boolExpression151=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression151.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, WHERE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(256, 29);
				// Scrape.g:256:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(256, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 38);
			LeaveRule("whereStatement", 38);
			LeaveRule_whereStatement();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:259:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) | FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )? -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 39);
		TraceIn("fromStatement", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM152 = default(CommonToken);
		CommonToken FROM154 = default(CommonToken);
		CommonToken ID156 = default(CommonToken);
		CommonToken FROM159 = default(CommonToken);
		CommonToken OPENPAREN160 = default(CommonToken);
		CommonToken CLOSEPAREN162 = default(CommonToken);
		CommonToken ID163 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint157 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM152_tree = default(CommonTree);
		CommonTree FROM154_tree = default(CommonTree);
		CommonTree ID156_tree = default(CommonTree);
		CommonTree FROM159_tree = default(CommonTree);
		CommonTree OPENPAREN160_tree = default(CommonTree);
		CommonTree CLOSEPAREN162_tree = default(CommonTree);
		CommonTree ID163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableHint=new RewriteRuleSubtreeStream(adaptor,"rule tableHint");
		RewriteRuleSubtreeStream stream_tableGenerationClause=new RewriteRuleSubtreeStream(adaptor,"rule tableGenerationClause");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		RewriteRuleSubtreeStream stream_nestedSqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule nestedSqlStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(259, 1);
		try
		{
			// Scrape.g:260:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) | FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )? -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? ) )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt36 = 1;
					}
					break;
				case OPENPAREN:
					{
					alt36 = 3;
					}
					break;
				case DOWNLOAD_IMAGE:
				case DOWNLOAD_PAGE:
				case EXPAND:
					{
					alt36 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 36, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:260:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(260, 4);
				FROM152=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1374); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM152);

				DebugLocation(260, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1378); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(260, 15);
				// Scrape.g:260:15: (a= ID )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ID))
				{
					int LA30_2 = input.LA(2);

					if ((LA30_2==EOF||(LA30_2>=CLOSEBRACE && LA30_2<=CLOSEPAREN)||LA30_2==COMMAND_VAR||LA30_2==CREATE||LA30_2==EACH||LA30_2==EXEC||LA30_2==ID||LA30_2==IDENTITY_VAR||(LA30_2>=INNER_JOIN && LA30_2<=INSERT_INTO)||LA30_2==INSERT_OVERWRITE||LA30_2==JOIN||LA30_2==SELECT||(LA30_2>=TRUNCATE && LA30_2<=VAR)||(LA30_2>=WHERE && LA30_2<=WHILE)))
					{
						alt30 = 1;
					}
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:260:15: a= ID
					{
					DebugLocation(260, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1382); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(260, 20);
				// Scrape.g:260:20: ( innerJoinStatement )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==INNER_JOIN||LA31_1==JOIN))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:260:20: innerJoinStatement
					{
					DebugLocation(260, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1385);
					innerJoinStatement153=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement153.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, FROM, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(260, 43);
					// Scrape.g:260:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(260, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(260, 79);
					// Scrape.g:260:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(260, 79);
						// Scrape.g:260:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(260, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(260, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(260, 98);
					// Scrape.g:260:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(260, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:261:4: FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )?
				{
				DebugLocation(261, 4);
				FROM154=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1412); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM154);

				DebugLocation(261, 9);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1414);
				tableGenerationClause155=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableGenerationClause.Add(tableGenerationClause155.Tree);
				DebugLocation(261, 31);
				// Scrape.g:261:31: ( ID )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==ID))
				{
					int LA32_2 = input.LA(2);

					if ((LA32_2==EOF||(LA32_2>=CLOSEBRACE && LA32_2<=CLOSEPAREN)||LA32_2==COMMAND_VAR||LA32_2==CREATE||LA32_2==EACH||LA32_2==EXEC||LA32_2==ID||LA32_2==IDENTITY_VAR||(LA32_2>=INNER_JOIN && LA32_2<=INSERT_INTO)||LA32_2==INSERT_OVERWRITE||LA32_2==JOIN||LA32_2==SELECT||(LA32_2>=TRUNCATE && LA32_2<=VAR)||(LA32_2>=WHERE && LA32_2<=WITH)))
					{
						alt32 = 1;
					}
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:261:31: ID
					{
					DebugLocation(261, 31);
					ID156=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1416); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID156);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(261, 35);
				// Scrape.g:261:35: ( tableHint )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==WITH))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:261:35: tableHint
					{
					DebugLocation(261, 35);
					PushFollow(Follow._tableHint_in_fromStatement1419);
					tableHint157=tableHint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableHint.Add(tableHint157.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(261, 46);
				// Scrape.g:261:46: ( innerJoinStatement )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==INNER_JOIN||LA34_1==JOIN))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:261:46: innerJoinStatement
					{
					DebugLocation(261, 46);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1422);
					innerJoinStatement158=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement158.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: ID, tableHint, FROM, innerJoinStatement, tableGenerationClause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 261:66: -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
				{
					DebugLocation(261, 69);
					// Scrape.g:261:69: ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(261, 76);
					adaptor.AddChild(root_1, stream_tableGenerationClause.NextTree());
					DebugLocation(261, 98);
					// Scrape.g:261:98: ( ^( TABLE_ALIAS ID ) )?
					if (stream_ID.HasNext)
					{
						DebugLocation(261, 98);
						// Scrape.g:261:98: ^( TABLE_ALIAS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(261, 100);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(261, 112);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ID.Reset();
					DebugLocation(261, 117);
					// Scrape.g:261:117: ( tableHint )?
					if (stream_tableHint.HasNext)
					{
						DebugLocation(261, 117);
						adaptor.AddChild(root_1, stream_tableHint.NextTree());

					}
					stream_tableHint.Reset();
					DebugLocation(261, 128);
					// Scrape.g:261:128: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(261, 128);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:262:4: FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )?
				{
				DebugLocation(262, 4);
				FROM159=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1449); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM159);

				DebugLocation(262, 9);
				OPENPAREN160=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fromStatement1451); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN160);

				DebugLocation(262, 19);
				PushFollow(Follow._nestedSqlStatement_in_fromStatement1453);
				nestedSqlStatement161=nestedSqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_nestedSqlStatement.Add(nestedSqlStatement161.Tree);
				DebugLocation(262, 38);
				CLOSEPAREN162=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fromStatement1455); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN162);

				DebugLocation(262, 49);
				ID163=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1457); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID163);

				DebugLocation(262, 52);
				// Scrape.g:262:52: ( innerJoinStatement )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==INNER_JOIN||LA35_1==JOIN))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:262:52: innerJoinStatement
					{
					DebugLocation(262, 52);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1459);
					innerJoinStatement164=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement164.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: FROM, ID, nestedSqlStatement, innerJoinStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 262:72: -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? )
				{
					DebugLocation(262, 75);
					// Scrape.g:262:75: ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(262, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(262, 82);
					adaptor.AddChild(root_1, stream_nestedSqlStatement.NextTree());
					DebugLocation(262, 101);
					// Scrape.g:262:101: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(262, 103);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(262, 115);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(262, 119);
					// Scrape.g:262:119: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(262, 119);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 39);
			LeaveRule("fromStatement", 39);
			LeaveRule_fromStatement();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_tableHint();
	partial void LeaveRule_tableHint();
	// $ANTLR start "tableHint"
	// Scrape.g:265:1: tableHint : WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* ;
	[GrammarRule("tableHint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableHint()
	{
		EnterRule_tableHint();
		EnterRule("tableHint", 40);
		TraceIn("tableHint", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH165 = default(CommonToken);
		CommonToken OPENPAREN166 = default(CommonToken);
		CommonToken PIPE168 = default(CommonToken);
		CommonToken CLOSEPAREN170 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH165_tree = default(CommonTree);
		CommonTree OPENPAREN166_tree = default(CommonTree);
		CommonTree PIPE168_tree = default(CommonTree);
		CommonTree CLOSEPAREN170_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_PIPE=new RewriteRuleITokenStream(adaptor,"token PIPE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_hint=new RewriteRuleSubtreeStream(adaptor,"rule hint");
		try { DebugEnterRule(GrammarFileName, "tableHint");
		DebugLocation(265, 1);
		try
		{
			// Scrape.g:266:2: ( WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* )
			DebugEnterAlt(1);
			// Scrape.g:266:4: WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN
			{
			DebugLocation(266, 4);
			WITH165=(CommonToken)Match(input,WITH,Follow._WITH_in_tableHint1488); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH165);

			DebugLocation(266, 9);
			OPENPAREN166=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_tableHint1490); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN166);

			DebugLocation(266, 19);
			// Scrape.g:266:19: ( hint PIPE )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				try
				{
					alt37 = dfa37.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:266:20: hint PIPE
					{
					DebugLocation(266, 20);
					PushFollow(Follow._hint_in_tableHint1493);
					hint167=hint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_hint.Add(hint167.Tree);
					DebugLocation(266, 25);
					PIPE168=(CommonToken)Match(input,PIPE,Follow._PIPE_in_tableHint1495); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PIPE.Add(PIPE168);


					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }

			DebugLocation(266, 32);
			PushFollow(Follow._hint_in_tableHint1499);
			hint169=hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_hint.Add(hint169.Tree);
			DebugLocation(266, 37);
			CLOSEPAREN170=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_tableHint1501); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN170);



			{
			// AST REWRITE
			// elements: hint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:48: -> ( hint )*
			{
				DebugLocation(266, 51);
				// Scrape.g:266:51: ( hint )*
				while ( stream_hint.HasNext )
				{
					DebugLocation(266, 51);
					adaptor.AddChild(root_0, stream_hint.NextTree());

				}
				stream_hint.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableHint", 40);
			LeaveRule("tableHint", 40);
			LeaveRule_tableHint();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "tableHint"); }
		return retval;

	}
	// $ANTLR end "tableHint"

	partial void EnterRule_hint();
	partial void LeaveRule_hint();
	// $ANTLR start "hint"
	// Scrape.g:269:1: hint : ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) );
	[GrammarRule("hint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> hint()
	{
		EnterRule_hint();
		EnterRule("hint", 41);
		TraceIn("hint", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken THREAD171 = default(CommonToken);
		CommonToken OPENPAREN172 = default(CommonToken);
		CommonToken INT173 = default(CommonToken);
		CommonToken CLOSEPAREN174 = default(CommonToken);
		CommonToken JS175 = default(CommonToken);
		CommonToken OPENPAREN176 = default(CommonToken);
		CommonToken COMMA178 = default(CommonToken);
		CommonToken CLOSEPAREN180 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree THREAD171_tree = default(CommonTree);
		CommonTree OPENPAREN172_tree = default(CommonTree);
		CommonTree INT173_tree = default(CommonTree);
		CommonTree CLOSEPAREN174_tree = default(CommonTree);
		CommonTree JS175_tree = default(CommonTree);
		CommonTree OPENPAREN176_tree = default(CommonTree);
		CommonTree COMMA178_tree = default(CommonTree);
		CommonTree CLOSEPAREN180_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THREAD=new RewriteRuleITokenStream(adaptor,"token THREAD");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_JS=new RewriteRuleITokenStream(adaptor,"token JS");
		RewriteRuleSubtreeStream stream_jsArg=new RewriteRuleSubtreeStream(adaptor,"rule jsArg");
		try { DebugEnterRule(GrammarFileName, "hint");
		DebugLocation(269, 1);
		try
		{
			// Scrape.g:270:2: ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==THREAD))
			{
				alt40 = 1;
			}
			else if ((LA40_1==JS))
			{
				alt40 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:270:4: THREAD OPENPAREN INT CLOSEPAREN
				{
				DebugLocation(270, 4);
				THREAD171=(CommonToken)Match(input,THREAD,Follow._THREAD_in_hint1517); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THREAD.Add(THREAD171);

				DebugLocation(270, 11);
				OPENPAREN172=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1519); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN172);

				DebugLocation(270, 21);
				INT173=(CommonToken)Match(input,INT,Follow._INT_in_hint1521); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INT.Add(INT173);

				DebugLocation(270, 25);
				CLOSEPAREN174=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1523); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN174);



				{
				// AST REWRITE
				// elements: INT, THREAD
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:36: -> ^( THREAD INT )
				{
					DebugLocation(270, 39);
					// Scrape.g:270:39: ^( THREAD INT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THREAD.NextNode(), root_1);

					DebugLocation(270, 48);
					adaptor.AddChild(root_1, stream_INT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:271:4: JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				{
				DebugLocation(271, 4);
				JS175=(CommonToken)Match(input,JS,Follow._JS_in_hint1536); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_JS.Add(JS175);

				DebugLocation(271, 7);
				// Scrape.g:271:7: ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==OPENPAREN))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:271:8: OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN
					{
					DebugLocation(271, 8);
					OPENPAREN176=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1539); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN176);

					DebugLocation(271, 18);
					// Scrape.g:271:18: ( jsArg COMMA )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_1 = input.LA(1);

						if ((LA38_1==INT||LA38_1==STRING_LITERAL))
						{
							int LA38_2 = input.LA(2);

							if ((LA38_2==COMMA))
							{
								alt38 = 1;
							}


						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// Scrape.g:271:19: jsArg COMMA
							{
							DebugLocation(271, 19);
							PushFollow(Follow._jsArg_in_hint1542);
							jsArg177=jsArg();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_jsArg.Add(jsArg177.Tree);
							DebugLocation(271, 25);
							COMMA178=(CommonToken)Match(input,COMMA,Follow._COMMA_in_hint1544); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_COMMA.Add(COMMA178);


							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }

					DebugLocation(271, 33);
					PushFollow(Follow._jsArg_in_hint1548);
					jsArg179=jsArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_jsArg.Add(jsArg179.Tree);
					DebugLocation(271, 39);
					CLOSEPAREN180=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1550); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN180);


					}
					break;

				}
				} finally { DebugExitSubRule(39); }



				{
				// AST REWRITE
				// elements: JS, jsArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:52: -> ^( JS ( jsArg )* )
				{
					DebugLocation(271, 55);
					// Scrape.g:271:55: ^( JS ( jsArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 57);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_JS.NextNode(), root_1);

					DebugLocation(271, 60);
					// Scrape.g:271:60: ( jsArg )*
					while ( stream_jsArg.HasNext )
					{
						DebugLocation(271, 60);
						adaptor.AddChild(root_1, stream_jsArg.NextTree());

					}
					stream_jsArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hint", 41);
			LeaveRule("hint", 41);
			LeaveRule_hint();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "hint"); }
		return retval;

	}
	// $ANTLR end "hint"

	partial void EnterRule_jsArg();
	partial void LeaveRule_jsArg();
	// $ANTLR start "jsArg"
	// Scrape.g:274:1: jsArg : ( STRING_LITERAL | INT );
	[GrammarRule("jsArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> jsArg()
	{
		EnterRule_jsArg();
		EnterRule("jsArg", 42);
		TraceIn("jsArg", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set181 = default(CommonToken);

		CommonTree set181_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "jsArg");
		DebugLocation(274, 1);
		try
		{
			// Scrape.g:275:2: ( STRING_LITERAL | INT )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(275, 2);

			set181=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set181));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jsArg", 42);
			LeaveRule("jsArg", 42);
			LeaveRule_jsArg();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "jsArg"); }
		return retval;

	}
	// $ANTLR end "jsArg"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:280:1: innerJoinStatement : ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) | innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? ) );
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 43);
		TraceIn("innerJoinStatement", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal183 = default(CommonToken);
		CommonToken OPENPAREN187 = default(CommonToken);
		CommonToken CLOSEPAREN189 = default(CommonToken);
		CommonToken ID190 = default(CommonToken);
		CommonToken string_literal191 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin182 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement185 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement188 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal183_tree = default(CommonTree);
		CommonTree OPENPAREN187_tree = default(CommonTree);
		CommonTree CLOSEPAREN189_tree = default(CommonTree);
		CommonTree ID190_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		RewriteRuleSubtreeStream stream_nestedSqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule nestedSqlStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(280, 1);
		try
		{
			// Scrape.g:281:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) | innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? ) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==INNER_JOIN||LA44_1==JOIN))
			{
				int LA44_2 = input.LA(2);

				if ((LA44_2==ID))
				{
					alt44 = 1;
				}
				else if ((LA44_2==OPENPAREN))
				{
					alt44 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 44, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:281:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
				{
				DebugLocation(281, 4);
				PushFollow(Follow._innerJoin_in_innerJoinStatement1589);
				innerJoin182=innerJoin();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoin.Add(innerJoin182.Tree);
				DebugLocation(281, 15);
				t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1593); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(281, 20);
				// Scrape.g:281:20: (a= ID )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==ID))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:281:20: a= ID
					{
					DebugLocation(281, 20);
					a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1597); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(281, 25);
				string_literal183=(CommonToken)Match(input,133,Follow._133_in_innerJoinStatement1600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(string_literal183);

				DebugLocation(281, 30);
				PushFollow(Follow._boolExpression_in_innerJoinStatement1602);
				boolExpression184=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_boolExpression.Add(boolExpression184.Tree);
				DebugLocation(281, 45);
				// Scrape.g:281:45: ( innerJoinStatement )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==INNER_JOIN||LA42_1==JOIN))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:281:45: innerJoinStatement
					{
					DebugLocation(281, 45);
					PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1604);
					innerJoinStatement185=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement185.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }



				{
				// AST REWRITE
				// elements: boolExpression, a, innerJoinStatement
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
					DebugLocation(281, 68);
					// Scrape.g:281:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

					DebugLocation(281, 81);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(281, 110);
					// Scrape.g:281:110: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(281, 110);
						// Scrape.g:281:110: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(281, 112);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(281, 125);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(281, 129);
					adaptor.AddChild(root_1, stream_boolExpression.NextTree());
					DebugLocation(281, 144);
					// Scrape.g:281:144: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(281, 144);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:282:4: innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )?
				{
				DebugLocation(282, 4);
				PushFollow(Follow._innerJoin_in_innerJoinStatement1632);
				innerJoin186=innerJoin();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoin.Add(innerJoin186.Tree);
				DebugLocation(282, 14);
				OPENPAREN187=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_innerJoinStatement1634); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN187);

				DebugLocation(282, 24);
				PushFollow(Follow._nestedSqlStatement_in_innerJoinStatement1636);
				nestedSqlStatement188=nestedSqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_nestedSqlStatement.Add(nestedSqlStatement188.Tree);
				DebugLocation(282, 43);
				CLOSEPAREN189=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_innerJoinStatement1638); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN189);

				DebugLocation(282, 54);
				ID190=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID190);

				DebugLocation(282, 57);
				string_literal191=(CommonToken)Match(input,133,Follow._133_in_innerJoinStatement1642); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(string_literal191);

				DebugLocation(282, 62);
				PushFollow(Follow._boolExpression_in_innerJoinStatement1644);
				boolExpression192=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_boolExpression.Add(boolExpression192.Tree);
				DebugLocation(282, 77);
				// Scrape.g:282:77: ( innerJoinStatement )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==INNER_JOIN||LA43_1==JOIN))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:282:77: innerJoinStatement
					{
					DebugLocation(282, 77);
					PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1646);
					innerJoinStatement193=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement193.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }



				{
				// AST REWRITE
				// elements: boolExpression, ID, nestedSqlStatement, innerJoinStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:97: -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? )
				{
					DebugLocation(282, 100);
					// Scrape.g:282:100: ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 102);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

					DebugLocation(282, 113);
					adaptor.AddChild(root_1, stream_nestedSqlStatement.NextTree());
					DebugLocation(282, 132);
					// Scrape.g:282:132: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 134);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(282, 146);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(282, 150);
					adaptor.AddChild(root_1, stream_boolExpression.NextTree());
					DebugLocation(282, 165);
					// Scrape.g:282:165: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(282, 165);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 43);
			LeaveRule("innerJoinStatement", 43);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_tableGenerationClause();
	partial void LeaveRule_tableGenerationClause();
	// $ANTLR start "tableGenerationClause"
	// Scrape.g:285:1: tableGenerationClause : ( downloadPageExpresssion | downloadImageExpression | expandExpression );
	[GrammarRule("tableGenerationClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause()
	{
		EnterRule_tableGenerationClause();
		EnterRule("tableGenerationClause", 44);
		TraceIn("tableGenerationClause", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression195 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression196 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "tableGenerationClause");
		DebugLocation(285, 1);
		try
		{
			// Scrape.g:286:2: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case DOWNLOAD_PAGE:
				{
				alt45 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
				{
				alt45 = 2;
				}
				break;
			case EXPAND:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:286:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._downloadPageExpresssion_in_tableGenerationClause1677);
				downloadPageExpresssion194=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion194.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:287:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(287, 4);
				PushFollow(Follow._downloadImageExpression_in_tableGenerationClause1682);
				downloadImageExpression195=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression195.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:288:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._expandExpression_in_tableGenerationClause1687);
				expandExpression196=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression196.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableGenerationClause", 44);
			LeaveRule("tableGenerationClause", 44);
			LeaveRule_tableGenerationClause();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "tableGenerationClause"); }
		return retval;

	}
	// $ANTLR end "tableGenerationClause"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:291:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 45);
		TraceIn("innerJoin", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set197 = default(CommonToken);

		CommonTree set197_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(291, 1);
		try
		{
			// Scrape.g:292:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(292, 2);

			set197=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set197));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 45);
			LeaveRule("innerJoin", 45);
			LeaveRule_innerJoin();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:296:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT_STATEMENT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 46);
		TraceIn("selectStatement", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT198 = default(CommonToken);
		CommonToken COMMA200 = default(CommonToken);
		CommonToken SELECT202 = default(CommonToken);
		CommonToken ASTERISK203 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT198_tree = default(CommonTree);
		CommonTree COMMA200_tree = default(CommonTree);
		CommonTree SELECT202_tree = default(CommonTree);
		CommonTree ASTERISK203_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT_STATEMENT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_1 = input.LA(1);

			if ((LA47_1==SELECT))
			{
				int LA47_2 = input.LA(2);

				if ((LA47_2==ASTERISK))
				{
					alt47 = 2;
				}
				else if ((LA47_2==CASE||LA47_2==COMMAND_VAR||LA47_2==FL||LA47_2==GETDATE||LA47_2==ID||LA47_2==IDENTITY_VAR||LA47_2==INT||LA47_2==NULL||LA47_2==PICK||LA47_2==STRING_LITERAL))
				{
					alt47 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:297:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(297, 4);
				SELECT198=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1714); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT198);

				DebugLocation(297, 11);
				// Scrape.g:297:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case FL:
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case ID:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case GETDATE:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA46_2 = input.LA(2);

						if ((EvaluatePredicate(synpred74_Scrape_fragment)))
						{
							alt46 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:297:12: selectArgs COMMA
						{
						DebugLocation(297, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1717);
						selectArgs199=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs199.Tree);
						DebugLocation(297, 23);
						COMMA200=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1719); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA200);


						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(297, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1723);
				selectArgs201=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs201.Tree);


				{
				// AST REWRITE
				// elements: selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:42: -> ^( SELECT_STATEMENT ( selectArgs )* )
				{
					DebugLocation(297, 45);
					// Scrape.g:297:45: ^( SELECT_STATEMENT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(297, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

					DebugLocation(297, 64);
					// Scrape.g:297:64: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(297, 64);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:298:4: SELECT ASTERISK
				{
				DebugLocation(298, 4);
				SELECT202=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT202);

				DebugLocation(298, 11);
				ASTERISK203=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1739); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK203);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:20: -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(298, 23);
					// Scrape.g:298:23: ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

					DebugLocation(298, 42);
					// Scrape.g:298:42: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 44);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(298, 55);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK203));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 46);
			LeaveRule("selectStatement", 46);
			LeaveRule_selectStatement();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_nestedSelectStatement();
	partial void LeaveRule_nestedSelectStatement();
	// $ANTLR start "nestedSelectStatement"
	// Scrape.g:301:1: nestedSelectStatement : SELECT ( selectArgs COMMA )* selectArgs -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* ) ;
	[GrammarRule("nestedSelectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nestedSelectStatement()
	{
		EnterRule_nestedSelectStatement();
		EnterRule("nestedSelectStatement", 47);
		TraceIn("nestedSelectStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT204 = default(CommonToken);
		CommonToken COMMA206 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs207 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT204_tree = default(CommonTree);
		CommonTree COMMA206_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "nestedSelectStatement");
		DebugLocation(301, 1);
		try
		{
			// Scrape.g:302:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:302:4: SELECT ( selectArgs COMMA )* selectArgs
			{
			DebugLocation(302, 4);
			SELECT204=(CommonToken)Match(input,SELECT,Follow._SELECT_in_nestedSelectStatement1763); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SELECT.Add(SELECT204);

			DebugLocation(302, 11);
			// Scrape.g:302:11: ( selectArgs COMMA )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case FL:
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case ID:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case GETDATE:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				case CASE:
					{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred76_Scrape_fragment)))
					{
						alt48 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:302:12: selectArgs COMMA
					{
					DebugLocation(302, 12);
					PushFollow(Follow._selectArgs_in_nestedSelectStatement1766);
					selectArgs205=selectArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selectArgs.Add(selectArgs205.Tree);
					DebugLocation(302, 23);
					COMMA206=(CommonToken)Match(input,COMMA,Follow._COMMA_in_nestedSelectStatement1768); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA206);


					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }

			DebugLocation(302, 31);
			PushFollow(Follow._selectArgs_in_nestedSelectStatement1772);
			selectArgs207=selectArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArgs.Add(selectArgs207.Tree);


			{
			// AST REWRITE
			// elements: selectArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:42: -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* )
			{
				DebugLocation(302, 45);
				// Scrape.g:302:45: ^( NESTED_SELECT_STATEMENT ( selectArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NESTED_SELECT_STATEMENT, "NESTED_SELECT_STATEMENT"), root_1);

				DebugLocation(302, 71);
				// Scrape.g:302:71: ( selectArgs )*
				while ( stream_selectArgs.HasNext )
				{
					DebugLocation(302, 71);
					adaptor.AddChild(root_1, stream_selectArgs.NextTree());

				}
				stream_selectArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nestedSelectStatement", 47);
			LeaveRule("nestedSelectStatement", 47);
			LeaveRule_nestedSelectStatement();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "nestedSelectStatement"); }
		return retval;

	}
	// $ANTLR end "nestedSelectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:305:1: selectArgs : ( ( selectArg PLUS )* selectArg ( AS ID )? -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? ) | caseStatement ( AS ID )? -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 48);
		TraceIn("selectArgs", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS209 = default(CommonToken);
		CommonToken AS211 = default(CommonToken);
		CommonToken ID212 = default(CommonToken);
		CommonToken AS214 = default(CommonToken);
		CommonToken ID215 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS209_tree = default(CommonTree);
		CommonTree AS211_tree = default(CommonTree);
		CommonTree ID212_tree = default(CommonTree);
		CommonTree AS214_tree = default(CommonTree);
		CommonTree ID215_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(305, 1);
		try
		{
			// Scrape.g:306:2: ( ( selectArg PLUS )* selectArg ( AS ID )? -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? ) | caseStatement ( AS ID )? -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? ) )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==COMMAND_VAR||LA52_1==FL||LA52_1==GETDATE||LA52_1==ID||LA52_1==IDENTITY_VAR||LA52_1==INT||LA52_1==NULL||LA52_1==PICK||LA52_1==STRING_LITERAL))
			{
				alt52 = 1;
			}
			else if ((LA52_1==CASE))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:306:4: ( selectArg PLUS )* selectArg ( AS ID )?
				{
				DebugLocation(306, 4);
				// Scrape.g:306:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					try
					{
						alt49 = dfa49.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(49); }
					switch ( alt49 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:306:5: selectArg PLUS
						{
						DebugLocation(306, 5);
						PushFollow(Follow._selectArg_in_selectArgs1793);
						selectArg208=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg208.Tree);
						DebugLocation(306, 15);
						PLUS209=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1795); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS209);


						}
						break;

					default:
						goto loop49;
					}
				}

				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(306, 22);
				PushFollow(Follow._selectArg_in_selectArgs1799);
				selectArg210=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg210.Tree);
				DebugLocation(306, 32);
				// Scrape.g:306:32: ( AS ID )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==AS))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:306:33: AS ID
					{
					DebugLocation(306, 33);
					AS211=(CommonToken)Match(input,AS,Follow._AS_in_selectArgs1802); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS211);

					DebugLocation(306, 36);
					ID212=(CommonToken)Match(input,ID,Follow._ID_in_selectArgs1804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID212);


					}
					break;

				}
				} finally { DebugExitSubRule(50); }



				{
				// AST REWRITE
				// elements: selectArg, AS, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:41: -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? )
				{
					DebugLocation(306, 44);
					// Scrape.g:306:44: ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(306, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(306, 57);
					// Scrape.g:306:57: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(306, 57);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();
					DebugLocation(306, 68);
					// Scrape.g:306:68: ( ^( AS ID ) )?
					if (stream_AS.HasNext||stream_ID.HasNext)
					{
						DebugLocation(306, 68);
						// Scrape.g:306:68: ^( AS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_AS.NextNode(), root_2);

						DebugLocation(306, 73);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_AS.Reset();
					stream_ID.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:307:4: caseStatement ( AS ID )?
				{
				DebugLocation(307, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1827);
				caseStatement213=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement213.Tree);
				DebugLocation(307, 18);
				// Scrape.g:307:18: ( AS ID )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==AS))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:307:19: AS ID
					{
					DebugLocation(307, 19);
					AS214=(CommonToken)Match(input,AS,Follow._AS_in_selectArgs1830); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS214);

					DebugLocation(307, 22);
					ID215=(CommonToken)Match(input,ID,Follow._ID_in_selectArgs1832); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID215);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }



				{
				// AST REWRITE
				// elements: AS, caseStatement, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 307:27: -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? )
				{
					DebugLocation(307, 30);
					// Scrape.g:307:30: ^( SELECT_ARG caseStatement ( ^( AS ID ) )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(307, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(307, 43);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());
					DebugLocation(307, 57);
					// Scrape.g:307:57: ( ^( AS ID ) )?
					if (stream_AS.HasNext||stream_ID.HasNext)
					{
						DebugLocation(307, 57);
						// Scrape.g:307:57: ^( AS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 59);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_AS.NextNode(), root_2);

						DebugLocation(307, 62);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_AS.Reset();
					stream_ID.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 48);
			LeaveRule("selectArgs", 48);
			LeaveRule_selectArgs();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:312:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 49);
		TraceIn("caseStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE216 = default(CommonToken);
		CommonToken ELSE218 = default(CommonToken);
		CommonToken END220 = default(CommonToken);
		CommonToken CASE221 = default(CommonToken);
		CommonToken ELSE224 = default(CommonToken);
		CommonToken END226 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement217 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression219 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression225 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE216_tree = default(CommonTree);
		CommonTree ELSE218_tree = default(CommonTree);
		CommonTree END220_tree = default(CommonTree);
		CommonTree CASE221_tree = default(CommonTree);
		CommonTree ELSE224_tree = default(CommonTree);
		CommonTree END226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(312, 1);
		try
		{
			// Scrape.g:313:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==CASE))
			{
				int LA57_2 = input.LA(2);

				if ((LA57_2==WHEN))
				{
					alt57 = 1;
				}
				else if ((LA57_2==COMMAND_VAR||LA57_2==FL||LA57_2==GETDATE||LA57_2==ID||LA57_2==IDENTITY_VAR||LA57_2==INT||LA57_2==NULL||LA57_2==PICK||LA57_2==STRING_LITERAL))
				{
					alt57 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:313:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(313, 4);
				CASE216=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE216);

				DebugLocation(313, 9);
				// Scrape.g:313:9: ( whenBoolStatement )+
				int cnt53=0;
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if ((LA53_1==WHEN))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:313:9: whenBoolStatement
						{
						DebugLocation(313, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1865);
						whenBoolStatement217=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement217.Tree);

						}
						break;

					default:
						if (cnt53 >= 1)
							goto loop53;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee53 = new EarlyExitException( 53, input );
						DebugRecognitionException(eee53);
						throw eee53;
					}
					cnt53++;
				}
				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(313, 28);
				// Scrape.g:313:28: ( ELSE caseExpression )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==ELSE))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:313:29: ELSE caseExpression
					{
					DebugLocation(313, 29);
					ELSE218=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1869); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE218);

					DebugLocation(313, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1871);
					caseExpression219=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression219.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(313, 51);
				END220=(CommonToken)Match(input,END,Follow._END_in_caseStatement1875); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END220);



				{
				// AST REWRITE
				// elements: whenBoolStatement, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 313:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(313, 58);
					// Scrape.g:313:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(313, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(313, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(313, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(313, 89);
					// Scrape.g:313:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(313, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:314:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(314, 4);
				CASE221=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1892); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE221);

				DebugLocation(314, 9);
				PushFollow(Follow._selectArg_in_caseStatement1894);
				selectArg222=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg222.Tree);
				DebugLocation(314, 19);
				// Scrape.g:314:19: ( whenLiteralStatement )+
				int cnt55=0;
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_1 = input.LA(1);

					if ((LA55_1==WHEN))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch (alt55)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:314:19: whenLiteralStatement
						{
						DebugLocation(314, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1896);
						whenLiteralStatement223=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement223.Tree);

						}
						break;

					default:
						if (cnt55 >= 1)
							goto loop55;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee55 = new EarlyExitException( 55, input );
						DebugRecognitionException(eee55);
						throw eee55;
					}
					cnt55++;
				}
				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(314, 41);
				// Scrape.g:314:41: ( ELSE caseExpression )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==ELSE))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:314:42: ELSE caseExpression
					{
					DebugLocation(314, 42);
					ELSE224=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1900); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE224);

					DebugLocation(314, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1902);
					caseExpression225=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression225.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(314, 64);
				END226=(CommonToken)Match(input,END,Follow._END_in_caseStatement1906); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END226);



				{
				// AST REWRITE
				// elements: selectArg, caseExpression, whenLiteralStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(314, 71);
					// Scrape.g:314:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(314, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(314, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(314, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(314, 114);
					// Scrape.g:314:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(314, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 49);
			LeaveRule("caseStatement", 49);
			LeaveRule_caseStatement();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:317:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 50);
		TraceIn("caseExpression", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(317, 1);
		try
		{
			// Scrape.g:318:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:318:4: selectArg
			{
			DebugLocation(318, 4);
			PushFollow(Follow._selectArg_in_caseExpression1931);
			selectArg227=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg227.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(318, 17);
				// Scrape.g:318:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(318, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(318, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 50);
			LeaveRule("caseExpression", 50);
			LeaveRule_caseExpression();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:321:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 51);
		TraceIn("whenLiteralStatement", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN228 = default(CommonToken);
		CommonToken THEN230 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal229 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression231 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN228_tree = default(CommonTree);
		CommonTree THEN230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(321, 1);
		try
		{
			// Scrape.g:322:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:322:4: WHEN literal THEN caseExpression
			{
			DebugLocation(322, 4);
			WHEN228=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1950); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN228);

			DebugLocation(322, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1952);
			literal229=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal229.Tree);
			DebugLocation(322, 17);
			THEN230=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1954); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN230);

			DebugLocation(322, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1956);
			caseExpression231=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression231.Tree);


			{
			// AST REWRITE
			// elements: literal, caseExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 322:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(322, 40);
				// Scrape.g:322:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(322, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(322, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(322, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 51);
			LeaveRule("whenLiteralStatement", 51);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:325:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 52);
		TraceIn("whenBoolStatement", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN232 = default(CommonToken);
		CommonToken THEN234 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression233 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression235 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN232_tree = default(CommonTree);
		CommonTree THEN234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(325, 1);
		try
		{
			// Scrape.g:326:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:326:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(326, 4);
			WHEN232=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1977); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN232);

			DebugLocation(326, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1979);
			boolExpression233=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression233.Tree);
			DebugLocation(326, 24);
			THEN234=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1981); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN234);

			DebugLocation(326, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1983);
			caseExpression235=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression235.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 326:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(326, 47);
				// Scrape.g:326:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(326, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(326, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(326, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 52);
			LeaveRule("whenBoolStatement", 52);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:329:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 53);
		TraceIn("boolExpression", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR237 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression236 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression238 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR237_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(329, 1);
		try
		{
			// Scrape.g:330:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:330:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(330, 4);
			PushFollow(Follow._andExpression_in_boolExpression2004);
			andExpression236=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression236.Tree);
			DebugLocation(330, 18);
			// Scrape.g:330:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==OR))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:330:19: OR ^ andExpression
					{
					DebugLocation(330, 21);
					OR237=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression2007); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR237_tree = (CommonTree)adaptor.Create(OR237);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR237_tree, root_0);
					}
					DebugLocation(330, 23);
					PushFollow(Follow._andExpression_in_boolExpression2010);
					andExpression238=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression238.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 53);
			LeaveRule("boolExpression", 53);
			LeaveRule_boolExpression();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:333:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 54);
		TraceIn("andExpression", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND240 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm239 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND240_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(333, 1);
		try
		{
			// Scrape.g:334:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:334:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(334, 5);
			PushFollow(Follow._boolTerm_in_andExpression2024);
			boolTerm239=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm239.Tree);
			DebugLocation(334, 14);
			// Scrape.g:334:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==AND))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:334:15: AND ^ boolTerm
					{
					DebugLocation(334, 18);
					AND240=(CommonToken)Match(input,AND,Follow._AND_in_andExpression2027); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND240_tree = (CommonTree)adaptor.Create(AND240);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND240_tree, root_0);
					}
					DebugLocation(334, 20);
					PushFollow(Follow._boolTerm_in_andExpression2030);
					boolTerm241=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm241.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 54);
			LeaveRule("andExpression", 54);
			LeaveRule_andExpression();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:337:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 55);
		TraceIn("boolTerm", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken NODES242 = default(CommonToken);
		CommonToken EQUALS243 = default(CommonToken);
		CommonToken STRING_LITERAL244 = default(CommonToken);
		CommonToken DOT245 = default(CommonToken);
		CommonToken NODES246 = default(CommonToken);
		CommonToken EQUALS247 = default(CommonToken);
		CommonToken STRING_LITERAL248 = default(CommonToken);
		CommonToken OPENPAREN252 = default(CommonToken);
		CommonToken CLOSEPAREN254 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg249 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator250 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg251 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression253 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree NODES242_tree = default(CommonTree);
		CommonTree EQUALS243_tree = default(CommonTree);
		CommonTree STRING_LITERAL244_tree = default(CommonTree);
		CommonTree DOT245_tree = default(CommonTree);
		CommonTree NODES246_tree = default(CommonTree);
		CommonTree EQUALS247_tree = default(CommonTree);
		CommonTree STRING_LITERAL248_tree = default(CommonTree);
		CommonTree OPENPAREN252_tree = default(CommonTree);
		CommonTree CLOSEPAREN254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(337, 1);
		try
		{
			// Scrape.g:338:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt61=4;
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt61 = 1;
				}
				break;
			case ID:
				{
				int LA61_2 = input.LA(2);

				if ((LA61_2==DOT))
				{
					int LA61_3 = input.LA(3);

					if ((LA61_3==NODES))
					{
						alt61 = 2;
					}
					else if ((LA61_3==ID))
					{
						alt61 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 61, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA61_2==EOF||LA61_2==AND||(LA61_2>=CLOSEBRACE && LA61_2<=CLOSEPAREN)||LA61_2==COMMAND_VAR||LA61_2==CREATE||LA61_2==EACH||(LA61_2>=EQUALS && LA61_2<=EXEC)||(LA61_2>=GREATERTHAN && LA61_2<=GREATERTHANEQUAL)||LA61_2==ID||LA61_2==IDENTITY_VAR||(LA61_2>=INNER_JOIN && LA61_2<=INSERT_INTO)||LA61_2==INSERT_OVERWRITE||LA61_2==JOIN||(LA61_2>=LESSTHAN && LA61_2<=LESSTHANEQUAL)||LA61_2==LIKE||(LA61_2>=NOTEQUAL && LA61_2<=NOTLIKE)||LA61_2==OR||LA61_2==SELECT||LA61_2==THEN||(LA61_2>=TRUNCATE && LA61_2<=VAR)||(LA61_2>=WHERE && LA61_2<=WHILE)))
				{
					alt61 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
			case FL:
			case GETDATE:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt61 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt61 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:338:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(338, 4);
				NODES242=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm2045); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES242);

				DebugLocation(338, 10);
				EQUALS243=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm2047); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS243);

				DebugLocation(338, 17);
				STRING_LITERAL244=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm2049); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL244);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 338:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(338, 35);
					// Scrape.g:338:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(338, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(338, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES242));
					DebugLocation(338, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:339:4: t= ID DOT NODES EQUALS STRING_LITERAL
				{
				DebugLocation(339, 5);
				t=(CommonToken)Match(input,ID,Follow._ID_in_boolTerm2067); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(339, 9);
				DOT245=(CommonToken)Match(input,DOT,Follow._DOT_in_boolTerm2069); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT245);

				DebugLocation(339, 13);
				NODES246=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm2071); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES246);

				DebugLocation(339, 19);
				EQUALS247=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm2073); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS247);

				DebugLocation(339, 26);
				STRING_LITERAL248=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm2075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL248);



				{
				// AST REWRITE
				// elements: STRING_LITERAL, NODES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 339:41: -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
				{
					DebugLocation(339, 44);
					// Scrape.g:339:44: ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(339, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(339, 52);
					// Scrape.g:339:52: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(339, 54);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_2);

					DebugLocation(339, 77);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
					DebugLocation(339, 95);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(MEMBER_REFERENCE, NODES246));

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(339, 121);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:340:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 4);
				PushFollow(Follow._selectArg_in_boolTerm2098);
				selectArg249=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg249.Tree);
				DebugLocation(340, 14);
				// Scrape.g:340:14: ( boolOperator ^ selectArg )?
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==EQUALS||(LA60_1>=GREATERTHAN && LA60_1<=GREATERTHANEQUAL)||(LA60_1>=LESSTHAN && LA60_1<=LESSTHANEQUAL)||LA60_1==LIKE||(LA60_1>=NOTEQUAL && LA60_1<=NOTLIKE)))
				{
					alt60 = 1;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:340:15: boolOperator ^ selectArg
					{
					DebugLocation(340, 27);
					PushFollow(Follow._boolOperator_in_boolTerm2101);
					boolOperator250=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator250.Tree, root_0);
					DebugLocation(340, 29);
					PushFollow(Follow._selectArg_in_boolTerm2104);
					selectArg251=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg251.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:341:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(341, 13);
				OPENPAREN252=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm2112); if (state.failed) return retval;
				DebugLocation(341, 15);
				PushFollow(Follow._boolExpression_in_boolTerm2115);
				boolExpression253=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression253.Tree);
				DebugLocation(341, 40);
				CLOSEPAREN254=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm2117); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 55);
			LeaveRule("boolTerm", 55);
			LeaveRule_boolTerm();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:344:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 56);
		TraceIn("boolOperator", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set255 = default(CommonToken);

		CommonTree set255_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(344, 1);
		try
		{
			// Scrape.g:345:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(345, 2);

			set255=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==LIKE||(input.LA(1)>=NOTEQUAL && input.LA(1)<=NOTLIKE))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set255));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 56);
			LeaveRule("boolOperator", 56);
			LeaveRule_boolOperator();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:355:1: selectArg : ( pickStatement | literal | selectVariable | primitiveFunction );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 57);
		TraceIn("selectArg", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement256 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal257 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable258 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction259 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(355, 1);
		try
		{
			// Scrape.g:356:2: ( pickStatement | literal | selectVariable | primitiveFunction )
			int alt62=4;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt62 = 1;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt62 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt62 = 3;
				}
				break;
			case GETDATE:
				{
				alt62 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:356:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(356, 4);
				PushFollow(Follow._pickStatement_in_selectArg2175);
				pickStatement256=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement256.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:357:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(357, 4);
				PushFollow(Follow._literal_in_selectArg2182);
				literal257=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal257.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:358:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(358, 4);
				PushFollow(Follow._selectVariable_in_selectArg2187);
				selectVariable258=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable258.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:359:4: primitiveFunction
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(359, 4);
				PushFollow(Follow._primitiveFunction_in_selectArg2192);
				primitiveFunction259=primitiveFunction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveFunction259.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 57);
			LeaveRule("selectArg", 57);
			LeaveRule_selectArg();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_primitiveFunction();
	partial void LeaveRule_primitiveFunction();
	// $ANTLR start "primitiveFunction"
	// Scrape.g:362:1: primitiveFunction : GETDATE ^ OPENPAREN ! CLOSEPAREN !;
	[GrammarRule("primitiveFunction")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction()
	{
		EnterRule_primitiveFunction();
		EnterRule("primitiveFunction", 58);
		TraceIn("primitiveFunction", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken GETDATE260 = default(CommonToken);
		CommonToken OPENPAREN261 = default(CommonToken);
		CommonToken CLOSEPAREN262 = default(CommonToken);

		CommonTree GETDATE260_tree = default(CommonTree);
		CommonTree OPENPAREN261_tree = default(CommonTree);
		CommonTree CLOSEPAREN262_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveFunction");
		DebugLocation(362, 1);
		try
		{
			// Scrape.g:363:2: ( GETDATE ^ OPENPAREN ! CLOSEPAREN !)
			DebugEnterAlt(1);
			// Scrape.g:363:4: GETDATE ^ OPENPAREN ! CLOSEPAREN !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 11);
			GETDATE260=(CommonToken)Match(input,GETDATE,Follow._GETDATE_in_primitiveFunction2203); if (state.failed) return retval;
			if (state.backtracking == 0) {
			GETDATE260_tree = (CommonTree)adaptor.Create(GETDATE260);
			root_0 = (CommonTree)adaptor.BecomeRoot(GETDATE260_tree, root_0);
			}
			DebugLocation(363, 22);
			OPENPAREN261=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_primitiveFunction2206); if (state.failed) return retval;
			DebugLocation(363, 34);
			CLOSEPAREN262=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_primitiveFunction2209); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveFunction", 58);
			LeaveRule("primitiveFunction", 58);
			LeaveRule_primitiveFunction();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveFunction"); }
		return retval;

	}
	// $ANTLR end "primitiveFunction"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:366:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 59);
		TraceIn("selectVariable", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID263 = default(CommonToken);
		CommonToken COMMAND_VAR264 = default(CommonToken);
		CommonToken IDENTITY_VAR265 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference266 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID263_tree = default(CommonTree);
		CommonTree COMMAND_VAR264_tree = default(CommonTree);
		CommonTree IDENTITY_VAR265_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(366, 1);
		try
		{
			// Scrape.g:367:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt63=4;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA63_2 = input.LA(2);

				if ((LA63_2==DOT))
				{
					alt63 = 4;
				}
				else if ((LA63_2==EOF||LA63_2==AND||LA63_2==AS||(LA63_2>=CLOSEBRACE && LA63_2<=COMMAND_VAR)||LA63_2==CREATE||(LA63_2>=EACH && LA63_2<=EXEC)||LA63_2==FROM||(LA63_2>=GREATERTHAN && LA63_2<=GREATERTHANEQUAL)||LA63_2==ID||LA63_2==IDENTITY_VAR||(LA63_2>=INNER_JOIN && LA63_2<=INSERT_INTO)||LA63_2==INSERT_OVERWRITE||LA63_2==JOIN||(LA63_2>=LESSTHAN && LA63_2<=LESSTHANEQUAL)||LA63_2==LIKE||(LA63_2>=NOTEQUAL && LA63_2<=NOTLIKE)||LA63_2==OR||LA63_2==PLUS||LA63_2==SELECT||LA63_2==THEN||(LA63_2>=TRUNCATE && LA63_2<=VAR)||LA63_2==WHEN||(LA63_2>=WHERE && LA63_2<=WHILE)))
				{
					alt63 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt63 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt63 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:367:4: ID
				{
				DebugLocation(367, 4);
				ID263=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable2221); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID263);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 367:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(367, 10);
					// Scrape.g:367:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(367, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID263), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:368:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 4);
				COMMAND_VAR264=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable2233); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR264_tree = (CommonTree)adaptor.Create(COMMAND_VAR264);
				adaptor.AddChild(root_0, COMMAND_VAR264_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:369:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(369, 4);
				IDENTITY_VAR265=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable2238); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR265_tree = (CommonTree)adaptor.Create(IDENTITY_VAR265);
				adaptor.AddChild(root_0, IDENTITY_VAR265_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:370:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(370, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable2243);
				tableMemberReference266=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference266.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 59);
			LeaveRule("selectVariable", 59);
			LeaveRule_selectVariable();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:373:1: pickStatement : PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 60);
		TraceIn("pickStatement", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK267 = default(CommonToken);
		CommonToken STRING_LITERAL268 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement269 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement270 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK267_tree = default(CommonTree);
		CommonTree STRING_LITERAL268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(373, 1);
		try
		{
			// Scrape.g:374:2: ( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:374:4: PICK STRING_LITERAL ( takeStatement )? ( matchStatement )*
			{
			DebugLocation(374, 4);
			PICK267=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement2255); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK267);

			DebugLocation(374, 9);
			STRING_LITERAL268=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement2257); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL268);

			DebugLocation(374, 24);
			// Scrape.g:374:24: ( takeStatement )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==TAKE))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:374:24: takeStatement
				{
				DebugLocation(374, 24);
				PushFollow(Follow._takeStatement_in_pickStatement2259);
				takeStatement269=takeStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_takeStatement.Add(takeStatement269.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(374, 39);
			// Scrape.g:374:39: ( matchStatement )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==MATCH))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:374:39: matchStatement
					{
					DebugLocation(374, 39);
					PushFollow(Follow._matchStatement_in_pickStatement2262);
					matchStatement270=matchStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_matchStatement.Add(matchStatement270.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, matchStatement, takeStatement, PICK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 374:55: -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
			{
				DebugLocation(374, 58);
				// Scrape.g:374:58: ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(374, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(374, 65);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(374, 80);
				// Scrape.g:374:80: ( takeStatement )?
				if (stream_takeStatement.HasNext)
				{
					DebugLocation(374, 80);
					adaptor.AddChild(root_1, stream_takeStatement.NextTree());

				}
				stream_takeStatement.Reset();
				DebugLocation(374, 95);
				// Scrape.g:374:95: ( matchStatement )*
				while ( stream_matchStatement.HasNext )
				{
					DebugLocation(374, 95);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 60);
			LeaveRule("pickStatement", 60);
			LeaveRule_pickStatement();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:377:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 61);
		TraceIn("takeStatement", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE271 = default(CommonToken);
		CommonToken ATTRIBUTE272 = default(CommonToken);
		CommonToken STRING_LITERAL273 = default(CommonToken);
		CommonToken TAKE274 = default(CommonToken);
		CommonToken TEXT275 = default(CommonToken);
		CommonToken TAKE276 = default(CommonToken);
		CommonToken HTML277 = default(CommonToken);

		CommonTree TAKE271_tree = default(CommonTree);
		CommonTree ATTRIBUTE272_tree = default(CommonTree);
		CommonTree STRING_LITERAL273_tree = default(CommonTree);
		CommonTree TAKE274_tree = default(CommonTree);
		CommonTree TEXT275_tree = default(CommonTree);
		CommonTree TAKE276_tree = default(CommonTree);
		CommonTree HTML277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(377, 1);
		try
		{
			// Scrape.g:378:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt66 = 1;
					}
					break;
				case TEXT:
					{
					alt66 = 2;
					}
					break;
				case HTML:
					{
					alt66 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:378:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(378, 4);
				TAKE271=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2288); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE271);

				DebugLocation(378, 9);
				ATTRIBUTE272=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement2290); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE272);

				DebugLocation(378, 19);
				STRING_LITERAL273=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement2292); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL273);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 378:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(378, 37);
					// Scrape.g:378:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(378, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(378, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:379:4: TAKE TEXT
				{
				DebugLocation(379, 4);
				TAKE274=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2305); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE274);

				DebugLocation(379, 9);
				TEXT275=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement2307); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT275);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 379:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(379, 17);
					// Scrape.g:379:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(379, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:380:4: TAKE HTML
				{
				DebugLocation(380, 4);
				TAKE276=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2318); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE276);

				DebugLocation(380, 9);
				HTML277=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement2320); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML277);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:14: -> ^( TAKE_HTML )
				{
					DebugLocation(380, 17);
					// Scrape.g:380:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 61);
			LeaveRule("takeStatement", 61);
			LeaveRule_takeStatement();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:383:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 62);
		TraceIn("matchStatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH278 = default(CommonToken);
		CommonToken STRING_LITERAL279 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement280 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH278_tree = default(CommonTree);
		CommonTree STRING_LITERAL279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(383, 1);
		try
		{
			// Scrape.g:384:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:384:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(384, 4);
			MATCH278=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement2338); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH278);

			DebugLocation(384, 10);
			STRING_LITERAL279=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement2340); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL279);

			DebugLocation(384, 25);
			// Scrape.g:384:25: ( replaceStatement )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==REPLACE))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:384:25: replaceStatement
				{
				DebugLocation(384, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement2342);
				replaceStatement280=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement280.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, replaceStatement, MATCH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 384:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(384, 46);
				// Scrape.g:384:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(384, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(384, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(384, 69);
				// Scrape.g:384:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(384, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 62);
			LeaveRule("matchStatement", 62);
			LeaveRule_matchStatement();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:387:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 63);
		TraceIn("replaceStatement", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE281 = default(CommonToken);
		CommonToken STRING_LITERAL282 = default(CommonToken);

		CommonTree REPLACE281_tree = default(CommonTree);
		CommonTree STRING_LITERAL282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(387, 1);
		try
		{
			// Scrape.g:388:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:388:4: REPLACE STRING_LITERAL
			{
			DebugLocation(388, 4);
			REPLACE281=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement2365); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE281);

			DebugLocation(388, 12);
			STRING_LITERAL282=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement2367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL282);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 388:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(388, 30);
				// Scrape.g:388:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(388, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(388, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 63);
			LeaveRule("replaceStatement", 63);
			LeaveRule_replaceStatement();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:392:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 64);
		TraceIn("createTableStatement", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE283 = default(CommonToken);
		CommonToken FILE284 = default(CommonToken);
		CommonToken ID285 = default(CommonToken);
		CommonToken OPENPAREN286 = default(CommonToken);
		CommonToken CLOSEPAREN288 = default(CommonToken);
		CommonToken CREATE291 = default(CommonToken);
		CommonToken BUFFER292 = default(CommonToken);
		CommonToken ID293 = default(CommonToken);
		CommonToken OPENPAREN294 = default(CommonToken);
		CommonToken CLOSEPAREN296 = default(CommonToken);
		CommonToken CREATE297 = default(CommonToken);
		CommonToken MSSQL298 = default(CommonToken);
		CommonToken ID299 = default(CommonToken);
		CommonToken OPENPAREN300 = default(CommonToken);
		CommonToken CLOSEPAREN302 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs287 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement289 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation290 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs295 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs301 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement303 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE283_tree = default(CommonTree);
		CommonTree FILE284_tree = default(CommonTree);
		CommonTree ID285_tree = default(CommonTree);
		CommonTree OPENPAREN286_tree = default(CommonTree);
		CommonTree CLOSEPAREN288_tree = default(CommonTree);
		CommonTree CREATE291_tree = default(CommonTree);
		CommonTree BUFFER292_tree = default(CommonTree);
		CommonTree ID293_tree = default(CommonTree);
		CommonTree OPENPAREN294_tree = default(CommonTree);
		CommonTree CLOSEPAREN296_tree = default(CommonTree);
		CommonTree CREATE297_tree = default(CommonTree);
		CommonTree MSSQL298_tree = default(CommonTree);
		CommonTree ID299_tree = default(CommonTree);
		CommonTree OPENPAREN300_tree = default(CommonTree);
		CommonTree CLOSEPAREN302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleITokenStream stream_MSSQL=new RewriteRuleITokenStream(adaptor,"token MSSQL");
		RewriteRuleSubtreeStream stream_sqlTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithStatement");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(392, 1);
		try
		{
			// Scrape.g:393:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==CREATE))
			{
				switch (input.LA(2))
				{
				case FILE:
					{
					alt72 = 1;
					}
					break;
				case BUFFER:
					{
					alt72 = 2;
					}
					break;
				case MSSQL:
					{
					alt72 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 72, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:393:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(393, 4);
				CREATE283=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2388); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE283);

				DebugLocation(393, 11);
				FILE284=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement2390); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE284);

				DebugLocation(393, 16);
				ID285=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2392); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID285);

				DebugLocation(393, 19);
				OPENPAREN286=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2394); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN286);

				DebugLocation(393, 29);
				// Scrape.g:393:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_1 = input.LA(1);

					if ((LA68_1==ID))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch ( alt68 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:393:29: tableColumnArgs
						{
						DebugLocation(393, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2396);
						tableColumnArgs287=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs287.Tree);

						}
						break;

					default:
						goto loop68;
					}
				}

				loop68:
					;

				} finally { DebugExitSubRule(68); }

				DebugLocation(393, 46);
				CLOSEPAREN288=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2399); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN288);

				DebugLocation(393, 57);
				// Scrape.g:393:57: ( fileTableWithStatement )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_1 = input.LA(1);

				if ((LA69_1==WITH))
				{
					alt69 = 1;
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:393:57: fileTableWithStatement
					{
					DebugLocation(393, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement2401);
					fileTableWithStatement289=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement289.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }

				DebugLocation(393, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement2404);
				fileTableLocation290=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation290.Tree);


				{
				// AST REWRITE
				// elements: ID, tableColumnArgs, fileTableLocation, fileTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 393:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(393, 102);
					// Scrape.g:393:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(393, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(393, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(393, 118);
					// Scrape.g:393:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(393, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(393, 135);
					// Scrape.g:393:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(393, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(393, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:394:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(394, 4);
				CREATE291=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2425); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE291);

				DebugLocation(394, 11);
				BUFFER292=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement2427); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER292);

				DebugLocation(394, 18);
				ID293=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2429); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID293);

				DebugLocation(394, 21);
				OPENPAREN294=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2431); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN294);

				DebugLocation(394, 31);
				// Scrape.g:394:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==ID))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:394:31: tableColumnArgs
						{
						DebugLocation(394, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2433);
						tableColumnArgs295=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs295.Tree);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }

				DebugLocation(394, 48);
				CLOSEPAREN296=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2436); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN296);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 394:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(394, 62);
					// Scrape.g:394:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(394, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(394, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(394, 80);
					// Scrape.g:394:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(394, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:395:4: CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement
				{
				DebugLocation(395, 4);
				CREATE297=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2452); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE297);

				DebugLocation(395, 11);
				MSSQL298=(CommonToken)Match(input,MSSQL,Follow._MSSQL_in_createTableStatement2454); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSSQL.Add(MSSQL298);

				DebugLocation(395, 17);
				ID299=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID299);

				DebugLocation(395, 20);
				OPENPAREN300=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN300);

				DebugLocation(395, 30);
				// Scrape.g:395:30: ( tableColumnArgs )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==ID))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:395:30: tableColumnArgs
						{
						DebugLocation(395, 30);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2460);
						tableColumnArgs301=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs301.Tree);

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(395, 47);
				CLOSEPAREN302=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2463); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN302);

				DebugLocation(395, 58);
				PushFollow(Follow._sqlTableWithStatement_in_createTableStatement2465);
				sqlTableWithStatement303=sqlTableWithStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlTableWithStatement.Add(sqlTableWithStatement303.Tree);


				{
				// AST REWRITE
				// elements: ID, sqlTableWithStatement, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 395:80: -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
				{
					DebugLocation(395, 83);
					// Scrape.g:395:83: ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(395, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MSSQL_TABLE, "MSSQL_TABLE"), root_1);

					DebugLocation(395, 97);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(395, 100);
					// Scrape.g:395:100: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(395, 100);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(395, 117);
					adaptor.AddChild(root_1, stream_sqlTableWithStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 64);
			LeaveRule("createTableStatement", 64);
			LeaveRule_createTableStatement();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:398:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 65);
		TraceIn("fileTableLocation", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION304 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression305 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION304_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(398, 1);
		try
		{
			// Scrape.g:399:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:399:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(399, 12);
			LOCATION304=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation2489); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION304_tree = (CommonTree)adaptor.Create(LOCATION304);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION304_tree, root_0);
			}
			DebugLocation(399, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation2492);
			mathExpression305=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression305.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 65);
			LeaveRule("fileTableLocation", 65);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_sqlTableWithStatement();
	partial void LeaveRule_sqlTableWithStatement();
	// $ANTLR start "sqlTableWithStatement"
	// Scrape.g:402:1: sqlTableWithStatement : WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) ;
	[GrammarRule("sqlTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement()
	{
		EnterRule_sqlTableWithStatement();
		EnterRule("sqlTableWithStatement", 66);
		TraceIn("sqlTableWithStatement", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH306 = default(CommonToken);
		CommonToken OPENPAREN307 = default(CommonToken);
		CommonToken CLOSEPAREN309 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement308 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH306_tree = default(CommonTree);
		CommonTree OPENPAREN307_tree = default(CommonTree);
		CommonTree CLOSEPAREN309_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithStatement");
		DebugLocation(402, 1);
		try
		{
			// Scrape.g:403:2: ( WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) )
			DebugEnterAlt(1);
			// Scrape.g:403:4: WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN
			{
			DebugLocation(403, 4);
			WITH306=(CommonToken)Match(input,WITH,Follow._WITH_in_sqlTableWithStatement2504); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH306);

			DebugLocation(403, 9);
			OPENPAREN307=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_sqlTableWithStatement2506); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN307);

			DebugLocation(403, 19);
			PushFollow(Follow._sqlTableWithVariablesStatement_in_sqlTableWithStatement2508);
			sqlTableWithVariablesStatement308=sqlTableWithVariablesStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariablesStatement.Add(sqlTableWithVariablesStatement308.Tree);
			DebugLocation(403, 50);
			CLOSEPAREN309=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_sqlTableWithStatement2510); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN309);



			{
			// AST REWRITE
			// elements: WITH, sqlTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 403:61: -> ^( WITH sqlTableWithVariablesStatement )
			{
				DebugLocation(403, 64);
				// Scrape.g:403:64: ^( WITH sqlTableWithVariablesStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(403, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(403, 71);
				adaptor.AddChild(root_1, stream_sqlTableWithVariablesStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithStatement", 66);
			LeaveRule("sqlTableWithStatement", 66);
			LeaveRule_sqlTableWithStatement();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithStatement"

	partial void EnterRule_sqlTableWithVariablesStatement();
	partial void LeaveRule_sqlTableWithVariablesStatement();
	// $ANTLR start "sqlTableWithVariablesStatement"
	// Scrape.g:406:1: sqlTableWithVariablesStatement : ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* ;
	[GrammarRule("sqlTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement()
	{
		EnterRule_sqlTableWithVariablesStatement();
		EnterRule("sqlTableWithVariablesStatement", 67);
		TraceIn("sqlTableWithVariablesStatement", 67);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA311 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement310 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement312 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA311_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_sqlTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariablesStatement");
		DebugLocation(406, 1);
		try
		{
			// Scrape.g:407:2: ( ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:407:4: ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement
			{
			DebugLocation(407, 4);
			// Scrape.g:407:4: ( sqlTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==CONNECTIONSTRING||LA73_1==DBTABLE))
				{
					int LA73_2 = input.LA(2);

					if ((LA73_2==EQUALS))
					{
						int LA73_3 = input.LA(3);

						if ((LA73_3==STRING_LITERAL))
						{
							int LA73_4 = input.LA(4);

							if ((LA73_4==COMMA))
							{
								alt73 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:407:5: sqlTableWithVariableStatement COMMA
					{
					DebugLocation(407, 5);
					PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2531);
					sqlTableWithVariableStatement310=sqlTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement310.Tree);
					DebugLocation(407, 35);
					COMMA311=(CommonToken)Match(input,COMMA,Follow._COMMA_in_sqlTableWithVariablesStatement2533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA311);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(407, 43);
			PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2537);
			sqlTableWithVariableStatement312=sqlTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement312.Tree);


			{
			// AST REWRITE
			// elements: sqlTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 407:73: -> ( sqlTableWithVariableStatement )*
			{
				DebugLocation(407, 76);
				// Scrape.g:407:76: ( sqlTableWithVariableStatement )*
				while ( stream_sqlTableWithVariableStatement.HasNext )
				{
					DebugLocation(407, 76);
					adaptor.AddChild(root_0, stream_sqlTableWithVariableStatement.NextTree());

				}
				stream_sqlTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariablesStatement", 67);
			LeaveRule("sqlTableWithVariablesStatement", 67);
			LeaveRule_sqlTableWithVariablesStatement();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariablesStatement"

	partial void EnterRule_sqlTableWithVariableStatement();
	partial void LeaveRule_sqlTableWithVariableStatement();
	// $ANTLR start "sqlTableWithVariableStatement"
	// Scrape.g:410:1: sqlTableWithVariableStatement : ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("sqlTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement()
	{
		EnterRule_sqlTableWithVariableStatement();
		EnterRule("sqlTableWithVariableStatement", 68);
		TraceIn("sqlTableWithVariableStatement", 68);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set313 = default(CommonToken);
		CommonToken EQUALS314 = default(CommonToken);
		CommonToken STRING_LITERAL315 = default(CommonToken);

		CommonTree set313_tree = default(CommonTree);
		CommonTree EQUALS314_tree = default(CommonTree);
		CommonTree STRING_LITERAL315_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariableStatement");
		DebugLocation(410, 1);
		try
		{
			// Scrape.g:411:2: ( ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:411:4: ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(411, 32);

			set313=(CommonToken)input.LT(1);
			set313=(CommonToken)input.LT(1);
			if (input.LA(1)==CONNECTIONSTRING||input.LA(1)==DBTABLE)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set313), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(411, 40);
			EQUALS314=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_sqlTableWithVariableStatement2563); if (state.failed) return retval;
			DebugLocation(411, 42);
			STRING_LITERAL315=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_sqlTableWithVariableStatement2566); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL315_tree = (CommonTree)adaptor.Create(STRING_LITERAL315);
			adaptor.AddChild(root_0, STRING_LITERAL315_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariableStatement", 68);
			LeaveRule("sqlTableWithVariableStatement", 68);
			LeaveRule_sqlTableWithVariableStatement();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariableStatement"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:414:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 69);
		TraceIn("fileTableWithStatement", 69);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH316 = default(CommonToken);
		CommonToken OPENPAREN317 = default(CommonToken);
		CommonToken CLOSEPAREN319 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement318 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH316_tree = default(CommonTree);
		CommonTree OPENPAREN317_tree = default(CommonTree);
		CommonTree CLOSEPAREN319_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(414, 1);
		try
		{
			// Scrape.g:415:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:415:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(415, 4);
			WITH316=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement2577); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH316);

			DebugLocation(415, 9);
			OPENPAREN317=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2579); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN317);

			DebugLocation(415, 19);
			// Scrape.g:415:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==FIELD_TERMINATOR||LA74_1==ROW_TERMINATOR))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:415:19: fileTableWithVariablesStatement
					{
					DebugLocation(415, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2581);
					fileTableWithVariablesStatement318=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement318.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(415, 52);
			CLOSEPAREN319=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2584); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN319);



			{
			// AST REWRITE
			// elements: fileTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 415:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(415, 66);
				// Scrape.g:415:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(415, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(415, 73);
				// Scrape.g:415:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(415, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 69);
			LeaveRule("fileTableWithStatement", 69);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:418:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 70);
		TraceIn("fileTableWithVariablesStatement", 70);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA321 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement320 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement322 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA321_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(418, 1);
		try
		{
			// Scrape.g:419:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:419:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(419, 4);
			// Scrape.g:419:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==FIELD_TERMINATOR||LA75_1==ROW_TERMINATOR))
				{
					int LA75_2 = input.LA(2);

					if ((LA75_2==EQUALS))
					{
						int LA75_3 = input.LA(3);

						if ((LA75_3==STRING_LITERAL))
						{
							int LA75_4 = input.LA(4);

							if ((LA75_4==COMMA))
							{
								alt75 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:419:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(419, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2607);
					fileTableWithVariableStatement320=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement320.Tree);
					DebugLocation(419, 36);
					COMMA321=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2609); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA321);


					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(419, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2613);
			fileTableWithVariableStatement322=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement322.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 419:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(419, 78);
				// Scrape.g:419:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(419, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 70);
			LeaveRule("fileTableWithVariablesStatement", 70);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:422:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 71);
		TraceIn("fileTableWithVariableStatement", 71);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set323 = default(CommonToken);
		CommonToken EQUALS324 = default(CommonToken);
		CommonToken STRING_LITERAL325 = default(CommonToken);

		CommonTree set323_tree = default(CommonTree);
		CommonTree EQUALS324_tree = default(CommonTree);
		CommonTree STRING_LITERAL325_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(422, 1);
		try
		{
			// Scrape.g:423:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:423:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(423, 39);

			set323=(CommonToken)input.LT(1);
			set323=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set323), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(423, 47);
			EQUALS324=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2638); if (state.failed) return retval;
			DebugLocation(423, 49);
			STRING_LITERAL325=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2641); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL325_tree = (CommonTree)adaptor.Create(STRING_LITERAL325);
			adaptor.AddChild(root_0, STRING_LITERAL325_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 71);
			LeaveRule("fileTableWithVariableStatement", 71);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:426:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 72);
		TraceIn("tableColumnArgs", 72);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA327 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg326 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg328 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA327_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(426, 1);
		try
		{
			// Scrape.g:427:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:427:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(427, 4);
			// Scrape.g:427:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==ID))
				{
					int LA76_2 = input.LA(2);

					if ((LA76_2==DATETIME||LA76_2==FLOAT||LA76_2==IDENTITY||LA76_2==INTEGER||LA76_2==STRING))
					{
						int LA76_3 = input.LA(3);

						if ((LA76_3==COMMA))
						{
							alt76 = 1;
						}


					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:427:5: tableColumnArg COMMA
					{
					DebugLocation(427, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2653);
					tableColumnArg326=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg326.Tree);
					DebugLocation(427, 20);
					COMMA327=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2655); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA327);


					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }

			DebugLocation(427, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2659);
			tableColumnArg328=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg328.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 427:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(427, 46);
				// Scrape.g:427:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(427, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(427, 66);
				// Scrape.g:427:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(427, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 72);
			LeaveRule("tableColumnArgs", 72);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:430:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 73);
		TraceIn("tableColumnArg", 73);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID329 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType330 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID329_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(430, 1);
		try
		{
			// Scrape.g:431:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:431:4: ID dataType
			{
			DebugLocation(431, 4);
			ID329=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2680); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID329);

			DebugLocation(431, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2682);
			dataType330=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType330.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 431:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(431, 19);
				// Scrape.g:431:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(431, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(431, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(431, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 73);
			LeaveRule("tableColumnArg", 73);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:434:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 74);
		TraceIn("dataType", 74);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set331 = default(CommonToken);

		CommonTree set331_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(434, 1);
		try
		{
			// Scrape.g:435:2: ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(435, 2);

			set331=(CommonToken)input.LT(1);
			if (input.LA(1)==DATETIME||input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set331));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 74);
			LeaveRule("dataType", 74);
			LeaveRule_dataType();
		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred23_Scrape_fragment();
	partial void LeaveRule_synpred23_Scrape_fragment();

	// $ANTLR start synpred23_Scrape
	private void synpred23_Scrape_fragment()
	{
		EnterRule_synpred23_Scrape_fragment();
		EnterRule("synpred23_Scrape_fragment", 97);
		TraceIn("synpred23_Scrape_fragment", 97);
		try
		{
			// Scrape.g:154:41: ( tableHint )
			DebugEnterAlt(1);
			// Scrape.g:154:41: tableHint
			{
			DebugLocation(154, 41);
			PushFollow(Follow._tableHint_in_synpred23_Scrape774);
			tableHint();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_Scrape_fragment", 97);
			LeaveRule("synpred23_Scrape_fragment", 97);
			LeaveRule_synpred23_Scrape_fragment();
		}
	}
	// $ANTLR end synpred23_Scrape

	partial void EnterRule_synpred30_Scrape_fragment();
	partial void LeaveRule_synpred30_Scrape_fragment();

	// $ANTLR start synpred30_Scrape
	private void synpred30_Scrape_fragment()
	{
		EnterRule_synpred30_Scrape_fragment();
		EnterRule("synpred30_Scrape_fragment", 104);
		TraceIn("synpred30_Scrape_fragment", 104);
		try
		{
			// Scrape.g:191:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:191:4: mathExpression
			{
			DebugLocation(191, 4);
			PushFollow(Follow._mathExpression_in_synpred30_Scrape964);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_Scrape_fragment", 104);
			LeaveRule("synpred30_Scrape_fragment", 104);
			LeaveRule_synpred30_Scrape_fragment();
		}
	}
	// $ANTLR end synpred30_Scrape

	partial void EnterRule_synpred49_Scrape_fragment();
	partial void LeaveRule_synpred49_Scrape_fragment();

	// $ANTLR start synpred49_Scrape
	private void synpred49_Scrape_fragment()
	{
		EnterRule_synpred49_Scrape_fragment();
		EnterRule("synpred49_Scrape_fragment", 123);
		TraceIn("synpred49_Scrape_fragment", 123);
		try
		{
			// Scrape.g:238:9: ( setArg COMMA )
			DebugEnterAlt(1);
			// Scrape.g:238:9: setArg COMMA
			{
			DebugLocation(238, 9);
			PushFollow(Follow._setArg_in_synpred49_Scrape1261);
			setArg();
			PopFollow();
			if (state.failed) return;
			DebugLocation(238, 16);
			Match(input,COMMA,Follow._COMMA_in_synpred49_Scrape1263); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred49_Scrape_fragment", 123);
			LeaveRule("synpred49_Scrape_fragment", 123);
			LeaveRule_synpred49_Scrape_fragment();
		}
	}
	// $ANTLR end synpred49_Scrape

	partial void EnterRule_synpred74_Scrape_fragment();
	partial void LeaveRule_synpred74_Scrape_fragment();

	// $ANTLR start synpred74_Scrape
	private void synpred74_Scrape_fragment()
	{
		EnterRule_synpred74_Scrape_fragment();
		EnterRule("synpred74_Scrape_fragment", 148);
		TraceIn("synpred74_Scrape_fragment", 148);
		try
		{
			// Scrape.g:297:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:297:12: selectArgs COMMA
			{
			DebugLocation(297, 12);
			PushFollow(Follow._selectArgs_in_synpred74_Scrape1717);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(297, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred74_Scrape1719); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_Scrape_fragment", 148);
			LeaveRule("synpred74_Scrape_fragment", 148);
			LeaveRule_synpred74_Scrape_fragment();
		}
	}
	// $ANTLR end synpred74_Scrape

	partial void EnterRule_synpred76_Scrape_fragment();
	partial void LeaveRule_synpred76_Scrape_fragment();

	// $ANTLR start synpred76_Scrape
	private void synpred76_Scrape_fragment()
	{
		EnterRule_synpred76_Scrape_fragment();
		EnterRule("synpred76_Scrape_fragment", 150);
		TraceIn("synpred76_Scrape_fragment", 150);
		try
		{
			// Scrape.g:302:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:302:12: selectArgs COMMA
			{
			DebugLocation(302, 12);
			PushFollow(Follow._selectArgs_in_synpred76_Scrape1766);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(302, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred76_Scrape1768); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred76_Scrape_fragment", 150);
			LeaveRule("synpred76_Scrape_fragment", 150);
			LeaveRule_synpred76_Scrape_fragment();
		}
	}
	// $ANTLR end synpred76_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA14 dfa14;
	private DFA37 dfa37;
	private DFA49 dfa49;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa14 = new DFA14( this, SpecialStateTransition14 );
		dfa37 = new DFA37( this );
		dfa49 = new DFA49( this );
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x12\xFFFF";
		private const string DFA14_eofS =
			"\x1\x2\x11\xFFFF";
		private const string DFA14_minS =
			"\x1\x10\x1\x50\x1\xFFFF\x1\x3B\x1\x50\x1\x11\x2\x38\x1\x3B\x1\x0\x2\x11"+
			"\x1\xFFFF\x1\x11\x1\x38\x1\x11\x2\x0";
		private const string DFA14_maxS =
			"\x1\x82\x1\x50\x1\xFFFF\x1\x75\x1\x50\x1\x54\x1\x38\x1\x67\x1\x75\x1"+
			"\x0\x1\x11\x1\x12\x1\xFFFF\x1\x54\x1\x67\x1\x54\x2\x0";
		private const string DFA14_acceptS =
			"\x2\xFFFF\x1\x2\x9\xFFFF\x1\x1\x5\xFFFF";
		private const string DFA14_specialS =
			"\x9\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\x0}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x25\xFFFF\x1\x2\x16\xFFFF\x3\x2\x6\xFFFF\x2\x2\x1\x1",
				"\x1\x3",
				"",
				"\x1\x5\x39\xFFFF\x1\x4",
				"\x1\x6",
				"\x1\x9\x3E\xFFFF\x1\x7\x3\xFFFF\x1\x8",
				"\x1\xA",
				"\x1\xB\x2E\xFFFF\x1\xB",
				"\x1\x5\x39\xFFFF\x1\x4",
				"\x1\xFFFF",
				"\x1\xD",
				"\x1\xF\x1\xE",
				"",
				"\x1\x10\x42\xFFFF\x1\x8",
				"\x1\xB\x2E\xFFFF\x1\xB",
				"\x1\x11\x42\xFFFF\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "154:41: ( tableHint )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition14(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA14_1 = input.LA(1);
		int index14_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 14, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\xC\xFFFF";
		private const string DFA37_eofS =
			"\xC\xFFFF";
		private const string DFA37_minS =
			"\x1\x3B\x1\x50\x1\x11\x2\x38\x2\xFFFF\x3\x11\x1\x38\x1\x11";
		private const string DFA37_maxS =
			"\x1\x75\x1\x50\x1\x54\x1\x38\x1\x67\x2\xFFFF\x1\x11\x1\x12\x1\x54\x1"+
			"\x67\x1\x54";
		private const string DFA37_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1\x5\xFFFF";
		private const string DFA37_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x2\x39\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x3E\xFFFF\x1\x4\x3\xFFFF\x1\x6",
				"\x1\x7",
				"\x1\x8\x2E\xFFFF\x1\x8",
				"",
				"",
				"\x1\x9",
				"\x1\xB\x1\xA",
				"\x1\x5\x42\xFFFF\x1\x6",
				"\x1\x8\x2E\xFFFF\x1\x8",
				"\x1\x5\x42\xFFFF\x1\x6"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "()* loopback of 266:19: ( hint PIPE )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x17\xFFFF";
		private const string DFA49_eofS =
			"\x2\xFFFF\x4\x8\x1\xFFFF\x1\x8\x6\xFFFF\x2\x8\x1\xFFFF\x4\x8\x1\xFFFF"+
			"\x1\x8";
		private const string DFA49_minS =
			"\x1\x13\x1\x67\x4\x6\x1\x50\x1\x6\x2\xFFFF\x1\x2F\x1\x11\x1\x8\x1\x67"+
			"\x2\x6\x1\x67\x4\x6\x1\x67\x1\x6";
		private const string DFA49_maxS =
			"\x2\x67\x4\x81\x1\x50\x1\x81\x2\xFFFF\x1\x2F\x1\x11\x1\x73\x1\x67\x2"+
			"\x81\x1\x67\x4\x81\x1\x67\x1\x81";
		private const string DFA49_acceptS =
			"\x8\xFFFF\x1\x2\x1\x1\xD\xFFFF";
		private const string DFA49_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x4\x14\xFFFF\x1\x2\x2\xFFFF\x1\x6\x3\xFFFF\x1\x3\x1\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\x2\x14\xFFFF\x1\x2\x5\xFFFF\x1\x1\x13\xFFFF\x1\x2",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x4\xFFFF\x1\xA\x2\xFFFF\x1\x8"+
				"\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\xB",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\xD\xFFFF\x1\xC"+
				"\x8\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"",
				"",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10\x25\xFFFF\x1\x12\x44\xFFFF\x1\x11",
				"\x1\x13",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1D\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x14",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\x7\xFFFF\x1\x15\x2\xFFFF\x1\x8"+
				"\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x16",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xB\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8"
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "()* loopback of 306:4: ( selectArg PLUS )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program237 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program252 = new BitSet(new ulong[]{0xB2800440480000UL,0x380000100000000UL,0x2UL});
		public static readonly BitSet _noBraceBlock_in_program254 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition290 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition292 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition294 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition296 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition299 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _block_in_procedureDefinition301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatment_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable385 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _TABLE_in_truncateTable387 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_truncateTable389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall411 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_procedureCall413 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall415 = new BitSet(new ulong[]{0x1028000000A0000UL,0x8000000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall417 = new BitSet(new ulong[]{0x1028000000A0000UL,0x8000000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList443 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_procedureCallList445 = new BitSet(new ulong[]{0x102800000080000UL,0x8000000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement481 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement483 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement485 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement487 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _proxyTest_in_proxyStatement489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList511 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_proxyList513 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest537 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _TEST_in_proxyTest539 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest541 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest543 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement560 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_whileStatement562 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_whileStatement564 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_whileStatement566 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _block_in_whileStatement568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement590 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement592 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _VAR_in_eachStatement594 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_eachStatement598 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IN_in_eachStatement600 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_eachStatement604 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement606 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _block_in_eachStatement608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock633 = new BitSet(new ulong[]{0xB2800440480002UL,0x380000100000000UL,0x2UL});
		public static readonly BitSet _OPENBRACE_in_block654 = new BitSet(new ulong[]{0xB2800440490000UL,0x380000100000000UL,0x2UL});
		public static readonly BitSet _statement_in_block656 = new BitSet(new ulong[]{0xB2800440490000UL,0x380000100000000UL,0x2UL});
		public static readonly BitSet _CLOSEBRACE_in_block659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression679 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression681 = new BitSet(new ulong[]{0x102800000080000UL});
		public static readonly BitSet _expandVar_in_expandExpression683 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _TO_in_expandExpression685 = new BitSet(new ulong[]{0x102800000080000UL});
		public static readonly BitSet _expandVar_in_expandExpression687 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression689 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _expandBlock_in_expandExpression691 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock716 = new BitSet(new ulong[]{0x102810000090000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _mathExpression_in_expandBlock718 = new BitSet(new ulong[]{0x102810000090000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion769 = new BitSet(new ulong[]{0x2800000080000UL,0x8000010000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadPageExpresssion772 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _tableHint_in_downloadPageExpresssion774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression786 = new BitSet(new ulong[]{0x2800000080000UL,0x8000010000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadImageExpression789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadExpressionArg800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadExpressionArg805 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _sqlStatement_in_downloadExpressionArg808 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadExpressionArg810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_downloadExpressionArg816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference862 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _DOT_in_tableMemberReference864 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement892 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement894 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement896 = new BitSet(new ulong[]{0x102810830080000UL,0x8100012000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement919 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement921 = new BitSet(new ulong[]{0x102810830080000UL,0x8100012000UL,0x10UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator944 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator946 = new BitSet(new ulong[]{0x100010000080000UL,0x8000002000UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1005 = new BitSet(new ulong[]{0x2UL,0x200020UL});
		public static readonly BitSet _set_in_mathExpression1008 = new BitSet(new ulong[]{0x102810000080000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1019 = new BitSet(new ulong[]{0x2UL,0x200020UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1037 = new BitSet(new ulong[]{0x4000082UL});
		public static readonly BitSet _set_in_mathExpressionGroup1040 = new BitSet(new ulong[]{0x102810000080000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1051 = new BitSet(new ulong[]{0x4000082UL});
		public static readonly BitSet _variableReference_in_atom1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_atom1078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1099 = new BitSet(new ulong[]{0x102810000080000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _mathExpression_in_atom1102 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1151 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_insertStatement1153 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1170 = new BitSet(new ulong[]{0x102810000080000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _mathExpression_in_insertStatement1172 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1188 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_insertStatement1190 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatment1217 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_updateStatment1219 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _setArgs_in_updateStatment1221 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _fromStatement_in_updateStatment1223 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _whereStatement_in_updateStatment1226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setArgs1258 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _setArg_in_setArgs1261 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_setArgs1263 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _setArg_in_setArgs1267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_setArg1287 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_setArg1289 = new BitSet(new ulong[]{0x102890000081000UL,0x8000082000UL});
		public static readonly BitSet _selectArgs_in_setArg1291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1315 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1318 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nestedSelectStatement_in_nestedSqlStatement1333 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _fromStatement_in_nestedSqlStatement1336 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _whereStatement_in_nestedSqlStatement1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1352 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolExpression_in_whereStatement1354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1374 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_fromStatement1378 = new BitSet(new ulong[]{0x408800000000002UL});
		public static readonly BitSet _ID_in_fromStatement1382 = new BitSet(new ulong[]{0x408000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1412 = new BitSet(new ulong[]{0x830000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1414 = new BitSet(new ulong[]{0x408800000000002UL,0x0UL,0x4UL});
		public static readonly BitSet _ID_in_fromStatement1416 = new BitSet(new ulong[]{0x408000000000002UL,0x0UL,0x4UL});
		public static readonly BitSet _tableHint_in_fromStatement1419 = new BitSet(new ulong[]{0x408000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1449 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_fromStatement1451 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _nestedSqlStatement_in_fromStatement1453 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_fromStatement1455 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_fromStatement1457 = new BitSet(new ulong[]{0x408000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_tableHint1488 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_tableHint1490 = new BitSet(new ulong[]{0x800000000000000UL,0x20000000000000UL});
		public static readonly BitSet _hint_in_tableHint1493 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _PIPE_in_tableHint1495 = new BitSet(new ulong[]{0x800000000000000UL,0x20000000000000UL});
		public static readonly BitSet _hint_in_tableHint1499 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_tableHint1501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THREAD_in_hint1517 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_hint1519 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _INT_in_hint1521 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JS_in_hint1536 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_hint1539 = new BitSet(new ulong[]{0x100000000000000UL,0x8000000000UL});
		public static readonly BitSet _jsArg_in_hint1542 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_hint1544 = new BitSet(new ulong[]{0x100000000000000UL,0x8000000000UL});
		public static readonly BitSet _jsArg_in_hint1548 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1589 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1593 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _ID_in_innerJoinStatement1597 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_innerJoinStatement1600 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1602 = new BitSet(new ulong[]{0x408000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1632 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_innerJoinStatement1634 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _nestedSqlStatement_in_innerJoinStatement1636 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_innerJoinStatement1638 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1640 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_innerJoinStatement1642 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1644 = new BitSet(new ulong[]{0x408000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_tableGenerationClause1677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_tableGenerationClause1682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_tableGenerationClause1687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1714 = new BitSet(new ulong[]{0x102890000081000UL,0x8000082000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1717 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_selectStatement1719 = new BitSet(new ulong[]{0x102890000081000UL,0x8000082000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1737 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_nestedSelectStatement1763 = new BitSet(new ulong[]{0x102890000081000UL,0x8000082000UL});
		public static readonly BitSet _selectArgs_in_nestedSelectStatement1766 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_nestedSelectStatement1768 = new BitSet(new ulong[]{0x102890000081000UL,0x8000082000UL});
		public static readonly BitSet _selectArgs_in_nestedSelectStatement1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1793 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _PLUS_in_selectArgs1795 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _selectArg_in_selectArgs1799 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AS_in_selectArgs1802 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_selectArgs1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1827 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AS_in_selectArgs1830 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_selectArgs1832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1863 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1865 = new BitSet(new ulong[]{0x180000000UL,0x2000000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1869 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1871 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_caseStatement1875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1892 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _selectArg_in_caseStatement1894 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1896 = new BitSet(new ulong[]{0x180000000UL,0x2000000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1900 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1902 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_caseStatement1906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1950 = new BitSet(new ulong[]{0x100010000000000UL,0x8000002000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1952 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1954 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1977 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1979 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1981 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression2004 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _OR_in_boolExpression2007 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _andExpression_in_boolExpression2010 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _boolTerm_in_andExpression2024 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression2027 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolTerm_in_andExpression2030 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm2045 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm2047 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm2049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_boolTerm2067 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _DOT_in_boolTerm2069 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _NODES_in_boolTerm2071 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm2073 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm2075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm2098 = new BitSet(new ulong[]{0xB000300200000002UL,0x1800UL});
		public static readonly BitSet _boolOperator_in_boolTerm2101 = new BitSet(new ulong[]{0x102890000080000UL,0x8000082000UL});
		public static readonly BitSet _selectArg_in_boolTerm2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm2112 = new BitSet(new ulong[]{0x102890000080000UL,0x8000092400UL});
		public static readonly BitSet _boolExpression_in_boolTerm2115 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm2117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg2175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg2182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg2187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveFunction_in_selectArg2192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GETDATE_in_primitiveFunction2203 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_primitiveFunction2206 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_primitiveFunction2209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable2221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable2233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable2238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable2243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement2255 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement2257 = new BitSet(new ulong[]{0x2UL,0x400000000008UL});
		public static readonly BitSet _takeStatement_in_pickStatement2259 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _matchStatement_in_pickStatement2262 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _TAKE_in_takeStatement2288 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement2290 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement2292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2305 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2318 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _HTML_in_takeStatement2320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement2338 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement2340 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement2342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement2365 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement2367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2388 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _FILE_in_createTableStatement2390 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2392 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2394 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2396 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2399 = new BitSet(new ulong[]{0x0UL,0x4UL,0x4UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement2401 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement2404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2425 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _BUFFER_in_createTableStatement2427 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2429 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2431 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2433 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2452 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _MSSQL_in_createTableStatement2454 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2456 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2458 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2460 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2463 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _sqlTableWithStatement_in_createTableStatement2465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation2489 = new BitSet(new ulong[]{0x102810000080000UL,0x8000012000UL,0x10UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation2492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_sqlTableWithStatement2504 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_sqlTableWithStatement2506 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _sqlTableWithVariablesStatement_in_sqlTableWithStatement2508 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_sqlTableWithStatement2510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2531 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_sqlTableWithVariablesStatement2533 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_sqlTableWithVariableStatement2554 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_sqlTableWithVariableStatement2563 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_sqlTableWithVariableStatement2566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement2577 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2579 = new BitSet(new ulong[]{0x2000020000UL,0x80000000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2581 = new BitSet(new ulong[]{0x2000020000UL,0x80000000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2607 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2609 = new BitSet(new ulong[]{0x2000000000UL,0x80000000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2629 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2638 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2653 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2655 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2680 = new BitSet(new ulong[]{0x201020000800000UL,0x4000000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableHint_in_synpred23_Scrape774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred30_Scrape964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setArg_in_synpred49_Scrape1261 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred49_Scrape1263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred74_Scrape1717 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred74_Scrape1719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred76_Scrape1766 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred76_Scrape1768 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
