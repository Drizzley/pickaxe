//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2017-04-08 20:52:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "AS", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CONNECTIONSTRING", "CREATE", "DATETIME", "DBTABLE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FL", "FLOAT", "FROM", "GETDATE", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JAVASCRIPT_CODE", "JOIN", "JS", "LAMBDA", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LIKE", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "MSSQL", "MSSQL_TABLE", "NESTED_SELECT_STATEMENT", "NEWLINE", "NODES", "NOTEQUAL", "NOTLIKE", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PIPE", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "SET", "STRING", "STRING_LITERAL", "STRING_LITERAL_QUOTE", "TABLE", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "THREAD", "TO", "TRUNCATE", "UPDATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WHILE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__135=135;
	public const int T__136=136;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int AS=6;
	public const int ASTERISK=7;
	public const int ATTRIBUTE=8;
	public const int BLOCK=9;
	public const int BUFFER=10;
	public const int BUFFER_TABLE=11;
	public const int CASE=12;
	public const int CASE_BOOL=13;
	public const int CASE_EXPRESSION=14;
	public const int CASE_VAR=15;
	public const int CLOSEBRACE=16;
	public const int CLOSEPAREN=17;
	public const int COMMA=18;
	public const int COMMAND_VAR=19;
	public const int COMMENT=20;
	public const int CONNECTIONSTRING=21;
	public const int CREATE=22;
	public const int DATETIME=23;
	public const int DBTABLE=24;
	public const int DIGIT=25;
	public const int DIV=26;
	public const int DOT=27;
	public const int DOWNLOAD_IMAGE=28;
	public const int DOWNLOAD_PAGE=29;
	public const int EACH=30;
	public const int ELSE=31;
	public const int END=32;
	public const int EQUALS=33;
	public const int EXEC=34;
	public const int EXPAND=35;
	public const int EXPAND_INTERATION_VARIABLE=36;
	public const int FIELD_TERMINATOR=37;
	public const int FILE=38;
	public const int FILE_TABLE=39;
	public const int FL=40;
	public const int FLOAT=41;
	public const int FROM=42;
	public const int GETDATE=43;
	public const int GREATERTHAN=44;
	public const int GREATERTHANEQUAL=45;
	public const int HTML=46;
	public const int ID=47;
	public const int IDENTITY=48;
	public const int IDENTITY_VAR=49;
	public const int IN=50;
	public const int INNER_JOIN=51;
	public const int INSERT_DIRECTORY=52;
	public const int INSERT_INTO=53;
	public const int INSERT_INTO_DIRECTORY=54;
	public const int INSERT_OVERWRITE=55;
	public const int INT=56;
	public const int INTEGER=57;
	public const int JAVASCRIPT_CODE=58;
	public const int JOIN=59;
	public const int JS=60;
	public const int LAMBDA=61;
	public const int LESSTHAN=62;
	public const int LESSTHANEQUAL=63;
	public const int LETTER=64;
	public const int LIKE=65;
	public const int LINE_COMMENT_DASH=66;
	public const int LINE_COMMENT_SLASH=67;
	public const int LOCATION=68;
	public const int MATCH=69;
	public const int MEMBER_REFERENCE=70;
	public const int MINIS=71;
	public const int MSSQL=72;
	public const int MSSQL_TABLE=73;
	public const int NESTED_SELECT_STATEMENT=74;
	public const int NEWLINE=75;
	public const int NODES=76;
	public const int NOTEQUAL=77;
	public const int NOTLIKE=78;
	public const int NULL=79;
	public const int NULL_OPERATOR=80;
	public const int OPENBRACE=81;
	public const int OPENPAREN=82;
	public const int OR=83;
	public const int OTHERCHARS=84;
	public const int PICK=85;
	public const int PIPE=86;
	public const int PLUS=87;
	public const int POST_PICK=88;
	public const int PRE_PICK=89;
	public const int PROCEDURE=90;
	public const int PROGRAM=91;
	public const int PROXIES=92;
	public const int PROXY_LIST=93;
	public const int QUOTE=94;
	public const int REPLACE=95;
	public const int ROW_REFERENCE=96;
	public const int ROW_TERMINATOR=97;
	public const int SELECT=98;
	public const int SELECT_ALL=99;
	public const int SELECT_ARG=100;
	public const int SELECT_ID=101;
	public const int SELECT_STATEMENT=102;
	public const int SET=103;
	public const int STRING=104;
	public const int STRING_LITERAL=105;
	public const int STRING_LITERAL_QUOTE=106;
	public const int TABLE=107;
	public const int TABLE_ALIAS=108;
	public const int TABLE_COLUMN_ARG=109;
	public const int TABLE_COLUMN_ARGS=110;
	public const int TABLE_MEMBER_REFERENCE=111;
	public const int TABLE_VARIABLE_REFERENCE=112;
	public const int TAKE=113;
	public const int TAKE_ATTRIBUTE=114;
	public const int TAKE_HTML=115;
	public const int TAKE_TEXT=116;
	public const int TEST=117;
	public const int TEXT=118;
	public const int THEN=119;
	public const int THREAD=120;
	public const int TO=121;
	public const int TRUNCATE=122;
	public const int UPDATE=123;
	public const int VAR=124;
	public const int VARIABLE_ASSIGNMENT=125;
	public const int VARIABLE_DECLARATION=126;
	public const int VARIABLE_REFERENCE=127;
	public const int WHEN=128;
	public const int WHEN_BOOL_STATEMENT=129;
	public const int WHEN_LITERAL_STATEMENT=130;
	public const int WHERE=131;
	public const int WHILE=132;
	public const int WITH=133;
	public const int WS=134;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:67:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(67, 1);
		try
		{
			// Scrape.g:68:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case UPDATE:
			case VAR:
			case WHILE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:68:4: noBraceBlock EOF
				{
				DebugLocation(68, 4);
				PushFollow(Follow._noBraceBlock_in_program242);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(68, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program244); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 68:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(68, 24);
					// Scrape.g:68:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(68, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(68, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:69:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(69, 4);
				PushFollow(Follow._proxyStatement_in_program257);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(69, 19);
				PushFollow(Follow._noBraceBlock_in_program259);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(69, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program261); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: proxyStatement, noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 69:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(69, 39);
					// Scrape.g:69:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(69, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(69, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(69, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:70:4: procedureDefinition
				{
				DebugLocation(70, 4);
				PushFollow(Follow._procedureDefinition_in_program276);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 70:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(70, 27);
					// Scrape.g:70:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(70, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(70, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:73:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(73, 1);
		try
		{
			// Scrape.g:74:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:74:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(74, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition295); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(74, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition297); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(74, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition299); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(74, 27);
			// Scrape.g:74:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:74:27: tableColumnArgs
					{
					DebugLocation(74, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition301);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(74, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition304); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(74, 55);
			PushFollow(Follow._block_in_procedureDefinition306);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: PROCEDURE, tableColumnArgs, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 74:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(74, 64);
				// Scrape.g:74:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(74, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(74, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(74, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(74, 85);
				// Scrape.g:74:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(74, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:77:1: statement : ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(77, 1);
		try
		{
			// Scrape.g:78:2: ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable )
			int alt3=10;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case UPDATE:
				{
				alt3 = 3;
				}
				break;
			case VAR:
				{
				alt3 = 4;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 5;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 6;
				}
				break;
			case EACH:
				{
				alt3 = 7;
				}
				break;
			case WHILE:
				{
				alt3 = 8;
				}
				break;
			case EXEC:
				{
				alt3 = 9;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:78:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._createTableStatement_in_statement334);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:79:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._sqlStatement_in_statement339);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:80:4: updateStatment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._updateStatment_in_statement344);
				updateStatment15=updateStatment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, updateStatment15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:81:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement349);
				variableDeclarationStatement16=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:82:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement354);
				variableAssignmentStatement17=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:83:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._insertStatement_in_statement359);
				insertStatement18=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:84:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._eachStatement_in_statement364);
				eachStatement19=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:85:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(85, 4);
				PushFollow(Follow._whileStatement_in_statement369);
				whileStatement20=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement20.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Scrape.g:86:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(86, 4);
				PushFollow(Follow._procedureCall_in_statement374);
				procedureCall21=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall21.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Scrape.g:87:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(87, 4);
				PushFollow(Follow._truncateTable_in_statement379);
				truncateTable22=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable22.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:90:1: truncateTable : TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE23 = default(CommonToken);
		CommonToken TABLE24 = default(CommonToken);
		CommonToken ID25 = default(CommonToken);

		CommonTree TRUNCATE23_tree = default(CommonTree);
		CommonTree TABLE24_tree = default(CommonTree);
		CommonTree ID25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(90, 1);
		try
		{
			// Scrape.g:91:2: ( TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:91:4: TRUNCATE TABLE ID
			{
			DebugLocation(91, 4);
			TRUNCATE23=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable390); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE23);

			DebugLocation(91, 13);
			TABLE24=(CommonToken)Match(input,TABLE,Follow._TABLE_in_truncateTable392); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE24);

			DebugLocation(91, 19);
			ID25=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable394); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID25);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 91:22: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(91, 25);
				// Scrape.g:91:25: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(91, 27);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(91, 36);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID25));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:95:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC26 = default(CommonToken);
		CommonToken ID27 = default(CommonToken);
		CommonToken OPENPAREN28 = default(CommonToken);
		CommonToken CLOSEPAREN30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC26_tree = default(CommonTree);
		CommonTree ID27_tree = default(CommonTree);
		CommonTree OPENPAREN28_tree = default(CommonTree);
		CommonTree CLOSEPAREN30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(95, 1);
		try
		{
			// Scrape.g:96:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:96:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(96, 5);
			EXEC26=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall416); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC26);

			DebugLocation(96, 10);
			ID27=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID27);

			DebugLocation(96, 13);
			OPENPAREN28=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall420); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN28);

			DebugLocation(96, 23);
			// Scrape.g:96:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:96:23: procedureCallList
					{
					DebugLocation(96, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall422);
					procedureCallList29=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList29.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(96, 42);
			CLOSEPAREN30=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall425); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN30);



			{
			// AST REWRITE
			// elements: procedureCallList, ID, EXEC
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 96:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(96, 56);
				// Scrape.g:96:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(96, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(96, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(96, 66);
				// Scrape.g:96:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(96, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:99:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs33 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(99, 1);
		try
		{
			// Scrape.g:100:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:100:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(100, 4);
			// Scrape.g:100:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:100:5: callArgs COMMA
					{
					DebugLocation(100, 5);
					PushFollow(Follow._callArgs_in_procedureCallList448);
					callArgs31=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs31.Tree);
					DebugLocation(100, 14);
					COMMA32=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList450); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA32);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(100, 22);
			PushFollow(Follow._callArgs_in_procedureCallList454);
			callArgs33=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs33.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 100:31: -> ( callArgs )*
			{
				DebugLocation(100, 34);
				// Scrape.g:100:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(100, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:103:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(103, 1);
		try
		{
			// Scrape.g:104:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:104:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(104, 4);
				PushFollow(Follow._expandVar_in_callArgs470);
				expandVar34=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:105:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(105, 4);
				STRING_LITERAL35=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs475); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL35_tree = (CommonTree)adaptor.Create(STRING_LITERAL35);
				adaptor.AddChild(root_0, STRING_LITERAL35_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:108:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES36 = default(CommonToken);
		CommonToken OPENPAREN37 = default(CommonToken);
		CommonToken CLOSEPAREN39 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES36_tree = default(CommonTree);
		CommonTree OPENPAREN37_tree = default(CommonTree);
		CommonTree CLOSEPAREN39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(108, 1);
		try
		{
			// Scrape.g:109:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:109:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(109, 4);
			PROXIES36=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement486); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES36);

			DebugLocation(109, 12);
			OPENPAREN37=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement488); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN37);

			DebugLocation(109, 22);
			PushFollow(Follow._proxyList_in_proxyStatement490);
			proxyList38=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList38.Tree);
			DebugLocation(109, 32);
			CLOSEPAREN39=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement492); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN39);

			DebugLocation(109, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement494);
			proxyTest40=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest40.Tree);


			{
			// AST REWRITE
			// elements: proxyList, PROXIES, proxyTest
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 109:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(109, 56);
				// Scrape.g:109:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(109, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(109, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(109, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:112:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL41 = default(CommonToken);
		CommonToken COMMA42 = default(CommonToken);
		CommonToken STRING_LITERAL43 = default(CommonToken);

		CommonTree STRING_LITERAL41_tree = default(CommonTree);
		CommonTree COMMA42_tree = default(CommonTree);
		CommonTree STRING_LITERAL43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(112, 1);
		try
		{
			// Scrape.g:113:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:113:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(113, 4);
			// Scrape.g:113:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:113:5: STRING_LITERAL COMMA
					{
					DebugLocation(113, 5);
					STRING_LITERAL41=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList516); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL41);

					DebugLocation(113, 20);
					COMMA42=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList518); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA42);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(113, 28);
			STRING_LITERAL43=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList522); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL43);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 113:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(113, 46);
				// Scrape.g:113:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(113, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(113, 59);
				// Scrape.g:113:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(113, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:116:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH44 = default(CommonToken);
		CommonToken TEST45 = default(CommonToken);
		CommonToken OPENBRACE46 = default(CommonToken);
		CommonToken CLOSEBRACE48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH44_tree = default(CommonTree);
		CommonTree TEST45_tree = default(CommonTree);
		CommonTree OPENBRACE46_tree = default(CommonTree);
		CommonTree CLOSEBRACE48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(116, 1);
		try
		{
			// Scrape.g:117:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:117:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(117, 4);
			WITH44=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest542); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH44);

			DebugLocation(117, 9);
			TEST45=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest544); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST45);

			DebugLocation(117, 14);
			OPENBRACE46=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest546); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE46);

			DebugLocation(117, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest548);
			sqlStatement47=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement47.Tree);
			DebugLocation(117, 37);
			CLOSEBRACE48=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest550); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE48);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 117:48: -> sqlStatement
			{
				DebugLocation(117, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Scrape.g:120:1: whileStatement : WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 11);
		TraceIn("whileStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHILE49 = default(CommonToken);
		CommonToken OPENPAREN50 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		CommonToken CLOSEPAREN52 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHILE49_tree = default(CommonTree);
		CommonTree OPENPAREN50_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		CommonTree CLOSEPAREN52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(120, 1);
		try
		{
			// Scrape.g:121:2: ( WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) )
			DebugEnterAlt(1);
			// Scrape.g:121:4: WHILE OPENPAREN ID CLOSEPAREN block
			{
			DebugLocation(121, 4);
			WHILE49=(CommonToken)Match(input,WHILE,Follow._WHILE_in_whileStatement565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE49);

			DebugLocation(121, 10);
			OPENPAREN50=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_whileStatement567); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN50);

			DebugLocation(121, 20);
			ID51=(CommonToken)Match(input,ID,Follow._ID_in_whileStatement569); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID51);

			DebugLocation(121, 23);
			CLOSEPAREN52=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_whileStatement571); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN52);

			DebugLocation(121, 34);
			PushFollow(Follow._block_in_whileStatement573);
			block53=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block53.Tree);


			{
			// AST REWRITE
			// elements: block, WHILE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 121:40: -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
			{
				DebugLocation(121, 43);
				// Scrape.g:121:43: ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(121, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(121, 51);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID51));
				DebugLocation(121, 81);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 11);
			LeaveRule("whileStatement", 11);
			LeaveRule_whileStatement();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:124:1: eachStatement : EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 12);
		TraceIn("eachStatement", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken VAR56 = default(CommonToken);
		CommonToken IN57 = default(CommonToken);
		CommonToken CLOSEPAREN58 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree VAR56_tree = default(CommonTree);
		CommonTree IN57_tree = default(CommonTree);
		CommonTree CLOSEPAREN58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(124, 1);
		try
		{
			// Scrape.g:125:2: ( EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:125:4: EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(125, 4);
			EACH54=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement595); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH54);

			DebugLocation(125, 9);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement597); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(125, 19);
			VAR56=(CommonToken)Match(input,VAR,Follow._VAR_in_eachStatement599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR56);

			DebugLocation(125, 24);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement603); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(125, 28);
			IN57=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement605); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN57);

			DebugLocation(125, 32);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement609); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(125, 36);
			CLOSEPAREN58=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement611); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN58);

			DebugLocation(125, 47);
			PushFollow(Follow._block_in_eachStatement613);
			block59=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block59.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 125:53: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(125, 56);
				// Scrape.g:125:56: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(125, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(125, 63);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(125, 88);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(125, 117);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 12);
			LeaveRule("eachStatement", 12);
			LeaveRule_eachStatement();
		}
		DebugLocation(126, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:128:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 13);
		TraceIn("noBraceBlock", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(128, 1);
		try
		{
			// Scrape.g:129:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:129:4: ( statement )*
			{
			DebugLocation(129, 4);
			// Scrape.g:129:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)||LA8_1==WHILE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:129:4: statement
					{
					DebugLocation(129, 4);
					PushFollow(Follow._statement_in_noBraceBlock638);
					statement60=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement60.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 129:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(129, 18);
				// Scrape.g:129:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(129, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(129, 26);
				// Scrape.g:129:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(129, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 13);
			LeaveRule("noBraceBlock", 13);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:132:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 14);
		TraceIn("block", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(132, 1);
		try
		{
			// Scrape.g:133:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:133:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(133, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block659); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(133, 14);
			// Scrape.g:133:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)||LA9_1==WHILE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:133:14: statement
					{
					DebugLocation(133, 14);
					PushFollow(Follow._statement_in_block661);
					statement62=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement62.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(133, 25);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block664); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 133:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(133, 39);
				// Scrape.g:133:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(133, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(133, 47);
				// Scrape.g:133:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(133, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 14);
			LeaveRule("block", 14);
			LeaveRule_block();
		}
		DebugLocation(134, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:136:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 15);
		TraceIn("expandExpression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND64 = default(CommonToken);
		CommonToken OPENPAREN65 = default(CommonToken);
		CommonToken TO67 = default(CommonToken);
		CommonToken CLOSEPAREN69 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND64_tree = default(CommonTree);
		CommonTree OPENPAREN65_tree = default(CommonTree);
		CommonTree TO67_tree = default(CommonTree);
		CommonTree CLOSEPAREN69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(136, 1);
		try
		{
			// Scrape.g:137:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:137:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(137, 4);
			EXPAND64=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND64);

			DebugLocation(137, 11);
			OPENPAREN65=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression686); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN65);

			DebugLocation(137, 21);
			PushFollow(Follow._expandVar_in_expandExpression688);
			expandVar66=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar66.Tree);
			DebugLocation(137, 31);
			TO67=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression690); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO67);

			DebugLocation(137, 34);
			PushFollow(Follow._expandVar_in_expandExpression692);
			expandVar68=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar68.Tree);
			DebugLocation(137, 44);
			CLOSEPAREN69=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression694); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN69);

			DebugLocation(137, 55);
			// Scrape.g:137:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:137:55: expandBlock
					{
					DebugLocation(137, 55);
					PushFollow(Follow._expandBlock_in_expandExpression696);
					expandBlock70=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock70.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandVar, EXPAND, expandBlock, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 137:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(137, 71);
				// Scrape.g:137:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(137, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(137, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(137, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(137, 100);
				// Scrape.g:137:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(137, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 15);
			LeaveRule("expandExpression", 15);
			LeaveRule_expandExpression();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:140:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 16);
		TraceIn("expandBlock", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE71 = default(CommonToken);
		CommonToken CLOSEBRACE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE71_tree = default(CommonTree);
		CommonTree CLOSEBRACE73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(140, 1);
		try
		{
			// Scrape.g:141:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:141:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(141, 4);
			OPENBRACE71=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock721); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE71);

			DebugLocation(141, 14);
			// Scrape.g:141:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==FL||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==135))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:141:14: mathExpression
					{
					DebugLocation(141, 14);
					PushFollow(Follow._mathExpression_in_expandBlock723);
					mathExpression72=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression72.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(141, 30);
			CLOSEBRACE73=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock726); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE73);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 141:41: -> ( mathExpression )*
			{
				DebugLocation(141, 44);
				// Scrape.g:141:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(141, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 16);
			LeaveRule("expandBlock", 16);
			LeaveRule_expandBlock();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:144:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 17);
		TraceIn("expandVar", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(144, 1);
		try
		{
			// Scrape.g:145:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:145:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(145, 4);
				INT74=(CommonToken)Match(input,INT,Follow._INT_in_expandVar742); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT74_tree = (CommonTree)adaptor.Create(INT74);
				adaptor.AddChild(root_0, INT74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:146:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(146, 4);
				PushFollow(Follow._variableReference_in_expandVar747);
				variableReference75=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference75.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 17);
			LeaveRule("expandVar", 17);
			LeaveRule_expandVar();
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:149:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 18);
		TraceIn("downloadExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(149, 1);
		try
		{
			// Scrape.g:150:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:150:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(150, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression758);
				downloadPageExpresssion76=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion76.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:151:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression763);
				downloadImageExpression77=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression77.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 18);
			LeaveRule("downloadExpression", 18);
			LeaveRule_downloadExpression();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:154:1: downloadPageExpresssion : DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ( javascriptCode )? ;
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 19);
		TraceIn("downloadPageExpresssion", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> javascriptCode81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(154, 1);
		try
		{
			// Scrape.g:155:2: ( DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ( javascriptCode )? )
			DebugEnterAlt(1);
			// Scrape.g:155:4: DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ( javascriptCode )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(155, 17);
			DOWNLOAD_PAGE78=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion774); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_PAGE78_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE78);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE78_tree, root_0);
			}
			DebugLocation(155, 19);
			PushFollow(Follow._downloadExpressionArg_in_downloadPageExpresssion777);
			downloadExpressionArg79=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg79.Tree);
			DebugLocation(155, 41);
			// Scrape.g:155:41: ( tableHint )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:155:41: tableHint
				{
				DebugLocation(155, 41);
				PushFollow(Follow._tableHint_in_downloadPageExpresssion779);
				tableHint80=tableHint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableHint80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(155, 52);
			// Scrape.g:155:52: ( javascriptCode )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==LAMBDA))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:155:52: javascriptCode
				{
				DebugLocation(155, 52);
				PushFollow(Follow._javascriptCode_in_downloadPageExpresssion782);
				javascriptCode81=javascriptCode();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, javascriptCode81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 19);
			LeaveRule("downloadPageExpresssion", 19);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_javascriptCode();
	partial void LeaveRule_javascriptCode();
	// $ANTLR start "javascriptCode"
	// Scrape.g:158:1: javascriptCode : LAMBDA OPENPAREN STRING_LITERAL_QUOTE CLOSEPAREN -> ^( JAVASCRIPT_CODE STRING_LITERAL_QUOTE ) ;
	[GrammarRule("javascriptCode")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> javascriptCode()
	{
		EnterRule_javascriptCode();
		EnterRule("javascriptCode", 20);
		TraceIn("javascriptCode", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LAMBDA82 = default(CommonToken);
		CommonToken OPENPAREN83 = default(CommonToken);
		CommonToken STRING_LITERAL_QUOTE84 = default(CommonToken);
		CommonToken CLOSEPAREN85 = default(CommonToken);

		CommonTree LAMBDA82_tree = default(CommonTree);
		CommonTree OPENPAREN83_tree = default(CommonTree);
		CommonTree STRING_LITERAL_QUOTE84_tree = default(CommonTree);
		CommonTree CLOSEPAREN85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_LAMBDA=new RewriteRuleITokenStream(adaptor,"token LAMBDA");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_STRING_LITERAL_QUOTE=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL_QUOTE");
		try { DebugEnterRule(GrammarFileName, "javascriptCode");
		DebugLocation(158, 1);
		try
		{
			// Scrape.g:159:2: ( LAMBDA OPENPAREN STRING_LITERAL_QUOTE CLOSEPAREN -> ^( JAVASCRIPT_CODE STRING_LITERAL_QUOTE ) )
			DebugEnterAlt(1);
			// Scrape.g:159:4: LAMBDA OPENPAREN STRING_LITERAL_QUOTE CLOSEPAREN
			{
			DebugLocation(159, 4);
			LAMBDA82=(CommonToken)Match(input,LAMBDA,Follow._LAMBDA_in_javascriptCode794); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LAMBDA.Add(LAMBDA82);

			DebugLocation(159, 11);
			OPENPAREN83=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_javascriptCode796); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN83);

			DebugLocation(159, 21);
			STRING_LITERAL_QUOTE84=(CommonToken)Match(input,STRING_LITERAL_QUOTE,Follow._STRING_LITERAL_QUOTE_in_javascriptCode798); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL_QUOTE.Add(STRING_LITERAL_QUOTE84);

			DebugLocation(159, 42);
			CLOSEPAREN85=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_javascriptCode800); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN85);



			{
			// AST REWRITE
			// elements: STRING_LITERAL_QUOTE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 159:53: -> ^( JAVASCRIPT_CODE STRING_LITERAL_QUOTE )
			{
				DebugLocation(159, 56);
				// Scrape.g:159:56: ^( JAVASCRIPT_CODE STRING_LITERAL_QUOTE )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(159, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(JAVASCRIPT_CODE, "JAVASCRIPT_CODE"), root_1);

				DebugLocation(159, 74);
				adaptor.AddChild(root_1, stream_STRING_LITERAL_QUOTE.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("javascriptCode", 20);
			LeaveRule("javascriptCode", 20);
			LeaveRule_javascriptCode();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "javascriptCode"); }
		return retval;

	}
	// $ANTLR end "javascriptCode"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:162:1: downloadImageExpression : DOWNLOAD_IMAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 21);
		TraceIn("downloadImageExpression", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE86 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(162, 1);
		try
		{
			// Scrape.g:163:2: ( DOWNLOAD_IMAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:163:4: DOWNLOAD_IMAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(163, 18);
			DOWNLOAD_IMAGE86=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression819); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_IMAGE86_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE86);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE86_tree, root_0);
			}
			DebugLocation(163, 20);
			PushFollow(Follow._downloadExpressionArg_in_downloadImageExpression822);
			downloadExpressionArg87=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg87.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 21);
			LeaveRule("downloadImageExpression", 21);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_downloadExpressionArg();
	partial void LeaveRule_downloadExpressionArg();
	// $ANTLR start "downloadExpressionArg"
	// Scrape.g:166:1: downloadExpressionArg : ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference );
	[GrammarRule("downloadExpressionArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg()
	{
		EnterRule_downloadExpressionArg();
		EnterRule("downloadExpressionArg", 22);
		TraceIn("downloadExpressionArg", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL88 = default(CommonToken);
		CommonToken OPENPAREN89 = default(CommonToken);
		CommonToken CLOSEPAREN91 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL88_tree = default(CommonTree);
		CommonTree OPENPAREN89_tree = default(CommonTree);
		CommonTree CLOSEPAREN91_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadExpressionArg");
		DebugLocation(166, 1);
		try
		{
			// Scrape.g:167:2: ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference )
			int alt16=3;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case STRING_LITERAL:
				{
				alt16 = 1;
				}
				break;
			case OPENPAREN:
				{
				alt16 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:167:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 4);
				STRING_LITERAL88=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadExpressionArg833); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL88_tree = (CommonTree)adaptor.Create(STRING_LITERAL88);
				adaptor.AddChild(root_0, STRING_LITERAL88_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:168:4: OPENPAREN ! sqlStatement CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 13);
				OPENPAREN89=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadExpressionArg838); if (state.failed) return retval;
				DebugLocation(168, 15);
				PushFollow(Follow._sqlStatement_in_downloadExpressionArg841);
				sqlStatement90=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement90.Tree);
				DebugLocation(168, 38);
				CLOSEPAREN91=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadExpressionArg843); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:169:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._variableReference_in_downloadExpressionArg849);
				variableReference92=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference92.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpressionArg", 22);
			LeaveRule("downloadExpressionArg", 22);
			LeaveRule_downloadExpressionArg();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpressionArg"); }
		return retval;

	}
	// $ANTLR end "downloadExpressionArg"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:172:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 23);
		TraceIn("variableReference", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID93 = default(CommonToken);
		CommonToken COMMAND_VAR94 = default(CommonToken);
		CommonToken IDENTITY_VAR95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID93_tree = default(CommonTree);
		CommonTree COMMAND_VAR94_tree = default(CommonTree);
		CommonTree IDENTITY_VAR95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(172, 1);
		try
		{
			// Scrape.g:173:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt17=4;
			try { DebugEnterDecision(17, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA17_2 = input.LA(2);

				if ((LA17_2==DOT))
				{
					alt17 = 4;
				}
				else if ((LA17_2==EOF||LA17_2==ASTERISK||(LA17_2>=CLOSEBRACE && LA17_2<=COMMAND_VAR)||LA17_2==CREATE||LA17_2==DIV||LA17_2==EACH||(LA17_2>=EQUALS && LA17_2<=EXEC)||LA17_2==FL||LA17_2==ID||LA17_2==IDENTITY_VAR||(LA17_2>=INNER_JOIN && LA17_2<=INSERT_INTO)||(LA17_2>=INSERT_OVERWRITE && LA17_2<=INT)||LA17_2==JOIN||LA17_2==LAMBDA||LA17_2==MINIS||LA17_2==NULL||LA17_2==OPENPAREN||LA17_2==PLUS||LA17_2==SELECT||LA17_2==STRING_LITERAL||(LA17_2>=TO && LA17_2<=VAR)||(LA17_2>=WHERE && LA17_2<=WITH)||LA17_2==135))
				{
					alt17 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt17 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt17 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:173:4: ID
				{
				DebugLocation(173, 4);
				ID93=(CommonToken)Match(input,ID,Follow._ID_in_variableReference861); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID93);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 173:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(173, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID93));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:174:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				COMMAND_VAR94=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference871); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR94_tree = (CommonTree)adaptor.Create(COMMAND_VAR94);
				adaptor.AddChild(root_0, COMMAND_VAR94_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:175:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				IDENTITY_VAR95=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference876); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR95_tree = (CommonTree)adaptor.Create(IDENTITY_VAR95);
				adaptor.AddChild(root_0, IDENTITY_VAR95_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:176:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference881);
				tableMemberReference96=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference96.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 23);
			LeaveRule("variableReference", 23);
			LeaveRule_variableReference();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:179:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 24);
		TraceIn("tableMemberReference", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT97 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT97_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(179, 1);
		try
		{
			// Scrape.g:180:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:180:4: t= ID DOT m= ID
			{
			DebugLocation(180, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference895); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(180, 9);
			DOT97=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference897); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT97);

			DebugLocation(180, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference901); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 180:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(180, 21);
				// Scrape.g:180:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(180, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(180, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(180, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 24);
			LeaveRule("tableMemberReference", 24);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:183:1: variableDeclarationStatement : VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 25);
		TraceIn("variableDeclarationStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR98 = default(CommonToken);
		CommonToken ID99 = default(CommonToken);
		CommonToken EQUALS100 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR98_tree = default(CommonTree);
		CommonTree ID99_tree = default(CommonTree);
		CommonTree EQUALS100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(183, 1);
		try
		{
			// Scrape.g:184:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:184:4: VAR ID EQUALS assignmentExpression
			{
			DebugLocation(184, 4);
			VAR98=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement925); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR98);

			DebugLocation(184, 8);
			ID99=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement927); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID99);

			DebugLocation(184, 11);
			EQUALS100=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement929); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS100);

			DebugLocation(184, 18);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement931);
			assignmentExpression101=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression101.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 184:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(184, 42);
				// Scrape.g:184:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(184, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(184, 65);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(184, 68);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 25);
			LeaveRule("variableDeclarationStatement", 25);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:187:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 26);
		TraceIn("variableAssignmentStatement", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS103 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(187, 1);
		try
		{
			// Scrape.g:188:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:188:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(188, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement952);
			variableReference102=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference102.Tree);
			DebugLocation(188, 22);
			EQUALS103=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement954); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS103);

			DebugLocation(188, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement956);
			assignmentExpression104=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression104.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 188:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(188, 53);
				// Scrape.g:188:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(188, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(188, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(188, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 26);
			LeaveRule("variableAssignmentStatement", 26);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:191:1: nullOperator : COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 27);
		TraceIn("nullOperator", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMAND_VAR105 = default(CommonToken);
		CommonToken NULL_OPERATOR106 = default(CommonToken);
		CommonToken COMMAND_VAR107 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMAND_VAR105_tree = default(CommonTree);
		CommonTree NULL_OPERATOR106_tree = default(CommonTree);
		CommonTree COMMAND_VAR107_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(191, 1);
		try
		{
			// Scrape.g:192:2: ( COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:192:4: COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(192, 4);
			COMMAND_VAR105=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator977); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMAND_VAR105_tree = (CommonTree)adaptor.Create(COMMAND_VAR105);
			adaptor.AddChild(root_0, COMMAND_VAR105_tree);
			}
			DebugLocation(192, 29);
			NULL_OPERATOR106=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator979); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR106_tree = (CommonTree)adaptor.Create(NULL_OPERATOR106);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR106_tree, root_0);
			}
			DebugLocation(192, 31);
			// Scrape.g:192:31: ( COMMAND_VAR | literal )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==COMMAND_VAR))
			{
				alt18 = 1;
			}
			else if ((LA18_1==FL||LA18_1==INT||LA18_1==NULL||LA18_1==STRING_LITERAL))
			{
				alt18 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:192:32: COMMAND_VAR
				{
				DebugLocation(192, 32);
				COMMAND_VAR107=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator983); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR107_tree = (CommonTree)adaptor.Create(COMMAND_VAR107);
				adaptor.AddChild(root_0, COMMAND_VAR107_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:192:44: literal
				{
				DebugLocation(192, 44);
				PushFollow(Follow._literal_in_nullOperator985);
				literal108=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 27);
			LeaveRule("nullOperator", 27);
			LeaveRule_nullOperator();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:195:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 28);
		TraceIn("assignmentExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(195, 1);
		try
		{
			// Scrape.g:196:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt19=6;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA19_2 = input.LA(2);

				if ((EvaluatePredicate(synpred31_Scrape_fragment)))
				{
					alt19 = 1;
				}
				else if ((true))
				{
					alt19 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA19_2 = input.LA(2);

				if ((LA19_2==NULL_OPERATOR))
				{
					alt19 = 5;
				}
				else if ((EvaluatePredicate(synpred31_Scrape_fragment)))
				{
					alt19 = 1;
				}
				else if ((true))
				{
					alt19 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA19_2 = input.LA(2);

				if ((EvaluatePredicate(synpred31_Scrape_fragment)))
				{
					alt19 = 1;
				}
				else if ((true))
				{
					alt19 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FL:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 135:
				{
				alt19 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt19 = 2;
				}
				break;
			case EXPAND:
				{
				alt19 = 3;
				}
				break;
			case SELECT:
				{
				alt19 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:196:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(196, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression997);
				mathExpression109=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression109.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:197:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(197, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression1002);
				downloadExpression110=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression110.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:198:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(198, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression1007);
				expandExpression111=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression111.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:199:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(199, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression1012);
				sqlStatement112=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement112.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:200:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(200, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression1017);
				nullOperator113=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator113.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:201:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(201, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression1022);
				variableReference114=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference114.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 28);
			LeaveRule("assignmentExpression", 28);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:204:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 29);
		TraceIn("mathExpression", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set116 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set116_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(204, 5);
		try
		{
			// Scrape.g:205:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:205:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(205, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression1038);
			mathExpressionGroup115=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup115.Tree);
			DebugLocation(205, 29);
			// Scrape.g:205:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==MINIS||LA20_1==PLUS))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:205:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(205, 46);

					set116=(CommonToken)input.LT(1);
					set116=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set116), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(205, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression1052);
					mathExpressionGroup117=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup117.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 29);
			LeaveRule("mathExpression", 29);
			LeaveRule_mathExpression();
		}
		DebugLocation(206, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:208:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 30);
		TraceIn("mathExpressionGroup", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set119 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set119_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(208, 3);
		try
		{
			// Scrape.g:209:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:209:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(209, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup1070);
			atom118=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom118.Tree);
			DebugLocation(209, 9);
			// Scrape.g:209:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==ASTERISK||LA21_1==DIV))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:209:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(209, 28);

					set119=(CommonToken)input.LT(1);
					set119=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set119), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(209, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1084);
					atom120=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom120.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 30);
			LeaveRule("mathExpressionGroup", 30);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(210, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:212:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 31);
		TraceIn("atom", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal122 = default(CommonToken);
		CommonToken OPENPAREN124 = default(CommonToken);
		CommonToken CLOSEPAREN126 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree OPENPAREN124_tree = default(CommonTree);
		CommonTree CLOSEPAREN126_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(212, 5);
		try
		{
			// Scrape.g:213:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt22=4;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt22 = 1;
				}
				break;
			case 135:
				{
				alt22 = 2;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt22 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt22 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:213:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 8);
				PushFollow(Follow._variableReference_in_atom1105);
				variableReference121=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference121.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:214:5: '$'
				{
				DebugLocation(214, 5);
				char_literal122=(CommonToken)Match(input,135,Follow._135_in_atom1111); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_135.Add(char_literal122);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 214:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(214, 12);
					// Scrape.g:214:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(214, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:215:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 5);
				PushFollow(Follow._literal_in_atom1123);
				literal123=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal123.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:216:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 17);
				OPENPAREN124=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1132); if (state.failed) return retval;
				DebugLocation(216, 19);
				PushFollow(Follow._mathExpression_in_atom1135);
				mathExpression125=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression125.Tree);
				DebugLocation(216, 44);
				CLOSEPAREN126=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1137); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 31);
			LeaveRule("atom", 31);
			LeaveRule_atom();
		}
		DebugLocation(217, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:219:1: literal : ( INT | STRING_LITERAL | NULL | FL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 32);
		TraceIn("literal", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set127 = default(CommonToken);

		CommonTree set127_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(219, 1);
		try
		{
			// Scrape.g:220:2: ( INT | STRING_LITERAL | NULL | FL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(220, 2);

			set127=(CommonToken)input.LT(1);
			if (input.LA(1)==FL||input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set127));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 32);
			LeaveRule("literal", 32);
			LeaveRule_literal();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:229:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 33);
		TraceIn("insertStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO128 = default(CommonToken);
		CommonToken ID129 = default(CommonToken);
		CommonToken INSERT_DIRECTORY131 = default(CommonToken);
		CommonToken INSERT_OVERWRITE134 = default(CommonToken);
		CommonToken ID135 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO128_tree = default(CommonTree);
		CommonTree ID129_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY131_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE134_tree = default(CommonTree);
		CommonTree ID135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(229, 1);
		try
		{
			// Scrape.g:230:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt23=3;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt23 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt23 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt23 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:230:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(230, 4);
				INSERT_INTO128=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1184); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO128);

				DebugLocation(230, 16);
				ID129=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1186); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID129);

				DebugLocation(230, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1188);
				sqlStatement130=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement130.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 230:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(230, 34);
					// Scrape.g:230:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(230, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(230, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID129));
					DebugLocation(230, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:231:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(231, 4);
				INSERT_DIRECTORY131=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1203); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY131);

				DebugLocation(231, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1205);
				mathExpression132=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression132.Tree);
				DebugLocation(231, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1207);
				sqlStatement133=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement133.Tree);


				{
				// AST REWRITE
				// elements: mathExpression, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 231:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(231, 51);
					// Scrape.g:231:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(231, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(231, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:232:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(232, 4);
				INSERT_OVERWRITE134=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1221); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE134);

				DebugLocation(232, 21);
				ID135=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1223); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID135);

				DebugLocation(232, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1225);
				sqlStatement136=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement136.Tree);


				{
				// AST REWRITE
				// elements: INSERT_OVERWRITE, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(232, 39);
					// Scrape.g:232:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(232, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID135));
					DebugLocation(232, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 33);
			LeaveRule("insertStatement", 33);
			LeaveRule_insertStatement();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_updateStatment();
	partial void LeaveRule_updateStatment();
	// $ANTLR start "updateStatment"
	// Scrape.g:238:1: updateStatment : UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("updateStatment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment()
	{
		EnterRule_updateStatment();
		EnterRule("updateStatment", 34);
		TraceIn("updateStatment", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UPDATE137 = default(CommonToken);
		CommonToken ID138 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArgs139 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UPDATE137_tree = default(CommonTree);
		CommonTree ID138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		RewriteRuleSubtreeStream stream_setArgs=new RewriteRuleSubtreeStream(adaptor,"rule setArgs");
		try { DebugEnterRule(GrammarFileName, "updateStatment");
		DebugLocation(238, 1);
		try
		{
			// Scrape.g:239:2: ( UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:239:4: UPDATE ID setArgs ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(239, 4);
			UPDATE137=(CommonToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatment1250); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE137);

			DebugLocation(239, 11);
			ID138=(CommonToken)Match(input,ID,Follow._ID_in_updateStatment1252); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID138);

			DebugLocation(239, 14);
			PushFollow(Follow._setArgs_in_updateStatment1254);
			setArgs139=setArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArgs.Add(setArgs139.Tree);
			DebugLocation(239, 22);
			// Scrape.g:239:22: ( fromStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==FROM))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:239:22: fromStatement
				{
				DebugLocation(239, 22);
				PushFollow(Follow._fromStatement_in_updateStatment1256);
				fromStatement140=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(239, 37);
			// Scrape.g:239:37: ( whereStatement )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==WHERE))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:239:37: whereStatement
				{
				DebugLocation(239, 37);
				PushFollow(Follow._whereStatement_in_updateStatment1259);
				whereStatement141=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: UPDATE, setArgs, fromStatement, ID, whereStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 239:53: -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(239, 56);
				// Scrape.g:239:56: ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(239, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(239, 65);
				// Scrape.g:239:65: ^( TABLE_ALIAS ID )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(239, 67);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

				DebugLocation(239, 79);
				adaptor.AddChild(root_2, stream_ID.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(239, 83);
				adaptor.AddChild(root_1, stream_setArgs.NextTree());
				DebugLocation(239, 91);
				// Scrape.g:239:91: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(239, 91);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(239, 106);
				// Scrape.g:239:106: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(239, 106);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatment", 34);
			LeaveRule("updateStatment", 34);
			LeaveRule_updateStatment();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatment"); }
		return retval;

	}
	// $ANTLR end "updateStatment"

	partial void EnterRule_setArgs();
	partial void LeaveRule_setArgs();
	// $ANTLR start "setArgs"
	// Scrape.g:242:1: setArgs : SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) ;
	[GrammarRule("setArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArgs()
	{
		EnterRule_setArgs();
		EnterRule("setArgs", 35);
		TraceIn("setArgs", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SET142 = default(CommonToken);
		CommonToken COMMA144 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SET142_tree = default(CommonTree);
		CommonTree COMMA144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_setArg=new RewriteRuleSubtreeStream(adaptor,"rule setArg");
		try { DebugEnterRule(GrammarFileName, "setArgs");
		DebugLocation(242, 1);
		try
		{
			// Scrape.g:243:2: ( SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:243:4: SET ( setArg COMMA )* setArg
			{
			DebugLocation(243, 4);
			SET142=(CommonToken)Match(input,SET,Follow._SET_in_setArgs1291); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET142);

			DebugLocation(243, 8);
			// Scrape.g:243:8: ( setArg COMMA )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				case FL:
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				case ID:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				case GETDATE:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred50_Scrape_fragment)))
					{
						alt26 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:243:9: setArg COMMA
					{
					DebugLocation(243, 9);
					PushFollow(Follow._setArg_in_setArgs1294);
					setArg143=setArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setArg.Add(setArg143.Tree);
					DebugLocation(243, 16);
					COMMA144=(CommonToken)Match(input,COMMA,Follow._COMMA_in_setArgs1296); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA144);


					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }

			DebugLocation(243, 24);
			PushFollow(Follow._setArg_in_setArgs1300);
			setArg145=setArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArg.Add(setArg145.Tree);


			{
			// AST REWRITE
			// elements: SET, setArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 243:31: -> ^( SET ( setArg )* )
			{
				DebugLocation(243, 34);
				// Scrape.g:243:34: ^( SET ( setArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(243, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(243, 40);
				// Scrape.g:243:40: ( setArg )*
				while ( stream_setArg.HasNext )
				{
					DebugLocation(243, 40);
					adaptor.AddChild(root_1, stream_setArg.NextTree());

				}
				stream_setArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArgs", 35);
			LeaveRule("setArgs", 35);
			LeaveRule_setArgs();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "setArgs"); }
		return retval;

	}
	// $ANTLR end "setArgs"

	partial void EnterRule_setArg();
	partial void LeaveRule_setArg();
	// $ANTLR start "setArg"
	// Scrape.g:246:1: setArg : selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) ;
	[GrammarRule("setArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArg()
	{
		EnterRule_setArg();
		EnterRule("setArg", 36);
		TraceIn("setArg", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS147 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "setArg");
		DebugLocation(246, 1);
		try
		{
			// Scrape.g:247:2: ( selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) )
			DebugEnterAlt(1);
			// Scrape.g:247:4: selectArg EQUALS selectArgs
			{
			DebugLocation(247, 4);
			PushFollow(Follow._selectArg_in_setArg1320);
			selectArg146=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg146.Tree);
			DebugLocation(247, 14);
			EQUALS147=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_setArg1322); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS147);

			DebugLocation(247, 21);
			PushFollow(Follow._selectArgs_in_setArg1324);
			selectArgs148=selectArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArgs.Add(selectArgs148.Tree);


			{
			// AST REWRITE
			// elements: selectArgs, selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:32: -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
			{
				DebugLocation(247, 35);
				// Scrape.g:247:35: ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 37);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(247, 57);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());
				DebugLocation(247, 67);
				adaptor.AddChild(root_1, stream_selectArgs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArg", 36);
			LeaveRule("setArg", 36);
			LeaveRule_setArg();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "setArg"); }
		return retval;

	}
	// $ANTLR end "setArg"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:252:1: sqlStatement : selectStatement ^ ( fromStatement )? ( whereStatement )? ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 37);
		TraceIn("sqlStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(252, 1);
		try
		{
			// Scrape.g:253:2: ( selectStatement ^ ( fromStatement )? ( whereStatement )? )
			DebugEnterAlt(1);
			// Scrape.g:253:4: selectStatement ^ ( fromStatement )? ( whereStatement )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(253, 19);
			PushFollow(Follow._selectStatement_in_sqlStatement1348);
			selectStatement149=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(selectStatement149.Tree, root_0);
			DebugLocation(253, 21);
			// Scrape.g:253:21: ( fromStatement )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==FROM))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:253:21: fromStatement
				{
				DebugLocation(253, 21);
				PushFollow(Follow._fromStatement_in_sqlStatement1351);
				fromStatement150=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fromStatement150.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(253, 36);
			// Scrape.g:253:36: ( whereStatement )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==WHERE))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:253:36: whereStatement
				{
				DebugLocation(253, 36);
				PushFollow(Follow._whereStatement_in_sqlStatement1354);
				whereStatement151=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whereStatement151.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 37);
			LeaveRule("sqlStatement", 37);
			LeaveRule_sqlStatement();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_nestedSqlStatement();
	partial void LeaveRule_nestedSqlStatement();
	// $ANTLR start "nestedSqlStatement"
	// Scrape.g:256:1: nestedSqlStatement : nestedSelectStatement ^ ( fromStatement )? ( whereStatement )? ;
	[GrammarRule("nestedSqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement()
	{
		EnterRule_nestedSqlStatement();
		EnterRule("nestedSqlStatement", 38);
		TraceIn("nestedSqlStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSelectStatement152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "nestedSqlStatement");
		DebugLocation(256, 1);
		try
		{
			// Scrape.g:257:2: ( nestedSelectStatement ^ ( fromStatement )? ( whereStatement )? )
			DebugEnterAlt(1);
			// Scrape.g:257:4: nestedSelectStatement ^ ( fromStatement )? ( whereStatement )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(257, 25);
			PushFollow(Follow._nestedSelectStatement_in_nestedSqlStatement1366);
			nestedSelectStatement152=nestedSelectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(nestedSelectStatement152.Tree, root_0);
			DebugLocation(257, 27);
			// Scrape.g:257:27: ( fromStatement )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==FROM))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:257:27: fromStatement
				{
				DebugLocation(257, 27);
				PushFollow(Follow._fromStatement_in_nestedSqlStatement1369);
				fromStatement153=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fromStatement153.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(257, 42);
			// Scrape.g:257:42: ( whereStatement )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==WHERE))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:257:42: whereStatement
				{
				DebugLocation(257, 42);
				PushFollow(Follow._whereStatement_in_nestedSqlStatement1372);
				whereStatement154=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whereStatement154.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nestedSqlStatement", 38);
			LeaveRule("nestedSqlStatement", 38);
			LeaveRule_nestedSqlStatement();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "nestedSqlStatement"); }
		return retval;

	}
	// $ANTLR end "nestedSqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:260:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 39);
		TraceIn("whereStatement", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE155 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(260, 1);
		try
		{
			// Scrape.g:261:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:261:5: WHERE boolExpression
			{
			DebugLocation(261, 5);
			WHERE155=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1385); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE155);

			DebugLocation(261, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1387);
			boolExpression156=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression156.Tree);


			{
			// AST REWRITE
			// elements: WHERE, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(261, 29);
				// Scrape.g:261:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(261, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 39);
			LeaveRule("whereStatement", 39);
			LeaveRule_whereStatement();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:264:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) | FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )? -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 40);
		TraceIn("fromStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM157 = default(CommonToken);
		CommonToken FROM159 = default(CommonToken);
		CommonToken ID161 = default(CommonToken);
		CommonToken FROM164 = default(CommonToken);
		CommonToken OPENPAREN165 = default(CommonToken);
		CommonToken CLOSEPAREN167 = default(CommonToken);
		CommonToken ID168 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement163 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM157_tree = default(CommonTree);
		CommonTree FROM159_tree = default(CommonTree);
		CommonTree ID161_tree = default(CommonTree);
		CommonTree FROM164_tree = default(CommonTree);
		CommonTree OPENPAREN165_tree = default(CommonTree);
		CommonTree CLOSEPAREN167_tree = default(CommonTree);
		CommonTree ID168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableHint=new RewriteRuleSubtreeStream(adaptor,"rule tableHint");
		RewriteRuleSubtreeStream stream_tableGenerationClause=new RewriteRuleSubtreeStream(adaptor,"rule tableGenerationClause");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		RewriteRuleSubtreeStream stream_nestedSqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule nestedSqlStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) | FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )? -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? ) )
			int alt37=3;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt37 = 1;
					}
					break;
				case OPENPAREN:
					{
					alt37 = 3;
					}
					break;
				case DOWNLOAD_IMAGE:
				case DOWNLOAD_PAGE:
				case EXPAND:
					{
					alt37 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:265:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(265, 4);
				FROM157=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1407); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM157);

				DebugLocation(265, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1411); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(265, 15);
				// Scrape.g:265:15: (a= ID )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ID))
				{
					int LA31_2 = input.LA(2);

					if ((LA31_2==EOF||(LA31_2>=CLOSEBRACE && LA31_2<=CLOSEPAREN)||LA31_2==COMMAND_VAR||LA31_2==CREATE||LA31_2==EACH||LA31_2==EXEC||LA31_2==ID||LA31_2==IDENTITY_VAR||(LA31_2>=INNER_JOIN && LA31_2<=INSERT_INTO)||LA31_2==INSERT_OVERWRITE||LA31_2==JOIN||LA31_2==SELECT||(LA31_2>=TRUNCATE && LA31_2<=VAR)||(LA31_2>=WHERE && LA31_2<=WHILE)))
					{
						alt31 = 1;
					}
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:265:15: a= ID
					{
					DebugLocation(265, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(265, 20);
				// Scrape.g:265:20: ( innerJoinStatement )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==INNER_JOIN||LA32_1==JOIN))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:265:20: innerJoinStatement
					{
					DebugLocation(265, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1418);
					innerJoinStatement158=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement158.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, FROM, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(265, 43);
					// Scrape.g:265:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(265, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(265, 79);
					// Scrape.g:265:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(265, 79);
						// Scrape.g:265:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(265, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(265, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(265, 98);
					// Scrape.g:265:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(265, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:266:4: FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )?
				{
				DebugLocation(266, 4);
				FROM159=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1445); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM159);

				DebugLocation(266, 9);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1447);
				tableGenerationClause160=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableGenerationClause.Add(tableGenerationClause160.Tree);
				DebugLocation(266, 31);
				// Scrape.g:266:31: ( ID )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==ID))
				{
					int LA33_2 = input.LA(2);

					if ((LA33_2==EOF||(LA33_2>=CLOSEBRACE && LA33_2<=CLOSEPAREN)||LA33_2==COMMAND_VAR||LA33_2==CREATE||LA33_2==EACH||LA33_2==EXEC||LA33_2==ID||LA33_2==IDENTITY_VAR||(LA33_2>=INNER_JOIN && LA33_2<=INSERT_INTO)||LA33_2==INSERT_OVERWRITE||LA33_2==JOIN||LA33_2==SELECT||(LA33_2>=TRUNCATE && LA33_2<=VAR)||(LA33_2>=WHERE && LA33_2<=WITH)))
					{
						alt33 = 1;
					}
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:266:31: ID
					{
					DebugLocation(266, 31);
					ID161=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1449); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID161);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(266, 35);
				// Scrape.g:266:35: ( tableHint )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==WITH))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:266:35: tableHint
					{
					DebugLocation(266, 35);
					PushFollow(Follow._tableHint_in_fromStatement1452);
					tableHint162=tableHint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableHint.Add(tableHint162.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(266, 46);
				// Scrape.g:266:46: ( innerJoinStatement )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==INNER_JOIN||LA35_1==JOIN))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:266:46: innerJoinStatement
					{
					DebugLocation(266, 46);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1455);
					innerJoinStatement163=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement163.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }



				{
				// AST REWRITE
				// elements: tableHint, FROM, innerJoinStatement, ID, tableGenerationClause
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 266:66: -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
				{
					DebugLocation(266, 69);
					// Scrape.g:266:69: ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(266, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(266, 76);
					adaptor.AddChild(root_1, stream_tableGenerationClause.NextTree());
					DebugLocation(266, 98);
					// Scrape.g:266:98: ( ^( TABLE_ALIAS ID ) )?
					if (stream_ID.HasNext)
					{
						DebugLocation(266, 98);
						// Scrape.g:266:98: ^( TABLE_ALIAS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(266, 100);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(266, 112);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ID.Reset();
					DebugLocation(266, 117);
					// Scrape.g:266:117: ( tableHint )?
					if (stream_tableHint.HasNext)
					{
						DebugLocation(266, 117);
						adaptor.AddChild(root_1, stream_tableHint.NextTree());

					}
					stream_tableHint.Reset();
					DebugLocation(266, 128);
					// Scrape.g:266:128: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(266, 128);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:267:4: FROM OPENPAREN nestedSqlStatement CLOSEPAREN ID ( innerJoinStatement )?
				{
				DebugLocation(267, 4);
				FROM164=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM164);

				DebugLocation(267, 9);
				OPENPAREN165=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fromStatement1484); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN165);

				DebugLocation(267, 19);
				PushFollow(Follow._nestedSqlStatement_in_fromStatement1486);
				nestedSqlStatement166=nestedSqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_nestedSqlStatement.Add(nestedSqlStatement166.Tree);
				DebugLocation(267, 38);
				CLOSEPAREN167=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fromStatement1488); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN167);

				DebugLocation(267, 49);
				ID168=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1490); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID168);

				DebugLocation(267, 52);
				// Scrape.g:267:52: ( innerJoinStatement )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==INNER_JOIN||LA36_1==JOIN))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:267:52: innerJoinStatement
					{
					DebugLocation(267, 52);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1492);
					innerJoinStatement169=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement169.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: ID, FROM, nestedSqlStatement, innerJoinStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 267:72: -> ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? )
				{
					DebugLocation(267, 75);
					// Scrape.g:267:75: ^( FROM nestedSqlStatement ^( TABLE_ALIAS ID ) ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(267, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(267, 82);
					adaptor.AddChild(root_1, stream_nestedSqlStatement.NextTree());
					DebugLocation(267, 101);
					// Scrape.g:267:101: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(267, 103);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(267, 115);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(267, 119);
					// Scrape.g:267:119: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(267, 119);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 40);
			LeaveRule("fromStatement", 40);
			LeaveRule_fromStatement();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_tableHint();
	partial void LeaveRule_tableHint();
	// $ANTLR start "tableHint"
	// Scrape.g:270:1: tableHint : WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* ;
	[GrammarRule("tableHint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableHint()
	{
		EnterRule_tableHint();
		EnterRule("tableHint", 41);
		TraceIn("tableHint", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH170 = default(CommonToken);
		CommonToken OPENPAREN171 = default(CommonToken);
		CommonToken PIPE173 = default(CommonToken);
		CommonToken CLOSEPAREN175 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint174 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH170_tree = default(CommonTree);
		CommonTree OPENPAREN171_tree = default(CommonTree);
		CommonTree PIPE173_tree = default(CommonTree);
		CommonTree CLOSEPAREN175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_PIPE=new RewriteRuleITokenStream(adaptor,"token PIPE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_hint=new RewriteRuleSubtreeStream(adaptor,"rule hint");
		try { DebugEnterRule(GrammarFileName, "tableHint");
		DebugLocation(270, 1);
		try
		{
			// Scrape.g:271:2: ( WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* )
			DebugEnterAlt(1);
			// Scrape.g:271:4: WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN
			{
			DebugLocation(271, 4);
			WITH170=(CommonToken)Match(input,WITH,Follow._WITH_in_tableHint1521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH170);

			DebugLocation(271, 9);
			OPENPAREN171=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_tableHint1523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN171);

			DebugLocation(271, 19);
			// Scrape.g:271:19: ( hint PIPE )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				try
				{
					alt38 = dfa38.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:271:20: hint PIPE
					{
					DebugLocation(271, 20);
					PushFollow(Follow._hint_in_tableHint1526);
					hint172=hint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_hint.Add(hint172.Tree);
					DebugLocation(271, 25);
					PIPE173=(CommonToken)Match(input,PIPE,Follow._PIPE_in_tableHint1528); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PIPE.Add(PIPE173);


					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }

			DebugLocation(271, 32);
			PushFollow(Follow._hint_in_tableHint1532);
			hint174=hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_hint.Add(hint174.Tree);
			DebugLocation(271, 37);
			CLOSEPAREN175=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_tableHint1534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN175);



			{
			// AST REWRITE
			// elements: hint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:48: -> ( hint )*
			{
				DebugLocation(271, 51);
				// Scrape.g:271:51: ( hint )*
				while ( stream_hint.HasNext )
				{
					DebugLocation(271, 51);
					adaptor.AddChild(root_0, stream_hint.NextTree());

				}
				stream_hint.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableHint", 41);
			LeaveRule("tableHint", 41);
			LeaveRule_tableHint();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "tableHint"); }
		return retval;

	}
	// $ANTLR end "tableHint"

	partial void EnterRule_hint();
	partial void LeaveRule_hint();
	// $ANTLR start "hint"
	// Scrape.g:274:1: hint : ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) );
	[GrammarRule("hint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> hint()
	{
		EnterRule_hint();
		EnterRule("hint", 42);
		TraceIn("hint", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken THREAD176 = default(CommonToken);
		CommonToken OPENPAREN177 = default(CommonToken);
		CommonToken INT178 = default(CommonToken);
		CommonToken CLOSEPAREN179 = default(CommonToken);
		CommonToken JS180 = default(CommonToken);
		CommonToken OPENPAREN181 = default(CommonToken);
		CommonToken COMMA183 = default(CommonToken);
		CommonToken CLOSEPAREN185 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg182 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree THREAD176_tree = default(CommonTree);
		CommonTree OPENPAREN177_tree = default(CommonTree);
		CommonTree INT178_tree = default(CommonTree);
		CommonTree CLOSEPAREN179_tree = default(CommonTree);
		CommonTree JS180_tree = default(CommonTree);
		CommonTree OPENPAREN181_tree = default(CommonTree);
		CommonTree COMMA183_tree = default(CommonTree);
		CommonTree CLOSEPAREN185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THREAD=new RewriteRuleITokenStream(adaptor,"token THREAD");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_JS=new RewriteRuleITokenStream(adaptor,"token JS");
		RewriteRuleSubtreeStream stream_jsArg=new RewriteRuleSubtreeStream(adaptor,"rule jsArg");
		try { DebugEnterRule(GrammarFileName, "hint");
		DebugLocation(274, 1);
		try
		{
			// Scrape.g:275:2: ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==THREAD))
			{
				alt41 = 1;
			}
			else if ((LA41_1==JS))
			{
				alt41 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:275:4: THREAD OPENPAREN INT CLOSEPAREN
				{
				DebugLocation(275, 4);
				THREAD176=(CommonToken)Match(input,THREAD,Follow._THREAD_in_hint1550); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THREAD.Add(THREAD176);

				DebugLocation(275, 11);
				OPENPAREN177=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1552); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN177);

				DebugLocation(275, 21);
				INT178=(CommonToken)Match(input,INT,Follow._INT_in_hint1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INT.Add(INT178);

				DebugLocation(275, 25);
				CLOSEPAREN179=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1556); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN179);



				{
				// AST REWRITE
				// elements: THREAD, INT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 275:36: -> ^( THREAD INT )
				{
					DebugLocation(275, 39);
					// Scrape.g:275:39: ^( THREAD INT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THREAD.NextNode(), root_1);

					DebugLocation(275, 48);
					adaptor.AddChild(root_1, stream_INT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:276:4: JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				{
				DebugLocation(276, 4);
				JS180=(CommonToken)Match(input,JS,Follow._JS_in_hint1569); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_JS.Add(JS180);

				DebugLocation(276, 7);
				// Scrape.g:276:7: ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==OPENPAREN))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:276:8: OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN
					{
					DebugLocation(276, 8);
					OPENPAREN181=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN181);

					DebugLocation(276, 18);
					// Scrape.g:276:18: ( jsArg COMMA )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=2;
						try { DebugEnterDecision(39, false);
						int LA39_1 = input.LA(1);

						if ((LA39_1==INT||LA39_1==STRING_LITERAL))
						{
							int LA39_2 = input.LA(2);

							if ((LA39_2==COMMA))
							{
								alt39 = 1;
							}


						}


						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// Scrape.g:276:19: jsArg COMMA
							{
							DebugLocation(276, 19);
							PushFollow(Follow._jsArg_in_hint1575);
							jsArg182=jsArg();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_jsArg.Add(jsArg182.Tree);
							DebugLocation(276, 25);
							COMMA183=(CommonToken)Match(input,COMMA,Follow._COMMA_in_hint1577); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_COMMA.Add(COMMA183);


							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }

					DebugLocation(276, 33);
					PushFollow(Follow._jsArg_in_hint1581);
					jsArg184=jsArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_jsArg.Add(jsArg184.Tree);
					DebugLocation(276, 39);
					CLOSEPAREN185=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1583); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN185);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }



				{
				// AST REWRITE
				// elements: JS, jsArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:52: -> ^( JS ( jsArg )* )
				{
					DebugLocation(276, 55);
					// Scrape.g:276:55: ^( JS ( jsArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(276, 57);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_JS.NextNode(), root_1);

					DebugLocation(276, 60);
					// Scrape.g:276:60: ( jsArg )*
					while ( stream_jsArg.HasNext )
					{
						DebugLocation(276, 60);
						adaptor.AddChild(root_1, stream_jsArg.NextTree());

					}
					stream_jsArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hint", 42);
			LeaveRule("hint", 42);
			LeaveRule_hint();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "hint"); }
		return retval;

	}
	// $ANTLR end "hint"

	partial void EnterRule_jsArg();
	partial void LeaveRule_jsArg();
	// $ANTLR start "jsArg"
	// Scrape.g:279:1: jsArg : ( STRING_LITERAL | INT );
	[GrammarRule("jsArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> jsArg()
	{
		EnterRule_jsArg();
		EnterRule("jsArg", 43);
		TraceIn("jsArg", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set186 = default(CommonToken);

		CommonTree set186_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "jsArg");
		DebugLocation(279, 1);
		try
		{
			// Scrape.g:280:2: ( STRING_LITERAL | INT )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(280, 2);

			set186=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set186));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jsArg", 43);
			LeaveRule("jsArg", 43);
			LeaveRule_jsArg();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "jsArg"); }
		return retval;

	}
	// $ANTLR end "jsArg"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:285:1: innerJoinStatement : ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) | innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? ) );
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 44);
		TraceIn("innerJoinStatement", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal188 = default(CommonToken);
		CommonToken OPENPAREN192 = default(CommonToken);
		CommonToken CLOSEPAREN194 = default(CommonToken);
		CommonToken ID195 = default(CommonToken);
		CommonToken string_literal196 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nestedSqlStatement193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement198 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree OPENPAREN192_tree = default(CommonTree);
		CommonTree CLOSEPAREN194_tree = default(CommonTree);
		CommonTree ID195_tree = default(CommonTree);
		CommonTree string_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		RewriteRuleSubtreeStream stream_nestedSqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule nestedSqlStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(285, 1);
		try
		{
			// Scrape.g:286:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) | innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? ) )
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==INNER_JOIN||LA45_1==JOIN))
			{
				int LA45_2 = input.LA(2);

				if ((LA45_2==ID))
				{
					alt45 = 1;
				}
				else if ((LA45_2==OPENPAREN))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:286:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
				{
				DebugLocation(286, 4);
				PushFollow(Follow._innerJoin_in_innerJoinStatement1622);
				innerJoin187=innerJoin();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoin.Add(innerJoin187.Tree);
				DebugLocation(286, 15);
				t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1626); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(286, 20);
				// Scrape.g:286:20: (a= ID )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==ID))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:286:20: a= ID
					{
					DebugLocation(286, 20);
					a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1630); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(286, 25);
				string_literal188=(CommonToken)Match(input,136,Follow._136_in_innerJoinStatement1633); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal188);

				DebugLocation(286, 30);
				PushFollow(Follow._boolExpression_in_innerJoinStatement1635);
				boolExpression189=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_boolExpression.Add(boolExpression189.Tree);
				DebugLocation(286, 45);
				// Scrape.g:286:45: ( innerJoinStatement )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==INNER_JOIN||LA43_1==JOIN))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:286:45: innerJoinStatement
					{
					DebugLocation(286, 45);
					PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1637);
					innerJoinStatement190=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement190.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, boolExpression, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
					DebugLocation(286, 68);
					// Scrape.g:286:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

					DebugLocation(286, 81);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(286, 110);
					// Scrape.g:286:110: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(286, 110);
						// Scrape.g:286:110: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(286, 112);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(286, 125);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(286, 129);
					adaptor.AddChild(root_1, stream_boolExpression.NextTree());
					DebugLocation(286, 144);
					// Scrape.g:286:144: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(286, 144);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:287:4: innerJoin OPENPAREN nestedSqlStatement CLOSEPAREN ID 'on' boolExpression ( innerJoinStatement )?
				{
				DebugLocation(287, 4);
				PushFollow(Follow._innerJoin_in_innerJoinStatement1665);
				innerJoin191=innerJoin();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoin.Add(innerJoin191.Tree);
				DebugLocation(287, 14);
				OPENPAREN192=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_innerJoinStatement1667); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN192);

				DebugLocation(287, 24);
				PushFollow(Follow._nestedSqlStatement_in_innerJoinStatement1669);
				nestedSqlStatement193=nestedSqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_nestedSqlStatement.Add(nestedSqlStatement193.Tree);
				DebugLocation(287, 43);
				CLOSEPAREN194=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_innerJoinStatement1671); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN194);

				DebugLocation(287, 54);
				ID195=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID195);

				DebugLocation(287, 57);
				string_literal196=(CommonToken)Match(input,136,Follow._136_in_innerJoinStatement1675); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal196);

				DebugLocation(287, 62);
				PushFollow(Follow._boolExpression_in_innerJoinStatement1677);
				boolExpression197=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_boolExpression.Add(boolExpression197.Tree);
				DebugLocation(287, 77);
				// Scrape.g:287:77: ( innerJoinStatement )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==INNER_JOIN||LA44_1==JOIN))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:287:77: innerJoinStatement
					{
					DebugLocation(287, 77);
					PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1679);
					innerJoinStatement198=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement198.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }



				{
				// AST REWRITE
				// elements: ID, nestedSqlStatement, innerJoinStatement, boolExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:97: -> ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? )
				{
					DebugLocation(287, 100);
					// Scrape.g:287:100: ^( INNER_JOIN nestedSqlStatement ^( TABLE_ALIAS ID ) boolExpression ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 102);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

					DebugLocation(287, 113);
					adaptor.AddChild(root_1, stream_nestedSqlStatement.NextTree());
					DebugLocation(287, 132);
					// Scrape.g:287:132: ^( TABLE_ALIAS ID )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 134);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(287, 146);
					adaptor.AddChild(root_2, stream_ID.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(287, 150);
					adaptor.AddChild(root_1, stream_boolExpression.NextTree());
					DebugLocation(287, 165);
					// Scrape.g:287:165: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(287, 165);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 44);
			LeaveRule("innerJoinStatement", 44);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_tableGenerationClause();
	partial void LeaveRule_tableGenerationClause();
	// $ANTLR start "tableGenerationClause"
	// Scrape.g:290:1: tableGenerationClause : ( downloadPageExpresssion | downloadImageExpression | expandExpression );
	[GrammarRule("tableGenerationClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause()
	{
		EnterRule_tableGenerationClause();
		EnterRule("tableGenerationClause", 45);
		TraceIn("tableGenerationClause", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "tableGenerationClause");
		DebugLocation(290, 1);
		try
		{
			// Scrape.g:291:2: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
			int alt46=3;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case DOWNLOAD_PAGE:
				{
				alt46 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
				{
				alt46 = 2;
				}
				break;
			case EXPAND:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:291:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 4);
				PushFollow(Follow._downloadPageExpresssion_in_tableGenerationClause1710);
				downloadPageExpresssion199=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion199.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:292:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(292, 4);
				PushFollow(Follow._downloadImageExpression_in_tableGenerationClause1715);
				downloadImageExpression200=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression200.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:293:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._expandExpression_in_tableGenerationClause1720);
				expandExpression201=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression201.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableGenerationClause", 45);
			LeaveRule("tableGenerationClause", 45);
			LeaveRule_tableGenerationClause();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "tableGenerationClause"); }
		return retval;

	}
	// $ANTLR end "tableGenerationClause"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:296:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 46);
		TraceIn("innerJoin", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set202 = default(CommonToken);

		CommonTree set202_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(297, 2);

			set202=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set202));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 46);
			LeaveRule("innerJoin", 46);
			LeaveRule_innerJoin();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:301:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT_STATEMENT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 47);
		TraceIn("selectStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT203 = default(CommonToken);
		CommonToken COMMA205 = default(CommonToken);
		CommonToken SELECT207 = default(CommonToken);
		CommonToken ASTERISK208 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs206 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT203_tree = default(CommonTree);
		CommonTree COMMA205_tree = default(CommonTree);
		CommonTree SELECT207_tree = default(CommonTree);
		CommonTree ASTERISK208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(301, 1);
		try
		{
			// Scrape.g:302:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT_STATEMENT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==SELECT))
			{
				int LA48_2 = input.LA(2);

				if ((LA48_2==ASTERISK))
				{
					alt48 = 2;
				}
				else if ((LA48_2==CASE||LA48_2==COMMAND_VAR||LA48_2==FL||LA48_2==GETDATE||LA48_2==ID||LA48_2==IDENTITY_VAR||LA48_2==INT||LA48_2==NULL||LA48_2==PICK||LA48_2==STRING_LITERAL))
				{
					alt48 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:302:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(302, 4);
				SELECT203=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1747); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT203);

				DebugLocation(302, 11);
				// Scrape.g:302:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case FL:
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case ID:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case GETDATE:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA47_2 = input.LA(2);

						if ((EvaluatePredicate(synpred75_Scrape_fragment)))
						{
							alt47 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:302:12: selectArgs COMMA
						{
						DebugLocation(302, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1750);
						selectArgs204=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs204.Tree);
						DebugLocation(302, 23);
						COMMA205=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1752); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA205);


						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(302, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1756);
				selectArgs206=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs206.Tree);


				{
				// AST REWRITE
				// elements: selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:42: -> ^( SELECT_STATEMENT ( selectArgs )* )
				{
					DebugLocation(302, 45);
					// Scrape.g:302:45: ^( SELECT_STATEMENT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

					DebugLocation(302, 64);
					// Scrape.g:302:64: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(302, 64);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:303:4: SELECT ASTERISK
				{
				DebugLocation(303, 4);
				SELECT207=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1770); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT207);

				DebugLocation(303, 11);
				ASTERISK208=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1772); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:20: -> ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(303, 23);
					// Scrape.g:303:23: ^( SELECT_STATEMENT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(303, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

					DebugLocation(303, 42);
					// Scrape.g:303:42: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(303, 44);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(303, 55);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK208));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 47);
			LeaveRule("selectStatement", 47);
			LeaveRule_selectStatement();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_nestedSelectStatement();
	partial void LeaveRule_nestedSelectStatement();
	// $ANTLR start "nestedSelectStatement"
	// Scrape.g:306:1: nestedSelectStatement : SELECT ( selectArgs COMMA )* selectArgs -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* ) ;
	[GrammarRule("nestedSelectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nestedSelectStatement()
	{
		EnterRule_nestedSelectStatement();
		EnterRule("nestedSelectStatement", 48);
		TraceIn("nestedSelectStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT209 = default(CommonToken);
		CommonToken COMMA211 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs212 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT209_tree = default(CommonTree);
		CommonTree COMMA211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "nestedSelectStatement");
		DebugLocation(306, 1);
		try
		{
			// Scrape.g:307:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:307:4: SELECT ( selectArgs COMMA )* selectArgs
			{
			DebugLocation(307, 4);
			SELECT209=(CommonToken)Match(input,SELECT,Follow._SELECT_in_nestedSelectStatement1796); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SELECT.Add(SELECT209);

			DebugLocation(307, 11);
			// Scrape.g:307:11: ( selectArgs COMMA )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case FL:
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case ID:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case GETDATE:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				case CASE:
					{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred77_Scrape_fragment)))
					{
						alt49 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:307:12: selectArgs COMMA
					{
					DebugLocation(307, 12);
					PushFollow(Follow._selectArgs_in_nestedSelectStatement1799);
					selectArgs210=selectArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selectArgs.Add(selectArgs210.Tree);
					DebugLocation(307, 23);
					COMMA211=(CommonToken)Match(input,COMMA,Follow._COMMA_in_nestedSelectStatement1801); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA211);


					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(307, 31);
			PushFollow(Follow._selectArgs_in_nestedSelectStatement1805);
			selectArgs212=selectArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArgs.Add(selectArgs212.Tree);


			{
			// AST REWRITE
			// elements: selectArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:42: -> ^( NESTED_SELECT_STATEMENT ( selectArgs )* )
			{
				DebugLocation(307, 45);
				// Scrape.g:307:45: ^( NESTED_SELECT_STATEMENT ( selectArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(307, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(NESTED_SELECT_STATEMENT, "NESTED_SELECT_STATEMENT"), root_1);

				DebugLocation(307, 71);
				// Scrape.g:307:71: ( selectArgs )*
				while ( stream_selectArgs.HasNext )
				{
					DebugLocation(307, 71);
					adaptor.AddChild(root_1, stream_selectArgs.NextTree());

				}
				stream_selectArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nestedSelectStatement", 48);
			LeaveRule("nestedSelectStatement", 48);
			LeaveRule_nestedSelectStatement();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "nestedSelectStatement"); }
		return retval;

	}
	// $ANTLR end "nestedSelectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:310:1: selectArgs : ( ( selectArg PLUS )* selectArg ( AS ID )? -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? ) | caseStatement ( AS ID )? -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 49);
		TraceIn("selectArgs", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS214 = default(CommonToken);
		CommonToken AS216 = default(CommonToken);
		CommonToken ID217 = default(CommonToken);
		CommonToken AS219 = default(CommonToken);
		CommonToken ID220 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS214_tree = default(CommonTree);
		CommonTree AS216_tree = default(CommonTree);
		CommonTree ID217_tree = default(CommonTree);
		CommonTree AS219_tree = default(CommonTree);
		CommonTree ID220_tree = default(CommonTree);
		RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(310, 1);
		try
		{
			// Scrape.g:311:2: ( ( selectArg PLUS )* selectArg ( AS ID )? -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? ) | caseStatement ( AS ID )? -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? ) )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			int LA53_1 = input.LA(1);

			if ((LA53_1==COMMAND_VAR||LA53_1==FL||LA53_1==GETDATE||LA53_1==ID||LA53_1==IDENTITY_VAR||LA53_1==INT||LA53_1==NULL||LA53_1==PICK||LA53_1==STRING_LITERAL))
			{
				alt53 = 1;
			}
			else if ((LA53_1==CASE))
			{
				alt53 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:311:4: ( selectArg PLUS )* selectArg ( AS ID )?
				{
				DebugLocation(311, 4);
				// Scrape.g:311:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					try
					{
						alt50 = dfa50.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:311:5: selectArg PLUS
						{
						DebugLocation(311, 5);
						PushFollow(Follow._selectArg_in_selectArgs1826);
						selectArg213=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg213.Tree);
						DebugLocation(311, 15);
						PLUS214=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1828); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS214);


						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(311, 22);
				PushFollow(Follow._selectArg_in_selectArgs1832);
				selectArg215=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg215.Tree);
				DebugLocation(311, 32);
				// Scrape.g:311:32: ( AS ID )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==AS))
				{
					alt51 = 1;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:311:33: AS ID
					{
					DebugLocation(311, 33);
					AS216=(CommonToken)Match(input,AS,Follow._AS_in_selectArgs1835); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS216);

					DebugLocation(311, 36);
					ID217=(CommonToken)Match(input,ID,Follow._ID_in_selectArgs1837); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID217);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }



				{
				// AST REWRITE
				// elements: ID, selectArg, AS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:41: -> ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? )
				{
					DebugLocation(311, 44);
					// Scrape.g:311:44: ^( SELECT_ARG ( selectArg )* ( ^( AS ID ) )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(311, 57);
					// Scrape.g:311:57: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(311, 57);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();
					DebugLocation(311, 68);
					// Scrape.g:311:68: ( ^( AS ID ) )?
					if (stream_ID.HasNext||stream_AS.HasNext)
					{
						DebugLocation(311, 68);
						// Scrape.g:311:68: ^( AS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(311, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_AS.NextNode(), root_2);

						DebugLocation(311, 73);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ID.Reset();
					stream_AS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:312:4: caseStatement ( AS ID )?
				{
				DebugLocation(312, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1860);
				caseStatement218=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement218.Tree);
				DebugLocation(312, 18);
				// Scrape.g:312:18: ( AS ID )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==AS))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:312:19: AS ID
					{
					DebugLocation(312, 19);
					AS219=(CommonToken)Match(input,AS,Follow._AS_in_selectArgs1863); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_AS.Add(AS219);

					DebugLocation(312, 22);
					ID220=(CommonToken)Match(input,ID,Follow._ID_in_selectArgs1865); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID220);


					}
					break;

				}
				} finally { DebugExitSubRule(52); }



				{
				// AST REWRITE
				// elements: caseStatement, ID, AS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:27: -> ^( SELECT_ARG caseStatement ( ^( AS ID ) )? )
				{
					DebugLocation(312, 30);
					// Scrape.g:312:30: ^( SELECT_ARG caseStatement ( ^( AS ID ) )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 32);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(312, 43);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());
					DebugLocation(312, 57);
					// Scrape.g:312:57: ( ^( AS ID ) )?
					if (stream_ID.HasNext||stream_AS.HasNext)
					{
						DebugLocation(312, 57);
						// Scrape.g:312:57: ^( AS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(312, 59);
						root_2 = (CommonTree)adaptor.BecomeRoot(stream_AS.NextNode(), root_2);

						DebugLocation(312, 62);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ID.Reset();
					stream_AS.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 49);
			LeaveRule("selectArgs", 49);
			LeaveRule_selectArgs();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:317:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 50);
		TraceIn("caseStatement", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE221 = default(CommonToken);
		CommonToken ELSE223 = default(CommonToken);
		CommonToken END225 = default(CommonToken);
		CommonToken CASE226 = default(CommonToken);
		CommonToken ELSE229 = default(CommonToken);
		CommonToken END231 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement228 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression230 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE221_tree = default(CommonTree);
		CommonTree ELSE223_tree = default(CommonTree);
		CommonTree END225_tree = default(CommonTree);
		CommonTree CASE226_tree = default(CommonTree);
		CommonTree ELSE229_tree = default(CommonTree);
		CommonTree END231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(317, 1);
		try
		{
			// Scrape.g:318:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==CASE))
			{
				int LA58_2 = input.LA(2);

				if ((LA58_2==WHEN))
				{
					alt58 = 1;
				}
				else if ((LA58_2==COMMAND_VAR||LA58_2==FL||LA58_2==GETDATE||LA58_2==ID||LA58_2==IDENTITY_VAR||LA58_2==INT||LA58_2==NULL||LA58_2==PICK||LA58_2==STRING_LITERAL))
				{
					alt58 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:318:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(318, 4);
				CASE221=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1896); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE221);

				DebugLocation(318, 9);
				// Scrape.g:318:9: ( whenBoolStatement )+
				int cnt54=0;
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==WHEN))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:318:9: whenBoolStatement
						{
						DebugLocation(318, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1898);
						whenBoolStatement222=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement222.Tree);

						}
						break;

					default:
						if (cnt54 >= 1)
							goto loop54;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee54 = new EarlyExitException( 54, input );
						DebugRecognitionException(eee54);
						throw eee54;
					}
					cnt54++;
				}
				loop54:
					;

				} finally { DebugExitSubRule(54); }

				DebugLocation(318, 28);
				// Scrape.g:318:28: ( ELSE caseExpression )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==ELSE))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:318:29: ELSE caseExpression
					{
					DebugLocation(318, 29);
					ELSE223=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1902); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE223);

					DebugLocation(318, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1904);
					caseExpression224=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression224.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(318, 51);
				END225=(CommonToken)Match(input,END,Follow._END_in_caseStatement1908); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END225);



				{
				// AST REWRITE
				// elements: whenBoolStatement, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(318, 58);
					// Scrape.g:318:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(318, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(318, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(318, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(318, 89);
					// Scrape.g:318:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(318, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:319:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(319, 4);
				CASE226=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1925); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE226);

				DebugLocation(319, 9);
				PushFollow(Follow._selectArg_in_caseStatement1927);
				selectArg227=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg227.Tree);
				DebugLocation(319, 19);
				// Scrape.g:319:19: ( whenLiteralStatement )+
				int cnt56=0;
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==WHEN))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:319:19: whenLiteralStatement
						{
						DebugLocation(319, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1929);
						whenLiteralStatement228=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement228.Tree);

						}
						break;

					default:
						if (cnt56 >= 1)
							goto loop56;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee56 = new EarlyExitException( 56, input );
						DebugRecognitionException(eee56);
						throw eee56;
					}
					cnt56++;
				}
				loop56:
					;

				} finally { DebugExitSubRule(56); }

				DebugLocation(319, 41);
				// Scrape.g:319:41: ( ELSE caseExpression )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==ELSE))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:319:42: ELSE caseExpression
					{
					DebugLocation(319, 42);
					ELSE229=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1933); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE229);

					DebugLocation(319, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1935);
					caseExpression230=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression230.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(319, 64);
				END231=(CommonToken)Match(input,END,Follow._END_in_caseStatement1939); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END231);



				{
				// AST REWRITE
				// elements: whenLiteralStatement, caseExpression, selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 319:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(319, 71);
					// Scrape.g:319:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(319, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(319, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(319, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(319, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(319, 114);
					// Scrape.g:319:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(319, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 50);
			LeaveRule("caseStatement", 50);
			LeaveRule_caseStatement();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:322:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 51);
		TraceIn("caseExpression", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg232 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(322, 1);
		try
		{
			// Scrape.g:323:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:323:4: selectArg
			{
			DebugLocation(323, 4);
			PushFollow(Follow._selectArg_in_caseExpression1964);
			selectArg232=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg232.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(323, 17);
				// Scrape.g:323:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(323, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 51);
			LeaveRule("caseExpression", 51);
			LeaveRule_caseExpression();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:326:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 52);
		TraceIn("whenLiteralStatement", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN233 = default(CommonToken);
		CommonToken THEN235 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal234 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression236 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN233_tree = default(CommonTree);
		CommonTree THEN235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(326, 1);
		try
		{
			// Scrape.g:327:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:327:4: WHEN literal THEN caseExpression
			{
			DebugLocation(327, 4);
			WHEN233=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1983); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN233);

			DebugLocation(327, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1985);
			literal234=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal234.Tree);
			DebugLocation(327, 17);
			THEN235=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1987); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN235);

			DebugLocation(327, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1989);
			caseExpression236=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression236.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(327, 40);
				// Scrape.g:327:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(327, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(327, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 52);
			LeaveRule("whenLiteralStatement", 52);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:330:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 53);
		TraceIn("whenBoolStatement", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN237 = default(CommonToken);
		CommonToken THEN239 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression238 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression240 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN237_tree = default(CommonTree);
		CommonTree THEN239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(330, 1);
		try
		{
			// Scrape.g:331:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:331:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(331, 4);
			WHEN237=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement2010); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN237);

			DebugLocation(331, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement2012);
			boolExpression238=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression238.Tree);
			DebugLocation(331, 24);
			THEN239=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement2014); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN239);

			DebugLocation(331, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement2016);
			caseExpression240=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression240.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(331, 47);
				// Scrape.g:331:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(331, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(331, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(331, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 53);
			LeaveRule("whenBoolStatement", 53);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:334:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 54);
		TraceIn("boolExpression", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR242 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression243 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR242_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(334, 1);
		try
		{
			// Scrape.g:335:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:335:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(335, 4);
			PushFollow(Follow._andExpression_in_boolExpression2037);
			andExpression241=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression241.Tree);
			DebugLocation(335, 18);
			// Scrape.g:335:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==OR))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:335:19: OR ^ andExpression
					{
					DebugLocation(335, 21);
					OR242=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression2040); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR242_tree = (CommonTree)adaptor.Create(OR242);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR242_tree, root_0);
					}
					DebugLocation(335, 23);
					PushFollow(Follow._andExpression_in_boolExpression2043);
					andExpression243=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression243.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 54);
			LeaveRule("boolExpression", 54);
			LeaveRule_boolExpression();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:338:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 55);
		TraceIn("andExpression", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND245 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm244 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm246 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(338, 1);
		try
		{
			// Scrape.g:339:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:339:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(339, 5);
			PushFollow(Follow._boolTerm_in_andExpression2057);
			boolTerm244=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm244.Tree);
			DebugLocation(339, 14);
			// Scrape.g:339:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==AND))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:339:15: AND ^ boolTerm
					{
					DebugLocation(339, 18);
					AND245=(CommonToken)Match(input,AND,Follow._AND_in_andExpression2060); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND245_tree = (CommonTree)adaptor.Create(AND245);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND245_tree, root_0);
					}
					DebugLocation(339, 20);
					PushFollow(Follow._boolTerm_in_andExpression2063);
					boolTerm246=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm246.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 55);
			LeaveRule("andExpression", 55);
			LeaveRule_andExpression();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:342:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 56);
		TraceIn("boolTerm", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken NODES247 = default(CommonToken);
		CommonToken EQUALS248 = default(CommonToken);
		CommonToken STRING_LITERAL249 = default(CommonToken);
		CommonToken DOT250 = default(CommonToken);
		CommonToken NODES251 = default(CommonToken);
		CommonToken EQUALS252 = default(CommonToken);
		CommonToken STRING_LITERAL253 = default(CommonToken);
		CommonToken OPENPAREN257 = default(CommonToken);
		CommonToken CLOSEPAREN259 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg254 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator255 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg256 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression258 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree NODES247_tree = default(CommonTree);
		CommonTree EQUALS248_tree = default(CommonTree);
		CommonTree STRING_LITERAL249_tree = default(CommonTree);
		CommonTree DOT250_tree = default(CommonTree);
		CommonTree NODES251_tree = default(CommonTree);
		CommonTree EQUALS252_tree = default(CommonTree);
		CommonTree STRING_LITERAL253_tree = default(CommonTree);
		CommonTree OPENPAREN257_tree = default(CommonTree);
		CommonTree CLOSEPAREN259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(342, 1);
		try
		{
			// Scrape.g:343:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt62=4;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt62 = 1;
				}
				break;
			case ID:
				{
				int LA62_2 = input.LA(2);

				if ((LA62_2==DOT))
				{
					int LA62_3 = input.LA(3);

					if ((LA62_3==NODES))
					{
						alt62 = 2;
					}
					else if ((LA62_3==ID))
					{
						alt62 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 62, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA62_2==EOF||LA62_2==AND||(LA62_2>=CLOSEBRACE && LA62_2<=CLOSEPAREN)||LA62_2==COMMAND_VAR||LA62_2==CREATE||LA62_2==EACH||(LA62_2>=EQUALS && LA62_2<=EXEC)||(LA62_2>=GREATERTHAN && LA62_2<=GREATERTHANEQUAL)||LA62_2==ID||LA62_2==IDENTITY_VAR||(LA62_2>=INNER_JOIN && LA62_2<=INSERT_INTO)||LA62_2==INSERT_OVERWRITE||LA62_2==JOIN||(LA62_2>=LESSTHAN && LA62_2<=LESSTHANEQUAL)||LA62_2==LIKE||(LA62_2>=NOTEQUAL && LA62_2<=NOTLIKE)||LA62_2==OR||LA62_2==SELECT||LA62_2==THEN||(LA62_2>=TRUNCATE && LA62_2<=VAR)||(LA62_2>=WHERE && LA62_2<=WHILE)))
				{
					alt62 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
			case FL:
			case GETDATE:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt62 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt62 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:343:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(343, 4);
				NODES247=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm2078); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES247);

				DebugLocation(343, 10);
				EQUALS248=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm2080); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS248);

				DebugLocation(343, 17);
				STRING_LITERAL249=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm2082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL249);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(343, 35);
					// Scrape.g:343:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(343, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(343, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES247));
					DebugLocation(343, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:344:4: t= ID DOT NODES EQUALS STRING_LITERAL
				{
				DebugLocation(344, 5);
				t=(CommonToken)Match(input,ID,Follow._ID_in_boolTerm2100); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(344, 9);
				DOT250=(CommonToken)Match(input,DOT,Follow._DOT_in_boolTerm2102); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT250);

				DebugLocation(344, 13);
				NODES251=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm2104); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES251);

				DebugLocation(344, 19);
				EQUALS252=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm2106); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS252);

				DebugLocation(344, 26);
				STRING_LITERAL253=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm2108); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL253);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:41: -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
				{
					DebugLocation(344, 44);
					// Scrape.g:344:44: ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(344, 52);
					// Scrape.g:344:52: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 54);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_2);

					DebugLocation(344, 77);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
					DebugLocation(344, 95);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(MEMBER_REFERENCE, NODES251));

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(344, 121);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:345:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(345, 4);
				PushFollow(Follow._selectArg_in_boolTerm2131);
				selectArg254=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg254.Tree);
				DebugLocation(345, 14);
				// Scrape.g:345:14: ( boolOperator ^ selectArg )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==EQUALS||(LA61_1>=GREATERTHAN && LA61_1<=GREATERTHANEQUAL)||(LA61_1>=LESSTHAN && LA61_1<=LESSTHANEQUAL)||LA61_1==LIKE||(LA61_1>=NOTEQUAL && LA61_1<=NOTLIKE)))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:345:15: boolOperator ^ selectArg
					{
					DebugLocation(345, 27);
					PushFollow(Follow._boolOperator_in_boolTerm2134);
					boolOperator255=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator255.Tree, root_0);
					DebugLocation(345, 29);
					PushFollow(Follow._selectArg_in_boolTerm2137);
					selectArg256=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg256.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:346:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(346, 13);
				OPENPAREN257=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm2145); if (state.failed) return retval;
				DebugLocation(346, 15);
				PushFollow(Follow._boolExpression_in_boolTerm2148);
				boolExpression258=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression258.Tree);
				DebugLocation(346, 40);
				CLOSEPAREN259=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm2150); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 56);
			LeaveRule("boolTerm", 56);
			LeaveRule_boolTerm();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:349:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 57);
		TraceIn("boolOperator", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set260 = default(CommonToken);

		CommonTree set260_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(349, 1);
		try
		{
			// Scrape.g:350:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 2);

			set260=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==LIKE||(input.LA(1)>=NOTEQUAL && input.LA(1)<=NOTLIKE))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set260));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 57);
			LeaveRule("boolOperator", 57);
			LeaveRule_boolOperator();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:360:1: selectArg : ( pickStatement | literal | selectVariable | primitiveFunction );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 58);
		TraceIn("selectArg", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement261 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal262 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable263 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction264 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(360, 1);
		try
		{
			// Scrape.g:361:2: ( pickStatement | literal | selectVariable | primitiveFunction )
			int alt63=4;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt63 = 1;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt63 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt63 = 3;
				}
				break;
			case GETDATE:
				{
				alt63 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:361:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(361, 4);
				PushFollow(Follow._pickStatement_in_selectArg2208);
				pickStatement261=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement261.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:362:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(362, 4);
				PushFollow(Follow._literal_in_selectArg2215);
				literal262=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal262.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:363:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(363, 4);
				PushFollow(Follow._selectVariable_in_selectArg2220);
				selectVariable263=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable263.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:364:4: primitiveFunction
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._primitiveFunction_in_selectArg2225);
				primitiveFunction264=primitiveFunction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveFunction264.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 58);
			LeaveRule("selectArg", 58);
			LeaveRule_selectArg();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_primitiveFunction();
	partial void LeaveRule_primitiveFunction();
	// $ANTLR start "primitiveFunction"
	// Scrape.g:367:1: primitiveFunction : GETDATE ^ OPENPAREN ! CLOSEPAREN !;
	[GrammarRule("primitiveFunction")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction()
	{
		EnterRule_primitiveFunction();
		EnterRule("primitiveFunction", 59);
		TraceIn("primitiveFunction", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken GETDATE265 = default(CommonToken);
		CommonToken OPENPAREN266 = default(CommonToken);
		CommonToken CLOSEPAREN267 = default(CommonToken);

		CommonTree GETDATE265_tree = default(CommonTree);
		CommonTree OPENPAREN266_tree = default(CommonTree);
		CommonTree CLOSEPAREN267_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveFunction");
		DebugLocation(367, 1);
		try
		{
			// Scrape.g:368:2: ( GETDATE ^ OPENPAREN ! CLOSEPAREN !)
			DebugEnterAlt(1);
			// Scrape.g:368:4: GETDATE ^ OPENPAREN ! CLOSEPAREN !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(368, 11);
			GETDATE265=(CommonToken)Match(input,GETDATE,Follow._GETDATE_in_primitiveFunction2236); if (state.failed) return retval;
			if (state.backtracking == 0) {
			GETDATE265_tree = (CommonTree)adaptor.Create(GETDATE265);
			root_0 = (CommonTree)adaptor.BecomeRoot(GETDATE265_tree, root_0);
			}
			DebugLocation(368, 22);
			OPENPAREN266=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_primitiveFunction2239); if (state.failed) return retval;
			DebugLocation(368, 34);
			CLOSEPAREN267=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_primitiveFunction2242); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveFunction", 59);
			LeaveRule("primitiveFunction", 59);
			LeaveRule_primitiveFunction();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveFunction"); }
		return retval;

	}
	// $ANTLR end "primitiveFunction"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:371:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 60);
		TraceIn("selectVariable", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID268 = default(CommonToken);
		CommonToken COMMAND_VAR269 = default(CommonToken);
		CommonToken IDENTITY_VAR270 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference271 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID268_tree = default(CommonTree);
		CommonTree COMMAND_VAR269_tree = default(CommonTree);
		CommonTree IDENTITY_VAR270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(371, 1);
		try
		{
			// Scrape.g:372:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt64=4;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA64_2 = input.LA(2);

				if ((LA64_2==DOT))
				{
					alt64 = 4;
				}
				else if ((LA64_2==EOF||LA64_2==AND||LA64_2==AS||(LA64_2>=CLOSEBRACE && LA64_2<=COMMAND_VAR)||LA64_2==CREATE||(LA64_2>=EACH && LA64_2<=EXEC)||LA64_2==FROM||(LA64_2>=GREATERTHAN && LA64_2<=GREATERTHANEQUAL)||LA64_2==ID||LA64_2==IDENTITY_VAR||(LA64_2>=INNER_JOIN && LA64_2<=INSERT_INTO)||LA64_2==INSERT_OVERWRITE||LA64_2==JOIN||(LA64_2>=LESSTHAN && LA64_2<=LESSTHANEQUAL)||LA64_2==LIKE||(LA64_2>=NOTEQUAL && LA64_2<=NOTLIKE)||LA64_2==OR||LA64_2==PLUS||LA64_2==SELECT||LA64_2==THEN||(LA64_2>=TRUNCATE && LA64_2<=VAR)||LA64_2==WHEN||(LA64_2>=WHERE && LA64_2<=WHILE)))
				{
					alt64 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt64 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt64 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:372:4: ID
				{
				DebugLocation(372, 4);
				ID268=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable2254); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID268);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 372:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(372, 10);
					// Scrape.g:372:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(372, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID268), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:373:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(373, 4);
				COMMAND_VAR269=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable2266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR269_tree = (CommonTree)adaptor.Create(COMMAND_VAR269);
				adaptor.AddChild(root_0, COMMAND_VAR269_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:374:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(374, 4);
				IDENTITY_VAR270=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable2271); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR270_tree = (CommonTree)adaptor.Create(IDENTITY_VAR270);
				adaptor.AddChild(root_0, IDENTITY_VAR270_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:375:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable2276);
				tableMemberReference271=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference271.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 60);
			LeaveRule("selectVariable", 60);
			LeaveRule_selectVariable();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:378:1: pickStatement : PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 61);
		TraceIn("pickStatement", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK272 = default(CommonToken);
		CommonToken STRING_LITERAL273 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement274 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement275 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK272_tree = default(CommonTree);
		CommonTree STRING_LITERAL273_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(378, 1);
		try
		{
			// Scrape.g:379:2: ( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:379:4: PICK STRING_LITERAL ( takeStatement )? ( matchStatement )*
			{
			DebugLocation(379, 4);
			PICK272=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement2288); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK272);

			DebugLocation(379, 9);
			STRING_LITERAL273=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement2290); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL273);

			DebugLocation(379, 24);
			// Scrape.g:379:24: ( takeStatement )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_1 = input.LA(1);

			if ((LA65_1==TAKE))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:379:24: takeStatement
				{
				DebugLocation(379, 24);
				PushFollow(Follow._takeStatement_in_pickStatement2292);
				takeStatement274=takeStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_takeStatement.Add(takeStatement274.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(379, 39);
			// Scrape.g:379:39: ( matchStatement )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==MATCH))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:379:39: matchStatement
					{
					DebugLocation(379, 39);
					PushFollow(Follow._matchStatement_in_pickStatement2295);
					matchStatement275=matchStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_matchStatement.Add(matchStatement275.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }



			{
			// AST REWRITE
			// elements: takeStatement, PICK, STRING_LITERAL, matchStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 379:55: -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
			{
				DebugLocation(379, 58);
				// Scrape.g:379:58: ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(379, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(379, 65);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(379, 80);
				// Scrape.g:379:80: ( takeStatement )?
				if (stream_takeStatement.HasNext)
				{
					DebugLocation(379, 80);
					adaptor.AddChild(root_1, stream_takeStatement.NextTree());

				}
				stream_takeStatement.Reset();
				DebugLocation(379, 95);
				// Scrape.g:379:95: ( matchStatement )*
				while ( stream_matchStatement.HasNext )
				{
					DebugLocation(379, 95);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 61);
			LeaveRule("pickStatement", 61);
			LeaveRule_pickStatement();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:382:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 62);
		TraceIn("takeStatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE276 = default(CommonToken);
		CommonToken ATTRIBUTE277 = default(CommonToken);
		CommonToken STRING_LITERAL278 = default(CommonToken);
		CommonToken TAKE279 = default(CommonToken);
		CommonToken TEXT280 = default(CommonToken);
		CommonToken TAKE281 = default(CommonToken);
		CommonToken HTML282 = default(CommonToken);

		CommonTree TAKE276_tree = default(CommonTree);
		CommonTree ATTRIBUTE277_tree = default(CommonTree);
		CommonTree STRING_LITERAL278_tree = default(CommonTree);
		CommonTree TAKE279_tree = default(CommonTree);
		CommonTree TEXT280_tree = default(CommonTree);
		CommonTree TAKE281_tree = default(CommonTree);
		CommonTree HTML282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(382, 1);
		try
		{
			// Scrape.g:383:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt67 = 1;
					}
					break;
				case TEXT:
					{
					alt67 = 2;
					}
					break;
				case HTML:
					{
					alt67 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 67, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:383:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(383, 4);
				TAKE276=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2321); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE276);

				DebugLocation(383, 9);
				ATTRIBUTE277=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement2323); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE277);

				DebugLocation(383, 19);
				STRING_LITERAL278=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement2325); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL278);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 383:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(383, 37);
					// Scrape.g:383:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(383, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(383, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:384:4: TAKE TEXT
				{
				DebugLocation(384, 4);
				TAKE279=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2338); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE279);

				DebugLocation(384, 9);
				TEXT280=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement2340); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT280);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 384:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(384, 17);
					// Scrape.g:384:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(384, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:385:4: TAKE HTML
				{
				DebugLocation(385, 4);
				TAKE281=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2351); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE281);

				DebugLocation(385, 9);
				HTML282=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement2353); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML282);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:14: -> ^( TAKE_HTML )
				{
					DebugLocation(385, 17);
					// Scrape.g:385:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(385, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 62);
			LeaveRule("takeStatement", 62);
			LeaveRule_takeStatement();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:388:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 63);
		TraceIn("matchStatement", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH283 = default(CommonToken);
		CommonToken STRING_LITERAL284 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement285 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH283_tree = default(CommonTree);
		CommonTree STRING_LITERAL284_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(388, 1);
		try
		{
			// Scrape.g:389:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:389:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(389, 4);
			MATCH283=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement2371); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH283);

			DebugLocation(389, 10);
			STRING_LITERAL284=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement2373); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL284);

			DebugLocation(389, 25);
			// Scrape.g:389:25: ( replaceStatement )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==REPLACE))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:389:25: replaceStatement
				{
				DebugLocation(389, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement2375);
				replaceStatement285=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement285.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: MATCH, STRING_LITERAL, replaceStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(389, 46);
				// Scrape.g:389:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(389, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(389, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(389, 69);
				// Scrape.g:389:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(389, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 63);
			LeaveRule("matchStatement", 63);
			LeaveRule_matchStatement();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:392:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 64);
		TraceIn("replaceStatement", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE286 = default(CommonToken);
		CommonToken STRING_LITERAL287 = default(CommonToken);

		CommonTree REPLACE286_tree = default(CommonTree);
		CommonTree STRING_LITERAL287_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(392, 1);
		try
		{
			// Scrape.g:393:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:393:4: REPLACE STRING_LITERAL
			{
			DebugLocation(393, 4);
			REPLACE286=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement2398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE286);

			DebugLocation(393, 12);
			STRING_LITERAL287=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement2400); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL287);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(393, 30);
				// Scrape.g:393:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(393, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(393, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 64);
			LeaveRule("replaceStatement", 64);
			LeaveRule_replaceStatement();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:397:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 65);
		TraceIn("createTableStatement", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE288 = default(CommonToken);
		CommonToken FILE289 = default(CommonToken);
		CommonToken ID290 = default(CommonToken);
		CommonToken OPENPAREN291 = default(CommonToken);
		CommonToken CLOSEPAREN293 = default(CommonToken);
		CommonToken CREATE296 = default(CommonToken);
		CommonToken BUFFER297 = default(CommonToken);
		CommonToken ID298 = default(CommonToken);
		CommonToken OPENPAREN299 = default(CommonToken);
		CommonToken CLOSEPAREN301 = default(CommonToken);
		CommonToken CREATE302 = default(CommonToken);
		CommonToken MSSQL303 = default(CommonToken);
		CommonToken ID304 = default(CommonToken);
		CommonToken OPENPAREN305 = default(CommonToken);
		CommonToken CLOSEPAREN307 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs292 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement294 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation295 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs300 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs306 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement308 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE288_tree = default(CommonTree);
		CommonTree FILE289_tree = default(CommonTree);
		CommonTree ID290_tree = default(CommonTree);
		CommonTree OPENPAREN291_tree = default(CommonTree);
		CommonTree CLOSEPAREN293_tree = default(CommonTree);
		CommonTree CREATE296_tree = default(CommonTree);
		CommonTree BUFFER297_tree = default(CommonTree);
		CommonTree ID298_tree = default(CommonTree);
		CommonTree OPENPAREN299_tree = default(CommonTree);
		CommonTree CLOSEPAREN301_tree = default(CommonTree);
		CommonTree CREATE302_tree = default(CommonTree);
		CommonTree MSSQL303_tree = default(CommonTree);
		CommonTree ID304_tree = default(CommonTree);
		CommonTree OPENPAREN305_tree = default(CommonTree);
		CommonTree CLOSEPAREN307_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleITokenStream stream_MSSQL=new RewriteRuleITokenStream(adaptor,"token MSSQL");
		RewriteRuleSubtreeStream stream_sqlTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithStatement");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(397, 1);
		try
		{
			// Scrape.g:398:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) )
			int alt73=3;
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==CREATE))
			{
				switch (input.LA(2))
				{
				case FILE:
					{
					alt73 = 1;
					}
					break;
				case BUFFER:
					{
					alt73 = 2;
					}
					break;
				case MSSQL:
					{
					alt73 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 73, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:398:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(398, 4);
				CREATE288=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2421); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE288);

				DebugLocation(398, 11);
				FILE289=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement2423); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE289);

				DebugLocation(398, 16);
				ID290=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2425); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID290);

				DebugLocation(398, 19);
				OPENPAREN291=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2427); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN291);

				DebugLocation(398, 29);
				// Scrape.g:398:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_1 = input.LA(1);

					if ((LA69_1==ID))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch ( alt69 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:398:29: tableColumnArgs
						{
						DebugLocation(398, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2429);
						tableColumnArgs292=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs292.Tree);

						}
						break;

					default:
						goto loop69;
					}
				}

				loop69:
					;

				} finally { DebugExitSubRule(69); }

				DebugLocation(398, 46);
				CLOSEPAREN293=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2432); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN293);

				DebugLocation(398, 57);
				// Scrape.g:398:57: ( fileTableWithStatement )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_1 = input.LA(1);

				if ((LA70_1==WITH))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:398:57: fileTableWithStatement
					{
					DebugLocation(398, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement2434);
					fileTableWithStatement294=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement294.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }

				DebugLocation(398, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement2437);
				fileTableLocation295=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation295.Tree);


				{
				// AST REWRITE
				// elements: fileTableWithStatement, ID, tableColumnArgs, fileTableLocation
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 398:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(398, 102);
					// Scrape.g:398:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(398, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(398, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(398, 118);
					// Scrape.g:398:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(398, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(398, 135);
					// Scrape.g:398:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(398, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(398, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:399:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(399, 4);
				CREATE296=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE296);

				DebugLocation(399, 11);
				BUFFER297=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement2460); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER297);

				DebugLocation(399, 18);
				ID298=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2462); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID298);

				DebugLocation(399, 21);
				OPENPAREN299=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2464); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN299);

				DebugLocation(399, 31);
				// Scrape.g:399:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					int LA71_1 = input.LA(1);

					if ((LA71_1==ID))
					{
						alt71 = 1;
					}


					} finally { DebugExitDecision(71); }
					switch ( alt71 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:399:31: tableColumnArgs
						{
						DebugLocation(399, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2466);
						tableColumnArgs300=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs300.Tree);

						}
						break;

					default:
						goto loop71;
					}
				}

				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(399, 48);
				CLOSEPAREN301=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2469); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN301);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 399:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(399, 62);
					// Scrape.g:399:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(399, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(399, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(399, 80);
					// Scrape.g:399:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(399, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:400:4: CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement
				{
				DebugLocation(400, 4);
				CREATE302=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2485); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE302);

				DebugLocation(400, 11);
				MSSQL303=(CommonToken)Match(input,MSSQL,Follow._MSSQL_in_createTableStatement2487); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSSQL.Add(MSSQL303);

				DebugLocation(400, 17);
				ID304=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2489); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID304);

				DebugLocation(400, 20);
				OPENPAREN305=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2491); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN305);

				DebugLocation(400, 30);
				// Scrape.g:400:30: ( tableColumnArgs )*
				try { DebugEnterSubRule(72);
				while (true)
				{
					int alt72=2;
					try { DebugEnterDecision(72, false);
					int LA72_1 = input.LA(1);

					if ((LA72_1==ID))
					{
						alt72 = 1;
					}


					} finally { DebugExitDecision(72); }
					switch ( alt72 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:400:30: tableColumnArgs
						{
						DebugLocation(400, 30);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2493);
						tableColumnArgs306=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs306.Tree);

						}
						break;

					default:
						goto loop72;
					}
				}

				loop72:
					;

				} finally { DebugExitSubRule(72); }

				DebugLocation(400, 47);
				CLOSEPAREN307=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN307);

				DebugLocation(400, 58);
				PushFollow(Follow._sqlTableWithStatement_in_createTableStatement2498);
				sqlTableWithStatement308=sqlTableWithStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlTableWithStatement.Add(sqlTableWithStatement308.Tree);


				{
				// AST REWRITE
				// elements: ID, tableColumnArgs, sqlTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 400:80: -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
				{
					DebugLocation(400, 83);
					// Scrape.g:400:83: ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(400, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MSSQL_TABLE, "MSSQL_TABLE"), root_1);

					DebugLocation(400, 97);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(400, 100);
					// Scrape.g:400:100: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(400, 100);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(400, 117);
					adaptor.AddChild(root_1, stream_sqlTableWithStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 65);
			LeaveRule("createTableStatement", 65);
			LeaveRule_createTableStatement();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:403:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 66);
		TraceIn("fileTableLocation", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION309 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression310 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION309_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(403, 1);
		try
		{
			// Scrape.g:404:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:404:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(404, 12);
			LOCATION309=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation2522); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION309_tree = (CommonTree)adaptor.Create(LOCATION309);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION309_tree, root_0);
			}
			DebugLocation(404, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation2525);
			mathExpression310=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression310.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 66);
			LeaveRule("fileTableLocation", 66);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_sqlTableWithStatement();
	partial void LeaveRule_sqlTableWithStatement();
	// $ANTLR start "sqlTableWithStatement"
	// Scrape.g:407:1: sqlTableWithStatement : WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) ;
	[GrammarRule("sqlTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement()
	{
		EnterRule_sqlTableWithStatement();
		EnterRule("sqlTableWithStatement", 67);
		TraceIn("sqlTableWithStatement", 67);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH311 = default(CommonToken);
		CommonToken OPENPAREN312 = default(CommonToken);
		CommonToken CLOSEPAREN314 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement313 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH311_tree = default(CommonTree);
		CommonTree OPENPAREN312_tree = default(CommonTree);
		CommonTree CLOSEPAREN314_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithStatement");
		DebugLocation(407, 1);
		try
		{
			// Scrape.g:408:2: ( WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) )
			DebugEnterAlt(1);
			// Scrape.g:408:4: WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN
			{
			DebugLocation(408, 4);
			WITH311=(CommonToken)Match(input,WITH,Follow._WITH_in_sqlTableWithStatement2537); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH311);

			DebugLocation(408, 9);
			OPENPAREN312=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_sqlTableWithStatement2539); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN312);

			DebugLocation(408, 19);
			PushFollow(Follow._sqlTableWithVariablesStatement_in_sqlTableWithStatement2541);
			sqlTableWithVariablesStatement313=sqlTableWithVariablesStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariablesStatement.Add(sqlTableWithVariablesStatement313.Tree);
			DebugLocation(408, 50);
			CLOSEPAREN314=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_sqlTableWithStatement2543); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN314);



			{
			// AST REWRITE
			// elements: sqlTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 408:61: -> ^( WITH sqlTableWithVariablesStatement )
			{
				DebugLocation(408, 64);
				// Scrape.g:408:64: ^( WITH sqlTableWithVariablesStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(408, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(408, 71);
				adaptor.AddChild(root_1, stream_sqlTableWithVariablesStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithStatement", 67);
			LeaveRule("sqlTableWithStatement", 67);
			LeaveRule_sqlTableWithStatement();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithStatement"

	partial void EnterRule_sqlTableWithVariablesStatement();
	partial void LeaveRule_sqlTableWithVariablesStatement();
	// $ANTLR start "sqlTableWithVariablesStatement"
	// Scrape.g:411:1: sqlTableWithVariablesStatement : ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* ;
	[GrammarRule("sqlTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement()
	{
		EnterRule_sqlTableWithVariablesStatement();
		EnterRule("sqlTableWithVariablesStatement", 68);
		TraceIn("sqlTableWithVariablesStatement", 68);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA316 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement315 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement317 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA316_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_sqlTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariablesStatement");
		DebugLocation(411, 1);
		try
		{
			// Scrape.g:412:2: ( ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:412:4: ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement
			{
			DebugLocation(412, 4);
			// Scrape.g:412:4: ( sqlTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==CONNECTIONSTRING||LA74_1==DBTABLE))
				{
					int LA74_2 = input.LA(2);

					if ((LA74_2==EQUALS))
					{
						int LA74_3 = input.LA(3);

						if ((LA74_3==STRING_LITERAL))
						{
							int LA74_4 = input.LA(4);

							if ((LA74_4==COMMA))
							{
								alt74 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:412:5: sqlTableWithVariableStatement COMMA
					{
					DebugLocation(412, 5);
					PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2564);
					sqlTableWithVariableStatement315=sqlTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement315.Tree);
					DebugLocation(412, 35);
					COMMA316=(CommonToken)Match(input,COMMA,Follow._COMMA_in_sqlTableWithVariablesStatement2566); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA316);


					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(412, 43);
			PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2570);
			sqlTableWithVariableStatement317=sqlTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement317.Tree);


			{
			// AST REWRITE
			// elements: sqlTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 412:73: -> ( sqlTableWithVariableStatement )*
			{
				DebugLocation(412, 76);
				// Scrape.g:412:76: ( sqlTableWithVariableStatement )*
				while ( stream_sqlTableWithVariableStatement.HasNext )
				{
					DebugLocation(412, 76);
					adaptor.AddChild(root_0, stream_sqlTableWithVariableStatement.NextTree());

				}
				stream_sqlTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariablesStatement", 68);
			LeaveRule("sqlTableWithVariablesStatement", 68);
			LeaveRule_sqlTableWithVariablesStatement();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariablesStatement"

	partial void EnterRule_sqlTableWithVariableStatement();
	partial void LeaveRule_sqlTableWithVariableStatement();
	// $ANTLR start "sqlTableWithVariableStatement"
	// Scrape.g:415:1: sqlTableWithVariableStatement : ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("sqlTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement()
	{
		EnterRule_sqlTableWithVariableStatement();
		EnterRule("sqlTableWithVariableStatement", 69);
		TraceIn("sqlTableWithVariableStatement", 69);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set318 = default(CommonToken);
		CommonToken EQUALS319 = default(CommonToken);
		CommonToken STRING_LITERAL320 = default(CommonToken);

		CommonTree set318_tree = default(CommonTree);
		CommonTree EQUALS319_tree = default(CommonTree);
		CommonTree STRING_LITERAL320_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariableStatement");
		DebugLocation(415, 1);
		try
		{
			// Scrape.g:416:2: ( ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:416:4: ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(416, 32);

			set318=(CommonToken)input.LT(1);
			set318=(CommonToken)input.LT(1);
			if (input.LA(1)==CONNECTIONSTRING||input.LA(1)==DBTABLE)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set318), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(416, 40);
			EQUALS319=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_sqlTableWithVariableStatement2596); if (state.failed) return retval;
			DebugLocation(416, 42);
			STRING_LITERAL320=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_sqlTableWithVariableStatement2599); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL320_tree = (CommonTree)adaptor.Create(STRING_LITERAL320);
			adaptor.AddChild(root_0, STRING_LITERAL320_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariableStatement", 69);
			LeaveRule("sqlTableWithVariableStatement", 69);
			LeaveRule_sqlTableWithVariableStatement();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariableStatement"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:419:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 70);
		TraceIn("fileTableWithStatement", 70);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH321 = default(CommonToken);
		CommonToken OPENPAREN322 = default(CommonToken);
		CommonToken CLOSEPAREN324 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement323 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH321_tree = default(CommonTree);
		CommonTree OPENPAREN322_tree = default(CommonTree);
		CommonTree CLOSEPAREN324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(419, 1);
		try
		{
			// Scrape.g:420:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:420:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(420, 4);
			WITH321=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement2610); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH321);

			DebugLocation(420, 9);
			OPENPAREN322=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2612); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN322);

			DebugLocation(420, 19);
			// Scrape.g:420:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==FIELD_TERMINATOR||LA75_1==ROW_TERMINATOR))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:420:19: fileTableWithVariablesStatement
					{
					DebugLocation(420, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2614);
					fileTableWithVariablesStatement323=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement323.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(420, 52);
			CLOSEPAREN324=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2617); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN324);



			{
			// AST REWRITE
			// elements: fileTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(420, 66);
				// Scrape.g:420:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(420, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(420, 73);
				// Scrape.g:420:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(420, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 70);
			LeaveRule("fileTableWithStatement", 70);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:423:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 71);
		TraceIn("fileTableWithVariablesStatement", 71);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA326 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement325 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement327 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA326_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(423, 1);
		try
		{
			// Scrape.g:424:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:424:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(424, 4);
			// Scrape.g:424:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_1 = input.LA(1);

				if ((LA76_1==FIELD_TERMINATOR||LA76_1==ROW_TERMINATOR))
				{
					int LA76_2 = input.LA(2);

					if ((LA76_2==EQUALS))
					{
						int LA76_3 = input.LA(3);

						if ((LA76_3==STRING_LITERAL))
						{
							int LA76_4 = input.LA(4);

							if ((LA76_4==COMMA))
							{
								alt76 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:424:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(424, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2640);
					fileTableWithVariableStatement325=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement325.Tree);
					DebugLocation(424, 36);
					COMMA326=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2642); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA326);


					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }

			DebugLocation(424, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2646);
			fileTableWithVariableStatement327=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement327.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 424:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(424, 78);
				// Scrape.g:424:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(424, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 71);
			LeaveRule("fileTableWithVariablesStatement", 71);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:427:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 72);
		TraceIn("fileTableWithVariableStatement", 72);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set328 = default(CommonToken);
		CommonToken EQUALS329 = default(CommonToken);
		CommonToken STRING_LITERAL330 = default(CommonToken);

		CommonTree set328_tree = default(CommonTree);
		CommonTree EQUALS329_tree = default(CommonTree);
		CommonTree STRING_LITERAL330_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(427, 1);
		try
		{
			// Scrape.g:428:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:428:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(428, 39);

			set328=(CommonToken)input.LT(1);
			set328=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set328), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(428, 47);
			EQUALS329=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2671); if (state.failed) return retval;
			DebugLocation(428, 49);
			STRING_LITERAL330=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2674); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL330_tree = (CommonTree)adaptor.Create(STRING_LITERAL330);
			adaptor.AddChild(root_0, STRING_LITERAL330_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 72);
			LeaveRule("fileTableWithVariableStatement", 72);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:431:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 73);
		TraceIn("tableColumnArgs", 73);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA332 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg331 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg333 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA332_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(431, 1);
		try
		{
			// Scrape.g:432:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:432:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(432, 4);
			// Scrape.g:432:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==ID))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==DATETIME||LA77_2==FLOAT||LA77_2==IDENTITY||LA77_2==INTEGER||LA77_2==STRING))
					{
						int LA77_3 = input.LA(3);

						if ((LA77_3==COMMA))
						{
							alt77 = 1;
						}


					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:432:5: tableColumnArg COMMA
					{
					DebugLocation(432, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2686);
					tableColumnArg331=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg331.Tree);
					DebugLocation(432, 20);
					COMMA332=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2688); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA332);


					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }

			DebugLocation(432, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2692);
			tableColumnArg333=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg333.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 432:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(432, 46);
				// Scrape.g:432:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(432, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(432, 66);
				// Scrape.g:432:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(432, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 73);
			LeaveRule("tableColumnArgs", 73);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:435:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 74);
		TraceIn("tableColumnArg", 74);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID334 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType335 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID334_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(435, 1);
		try
		{
			// Scrape.g:436:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:436:4: ID dataType
			{
			DebugLocation(436, 4);
			ID334=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2713); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID334);

			DebugLocation(436, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2715);
			dataType335=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType335.Tree);


			{
			// AST REWRITE
			// elements: dataType, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(436, 19);
				// Scrape.g:436:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(436, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(436, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(436, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 74);
			LeaveRule("tableColumnArg", 74);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:439:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 75);
		TraceIn("dataType", 75);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set336 = default(CommonToken);

		CommonTree set336_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(439, 1);
		try
		{
			// Scrape.g:440:2: ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(440, 2);

			set336=(CommonToken)input.LT(1);
			if (input.LA(1)==DATETIME||input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set336));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 75);
			LeaveRule("dataType", 75);
			LeaveRule_dataType();
		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred23_Scrape_fragment();
	partial void LeaveRule_synpred23_Scrape_fragment();

	// $ANTLR start synpred23_Scrape
	private void synpred23_Scrape_fragment()
	{
		EnterRule_synpred23_Scrape_fragment();
		EnterRule("synpred23_Scrape_fragment", 98);
		TraceIn("synpred23_Scrape_fragment", 98);
		try
		{
			// Scrape.g:155:41: ( tableHint )
			DebugEnterAlt(1);
			// Scrape.g:155:41: tableHint
			{
			DebugLocation(155, 41);
			PushFollow(Follow._tableHint_in_synpred23_Scrape779);
			tableHint();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_Scrape_fragment", 98);
			LeaveRule("synpred23_Scrape_fragment", 98);
			LeaveRule_synpred23_Scrape_fragment();
		}
	}
	// $ANTLR end synpred23_Scrape

	partial void EnterRule_synpred31_Scrape_fragment();
	partial void LeaveRule_synpred31_Scrape_fragment();

	// $ANTLR start synpred31_Scrape
	private void synpred31_Scrape_fragment()
	{
		EnterRule_synpred31_Scrape_fragment();
		EnterRule("synpred31_Scrape_fragment", 106);
		TraceIn("synpred31_Scrape_fragment", 106);
		try
		{
			// Scrape.g:196:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:196:4: mathExpression
			{
			DebugLocation(196, 4);
			PushFollow(Follow._mathExpression_in_synpred31_Scrape997);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred31_Scrape_fragment", 106);
			LeaveRule("synpred31_Scrape_fragment", 106);
			LeaveRule_synpred31_Scrape_fragment();
		}
	}
	// $ANTLR end synpred31_Scrape

	partial void EnterRule_synpred50_Scrape_fragment();
	partial void LeaveRule_synpred50_Scrape_fragment();

	// $ANTLR start synpred50_Scrape
	private void synpred50_Scrape_fragment()
	{
		EnterRule_synpred50_Scrape_fragment();
		EnterRule("synpred50_Scrape_fragment", 125);
		TraceIn("synpred50_Scrape_fragment", 125);
		try
		{
			// Scrape.g:243:9: ( setArg COMMA )
			DebugEnterAlt(1);
			// Scrape.g:243:9: setArg COMMA
			{
			DebugLocation(243, 9);
			PushFollow(Follow._setArg_in_synpred50_Scrape1294);
			setArg();
			PopFollow();
			if (state.failed) return;
			DebugLocation(243, 16);
			Match(input,COMMA,Follow._COMMA_in_synpred50_Scrape1296); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_Scrape_fragment", 125);
			LeaveRule("synpred50_Scrape_fragment", 125);
			LeaveRule_synpred50_Scrape_fragment();
		}
	}
	// $ANTLR end synpred50_Scrape

	partial void EnterRule_synpred75_Scrape_fragment();
	partial void LeaveRule_synpred75_Scrape_fragment();

	// $ANTLR start synpred75_Scrape
	private void synpred75_Scrape_fragment()
	{
		EnterRule_synpred75_Scrape_fragment();
		EnterRule("synpred75_Scrape_fragment", 150);
		TraceIn("synpred75_Scrape_fragment", 150);
		try
		{
			// Scrape.g:302:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:302:12: selectArgs COMMA
			{
			DebugLocation(302, 12);
			PushFollow(Follow._selectArgs_in_synpred75_Scrape1750);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(302, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred75_Scrape1752); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred75_Scrape_fragment", 150);
			LeaveRule("synpred75_Scrape_fragment", 150);
			LeaveRule_synpred75_Scrape_fragment();
		}
	}
	// $ANTLR end synpred75_Scrape

	partial void EnterRule_synpred77_Scrape_fragment();
	partial void LeaveRule_synpred77_Scrape_fragment();

	// $ANTLR start synpred77_Scrape
	private void synpred77_Scrape_fragment()
	{
		EnterRule_synpred77_Scrape_fragment();
		EnterRule("synpred77_Scrape_fragment", 152);
		TraceIn("synpred77_Scrape_fragment", 152);
		try
		{
			// Scrape.g:307:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:307:12: selectArgs COMMA
			{
			DebugLocation(307, 12);
			PushFollow(Follow._selectArgs_in_synpred77_Scrape1799);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(307, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred77_Scrape1801); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred77_Scrape_fragment", 152);
			LeaveRule("synpred77_Scrape_fragment", 152);
			LeaveRule_synpred77_Scrape_fragment();
		}
	}
	// $ANTLR end synpred77_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA14 dfa14;
	private DFA38 dfa38;
	private DFA50 dfa50;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa14 = new DFA14( this, SpecialStateTransition14 );
		dfa38 = new DFA38( this );
		dfa50 = new DFA50( this );
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x12\xFFFF";
		private const string DFA14_eofS =
			"\x1\x2\x11\xFFFF";
		private const string DFA14_minS =
			"\x1\x10\x1\x52\x1\xFFFF\x1\x3C\x1\x52\x1\x11\x2\x38\x1\x3C\x1\x0\x2\x11"+
			"\x1\xFFFF\x1\x11\x1\x38\x1\x11\x2\x0";
		private const string DFA14_maxS =
			"\x1\x85\x1\x52\x1\xFFFF\x1\x78\x1\x52\x1\x56\x1\x38\x1\x69\x1\x78\x1"+
			"\x0\x1\x11\x1\x12\x1\xFFFF\x1\x56\x1\x69\x1\x56\x2\x0";
		private const string DFA14_acceptS =
			"\x2\xFFFF\x1\x2\x9\xFFFF\x1\x1\x5\xFFFF";
		private const string DFA14_specialS =
			"\x9\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\x0}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x24\xFFFF\x1\x2\x17\xFFFF\x3\x2\x6\xFFFF\x2\x2\x1"+
				"\x1",
				"\x1\x3",
				"",
				"\x1\x5\x3B\xFFFF\x1\x4",
				"\x1\x6",
				"\x1\x9\x40\xFFFF\x1\x7\x3\xFFFF\x1\x8",
				"\x1\xA",
				"\x1\xB\x30\xFFFF\x1\xB",
				"\x1\x5\x3B\xFFFF\x1\x4",
				"\x1\xFFFF",
				"\x1\xD",
				"\x1\xF\x1\xE",
				"",
				"\x1\x10\x44\xFFFF\x1\x8",
				"\x1\xB\x30\xFFFF\x1\xB",
				"\x1\x11\x44\xFFFF\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "155:41: ( tableHint )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition14(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA14_1 = input.LA(1);
		int index14_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 14, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\xC\xFFFF";
		private const string DFA38_eofS =
			"\xC\xFFFF";
		private const string DFA38_minS =
			"\x1\x3C\x1\x52\x1\x11\x2\x38\x2\xFFFF\x3\x11\x1\x38\x1\x11";
		private const string DFA38_maxS =
			"\x1\x78\x1\x52\x1\x56\x1\x38\x1\x69\x2\xFFFF\x1\x11\x1\x12\x1\x56\x1"+
			"\x69\x1\x56";
		private const string DFA38_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1\x5\xFFFF";
		private const string DFA38_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x2\x3B\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x40\xFFFF\x1\x4\x3\xFFFF\x1\x6",
				"\x1\x7",
				"\x1\x8\x30\xFFFF\x1\x8",
				"",
				"",
				"\x1\x9",
				"\x1\xB\x1\xA",
				"\x1\x5\x44\xFFFF\x1\x6",
				"\x1\x8\x30\xFFFF\x1\x8",
				"\x1\x5\x44\xFFFF\x1\x6"
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "()* loopback of 271:19: ( hint PIPE )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x17\xFFFF";
		private const string DFA50_eofS =
			"\x2\xFFFF\x4\x8\x1\xFFFF\x1\x8\x6\xFFFF\x2\x8\x1\xFFFF\x4\x8\x1\xFFFF"+
			"\x1\x8";
		private const string DFA50_minS =
			"\x1\x13\x1\x69\x4\x6\x1\x52\x1\x6\x2\xFFFF\x1\x2F\x1\x11\x1\x8\x1\x69"+
			"\x2\x6\x1\x69\x4\x6\x1\x69\x1\x6";
		private const string DFA50_maxS =
			"\x2\x69\x4\x84\x1\x52\x1\x84\x2\xFFFF\x1\x2F\x1\x11\x1\x76\x1\x69\x2"+
			"\x84\x1\x69\x4\x84\x1\x69\x1\x84";
		private const string DFA50_acceptS =
			"\x8\xFFFF\x1\x2\x1\x1\xD\xFFFF";
		private const string DFA50_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x4\x14\xFFFF\x1\x2\x2\xFFFF\x1\x6\x3\xFFFF\x1\x3\x1\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\x2\x16\xFFFF\x1\x2\x5\xFFFF\x1\x1\x13\xFFFF\x1\x2",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x4\xFFFF\x1\xA\x2\xFFFF\x1\x8"+
				"\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF"+
				"\x2\x8\x1\xFFFF\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\xB",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\xE\xFFFF\x1\xC"+
				"\x8\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"",
				"",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10\x25\xFFFF\x1\x12\x47\xFFFF\x1\x11",
				"\x1\x13",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1F\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x14",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\x7\xFFFF\x1\x15\x2\xFFFF\x1\x8"+
				"\x17\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x1\x16",
				"\x1\x8\x9\xFFFF\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\xD\xFFFF\x1\xD\x11\xFFFF\x1\x9\xA\xFFFF\x1\x8\x17\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8"
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "()* loopback of 311:4: ( selectArg PLUS )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program242 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program257 = new BitSet(new ulong[]{0xB2800440480000UL,0x1C00000400000000UL,0x10UL});
		public static readonly BitSet _noBraceBlock_in_program259 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition295 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition297 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition299 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition301 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition304 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _block_in_procedureDefinition306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatment_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable390 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _TABLE_in_truncateTable392 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_truncateTable394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall416 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_procedureCall418 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall420 = new BitSet(new ulong[]{0x1028000000A0000UL,0x20000000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall422 = new BitSet(new ulong[]{0x1028000000A0000UL,0x20000000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList448 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_procedureCallList450 = new BitSet(new ulong[]{0x102800000080000UL,0x20000000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement486 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement488 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement490 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement492 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _proxyTest_in_proxyStatement494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList516 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_proxyList518 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest542 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _TEST_in_proxyTest544 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest546 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest548 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement565 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_whileStatement567 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_whileStatement569 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_whileStatement571 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _block_in_whileStatement573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement595 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement597 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _VAR_in_eachStatement599 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_eachStatement603 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _IN_in_eachStatement605 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_eachStatement609 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement611 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _block_in_eachStatement613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock638 = new BitSet(new ulong[]{0xB2800440480002UL,0x1C00000400000000UL,0x10UL});
		public static readonly BitSet _OPENBRACE_in_block659 = new BitSet(new ulong[]{0xB2800440490000UL,0x1C00000400000000UL,0x10UL});
		public static readonly BitSet _statement_in_block661 = new BitSet(new ulong[]{0xB2800440490000UL,0x1C00000400000000UL,0x10UL});
		public static readonly BitSet _CLOSEBRACE_in_block664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression684 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression686 = new BitSet(new ulong[]{0x102800000080000UL});
		public static readonly BitSet _expandVar_in_expandExpression688 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _TO_in_expandExpression690 = new BitSet(new ulong[]{0x102800000080000UL});
		public static readonly BitSet _expandVar_in_expandExpression692 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression694 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _expandBlock_in_expandExpression696 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock721 = new BitSet(new ulong[]{0x102810000090000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _mathExpression_in_expandBlock723 = new BitSet(new ulong[]{0x102810000090000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion774 = new BitSet(new ulong[]{0x2800000080000UL,0x20000040000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadPageExpresssion777 = new BitSet(new ulong[]{0x2000000000000002UL,0x0UL,0x20UL});
		public static readonly BitSet _tableHint_in_downloadPageExpresssion779 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _javascriptCode_in_downloadPageExpresssion782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LAMBDA_in_javascriptCode794 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_javascriptCode796 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _STRING_LITERAL_QUOTE_in_javascriptCode798 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_javascriptCode800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression819 = new BitSet(new ulong[]{0x2800000080000UL,0x20000040000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadImageExpression822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadExpressionArg833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadExpressionArg838 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _sqlStatement_in_downloadExpressionArg841 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadExpressionArg843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_downloadExpressionArg849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference895 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _DOT_in_tableMemberReference897 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement925 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement927 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement929 = new BitSet(new ulong[]{0x102810830080000UL,0x20400048000UL,0x80UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement952 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement954 = new BitSet(new ulong[]{0x102810830080000UL,0x20400048000UL,0x80UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator977 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator979 = new BitSet(new ulong[]{0x100010000080000UL,0x20000008000UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression1002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression1007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression1012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression1017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1038 = new BitSet(new ulong[]{0x2UL,0x800080UL});
		public static readonly BitSet _set_in_mathExpression1041 = new BitSet(new ulong[]{0x102810000080000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1052 = new BitSet(new ulong[]{0x2UL,0x800080UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1070 = new BitSet(new ulong[]{0x4000082UL});
		public static readonly BitSet _set_in_mathExpressionGroup1073 = new BitSet(new ulong[]{0x102810000080000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1084 = new BitSet(new ulong[]{0x4000082UL});
		public static readonly BitSet _variableReference_in_atom1105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_atom1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1132 = new BitSet(new ulong[]{0x102810000080000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _mathExpression_in_atom1135 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1184 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_insertStatement1186 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1203 = new BitSet(new ulong[]{0x102810000080000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _mathExpression_in_insertStatement1205 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1221 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_insertStatement1223 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatment1250 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_updateStatment1252 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _setArgs_in_updateStatment1254 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _fromStatement_in_updateStatment1256 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _whereStatement_in_updateStatment1259 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setArgs1291 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _setArg_in_setArgs1294 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_setArgs1296 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _setArg_in_setArgs1300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_setArg1320 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_setArg1322 = new BitSet(new ulong[]{0x102890000081000UL,0x20000208000UL});
		public static readonly BitSet _selectArgs_in_setArg1324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1348 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1351 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nestedSelectStatement_in_nestedSqlStatement1366 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _fromStatement_in_nestedSqlStatement1369 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _whereStatement_in_nestedSqlStatement1372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1385 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolExpression_in_whereStatement1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1407 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_fromStatement1411 = new BitSet(new ulong[]{0x808800000000002UL});
		public static readonly BitSet _ID_in_fromStatement1415 = new BitSet(new ulong[]{0x808000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1445 = new BitSet(new ulong[]{0x830000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1447 = new BitSet(new ulong[]{0x808800000000002UL,0x0UL,0x20UL});
		public static readonly BitSet _ID_in_fromStatement1449 = new BitSet(new ulong[]{0x808000000000002UL,0x0UL,0x20UL});
		public static readonly BitSet _tableHint_in_fromStatement1452 = new BitSet(new ulong[]{0x808000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1482 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_fromStatement1484 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _nestedSqlStatement_in_fromStatement1486 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_fromStatement1488 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_fromStatement1490 = new BitSet(new ulong[]{0x808000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_tableHint1521 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_tableHint1523 = new BitSet(new ulong[]{0x1000000000000000UL,0x100000000000000UL});
		public static readonly BitSet _hint_in_tableHint1526 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _PIPE_in_tableHint1528 = new BitSet(new ulong[]{0x1000000000000000UL,0x100000000000000UL});
		public static readonly BitSet _hint_in_tableHint1532 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_tableHint1534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THREAD_in_hint1550 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_hint1552 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _INT_in_hint1554 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JS_in_hint1569 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_hint1572 = new BitSet(new ulong[]{0x100000000000000UL,0x20000000000UL});
		public static readonly BitSet _jsArg_in_hint1575 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_hint1577 = new BitSet(new ulong[]{0x100000000000000UL,0x20000000000UL});
		public static readonly BitSet _jsArg_in_hint1581 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1622 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1626 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x100UL});
		public static readonly BitSet _ID_in_innerJoinStatement1630 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_innerJoinStatement1633 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1635 = new BitSet(new ulong[]{0x808000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1665 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_innerJoinStatement1667 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _nestedSqlStatement_in_innerJoinStatement1669 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_innerJoinStatement1671 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1673 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_innerJoinStatement1675 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1677 = new BitSet(new ulong[]{0x808000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_tableGenerationClause1710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_tableGenerationClause1715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_tableGenerationClause1720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1747 = new BitSet(new ulong[]{0x102890000081000UL,0x20000208000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1750 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_selectStatement1752 = new BitSet(new ulong[]{0x102890000081000UL,0x20000208000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1770 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_nestedSelectStatement1796 = new BitSet(new ulong[]{0x102890000081000UL,0x20000208000UL});
		public static readonly BitSet _selectArgs_in_nestedSelectStatement1799 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_nestedSelectStatement1801 = new BitSet(new ulong[]{0x102890000081000UL,0x20000208000UL});
		public static readonly BitSet _selectArgs_in_nestedSelectStatement1805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1826 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _PLUS_in_selectArgs1828 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _selectArg_in_selectArgs1832 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AS_in_selectArgs1835 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_selectArgs1837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1860 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AS_in_selectArgs1863 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_selectArgs1865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1896 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1898 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x1UL});
		public static readonly BitSet _ELSE_in_caseStatement1902 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1904 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_caseStatement1908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1925 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _selectArg_in_caseStatement1927 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1929 = new BitSet(new ulong[]{0x180000000UL,0x0UL,0x1UL});
		public static readonly BitSet _ELSE_in_caseStatement1933 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1935 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _END_in_caseStatement1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1983 = new BitSet(new ulong[]{0x100010000000000UL,0x20000008000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1985 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1987 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement2010 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement2012 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement2014 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement2016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression2037 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _OR_in_boolExpression2040 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _andExpression_in_boolExpression2043 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _boolTerm_in_andExpression2057 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression2060 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolTerm_in_andExpression2063 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm2078 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm2080 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm2082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_boolTerm2100 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _DOT_in_boolTerm2102 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _NODES_in_boolTerm2104 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm2106 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm2108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm2131 = new BitSet(new ulong[]{0xC000300200000002UL,0x6002UL});
		public static readonly BitSet _boolOperator_in_boolTerm2134 = new BitSet(new ulong[]{0x102890000080000UL,0x20000208000UL});
		public static readonly BitSet _selectArg_in_boolTerm2137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm2145 = new BitSet(new ulong[]{0x102890000080000UL,0x20000249000UL});
		public static readonly BitSet _boolExpression_in_boolTerm2148 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm2150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg2208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg2215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg2220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveFunction_in_selectArg2225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GETDATE_in_primitiveFunction2236 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_primitiveFunction2239 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_primitiveFunction2242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable2254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable2271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable2276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement2288 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement2290 = new BitSet(new ulong[]{0x2UL,0x2000000000020UL});
		public static readonly BitSet _takeStatement_in_pickStatement2292 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _matchStatement_in_pickStatement2295 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _TAKE_in_takeStatement2321 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement2323 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement2325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2338 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement2340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2351 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _HTML_in_takeStatement2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement2371 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement2373 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement2375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement2398 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2421 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _FILE_in_createTableStatement2423 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2425 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2427 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2429 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2432 = new BitSet(new ulong[]{0x0UL,0x10UL,0x20UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement2434 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement2437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2458 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _BUFFER_in_createTableStatement2460 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2462 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2464 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2466 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2485 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _MSSQL_in_createTableStatement2487 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2489 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2491 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2493 = new BitSet(new ulong[]{0x800000020000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2496 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _sqlTableWithStatement_in_createTableStatement2498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation2522 = new BitSet(new ulong[]{0x102810000080000UL,0x20000048000UL,0x80UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation2525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_sqlTableWithStatement2537 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_sqlTableWithStatement2539 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _sqlTableWithVariablesStatement_in_sqlTableWithStatement2541 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_sqlTableWithStatement2543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2564 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_sqlTableWithVariablesStatement2566 = new BitSet(new ulong[]{0x1200000UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_sqlTableWithVariableStatement2587 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_sqlTableWithVariableStatement2596 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_sqlTableWithVariableStatement2599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement2610 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2612 = new BitSet(new ulong[]{0x2000020000UL,0x200000000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2614 = new BitSet(new ulong[]{0x2000020000UL,0x200000000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2640 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2642 = new BitSet(new ulong[]{0x2000000000UL,0x200000000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2662 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2671 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2686 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2688 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2713 = new BitSet(new ulong[]{0x201020000800000UL,0x10000000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableHint_in_synpred23_Scrape779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred31_Scrape997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setArg_in_synpred50_Scrape1294 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred50_Scrape1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred75_Scrape1750 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred75_Scrape1752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred77_Scrape1799 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _COMMA_in_synpred77_Scrape1801 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
