//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-02-03 21:52:50

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NODES", "NOTEQUAL", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "TRUNCATE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__112=112;
	public const int T__113=113;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CREATE=20;
	public const int DIGIT=21;
	public const int DIV=22;
	public const int DOT=23;
	public const int DOWNLOAD_IMAGE=24;
	public const int DOWNLOAD_PAGE=25;
	public const int EACH=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EQUALS=29;
	public const int EXEC=30;
	public const int EXPAND=31;
	public const int EXPAND_INTERATION_VARIABLE=32;
	public const int FIELD_TERMINATOR=33;
	public const int FILE=34;
	public const int FILE_TABLE=35;
	public const int FLOAT=36;
	public const int FROM=37;
	public const int GREATERTHAN=38;
	public const int GREATERTHANEQUAL=39;
	public const int HTML=40;
	public const int ID=41;
	public const int IDENTITY=42;
	public const int IDENTITY_VAR=43;
	public const int IN=44;
	public const int INNER_JOIN=45;
	public const int INSERT_DIRECTORY=46;
	public const int INSERT_INTO=47;
	public const int INSERT_INTO_DIRECTORY=48;
	public const int INSERT_OVERWRITE=49;
	public const int INT=50;
	public const int INTEGER=51;
	public const int JOIN=52;
	public const int LESSTHAN=53;
	public const int LESSTHANEQUAL=54;
	public const int LETTER=55;
	public const int LINE_COMMENT_DASH=56;
	public const int LINE_COMMENT_SLASH=57;
	public const int LOCATION=58;
	public const int MATCH=59;
	public const int MEMBER_REFERENCE=60;
	public const int MINIS=61;
	public const int NEWLINE=62;
	public const int NODES=63;
	public const int NOTEQUAL=64;
	public const int NULL=65;
	public const int NULL_OPERATOR=66;
	public const int OPENBRACE=67;
	public const int OPENPAREN=68;
	public const int OR=69;
	public const int OTHERCHARS=70;
	public const int PICK=71;
	public const int PLUS=72;
	public const int POST_PICK=73;
	public const int PRE_PICK=74;
	public const int PROCEDURE=75;
	public const int PROGRAM=76;
	public const int PROXIES=77;
	public const int PROXY_LIST=78;
	public const int QUOTE=79;
	public const int REPLACE=80;
	public const int ROW_REFERENCE=81;
	public const int ROW_TERMINATOR=82;
	public const int SELECT=83;
	public const int SELECT_ALL=84;
	public const int SELECT_ARG=85;
	public const int SELECT_ID=86;
	public const int SELECT_STATEMENT=87;
	public const int STRING=88;
	public const int STRING_LITERAL=89;
	public const int TABLE_ALIAS=90;
	public const int TABLE_COLUMN_ARG=91;
	public const int TABLE_COLUMN_ARGS=92;
	public const int TABLE_MEMBER_REFERENCE=93;
	public const int TABLE_VARIABLE_REFERENCE=94;
	public const int TAKE=95;
	public const int TAKE_ATTRIBUTE=96;
	public const int TAKE_HTML=97;
	public const int TAKE_TEXT=98;
	public const int TEST=99;
	public const int TEXT=100;
	public const int THEN=101;
	public const int TO=102;
	public const int TRUNCATE=103;
	public const int VARIABLE_DECLARATION=104;
	public const int VARIABLE_REFERENCE=105;
	public const int WHEN=106;
	public const int WHEN_BOOL_STATEMENT=107;
	public const int WHEN_LITERAL_STATEMENT=108;
	public const int WHERE=109;
	public const int WITH=110;
	public const int WS=111;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:63:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(63, 1);
		try
		{
			// Scrape.g:64:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:64:4: noBraceBlock EOF
				{
				DebugLocation(64, 4);
				PushFollow(Follow._noBraceBlock_in_program222);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(64, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program224); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(64, 24);
					// Scrape.g:64:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(64, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:65:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(65, 4);
				PushFollow(Follow._proxyStatement_in_program237);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(65, 19);
				PushFollow(Follow._noBraceBlock_in_program239);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(65, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program241); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(65, 39);
					// Scrape.g:65:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(65, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(65, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:66:4: procedureDefinition
				{
				DebugLocation(66, 4);
				PushFollow(Follow._procedureDefinition_in_program256);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 66:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(66, 27);
					// Scrape.g:66:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(66, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(66, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(67, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:69:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(69, 1);
		try
		{
			// Scrape.g:70:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:70:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(70, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition275); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(70, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(70, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition279); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(70, 27);
			// Scrape.g:70:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:70:27: tableColumnArgs
					{
					DebugLocation(70, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition281);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(70, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition284); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(70, 55);
			PushFollow(Follow._block_in_procedureDefinition286);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: ID, block, PROCEDURE, tableColumnArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 70:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(70, 64);
				// Scrape.g:70:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(70, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(70, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(70, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(70, 85);
				// Scrape.g:70:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(70, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:73:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(73, 1);
		try
		{
			// Scrape.g:74:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable )
			int alt3=7;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case ID:
				{
				alt3 = 3;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 4;
				}
				break;
			case EACH:
				{
				alt3 = 5;
				}
				break;
			case EXEC:
				{
				alt3 = 6;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:74:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._createTableStatement_in_statement314);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:75:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._sqlStatement_in_statement319);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:76:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement324);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:77:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._insertStatement_in_statement329);
				insertStatement16=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:78:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._eachStatement_in_statement334);
				eachStatement17=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:79:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._procedureCall_in_statement339);
				procedureCall18=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:80:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._truncateTable_in_statement344);
				truncateTable19=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable19.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:83:1: truncateTable : TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE20 = default(CommonToken);
		CommonToken ID21 = default(CommonToken);

		CommonTree TRUNCATE20_tree = default(CommonTree);
		CommonTree ID21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(83, 1);
		try
		{
			// Scrape.g:84:2: ( TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:84:4: TRUNCATE ID
			{
			DebugLocation(84, 4);
			TRUNCATE20=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE20);

			DebugLocation(84, 13);
			ID21=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable357); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID21);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 84:16: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(84, 19);
				// Scrape.g:84:19: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(84, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(84, 30);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID21));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:88:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC22 = default(CommonToken);
		CommonToken ID23 = default(CommonToken);
		CommonToken OPENPAREN24 = default(CommonToken);
		CommonToken CLOSEPAREN26 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC22_tree = default(CommonTree);
		CommonTree ID23_tree = default(CommonTree);
		CommonTree OPENPAREN24_tree = default(CommonTree);
		CommonTree CLOSEPAREN26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(88, 1);
		try
		{
			// Scrape.g:89:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:89:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(89, 5);
			EXEC22=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall379); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC22);

			DebugLocation(89, 10);
			ID23=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall381); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID23);

			DebugLocation(89, 13);
			OPENPAREN24=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall383); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN24);

			DebugLocation(89, 23);
			// Scrape.g:89:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:89:23: procedureCallList
					{
					DebugLocation(89, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall385);
					procedureCallList25=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList25.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(89, 42);
			CLOSEPAREN26=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall388); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN26);



			{
			// AST REWRITE
			// elements: EXEC, procedureCallList, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 89:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(89, 56);
				// Scrape.g:89:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(89, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(89, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(89, 66);
				// Scrape.g:89:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(89, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:92:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(92, 1);
		try
		{
			// Scrape.g:93:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:93:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(93, 4);
			// Scrape.g:93:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:93:5: callArgs COMMA
					{
					DebugLocation(93, 5);
					PushFollow(Follow._callArgs_in_procedureCallList411);
					callArgs27=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs27.Tree);
					DebugLocation(93, 14);
					COMMA28=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList413); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA28);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(93, 22);
			PushFollow(Follow._callArgs_in_procedureCallList417);
			callArgs29=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs29.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 93:31: -> ( callArgs )*
			{
				DebugLocation(93, 34);
				// Scrape.g:93:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(93, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:96:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(96, 1);
		try
		{
			// Scrape.g:97:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:97:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(97, 4);
				PushFollow(Follow._expandVar_in_callArgs433);
				expandVar30=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar30.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:98:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(98, 4);
				STRING_LITERAL31=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs438); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL31_tree = (CommonTree)adaptor.Create(STRING_LITERAL31);
				adaptor.AddChild(root_0, STRING_LITERAL31_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:101:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES32 = default(CommonToken);
		CommonToken OPENPAREN33 = default(CommonToken);
		CommonToken CLOSEPAREN35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES32_tree = default(CommonTree);
		CommonTree OPENPAREN33_tree = default(CommonTree);
		CommonTree CLOSEPAREN35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(101, 1);
		try
		{
			// Scrape.g:102:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:102:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(102, 4);
			PROXIES32=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement449); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES32);

			DebugLocation(102, 12);
			OPENPAREN33=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement451); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN33);

			DebugLocation(102, 22);
			PushFollow(Follow._proxyList_in_proxyStatement453);
			proxyList34=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList34.Tree);
			DebugLocation(102, 32);
			CLOSEPAREN35=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement455); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN35);

			DebugLocation(102, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement457);
			proxyTest36=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest36.Tree);


			{
			// AST REWRITE
			// elements: proxyTest, PROXIES, proxyList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 102:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(102, 56);
				// Scrape.g:102:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(102, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(102, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(102, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(103, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:105:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL37 = default(CommonToken);
		CommonToken COMMA38 = default(CommonToken);
		CommonToken STRING_LITERAL39 = default(CommonToken);

		CommonTree STRING_LITERAL37_tree = default(CommonTree);
		CommonTree COMMA38_tree = default(CommonTree);
		CommonTree STRING_LITERAL39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(105, 1);
		try
		{
			// Scrape.g:106:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:106:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(106, 4);
			// Scrape.g:106:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:106:5: STRING_LITERAL COMMA
					{
					DebugLocation(106, 5);
					STRING_LITERAL37=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList479); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL37);

					DebugLocation(106, 20);
					COMMA38=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList481); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA38);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(106, 28);
			STRING_LITERAL39=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList485); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL39);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 106:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(106, 46);
				// Scrape.g:106:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(106, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(106, 59);
				// Scrape.g:106:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(106, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:109:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH40 = default(CommonToken);
		CommonToken TEST41 = default(CommonToken);
		CommonToken OPENBRACE42 = default(CommonToken);
		CommonToken CLOSEBRACE44 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH40_tree = default(CommonTree);
		CommonTree TEST41_tree = default(CommonTree);
		CommonTree OPENBRACE42_tree = default(CommonTree);
		CommonTree CLOSEBRACE44_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(109, 1);
		try
		{
			// Scrape.g:110:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:110:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(110, 4);
			WITH40=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest505); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH40);

			DebugLocation(110, 9);
			TEST41=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST41);

			DebugLocation(110, 14);
			OPENBRACE42=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest509); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE42);

			DebugLocation(110, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest511);
			sqlStatement43=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement43.Tree);
			DebugLocation(110, 37);
			CLOSEBRACE44=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest513); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE44);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 110:48: -> sqlStatement
			{
				DebugLocation(110, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:113:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 11);
		TraceIn("eachStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH45 = default(CommonToken);
		CommonToken OPENPAREN46 = default(CommonToken);
		CommonToken IN47 = default(CommonToken);
		CommonToken CLOSEPAREN48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH45_tree = default(CommonTree);
		CommonTree OPENPAREN46_tree = default(CommonTree);
		CommonTree IN47_tree = default(CommonTree);
		CommonTree CLOSEPAREN48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(113, 1);
		try
		{
			// Scrape.g:114:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:114:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(114, 4);
			EACH45=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement528); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH45);

			DebugLocation(114, 9);
			OPENPAREN46=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement530); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN46);

			DebugLocation(114, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(114, 24);
			IN47=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement536); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN47);

			DebugLocation(114, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(114, 32);
			CLOSEPAREN48=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement542); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN48);

			DebugLocation(114, 43);
			PushFollow(Follow._block_in_eachStatement544);
			block49=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block49.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 114:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(114, 52);
				// Scrape.g:114:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(114, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(114, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(114, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(114, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 11);
			LeaveRule("eachStatement", 11);
			LeaveRule_eachStatement();
		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:117:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 12);
		TraceIn("noBraceBlock", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(117, 1);
		try
		{
			// Scrape.g:118:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:118:4: ( statement )*
			{
			DebugLocation(118, 4);
			// Scrape.g:118:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||LA8_1==TRUNCATE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:118:4: statement
					{
					DebugLocation(118, 4);
					PushFollow(Follow._statement_in_noBraceBlock569);
					statement50=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement50.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 118:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(118, 18);
				// Scrape.g:118:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(118, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(118, 26);
				// Scrape.g:118:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(118, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 12);
			LeaveRule("noBraceBlock", 12);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:121:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 13);
		TraceIn("block", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE51 = default(CommonToken);
		CommonToken CLOSEBRACE53 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE51_tree = default(CommonTree);
		CommonTree CLOSEBRACE53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(121, 1);
		try
		{
			// Scrape.g:122:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:122:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(122, 4);
			OPENBRACE51=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block590); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE51);

			DebugLocation(122, 14);
			// Scrape.g:122:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||LA9_1==TRUNCATE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:122:14: statement
					{
					DebugLocation(122, 14);
					PushFollow(Follow._statement_in_block592);
					statement52=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement52.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(122, 25);
			CLOSEBRACE53=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block595); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE53);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 122:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(122, 39);
				// Scrape.g:122:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(122, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(122, 47);
				// Scrape.g:122:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(122, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 13);
			LeaveRule("block", 13);
			LeaveRule_block();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:125:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 14);
		TraceIn("expandExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken TO57 = default(CommonToken);
		CommonToken CLOSEPAREN59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar58 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree TO57_tree = default(CommonTree);
		CommonTree CLOSEPAREN59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(125, 1);
		try
		{
			// Scrape.g:126:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:126:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(126, 4);
			EXPAND54=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression615); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND54);

			DebugLocation(126, 11);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression617); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(126, 21);
			PushFollow(Follow._expandVar_in_expandExpression619);
			expandVar56=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar56.Tree);
			DebugLocation(126, 31);
			TO57=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression621); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO57);

			DebugLocation(126, 34);
			PushFollow(Follow._expandVar_in_expandExpression623);
			expandVar58=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar58.Tree);
			DebugLocation(126, 44);
			CLOSEPAREN59=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression625); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN59);

			DebugLocation(126, 55);
			// Scrape.g:126:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:126:55: expandBlock
					{
					DebugLocation(126, 55);
					PushFollow(Follow._expandBlock_in_expandExpression627);
					expandBlock60=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock60.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandVar, EXPAND, expandBlock, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 126:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(126, 71);
				// Scrape.g:126:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(126, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(126, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(126, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(126, 100);
				// Scrape.g:126:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(126, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 14);
			LeaveRule("expandExpression", 14);
			LeaveRule_expandExpression();
		}
		DebugLocation(127, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:129:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 15);
		TraceIn("expandBlock", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(129, 1);
		try
		{
			// Scrape.g:130:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:130:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(130, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock652); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(130, 14);
			// Scrape.g:130:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==112))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:130:14: mathExpression
					{
					DebugLocation(130, 14);
					PushFollow(Follow._mathExpression_in_expandBlock654);
					mathExpression62=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression62.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(130, 30);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock657); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 130:41: -> ( mathExpression )*
			{
				DebugLocation(130, 44);
				// Scrape.g:130:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(130, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 15);
			LeaveRule("expandBlock", 15);
			LeaveRule_expandBlock();
		}
		DebugLocation(131, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:133:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 16);
		TraceIn("expandVar", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT64 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(133, 1);
		try
		{
			// Scrape.g:134:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:134:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(134, 4);
				INT64=(CommonToken)Match(input,INT,Follow._INT_in_expandVar673); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT64_tree = (CommonTree)adaptor.Create(INT64);
				adaptor.AddChild(root_0, INT64_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:135:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._variableReference_in_expandVar678);
				variableReference65=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference65.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 16);
			LeaveRule("expandVar", 16);
			LeaveRule_expandVar();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:138:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 17);
		TraceIn("downloadExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(138, 1);
		try
		{
			// Scrape.g:139:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:139:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression689);
				downloadPageExpresssion66=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion66.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:140:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression694);
				downloadImageExpression67=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression67.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 17);
			LeaveRule("downloadExpression", 17);
			LeaveRule_downloadExpression();
		}
		DebugLocation(141, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:143:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE variableReference -> ^( DOWNLOAD_PAGE variableReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 18);
		TraceIn("downloadPageExpresssion", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE68 = default(CommonToken);
		CommonToken STRING_LITERAL69 = default(CommonToken);
		CommonToken OPENPAREN70 = default(CommonToken);
		CommonToken CLOSEPAREN72 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE68_tree = default(CommonTree);
		CommonTree STRING_LITERAL69_tree = default(CommonTree);
		CommonTree OPENPAREN70_tree = default(CommonTree);
		CommonTree CLOSEPAREN72_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(143, 1);
		try
		{
			// Scrape.g:144:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE variableReference -> ^( DOWNLOAD_PAGE variableReference ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_PAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==OPENPAREN||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else if ((LA15_2==COMMAND_VAR||LA15_2==ID||LA15_2==IDENTITY_VAR))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:144:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 17);
				DOWNLOAD_PAGE68=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion705); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_PAGE68_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE68);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE68_tree, root_0);
				}
				DebugLocation(144, 19);
				// Scrape.g:144:19: ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==OPENPAREN))
				{
					alt14 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:144:20: STRING_LITERAL
					{
					DebugLocation(144, 20);
					STRING_LITERAL69=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion709); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL69_tree = (CommonTree)adaptor.Create(STRING_LITERAL69);
					adaptor.AddChild(root_0, STRING_LITERAL69_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:144:37: OPENPAREN sqlStatement CLOSEPAREN
					{
					DebugLocation(144, 37);
					OPENPAREN70=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadPageExpresssion713); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPENPAREN70_tree = (CommonTree)adaptor.Create(OPENPAREN70);
					adaptor.AddChild(root_0, OPENPAREN70_tree);
					}
					DebugLocation(144, 47);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion715);
					sqlStatement71=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement71.Tree);
					DebugLocation(144, 60);
					CLOSEPAREN72=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadPageExpresssion717); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CLOSEPAREN72_tree = (CommonTree)adaptor.Create(CLOSEPAREN72);
					adaptor.AddChild(root_0, CLOSEPAREN72_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:145:4: DOWNLOAD_PAGE variableReference
				{
				DebugLocation(145, 4);
				DOWNLOAD_PAGE73=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE73);

				DebugLocation(145, 18);
				PushFollow(Follow._variableReference_in_downloadPageExpresssion725);
				variableReference74=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableReference.Add(variableReference74.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE, variableReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 145:36: -> ^( DOWNLOAD_PAGE variableReference )
				{
					DebugLocation(145, 39);
					// Scrape.g:145:39: ^( DOWNLOAD_PAGE variableReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(145, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(145, 55);
					adaptor.AddChild(root_1, stream_variableReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 18);
			LeaveRule("downloadPageExpresssion", 18);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:148:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_IMAGE variableReference -> ^( DOWNLOAD_IMAGE variableReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 19);
		TraceIn("downloadImageExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE75 = default(CommonToken);
		CommonToken STRING_LITERAL76 = default(CommonToken);
		CommonToken OPENPAREN77 = default(CommonToken);
		CommonToken CLOSEPAREN79 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE80 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE75_tree = default(CommonTree);
		CommonTree STRING_LITERAL76_tree = default(CommonTree);
		CommonTree OPENPAREN77_tree = default(CommonTree);
		CommonTree CLOSEPAREN79_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(148, 1);
		try
		{
			// Scrape.g:149:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_IMAGE variableReference -> ^( DOWNLOAD_IMAGE variableReference ) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==DOWNLOAD_IMAGE))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==OPENPAREN||LA17_2==STRING_LITERAL))
				{
					alt17 = 1;
				}
				else if ((LA17_2==COMMAND_VAR||LA17_2==ID||LA17_2==IDENTITY_VAR))
				{
					alt17 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:149:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 18);
				DOWNLOAD_IMAGE75=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression744); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_IMAGE75_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE75);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE75_tree, root_0);
				}
				DebugLocation(149, 20);
				// Scrape.g:149:20: ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==STRING_LITERAL))
				{
					alt16 = 1;
				}
				else if ((LA16_1==OPENPAREN))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:149:21: STRING_LITERAL
					{
					DebugLocation(149, 21);
					STRING_LITERAL76=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression748); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL76_tree = (CommonTree)adaptor.Create(STRING_LITERAL76);
					adaptor.AddChild(root_0, STRING_LITERAL76_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:149:38: OPENPAREN sqlStatement CLOSEPAREN
					{
					DebugLocation(149, 38);
					OPENPAREN77=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadImageExpression752); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPENPAREN77_tree = (CommonTree)adaptor.Create(OPENPAREN77);
					adaptor.AddChild(root_0, OPENPAREN77_tree);
					}
					DebugLocation(149, 48);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression754);
					sqlStatement78=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement78.Tree);
					DebugLocation(149, 61);
					CLOSEPAREN79=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadImageExpression756); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CLOSEPAREN79_tree = (CommonTree)adaptor.Create(CLOSEPAREN79);
					adaptor.AddChild(root_0, CLOSEPAREN79_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:150:4: DOWNLOAD_IMAGE variableReference
				{
				DebugLocation(150, 4);
				DOWNLOAD_IMAGE80=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression762); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE80);

				DebugLocation(150, 19);
				PushFollow(Follow._variableReference_in_downloadImageExpression764);
				variableReference81=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableReference.Add(variableReference81.Tree);


				{
				// AST REWRITE
				// elements: variableReference, DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:37: -> ^( DOWNLOAD_IMAGE variableReference )
				{
					DebugLocation(150, 40);
					// Scrape.g:150:40: ^( DOWNLOAD_IMAGE variableReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(150, 57);
					adaptor.AddChild(root_1, stream_variableReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 19);
			LeaveRule("downloadImageExpression", 19);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(151, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:153:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 20);
		TraceIn("variableReference", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID82 = default(CommonToken);
		CommonToken COMMAND_VAR83 = default(CommonToken);
		CommonToken IDENTITY_VAR84 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID82_tree = default(CommonTree);
		CommonTree COMMAND_VAR83_tree = default(CommonTree);
		CommonTree IDENTITY_VAR84_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(153, 1);
		try
		{
			// Scrape.g:154:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==DOT))
				{
					alt18 = 4;
				}
				else if ((LA18_2==EOF||LA18_2==ASTERISK||(LA18_2>=CLOSEBRACE && LA18_2<=COMMAND_VAR)||LA18_2==CREATE||LA18_2==DIV||LA18_2==EACH||LA18_2==EXEC||LA18_2==ID||LA18_2==IDENTITY_VAR||(LA18_2>=INSERT_DIRECTORY && LA18_2<=INSERT_INTO)||(LA18_2>=INSERT_OVERWRITE && LA18_2<=INT)||LA18_2==MINIS||(LA18_2>=NULL && LA18_2<=NULL_OPERATOR)||LA18_2==OPENPAREN||LA18_2==PLUS||LA18_2==SELECT||LA18_2==STRING_LITERAL||(LA18_2>=TO && LA18_2<=TRUNCATE)||LA18_2==WHERE||LA18_2==112))
				{
					alt18 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt18 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt18 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:154:4: ID
				{
				DebugLocation(154, 4);
				ID82=(CommonToken)Match(input,ID,Follow._ID_in_variableReference784); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID82);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 154:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(154, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID82));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:155:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				COMMAND_VAR83=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference794); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR83_tree = (CommonTree)adaptor.Create(COMMAND_VAR83);
				adaptor.AddChild(root_0, COMMAND_VAR83_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:156:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				IDENTITY_VAR84=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference799); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR84_tree = (CommonTree)adaptor.Create(IDENTITY_VAR84);
				adaptor.AddChild(root_0, IDENTITY_VAR84_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:157:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference804);
				tableMemberReference85=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference85.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 20);
			LeaveRule("variableReference", 20);
			LeaveRule_variableReference();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:160:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 21);
		TraceIn("tableMemberReference", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT86 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT86_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(160, 1);
		try
		{
			// Scrape.g:161:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:161:4: t= ID DOT m= ID
			{
			DebugLocation(161, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference818); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(161, 9);
			DOT86=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference820); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT86);

			DebugLocation(161, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference824); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 161:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(161, 21);
				// Scrape.g:161:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(161, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(161, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(161, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 21);
			LeaveRule("tableMemberReference", 21);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:164:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 22);
		TraceIn("variableDeclarationStatement", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID87 = default(CommonToken);
		CommonToken EQUALS88 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID87_tree = default(CommonTree);
		CommonTree EQUALS88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(164, 1);
		try
		{
			// Scrape.g:165:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:165:4: ID EQUALS assignmentExpression
			{
			DebugLocation(165, 4);
			ID87=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement848); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID87);

			DebugLocation(165, 7);
			EQUALS88=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement850); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS88);

			DebugLocation(165, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement852);
			assignmentExpression89=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression89.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 165:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(165, 38);
				// Scrape.g:165:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(165, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(165, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(165, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 22);
			LeaveRule("variableDeclarationStatement", 22);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:168:1: nullOperator : variableReference NULL_OPERATOR ^ ( variableReference | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 23);
		TraceIn("nullOperator", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NULL_OPERATOR91 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NULL_OPERATOR91_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(168, 1);
		try
		{
			// Scrape.g:169:2: ( variableReference NULL_OPERATOR ^ ( variableReference | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:169:4: variableReference NULL_OPERATOR ^ ( variableReference | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(169, 4);
			PushFollow(Follow._variableReference_in_nullOperator873);
			variableReference90=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference90.Tree);
			DebugLocation(169, 35);
			NULL_OPERATOR91=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator875); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR91_tree = (CommonTree)adaptor.Create(NULL_OPERATOR91);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR91_tree, root_0);
			}
			DebugLocation(169, 37);
			// Scrape.g:169:37: ( variableReference | literal )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==COMMAND_VAR||LA19_1==ID||LA19_1==IDENTITY_VAR))
			{
				alt19 = 1;
			}
			else if ((LA19_1==INT||LA19_1==NULL||LA19_1==STRING_LITERAL))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:169:38: variableReference
				{
				DebugLocation(169, 38);
				PushFollow(Follow._variableReference_in_nullOperator879);
				variableReference92=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference92.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:169:56: literal
				{
				DebugLocation(169, 56);
				PushFollow(Follow._literal_in_nullOperator881);
				literal93=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal93.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 23);
			LeaveRule("nullOperator", 23);
			LeaveRule_nullOperator();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:172:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 24);
		TraceIn("assignmentExpression", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(172, 1);
		try
		{
			// Scrape.g:173:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator )
			int alt20=5;
			try { DebugEnterDecision(20, false);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case DOT:
					{
					int LA20_3 = input.LA(3);

					if ((LA20_3==ID))
					{
						int LA20_4 = input.LA(4);

						if ((LA20_4==EOF||LA20_4==ASTERISK||LA20_4==CLOSEBRACE||LA20_4==CREATE||LA20_4==DIV||LA20_4==EACH||LA20_4==EXEC||LA20_4==ID||(LA20_4>=INSERT_DIRECTORY && LA20_4<=INSERT_INTO)||LA20_4==INSERT_OVERWRITE||LA20_4==MINIS||LA20_4==PLUS||LA20_4==SELECT||LA20_4==TRUNCATE))
						{
							alt20 = 1;
						}
						else if ((LA20_4==NULL_OPERATOR))
						{
							alt20 = 5;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 20, 10, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 8, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case ASTERISK:
				case CLOSEBRACE:
				case CREATE:
				case DIV:
				case EACH:
				case EXEC:
				case ID:
				case INSERT_DIRECTORY:
				case INSERT_INTO:
				case INSERT_OVERWRITE:
				case MINIS:
				case PLUS:
				case SELECT:
				case TRUNCATE:
					{
					alt20 = 1;
					}
					break;
				case NULL_OPERATOR:
					{
					alt20 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case COMMAND_VAR:
				{
				int LA20_2 = input.LA(2);

				if ((LA20_2==EOF||LA20_2==ASTERISK||LA20_2==CLOSEBRACE||LA20_2==CREATE||LA20_2==DIV||LA20_2==EACH||LA20_2==EXEC||LA20_2==ID||(LA20_2>=INSERT_DIRECTORY && LA20_2<=INSERT_INTO)||LA20_2==INSERT_OVERWRITE||LA20_2==MINIS||LA20_2==PLUS||LA20_2==SELECT||LA20_2==TRUNCATE))
				{
					alt20 = 1;
				}
				else if ((LA20_2==NULL_OPERATOR))
				{
					alt20 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA20_2 = input.LA(2);

				if ((LA20_2==EOF||LA20_2==ASTERISK||LA20_2==CLOSEBRACE||LA20_2==CREATE||LA20_2==DIV||LA20_2==EACH||LA20_2==EXEC||LA20_2==ID||(LA20_2>=INSERT_DIRECTORY && LA20_2<=INSERT_INTO)||LA20_2==INSERT_OVERWRITE||LA20_2==MINIS||LA20_2==PLUS||LA20_2==SELECT||LA20_2==TRUNCATE))
				{
					alt20 = 1;
				}
				else if ((LA20_2==NULL_OPERATOR))
				{
					alt20 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 112:
				{
				alt20 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt20 = 2;
				}
				break;
			case EXPAND:
				{
				alt20 = 3;
				}
				break;
			case SELECT:
				{
				alt20 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:173:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(173, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression893);
				mathExpression94=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression94.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:174:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(174, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression898);
				downloadExpression95=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression95.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:175:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression903);
				expandExpression96=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression96.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:176:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression908);
				sqlStatement97=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement97.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:177:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression913);
				nullOperator98=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator98.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 24);
			LeaveRule("assignmentExpression", 24);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:180:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 25);
		TraceIn("mathExpression", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set100 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set100_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(180, 5);
		try
		{
			// Scrape.g:181:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:181:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(181, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression929);
			mathExpressionGroup99=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup99.Tree);
			DebugLocation(181, 29);
			// Scrape.g:181:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==MINIS||LA21_1==PLUS))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:181:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(181, 46);

					set100=(CommonToken)input.LT(1);
					set100=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set100), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(181, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression943);
					mathExpressionGroup101=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup101.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 25);
			LeaveRule("mathExpression", 25);
			LeaveRule_mathExpression();
		}
		DebugLocation(182, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:184:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 26);
		TraceIn("mathExpressionGroup", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set103 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set103_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(184, 3);
		try
		{
			// Scrape.g:185:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:185:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(185, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup961);
			atom102=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom102.Tree);
			DebugLocation(185, 9);
			// Scrape.g:185:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==ASTERISK||LA22_1==DIV))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:185:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(185, 28);

					set103=(CommonToken)input.LT(1);
					set103=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set103), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(185, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup975);
					atom104=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom104.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 26);
			LeaveRule("mathExpressionGroup", 26);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(186, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:188:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 27);
		TraceIn("atom", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal106 = default(CommonToken);
		CommonToken OPENPAREN108 = default(CommonToken);
		CommonToken CLOSEPAREN110 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal106_tree = default(CommonTree);
		CommonTree OPENPAREN108_tree = default(CommonTree);
		CommonTree CLOSEPAREN110_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(188, 5);
		try
		{
			// Scrape.g:189:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt23=4;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt23 = 1;
				}
				break;
			case 112:
				{
				alt23 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt23 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt23 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:189:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 8);
				PushFollow(Follow._variableReference_in_atom996);
				variableReference105=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference105.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:190:5: '$'
				{
				DebugLocation(190, 5);
				char_literal106=(CommonToken)Match(input,112,Follow._112_in_atom1002); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(char_literal106);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 190:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(190, 12);
					// Scrape.g:190:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:191:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 5);
				PushFollow(Follow._literal_in_atom1014);
				literal107=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal107.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:192:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 17);
				OPENPAREN108=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1023); if (state.failed) return retval;
				DebugLocation(192, 19);
				PushFollow(Follow._mathExpression_in_atom1026);
				mathExpression109=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression109.Tree);
				DebugLocation(192, 44);
				CLOSEPAREN110=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1028); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 27);
			LeaveRule("atom", 27);
			LeaveRule_atom();
		}
		DebugLocation(193, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:195:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 28);
		TraceIn("literal", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set111 = default(CommonToken);

		CommonTree set111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(195, 1);
		try
		{
			// Scrape.g:196:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(196, 2);

			set111=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set111));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 28);
			LeaveRule("literal", 28);
			LeaveRule_literal();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:204:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 29);
		TraceIn("insertStatement", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO112 = default(CommonToken);
		CommonToken ID113 = default(CommonToken);
		CommonToken INSERT_DIRECTORY115 = default(CommonToken);
		CommonToken INSERT_OVERWRITE118 = default(CommonToken);
		CommonToken ID119 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO112_tree = default(CommonTree);
		CommonTree ID113_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY115_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE118_tree = default(CommonTree);
		CommonTree ID119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(204, 1);
		try
		{
			// Scrape.g:205:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt24=3;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt24 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt24 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt24 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:205:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(205, 4);
				INSERT_INTO112=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1070); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO112);

				DebugLocation(205, 16);
				ID113=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1072); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID113);

				DebugLocation(205, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1074);
				sqlStatement114=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement114.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 205:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(205, 34);
					// Scrape.g:205:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(205, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(205, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID113));
					DebugLocation(205, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:206:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(206, 4);
				INSERT_DIRECTORY115=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1089); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY115);

				DebugLocation(206, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1091);
				mathExpression116=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression116.Tree);
				DebugLocation(206, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1093);
				sqlStatement117=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement117.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, mathExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 206:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(206, 51);
					// Scrape.g:206:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(206, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(206, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(206, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:207:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(207, 4);
				INSERT_OVERWRITE118=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1107); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE118);

				DebugLocation(207, 21);
				ID119=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1109); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID119);

				DebugLocation(207, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1111);
				sqlStatement120=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement120.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 207:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(207, 39);
					// Scrape.g:207:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(207, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(207, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID119));
					DebugLocation(207, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 29);
			LeaveRule("insertStatement", 29);
			LeaveRule_insertStatement();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:212:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 30);
		TraceIn("sqlStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(212, 1);
		try
		{
			// Scrape.g:213:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:213:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(213, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1135);
			selectStatement121=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement121.Tree);
			DebugLocation(213, 20);
			// Scrape.g:213:20: ( fromStatement )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==FROM))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:213:20: fromStatement
				{
				DebugLocation(213, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1137);
				fromStatement122=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(213, 35);
			// Scrape.g:213:35: ( whereStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==WHERE))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:213:35: whereStatement
				{
				DebugLocation(213, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1140);
				whereStatement123=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: selectStatement, fromStatement, whereStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(213, 54);
				// Scrape.g:213:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(213, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(213, 89);
				// Scrape.g:213:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(213, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(213, 104);
				// Scrape.g:213:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(213, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 30);
			LeaveRule("sqlStatement", 30);
			LeaveRule_sqlStatement();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:216:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 31);
		TraceIn("whereStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE124 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE124_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(216, 1);
		try
		{
			// Scrape.g:217:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:217:5: WHERE boolExpression
			{
			DebugLocation(217, 5);
			WHERE124=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1167); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE124);

			DebugLocation(217, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1169);
			boolExpression125=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression125.Tree);


			{
			// AST REWRITE
			// elements: WHERE, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(217, 29);
				// Scrape.g:217:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(217, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(217, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 31);
			LeaveRule("whereStatement", 31);
			LeaveRule_whereStatement();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:220:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 32);
		TraceIn("fromStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM126 = default(CommonToken);
		CommonToken FROM128 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion129 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM126_tree = default(CommonTree);
		CommonTree FROM128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(220, 1);
		try
		{
			// Scrape.g:221:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1==FROM))
			{
				int LA30_2 = input.LA(2);

				if ((LA30_2==ID))
				{
					alt30 = 1;
				}
				else if (((LA30_2>=DOWNLOAD_IMAGE && LA30_2<=DOWNLOAD_PAGE)||LA30_2==EXPAND))
				{
					alt30 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 30, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:221:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(221, 4);
				FROM126=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1189); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM126);

				DebugLocation(221, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1193); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(221, 15);
				// Scrape.g:221:15: (a= ID )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==ID))
				{
					int LA27_2 = input.LA(2);

					if ((LA27_2==EOF||(LA27_2>=CLOSEBRACE && LA27_2<=CLOSEPAREN)||LA27_2==CREATE||LA27_2==EACH||LA27_2==EXEC||LA27_2==ID||(LA27_2>=INNER_JOIN && LA27_2<=INSERT_INTO)||LA27_2==INSERT_OVERWRITE||LA27_2==JOIN||LA27_2==SELECT||LA27_2==TRUNCATE||LA27_2==WHERE))
					{
						alt27 = 1;
					}
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:221:15: a= ID
					{
					DebugLocation(221, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1197); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(221, 20);
				// Scrape.g:221:20: ( innerJoinStatement )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==INNER_JOIN||LA28_1==JOIN))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:221:20: innerJoinStatement
					{
					DebugLocation(221, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1200);
					innerJoinStatement127=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement127.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }



				{
				// AST REWRITE
				// elements: FROM, innerJoinStatement, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 221:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(221, 43);
					// Scrape.g:221:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(221, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(221, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(221, 79);
					// Scrape.g:221:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(221, 79);
						// Scrape.g:221:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(221, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(221, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(221, 98);
					// Scrape.g:221:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(221, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:222:4: FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 8);
				FROM128=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1227); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM128_tree = (CommonTree)adaptor.Create(FROM128);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM128_tree, root_0);
				}
				DebugLocation(222, 10);
				// Scrape.g:222:10: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
				int alt29=3;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				switch (input.LA(1))
				{
				case DOWNLOAD_PAGE:
					{
					alt29 = 1;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt29 = 2;
					}
					break;
				case EXPAND:
					{
					alt29 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:222:11: downloadPageExpresssion
					{
					DebugLocation(222, 11);
					PushFollow(Follow._downloadPageExpresssion_in_fromStatement1231);
					downloadPageExpresssion129=downloadPageExpresssion();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion129.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:222:37: downloadImageExpression
					{
					DebugLocation(222, 37);
					PushFollow(Follow._downloadImageExpression_in_fromStatement1235);
					downloadImageExpression130=downloadImageExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression130.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Scrape.g:222:63: expandExpression
					{
					DebugLocation(222, 63);
					PushFollow(Follow._expandExpression_in_fromStatement1239);
					expandExpression131=expandExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression131.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 32);
			LeaveRule("fromStatement", 32);
			LeaveRule_fromStatement();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:225:1: innerJoinStatement : innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 33);
		TraceIn("innerJoinStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(225, 1);
		try
		{
			// Scrape.g:226:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:226:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
			{
			DebugLocation(226, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1251);
			innerJoin132=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin132.Tree);
			DebugLocation(226, 15);
			t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1255); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(226, 20);
			// Scrape.g:226:20: (a= ID )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==ID))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:226:20: a= ID
				{
				DebugLocation(226, 20);
				a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1259); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(a);


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(226, 25);
			string_literal133=(CommonToken)Match(input,113,Follow._113_in_innerJoinStatement1262); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(string_literal133);

			DebugLocation(226, 30);
			PushFollow(Follow._boolExpression_in_innerJoinStatement1264);
			boolExpression134=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression134.Tree);
			DebugLocation(226, 45);
			// Scrape.g:226:45: ( innerJoinStatement )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==INNER_JOIN||LA32_1==JOIN))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:226:45: innerJoinStatement
				{
				DebugLocation(226, 45);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1266);
				innerJoinStatement135=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: a, innerJoinStatement, boolExpression
			// token labels: a
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 226:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
			{
				DebugLocation(226, 68);
				// Scrape.g:226:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(226, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(226, 81);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(226, 110);
				// Scrape.g:226:110: ( ^( TABLE_ALIAS $a) )?
				if (stream_a.HasNext)
				{
					DebugLocation(226, 110);
					// Scrape.g:226:110: ^( TABLE_ALIAS $a)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 112);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(226, 125);
					adaptor.AddChild(root_2, stream_a.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_a.Reset();
				DebugLocation(226, 129);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(226, 144);
				// Scrape.g:226:144: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(226, 144);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 33);
			LeaveRule("innerJoinStatement", 33);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:229:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 34);
		TraceIn("innerJoin", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set136 = default(CommonToken);

		CommonTree set136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(229, 1);
		try
		{
			// Scrape.g:230:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(230, 2);

			set136=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set136));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 34);
			LeaveRule("innerJoin", 34);
			LeaveRule_innerJoin();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:234:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 35);
		TraceIn("selectStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT137 = default(CommonToken);
		CommonToken COMMA139 = default(CommonToken);
		CommonToken SELECT141 = default(CommonToken);
		CommonToken ASTERISK142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT137_tree = default(CommonTree);
		CommonTree COMMA139_tree = default(CommonTree);
		CommonTree SELECT141_tree = default(CommonTree);
		CommonTree ASTERISK142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(234, 1);
		try
		{
			// Scrape.g:235:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==SELECT))
			{
				int LA34_2 = input.LA(2);

				if ((LA34_2==ASTERISK))
				{
					alt34 = 2;
				}
				else if ((LA34_2==CASE||LA34_2==COMMAND_VAR||LA34_2==ID||LA34_2==IDENTITY_VAR||LA34_2==INT||LA34_2==NULL||LA34_2==PICK||LA34_2==STRING_LITERAL))
				{
					alt34 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:235:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(235, 4);
				SELECT137=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1316); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT137);

				DebugLocation(235, 11);
				// Scrape.g:235:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					case ID:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA33_2 = input.LA(2);

						if ((EvaluatePredicate(synpred53_Scrape_fragment)))
						{
							alt33 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:235:12: selectArgs COMMA
						{
						DebugLocation(235, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1319);
						selectArgs138=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs138.Tree);
						DebugLocation(235, 23);
						COMMA139=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1321); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA139);


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(235, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1325);
				selectArgs140=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs140.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 235:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(235, 45);
					// Scrape.g:235:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(235, 54);
					// Scrape.g:235:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(235, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:236:4: SELECT ASTERISK
				{
				DebugLocation(236, 4);
				SELECT141=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1339); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT141);

				DebugLocation(236, 11);
				ASTERISK142=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1341); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK142);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(236, 23);
					// Scrape.g:236:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(236, 32);
					// Scrape.g:236:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(236, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK142));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 35);
			LeaveRule("selectStatement", 35);
			LeaveRule_selectStatement();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:240:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 36);
		TraceIn("selectArgs", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS144 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(240, 1);
		try
		{
			// Scrape.g:241:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt36=2;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==COMMAND_VAR||LA36_1==ID||LA36_1==IDENTITY_VAR||LA36_1==INT||LA36_1==NULL||LA36_1==PICK||LA36_1==STRING_LITERAL))
			{
				alt36 = 1;
			}
			else if ((LA36_1==CASE))
			{
				alt36 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:241:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(241, 4);
				// Scrape.g:241:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA35_2 = input.LA(2);

						if ((LA35_2==STRING_LITERAL))
						{
							int LA35_3 = input.LA(3);

							if ((LA35_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA35_5 = input.LA(5);

									if ((LA35_5==STRING_LITERAL))
									{
										int LA35_6 = input.LA(6);

										if ((LA35_6==MATCH))
										{
											int LA35_7 = input.LA(7);

											if ((LA35_7==STRING_LITERAL))
											{
												int LA35_8 = input.LA(8);

												if ((LA35_8==REPLACE))
												{
													int LA35_9 = input.LA(9);

													if ((LA35_9==STRING_LITERAL))
													{
														int LA35_10 = input.LA(10);

														if ((LA35_10==PLUS))
														{
															alt35 = 1;
														}


													}


												}
												else if ((LA35_8==PLUS))
												{
													alt35 = 1;
												}


											}


										}
										else if ((LA35_6==PLUS))
										{
											alt35 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA35_5 = input.LA(5);

									if ((LA35_5==MATCH))
									{
										int LA35_6 = input.LA(6);

										if ((LA35_6==STRING_LITERAL))
										{
											int LA35_7 = input.LA(7);

											if ((LA35_7==REPLACE))
											{
												int LA35_8 = input.LA(8);

												if ((LA35_8==STRING_LITERAL))
												{
													int LA35_9 = input.LA(9);

													if ((LA35_9==PLUS))
													{
														alt35 = 1;
													}


												}


											}
											else if ((LA35_7==PLUS))
											{
												alt35 = 1;
											}


										}


									}
									else if ((LA35_5==PLUS))
									{
										alt35 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA35_5 = input.LA(5);

									if ((LA35_5==MATCH))
									{
										int LA35_6 = input.LA(6);

										if ((LA35_6==STRING_LITERAL))
										{
											int LA35_7 = input.LA(7);

											if ((LA35_7==REPLACE))
											{
												int LA35_8 = input.LA(8);

												if ((LA35_8==STRING_LITERAL))
												{
													int LA35_9 = input.LA(9);

													if ((LA35_9==PLUS))
													{
														alt35 = 1;
													}


												}


											}
											else if ((LA35_7==PLUS))
											{
												alt35 = 1;
											}


										}


									}
									else if ((LA35_5==PLUS))
									{
										alt35 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA35_2 = input.LA(2);

						if ((LA35_2==PLUS))
						{
							alt35 = 1;
						}


						}
						break;
					case ID:
						{
						int LA35_2 = input.LA(2);

						if ((LA35_2==DOT))
						{
							int LA35_3 = input.LA(3);

							if ((LA35_3==ID))
							{
								int LA35_4 = input.LA(4);

								if ((LA35_4==PLUS))
								{
									alt35 = 1;
								}


							}


						}
						else if ((LA35_2==PLUS))
						{
							alt35 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA35_2 = input.LA(2);

						if ((LA35_2==PLUS))
						{
							alt35 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA35_2 = input.LA(2);

						if ((LA35_2==PLUS))
						{
							alt35 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:241:5: selectArg PLUS
						{
						DebugLocation(241, 5);
						PushFollow(Follow._selectArg_in_selectArgs1367);
						selectArg143=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg143.Tree);
						DebugLocation(241, 15);
						PLUS144=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1369); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS144);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(241, 22);
				PushFollow(Follow._selectArg_in_selectArgs1373);
				selectArg145=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg145.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(241, 35);
					// Scrape.g:241:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(241, 48);
					// Scrape.g:241:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(241, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:242:4: caseStatement
				{
				DebugLocation(242, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1387);
				caseStatement146=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement146.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(242, 21);
					// Scrape.g:242:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(242, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 36);
			LeaveRule("selectArgs", 36);
			LeaveRule_selectArgs();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:247:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 37);
		TraceIn("caseStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE147 = default(CommonToken);
		CommonToken ELSE149 = default(CommonToken);
		CommonToken END151 = default(CommonToken);
		CommonToken CASE152 = default(CommonToken);
		CommonToken ELSE155 = default(CommonToken);
		CommonToken END157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE147_tree = default(CommonTree);
		CommonTree ELSE149_tree = default(CommonTree);
		CommonTree END151_tree = default(CommonTree);
		CommonTree CASE152_tree = default(CommonTree);
		CommonTree ELSE155_tree = default(CommonTree);
		CommonTree END157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(247, 1);
		try
		{
			// Scrape.g:248:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==CASE))
			{
				int LA41_2 = input.LA(2);

				if ((LA41_2==WHEN))
				{
					alt41 = 1;
				}
				else if ((LA41_2==COMMAND_VAR||LA41_2==ID||LA41_2==IDENTITY_VAR||LA41_2==INT||LA41_2==NULL||LA41_2==PICK||LA41_2==STRING_LITERAL))
				{
					alt41 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:248:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(248, 4);
				CASE147=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1409); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE147);

				DebugLocation(248, 9);
				// Scrape.g:248:9: ( whenBoolStatement )+
				int cnt37=0;
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==WHEN))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:248:9: whenBoolStatement
						{
						DebugLocation(248, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1411);
						whenBoolStatement148=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement148.Tree);

						}
						break;

					default:
						if (cnt37 >= 1)
							goto loop37;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee37 = new EarlyExitException( 37, input );
						DebugRecognitionException(eee37);
						throw eee37;
					}
					cnt37++;
				}
				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(248, 28);
				// Scrape.g:248:28: ( ELSE caseExpression )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==ELSE))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:248:29: ELSE caseExpression
					{
					DebugLocation(248, 29);
					ELSE149=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE149);

					DebugLocation(248, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1417);
					caseExpression150=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression150.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(248, 51);
				END151=(CommonToken)Match(input,END,Follow._END_in_caseStatement1421); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END151);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(248, 58);
					// Scrape.g:248:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(248, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(248, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(248, 89);
					// Scrape.g:248:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(248, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:249:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(249, 4);
				CASE152=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1438); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE152);

				DebugLocation(249, 9);
				PushFollow(Follow._selectArg_in_caseStatement1440);
				selectArg153=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg153.Tree);
				DebugLocation(249, 19);
				// Scrape.g:249:19: ( whenLiteralStatement )+
				int cnt39=0;
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==WHEN))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:249:19: whenLiteralStatement
						{
						DebugLocation(249, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1442);
						whenLiteralStatement154=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement154.Tree);

						}
						break;

					default:
						if (cnt39 >= 1)
							goto loop39;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee39 = new EarlyExitException( 39, input );
						DebugRecognitionException(eee39);
						throw eee39;
					}
					cnt39++;
				}
				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(249, 41);
				// Scrape.g:249:41: ( ELSE caseExpression )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==ELSE))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:249:42: ELSE caseExpression
					{
					DebugLocation(249, 42);
					ELSE155=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE155);

					DebugLocation(249, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1448);
					caseExpression156=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression156.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(249, 64);
				END157=(CommonToken)Match(input,END,Follow._END_in_caseStatement1452); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END157);



				{
				// AST REWRITE
				// elements: selectArg, whenLiteralStatement, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 249:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(249, 71);
					// Scrape.g:249:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(249, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(249, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(249, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(249, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(249, 114);
					// Scrape.g:249:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(249, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 37);
			LeaveRule("caseStatement", 37);
			LeaveRule_caseStatement();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:252:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 38);
		TraceIn("caseExpression", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(252, 1);
		try
		{
			// Scrape.g:253:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:253:4: selectArg
			{
			DebugLocation(253, 4);
			PushFollow(Follow._selectArg_in_caseExpression1477);
			selectArg158=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg158.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(253, 17);
				// Scrape.g:253:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(253, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 38);
			LeaveRule("caseExpression", 38);
			LeaveRule_caseExpression();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:256:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 39);
		TraceIn("whenLiteralStatement", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN159 = default(CommonToken);
		CommonToken THEN161 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN159_tree = default(CommonTree);
		CommonTree THEN161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(256, 1);
		try
		{
			// Scrape.g:257:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:257:4: WHEN literal THEN caseExpression
			{
			DebugLocation(257, 4);
			WHEN159=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1496); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN159);

			DebugLocation(257, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1498);
			literal160=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal160.Tree);
			DebugLocation(257, 17);
			THEN161=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1500); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN161);

			DebugLocation(257, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1502);
			caseExpression162=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression162.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(257, 40);
				// Scrape.g:257:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(257, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(257, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 39);
			LeaveRule("whenLiteralStatement", 39);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:260:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 40);
		TraceIn("whenBoolStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN163 = default(CommonToken);
		CommonToken THEN165 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN163_tree = default(CommonTree);
		CommonTree THEN165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(260, 1);
		try
		{
			// Scrape.g:261:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:261:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(261, 4);
			WHEN163=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN163);

			DebugLocation(261, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1525);
			boolExpression164=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression164.Tree);
			DebugLocation(261, 24);
			THEN165=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1527); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN165);

			DebugLocation(261, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1529);
			caseExpression166=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression166.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, caseExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(261, 47);
				// Scrape.g:261:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(261, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(261, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 40);
			LeaveRule("whenBoolStatement", 40);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:264:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 41);
		TraceIn("boolExpression", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR168 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR168_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:265:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(265, 4);
			PushFollow(Follow._andExpression_in_boolExpression1550);
			andExpression167=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression167.Tree);
			DebugLocation(265, 18);
			// Scrape.g:265:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==OR))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:265:19: OR ^ andExpression
					{
					DebugLocation(265, 21);
					OR168=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1553); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR168_tree = (CommonTree)adaptor.Create(OR168);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR168_tree, root_0);
					}
					DebugLocation(265, 23);
					PushFollow(Follow._andExpression_in_boolExpression1556);
					andExpression169=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression169.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 41);
			LeaveRule("boolExpression", 41);
			LeaveRule_boolExpression();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:268:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 42);
		TraceIn("andExpression", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:269:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(269, 5);
			PushFollow(Follow._boolTerm_in_andExpression1570);
			boolTerm170=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm170.Tree);
			DebugLocation(269, 14);
			// Scrape.g:269:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==AND))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:269:15: AND ^ boolTerm
					{
					DebugLocation(269, 18);
					AND171=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1573); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND171_tree = (CommonTree)adaptor.Create(AND171);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND171_tree, root_0);
					}
					DebugLocation(269, 20);
					PushFollow(Follow._boolTerm_in_andExpression1576);
					boolTerm172=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm172.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 42);
			LeaveRule("andExpression", 42);
			LeaveRule_andExpression();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:272:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 43);
		TraceIn("boolTerm", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NODES173 = default(CommonToken);
		CommonToken EQUALS174 = default(CommonToken);
		CommonToken STRING_LITERAL175 = default(CommonToken);
		CommonToken OPENPAREN179 = default(CommonToken);
		CommonToken CLOSEPAREN181 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NODES173_tree = default(CommonTree);
		CommonTree EQUALS174_tree = default(CommonTree);
		CommonTree STRING_LITERAL175_tree = default(CommonTree);
		CommonTree OPENPAREN179_tree = default(CommonTree);
		CommonTree CLOSEPAREN181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt45=3;
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt45 = 1;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt45 = 2;
				}
				break;
			case OPENPAREN:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:273:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(273, 4);
				NODES173=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1591); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES173);

				DebugLocation(273, 10);
				EQUALS174=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1593); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS174);

				DebugLocation(273, 17);
				STRING_LITERAL175=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL175);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(273, 35);
					// Scrape.g:273:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(273, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(273, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES173));
					DebugLocation(273, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:274:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._selectArg_in_boolTerm1611);
				selectArg176=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg176.Tree);
				DebugLocation(274, 14);
				// Scrape.g:274:14: ( boolOperator ^ selectArg )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==EQUALS||(LA44_1>=GREATERTHAN && LA44_1<=GREATERTHANEQUAL)||(LA44_1>=LESSTHAN && LA44_1<=LESSTHANEQUAL)||LA44_1==NOTEQUAL))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:274:15: boolOperator ^ selectArg
					{
					DebugLocation(274, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1614);
					boolOperator177=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator177.Tree, root_0);
					DebugLocation(274, 29);
					PushFollow(Follow._selectArg_in_boolTerm1617);
					selectArg178=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg178.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:275:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 13);
				OPENPAREN179=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1625); if (state.failed) return retval;
				DebugLocation(275, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1628);
				boolExpression180=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression180.Tree);
				DebugLocation(275, 40);
				CLOSEPAREN181=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1630); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 43);
			LeaveRule("boolTerm", 43);
			LeaveRule_boolTerm();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:278:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 44);
		TraceIn("boolOperator", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set182 = default(CommonToken);

		CommonTree set182_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(278, 1);
		try
		{
			// Scrape.g:279:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(279, 2);

			set182=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set182));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 44);
			LeaveRule("boolOperator", 44);
			LeaveRule_boolOperator();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:287:1: selectArg : ( pickStatement | literal | selectVariable );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 45);
		TraceIn("selectArg", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable185 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(287, 1);
		try
		{
			// Scrape.g:288:2: ( pickStatement | literal | selectVariable )
			int alt46=3;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt46 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt46 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:288:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(288, 4);
				PushFollow(Follow._pickStatement_in_selectArg1678);
				pickStatement183=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:289:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._literal_in_selectArg1683);
				literal184=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal184.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:290:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(290, 4);
				PushFollow(Follow._selectVariable_in_selectArg1688);
				selectVariable185=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable185.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 45);
			LeaveRule("selectArg", 45);
			LeaveRule_selectArg();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:293:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 46);
		TraceIn("selectVariable", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID186 = default(CommonToken);
		CommonToken COMMAND_VAR187 = default(CommonToken);
		CommonToken IDENTITY_VAR188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID186_tree = default(CommonTree);
		CommonTree COMMAND_VAR187_tree = default(CommonTree);
		CommonTree IDENTITY_VAR188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(293, 1);
		try
		{
			// Scrape.g:294:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt47=4;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA47_2 = input.LA(2);

				if ((LA47_2==DOT))
				{
					alt47 = 4;
				}
				else if ((LA47_2==EOF||LA47_2==AND||(LA47_2>=CLOSEBRACE && LA47_2<=COMMA)||LA47_2==CREATE||(LA47_2>=EACH && LA47_2<=EXEC)||(LA47_2>=FROM && LA47_2<=GREATERTHANEQUAL)||LA47_2==ID||(LA47_2>=INNER_JOIN && LA47_2<=INSERT_INTO)||LA47_2==INSERT_OVERWRITE||(LA47_2>=JOIN && LA47_2<=LESSTHANEQUAL)||LA47_2==NOTEQUAL||LA47_2==OR||LA47_2==PLUS||LA47_2==SELECT||LA47_2==THEN||LA47_2==TRUNCATE||LA47_2==WHEN||LA47_2==WHERE))
				{
					alt47 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt47 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:294:4: ID
				{
				DebugLocation(294, 4);
				ID186=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable1699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID186);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 294:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(294, 10);
					// Scrape.g:294:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(294, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID186), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:295:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(295, 4);
				COMMAND_VAR187=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable1711); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR187_tree = (CommonTree)adaptor.Create(COMMAND_VAR187);
				adaptor.AddChild(root_0, COMMAND_VAR187_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:296:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(296, 4);
				IDENTITY_VAR188=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable1716); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR188_tree = (CommonTree)adaptor.Create(IDENTITY_VAR188);
				adaptor.AddChild(root_0, IDENTITY_VAR188_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:297:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable1721);
				tableMemberReference189=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference189.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 46);
			LeaveRule("selectVariable", 46);
			LeaveRule_selectVariable();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:300:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 47);
		TraceIn("pickStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK190 = default(CommonToken);
		CommonToken STRING_LITERAL191 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK190_tree = default(CommonTree);
		CommonTree STRING_LITERAL191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(300, 1);
		try
		{
			// Scrape.g:301:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:301:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(301, 4);
			PICK190=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1733); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK190);

			DebugLocation(301, 9);
			STRING_LITERAL191=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1735); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL191);

			DebugLocation(301, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1737);
			takeStatement192=takeStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_takeStatement.Add(takeStatement192.Tree);
			DebugLocation(301, 38);
			// Scrape.g:301:38: ( matchStatement )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_1 = input.LA(1);

			if ((LA48_1==MATCH))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:301:38: matchStatement
				{
				DebugLocation(301, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1739);
				matchStatement193=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement193.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(48); }



			{
			// AST REWRITE
			// elements: PICK, STRING_LITERAL, matchStatement, takeStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(301, 57);
				// Scrape.g:301:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(301, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(301, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(301, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(301, 93);
				// Scrape.g:301:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(301, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 47);
			LeaveRule("pickStatement", 47);
			LeaveRule_pickStatement();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:304:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 48);
		TraceIn("takeStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE194 = default(CommonToken);
		CommonToken ATTRIBUTE195 = default(CommonToken);
		CommonToken STRING_LITERAL196 = default(CommonToken);
		CommonToken TAKE197 = default(CommonToken);
		CommonToken TEXT198 = default(CommonToken);
		CommonToken TAKE199 = default(CommonToken);
		CommonToken HTML200 = default(CommonToken);

		CommonTree TAKE194_tree = default(CommonTree);
		CommonTree ATTRIBUTE195_tree = default(CommonTree);
		CommonTree STRING_LITERAL196_tree = default(CommonTree);
		CommonTree TAKE197_tree = default(CommonTree);
		CommonTree TEXT198_tree = default(CommonTree);
		CommonTree TAKE199_tree = default(CommonTree);
		CommonTree HTML200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(304, 1);
		try
		{
			// Scrape.g:305:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt49=3;
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt49 = 1;
					}
					break;
				case TEXT:
					{
					alt49 = 2;
					}
					break;
				case HTML:
					{
					alt49 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:305:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(305, 4);
				TAKE194=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE194);

				DebugLocation(305, 9);
				ATTRIBUTE195=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1767); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE195);

				DebugLocation(305, 19);
				STRING_LITERAL196=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL196);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(305, 37);
					// Scrape.g:305:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(305, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(305, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:306:4: TAKE TEXT
				{
				DebugLocation(306, 4);
				TAKE197=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1782); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE197);

				DebugLocation(306, 9);
				TEXT198=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1784); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT198);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(306, 17);
					// Scrape.g:306:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(306, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:307:4: TAKE HTML
				{
				DebugLocation(307, 4);
				TAKE199=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1795); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE199);

				DebugLocation(307, 9);
				HTML200=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1797); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML200);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 307:14: -> ^( TAKE_HTML )
				{
					DebugLocation(307, 17);
					// Scrape.g:307:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(307, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 48);
			LeaveRule("takeStatement", 48);
			LeaveRule_takeStatement();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:310:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 49);
		TraceIn("matchStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH201 = default(CommonToken);
		CommonToken STRING_LITERAL202 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement203 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH201_tree = default(CommonTree);
		CommonTree STRING_LITERAL202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(310, 1);
		try
		{
			// Scrape.g:311:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:311:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(311, 4);
			MATCH201=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1815); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH201);

			DebugLocation(311, 10);
			STRING_LITERAL202=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1817); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL202);

			DebugLocation(311, 25);
			// Scrape.g:311:25: ( replaceStatement )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==REPLACE))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:311:25: replaceStatement
				{
				DebugLocation(311, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1819);
				replaceStatement203=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement203.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: replaceStatement, MATCH, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 311:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(311, 46);
				// Scrape.g:311:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(311, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(311, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(311, 69);
				// Scrape.g:311:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(311, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 49);
			LeaveRule("matchStatement", 49);
			LeaveRule_matchStatement();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:314:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 50);
		TraceIn("replaceStatement", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE204 = default(CommonToken);
		CommonToken STRING_LITERAL205 = default(CommonToken);

		CommonTree REPLACE204_tree = default(CommonTree);
		CommonTree STRING_LITERAL205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(314, 1);
		try
		{
			// Scrape.g:315:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:315:4: REPLACE STRING_LITERAL
			{
			DebugLocation(315, 4);
			REPLACE204=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1842); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE204);

			DebugLocation(315, 12);
			STRING_LITERAL205=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1844); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL205);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 315:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(315, 30);
				// Scrape.g:315:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(315, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(315, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 50);
			LeaveRule("replaceStatement", 50);
			LeaveRule_replaceStatement();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:319:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 51);
		TraceIn("createTableStatement", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE206 = default(CommonToken);
		CommonToken FILE207 = default(CommonToken);
		CommonToken ID208 = default(CommonToken);
		CommonToken OPENPAREN209 = default(CommonToken);
		CommonToken CLOSEPAREN211 = default(CommonToken);
		CommonToken CREATE214 = default(CommonToken);
		CommonToken BUFFER215 = default(CommonToken);
		CommonToken ID216 = default(CommonToken);
		CommonToken OPENPAREN217 = default(CommonToken);
		CommonToken CLOSEPAREN219 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement212 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE206_tree = default(CommonTree);
		CommonTree FILE207_tree = default(CommonTree);
		CommonTree ID208_tree = default(CommonTree);
		CommonTree OPENPAREN209_tree = default(CommonTree);
		CommonTree CLOSEPAREN211_tree = default(CommonTree);
		CommonTree CREATE214_tree = default(CommonTree);
		CommonTree BUFFER215_tree = default(CommonTree);
		CommonTree ID216_tree = default(CommonTree);
		CommonTree OPENPAREN217_tree = default(CommonTree);
		CommonTree CLOSEPAREN219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(319, 1);
		try
		{
			// Scrape.g:320:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==CREATE))
			{
				int LA54_2 = input.LA(2);

				if ((LA54_2==FILE))
				{
					alt54 = 1;
				}
				else if ((LA54_2==BUFFER))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:320:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(320, 4);
				CREATE206=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1865); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE206);

				DebugLocation(320, 11);
				FILE207=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1867); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE207);

				DebugLocation(320, 16);
				ID208=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1869); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID208);

				DebugLocation(320, 19);
				OPENPAREN209=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN209);

				DebugLocation(320, 29);
				// Scrape.g:320:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1==ID))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:320:29: tableColumnArgs
						{
						DebugLocation(320, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1873);
						tableColumnArgs210=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs210.Tree);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(320, 46);
				CLOSEPAREN211=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1876); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN211);

				DebugLocation(320, 57);
				// Scrape.g:320:57: ( fileTableWithStatement )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==WITH))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:320:57: fileTableWithStatement
					{
					DebugLocation(320, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1878);
					fileTableWithStatement212=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement212.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(320, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1881);
				fileTableLocation213=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation213.Tree);


				{
				// AST REWRITE
				// elements: fileTableLocation, fileTableWithStatement, tableColumnArgs, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 320:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(320, 102);
					// Scrape.g:320:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(320, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(320, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(320, 118);
					// Scrape.g:320:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(320, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(320, 135);
					// Scrape.g:320:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(320, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(320, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:321:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(321, 4);
				CREATE214=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1902); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE214);

				DebugLocation(321, 11);
				BUFFER215=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER215);

				DebugLocation(321, 18);
				ID216=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1906); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID216);

				DebugLocation(321, 21);
				OPENPAREN217=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1908); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN217);

				DebugLocation(321, 31);
				// Scrape.g:321:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_1 = input.LA(1);

					if ((LA53_1==ID))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:321:31: tableColumnArgs
						{
						DebugLocation(321, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1910);
						tableColumnArgs218=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs218.Tree);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(321, 48);
				CLOSEPAREN219=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1913); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN219);



				{
				// AST REWRITE
				// elements: tableColumnArgs, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 321:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(321, 62);
					// Scrape.g:321:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(321, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(321, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(321, 80);
					// Scrape.g:321:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(321, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 51);
			LeaveRule("createTableStatement", 51);
			LeaveRule_createTableStatement();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:324:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 52);
		TraceIn("fileTableLocation", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION220 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION220_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(324, 1);
		try
		{
			// Scrape.g:325:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:325:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(325, 12);
			LOCATION220=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1935); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION220_tree = (CommonTree)adaptor.Create(LOCATION220);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION220_tree, root_0);
			}
			DebugLocation(325, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation1938);
			mathExpression221=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression221.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 52);
			LeaveRule("fileTableLocation", 52);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:328:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 53);
		TraceIn("fileTableWithStatement", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH222 = default(CommonToken);
		CommonToken OPENPAREN223 = default(CommonToken);
		CommonToken CLOSEPAREN225 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH222_tree = default(CommonTree);
		CommonTree OPENPAREN223_tree = default(CommonTree);
		CommonTree CLOSEPAREN225_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(328, 1);
		try
		{
			// Scrape.g:329:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:329:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(329, 4);
			WITH222=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1950); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH222);

			DebugLocation(329, 9);
			OPENPAREN223=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1952); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN223);

			DebugLocation(329, 19);
			// Scrape.g:329:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==FIELD_TERMINATOR||LA55_1==ROW_TERMINATOR))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:329:19: fileTableWithVariablesStatement
					{
					DebugLocation(329, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1954);
					fileTableWithVariablesStatement224=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement224.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }

			DebugLocation(329, 52);
			CLOSEPAREN225=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1957); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN225);



			{
			// AST REWRITE
			// elements: fileTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(329, 66);
				// Scrape.g:329:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(329, 73);
				// Scrape.g:329:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(329, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 53);
			LeaveRule("fileTableWithStatement", 53);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:332:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 54);
		TraceIn("fileTableWithVariablesStatement", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA227 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement226 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement228 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(332, 1);
		try
		{
			// Scrape.g:333:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:333:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(333, 4);
			// Scrape.g:333:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==FIELD_TERMINATOR||LA56_1==ROW_TERMINATOR))
				{
					int LA56_2 = input.LA(2);

					if ((LA56_2==EQUALS))
					{
						int LA56_3 = input.LA(3);

						if ((LA56_3==STRING_LITERAL))
						{
							int LA56_4 = input.LA(4);

							if ((LA56_4==COMMA))
							{
								alt56 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:333:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(333, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1980);
					fileTableWithVariableStatement226=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement226.Tree);
					DebugLocation(333, 36);
					COMMA227=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1982); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA227);


					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(333, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1986);
			fileTableWithVariableStatement228=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement228.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(333, 78);
				// Scrape.g:333:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(333, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 54);
			LeaveRule("fileTableWithVariablesStatement", 54);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:336:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 55);
		TraceIn("fileTableWithVariableStatement", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set229 = default(CommonToken);
		CommonToken EQUALS230 = default(CommonToken);
		CommonToken STRING_LITERAL231 = default(CommonToken);

		CommonTree set229_tree = default(CommonTree);
		CommonTree EQUALS230_tree = default(CommonTree);
		CommonTree STRING_LITERAL231_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(336, 1);
		try
		{
			// Scrape.g:337:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:337:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(337, 39);

			set229=(CommonToken)input.LT(1);
			set229=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set229), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(337, 47);
			EQUALS230=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2011); if (state.failed) return retval;
			DebugLocation(337, 49);
			STRING_LITERAL231=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2014); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL231_tree = (CommonTree)adaptor.Create(STRING_LITERAL231);
			adaptor.AddChild(root_0, STRING_LITERAL231_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 55);
			LeaveRule("fileTableWithVariableStatement", 55);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:340:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 56);
		TraceIn("tableColumnArgs", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA233 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg232 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg234 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(340, 1);
		try
		{
			// Scrape.g:341:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:341:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(341, 4);
			// Scrape.g:341:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==ID))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==FLOAT||LA57_2==IDENTITY||LA57_2==INTEGER||LA57_2==STRING))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==COMMA))
						{
							alt57 = 1;
						}


					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:341:5: tableColumnArg COMMA
					{
					DebugLocation(341, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2026);
					tableColumnArg232=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg232.Tree);
					DebugLocation(341, 20);
					COMMA233=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2028); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA233);


					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(341, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2032);
			tableColumnArg234=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg234.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(341, 46);
				// Scrape.g:341:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(341, 66);
				// Scrape.g:341:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(341, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 56);
			LeaveRule("tableColumnArgs", 56);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:344:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 57);
		TraceIn("tableColumnArg", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID235 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType236 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(344, 1);
		try
		{
			// Scrape.g:345:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:345:4: ID dataType
			{
			DebugLocation(345, 4);
			ID235=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2053); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID235);

			DebugLocation(345, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2055);
			dataType236=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType236.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 345:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(345, 19);
				// Scrape.g:345:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(345, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(345, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(345, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 57);
			LeaveRule("tableColumnArg", 57);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:348:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 58);
		TraceIn("dataType", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set237 = default(CommonToken);

		CommonTree set237_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(348, 1);
		try
		{
			// Scrape.g:349:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(349, 2);

			set237=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set237));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 58);
			LeaveRule("dataType", 58);
			LeaveRule_dataType();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred53_Scrape_fragment();
	partial void LeaveRule_synpred53_Scrape_fragment();

	// $ANTLR start synpred53_Scrape
	private void synpred53_Scrape_fragment()
	{
		EnterRule_synpred53_Scrape_fragment();
		EnterRule("synpred53_Scrape_fragment", 111);
		TraceIn("synpred53_Scrape_fragment", 111);
		try
		{
			// Scrape.g:235:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:235:12: selectArgs COMMA
			{
			DebugLocation(235, 12);
			PushFollow(Follow._selectArgs_in_synpred53_Scrape1319);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(235, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred53_Scrape1321); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Scrape_fragment", 111);
			LeaveRule("synpred53_Scrape_fragment", 111);
			LeaveRule_synpred53_Scrape_fragment();
		}
	}
	// $ANTLR end synpred53_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program222 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program237 = new BitSet(new ulong[]{0x2C20044100000UL,0x8000080000UL});
		public static readonly BitSet _noBraceBlock_in_program239 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition275 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition277 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition279 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition281 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition284 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_procedureDefinition286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable355 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_truncateTable357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall379 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureCall381 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall383 = new BitSet(new ulong[]{0x40A0000050000UL,0x2000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall385 = new BitSet(new ulong[]{0x40A0000050000UL,0x2000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList411 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList413 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs433 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement449 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement451 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement453 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement455 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList479 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList481 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest505 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _TEST_in_proxyTest507 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest509 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest511 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement528 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement530 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement534 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _IN_in_eachStatement536 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement540 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement542 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_eachStatement544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock569 = new BitSet(new ulong[]{0x2C20044100002UL,0x8000080000UL});
		public static readonly BitSet _OPENBRACE_in_block590 = new BitSet(new ulong[]{0x2C20044108000UL,0x8000080000UL});
		public static readonly BitSet _statement_in_block592 = new BitSet(new ulong[]{0x2C20044108000UL,0x8000080000UL});
		public static readonly BitSet _CLOSEBRACE_in_block595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression615 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression617 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression619 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _TO_in_expandExpression621 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression623 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression625 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _expandBlock_in_expandExpression627 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock652 = new BitSet(new ulong[]{0x40A0000048000UL,0x1000002000012UL});
		public static readonly BitSet _mathExpression_in_expandBlock654 = new BitSet(new ulong[]{0x40A0000048000UL,0x1000002000012UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion705 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadPageExpresssion713 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion715 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadPageExpresssion717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion723 = new BitSet(new ulong[]{0xA0000040000UL});
		public static readonly BitSet _variableReference_in_downloadPageExpresssion725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression744 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadImageExpression752 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression754 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadImageExpression756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression762 = new BitSet(new ulong[]{0xA0000040000UL});
		public static readonly BitSet _variableReference_in_downloadImageExpression764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference818 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _DOT_in_tableMemberReference820 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement848 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement850 = new BitSet(new ulong[]{0x40A0083040000UL,0x1000002080012UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_nullOperator873 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator875 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000002UL});
		public static readonly BitSet _variableReference_in_nullOperator879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression929 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _set_in_mathExpression932 = new BitSet(new ulong[]{0x40A0000040000UL,0x1000002000012UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression943 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _atom_in_mathExpressionGroup961 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _set_in_mathExpressionGroup964 = new BitSet(new ulong[]{0x40A0000040000UL,0x1000002000012UL});
		public static readonly BitSet _atom_in_mathExpressionGroup975 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _variableReference_in_atom996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_atom1002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1023 = new BitSet(new ulong[]{0x40A0000040000UL,0x1000002000012UL});
		public static readonly BitSet _mathExpression_in_atom1026 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1070 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1072 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1089 = new BitSet(new ulong[]{0x40A0000040000UL,0x1000002000012UL});
		public static readonly BitSet _mathExpression_in_insertStatement1091 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1107 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1109 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1135 = new BitSet(new ulong[]{0x2000000002UL,0x200000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1137 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1167 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_whereStatement1169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1189 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_fromStatement1193 = new BitSet(new ulong[]{0x10220000000002UL});
		public static readonly BitSet _ID_in_fromStatement1197 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1227 = new BitSet(new ulong[]{0x83000000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_fromStatement1239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1251 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1255 = new BitSet(new ulong[]{0x20000000000UL,0x2000000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1259 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_innerJoinStatement1262 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1264 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1316 = new BitSet(new ulong[]{0x40A0000040800UL,0x2000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1319 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1321 = new BitSet(new ulong[]{0x40A0000040800UL,0x2000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1339 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1367 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _PLUS_in_selectArgs1369 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_selectArgs1373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1409 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1411 = new BitSet(new ulong[]{0x18000000UL,0x40000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1415 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1417 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1438 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_caseStatement1440 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1442 = new BitSet(new ulong[]{0x18000000UL,0x40000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1446 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1448 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1496 = new BitSet(new ulong[]{0x4000000000000UL,0x2000002UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1498 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1500 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1523 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1525 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1527 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1550 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _OR_in_boolExpression1553 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _andExpression_in_boolExpression1556 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _boolTerm_in_andExpression1570 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1573 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolTerm_in_andExpression1576 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1591 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1593 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1611 = new BitSet(new ulong[]{0x6000C020000002UL,0x1UL});
		public static readonly BitSet _boolOperator_in_boolTerm1614 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_boolTerm1617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1625 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_boolTerm1628 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg1688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable1699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable1711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable1716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable1721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1733 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1735 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1737 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1765 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1767 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1782 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1795 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1815 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1817 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1842 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1865 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1867 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1869 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1871 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1873 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1876 = new BitSet(new ulong[]{0x400000000000000UL,0x400000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1878 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1902 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1904 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1906 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1908 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1910 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1935 = new BitSet(new ulong[]{0x40A0000040000UL,0x1000002000012UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation1938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1950 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1952 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1954 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1980 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1982 = new BitSet(new ulong[]{0x200000000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2002 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2011 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2026 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2028 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2053 = new BitSet(new ulong[]{0x8041000000000UL,0x1000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred53_Scrape1319 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred53_Scrape1321 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
