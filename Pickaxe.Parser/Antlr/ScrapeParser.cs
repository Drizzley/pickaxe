//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2015-09-17 21:38:28

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IN", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NOTEQUAL", "NULL", "OPENBRACE", "OPENPAREN", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "VARIABLE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'"
	};
	public const int EOF=-1;
	public const int T__101=101;
	public const int APOSTRAPHE=4;
	public const int ASTERISK=5;
	public const int ATTRIBUTE=6;
	public const int BLOCK=7;
	public const int BUFFER=8;
	public const int BUFFER_TABLE=9;
	public const int CASE=10;
	public const int CASE_BOOL=11;
	public const int CASE_EXPRESSION=12;
	public const int CASE_VAR=13;
	public const int CLOSEBRACE=14;
	public const int CLOSEPAREN=15;
	public const int COMMA=16;
	public const int COMMENT=17;
	public const int CREATE=18;
	public const int DIGIT=19;
	public const int DIV=20;
	public const int DOT=21;
	public const int DOWNLOAD_IMAGE=22;
	public const int DOWNLOAD_PAGE=23;
	public const int EACH=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQUALS=27;
	public const int EXPAND=28;
	public const int EXPAND_INTERATION_VARIABLE=29;
	public const int FIELD_TERMINATOR=30;
	public const int FILE=31;
	public const int FILE_TABLE=32;
	public const int FLOAT=33;
	public const int FROM=34;
	public const int GREATERTHAN=35;
	public const int GREATERTHANEQUAL=36;
	public const int HTML=37;
	public const int ID=38;
	public const int IDENTITY=39;
	public const int IN=40;
	public const int INSERT_INTO=41;
	public const int INSERT_INTO_DIRECTORY=42;
	public const int INSERT_OVERWRITE=43;
	public const int INT=44;
	public const int INTEGER=45;
	public const int LESSTHAN=46;
	public const int LESSTHANEQUAL=47;
	public const int LETTER=48;
	public const int LINE_COMMENT_DASH=49;
	public const int LINE_COMMENT_SLASH=50;
	public const int LOCATION=51;
	public const int MATCH=52;
	public const int MEMBER_REFERENCE=53;
	public const int MINIS=54;
	public const int NEWLINE=55;
	public const int NOTEQUAL=56;
	public const int NULL=57;
	public const int OPENBRACE=58;
	public const int OPENPAREN=59;
	public const int OTHERCHARS=60;
	public const int PICK=61;
	public const int PLUS=62;
	public const int POST_PICK=63;
	public const int PRE_PICK=64;
	public const int PROCEDURE=65;
	public const int PROGRAM=66;
	public const int PROXIES=67;
	public const int PROXY_LIST=68;
	public const int QUOTE=69;
	public const int REPLACE=70;
	public const int ROW_REFERENCE=71;
	public const int ROW_TERMINATOR=72;
	public const int SELECT=73;
	public const int SELECT_ALL=74;
	public const int SELECT_ARG=75;
	public const int SELECT_ID=76;
	public const int SELECT_STATEMENT=77;
	public const int STRING=78;
	public const int STRING_LITERAL=79;
	public const int TABLE_COLUMN_ARG=80;
	public const int TABLE_COLUMN_ARGS=81;
	public const int TABLE_MEMBER_REFERENCE=82;
	public const int TABLE_VARIABLE_REFERENCE=83;
	public const int TAKE=84;
	public const int TAKE_ATTRIBUTE=85;
	public const int TAKE_HTML=86;
	public const int TAKE_TEXT=87;
	public const int TEST=88;
	public const int TEXT=89;
	public const int THEN=90;
	public const int TO=91;
	public const int VARIABLE=92;
	public const int VARIABLE_DECLARATION=93;
	public const int VARIABLE_REFERENCE=94;
	public const int WHEN=95;
	public const int WHEN_BOOL_STATEMENT=96;
	public const int WHEN_LITERAL_STATEMENT=97;
	public const int WHERE=98;
	public const int WITH=99;
	public const int WS=100;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:61:8: public program : ( ( statement )+ EOF -> ^( PROGRAM ( statement )+ ) | proxyStatement ( statement )* EOF -> ^( PROGRAM proxyStatement ( statement )* ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(61, 1);
		try
		{
			// Scrape.g:62:2: ( ( statement )+ EOF -> ^( PROGRAM ( statement )+ ) | proxyStatement ( statement )* EOF -> ^( PROGRAM proxyStatement ( statement )* ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt3=3;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
			case EACH:
			case ID:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
				{
				alt3 = 1;
				}
				break;
			case PROXIES:
				{
				alt3 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt3 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:62:4: ( statement )+ EOF
				{
				DebugLocation(62, 4);
				// Scrape.g:62:4: ( statement )+
				int cnt1=0;
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_1 = input.LA(1);

					if ((LA1_1==CREATE||LA1_1==EACH||LA1_1==ID||LA1_1==INSERT_INTO||LA1_1==INSERT_OVERWRITE||LA1_1==SELECT))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:62:4: statement
						{
						DebugLocation(62, 4);
						PushFollow(Follow._statement_in_program207);
						statement1=statement();
						PopFollow();

						stream_statement.Add(statement1.Tree);

						}
						break;

					default:
						if (cnt1 >= 1)
							goto loop1;

						EarlyExitException eee1 = new EarlyExitException( 1, input );
						DebugRecognitionException(eee1);
						throw eee1;
					}
					cnt1++;
				}
				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(62, 15);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program210);  
				stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 62:19: -> ^( PROGRAM ( statement )+ )
				{
					DebugLocation(62, 22);
					// Scrape.g:62:22: ^( PROGRAM ( statement )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(62, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(62, 32);
					if (!(stream_statement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_statement.HasNext )
					{
						DebugLocation(62, 32);
						adaptor.AddChild(root_1, stream_statement.NextTree());

					}
					stream_statement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:63:4: proxyStatement ( statement )* EOF
				{
				DebugLocation(63, 4);
				PushFollow(Follow._proxyStatement_in_program224);
				proxyStatement3=proxyStatement();
				PopFollow();

				stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(63, 19);
				// Scrape.g:63:19: ( statement )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1==CREATE||LA2_1==EACH||LA2_1==ID||LA2_1==INSERT_INTO||LA2_1==INSERT_OVERWRITE||LA2_1==SELECT))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:63:19: statement
						{
						DebugLocation(63, 19);
						PushFollow(Follow._statement_in_program226);
						statement4=statement();
						PopFollow();

						stream_statement.Add(statement4.Tree);

						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(63, 30);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program229);  
				stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: statement, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 63:34: -> ^( PROGRAM proxyStatement ( statement )* )
				{
					DebugLocation(63, 37);
					// Scrape.g:63:37: ^( PROGRAM proxyStatement ( statement )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(63, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(63, 47);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(63, 62);
					// Scrape.g:63:62: ( statement )*
					while ( stream_statement.HasNext )
					{
						DebugLocation(63, 62);
						adaptor.AddChild(root_1, stream_statement.NextTree());

					}
					stream_statement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:64:4: procedureDefinition
				{
				DebugLocation(64, 4);
				PushFollow(Follow._procedureDefinition_in_program245);
				procedureDefinition6=procedureDefinition();
				PopFollow();

				stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(64, 27);
					// Scrape.g:64:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(64, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:67:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(67, 1);
		try
		{
			// Scrape.g:68:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:68:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(68, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition264);  
			stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(68, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition266);  
			stream_ID.Add(ID8);

			DebugLocation(68, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition268);  
			stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(68, 27);
			// Scrape.g:68:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ID))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:68:27: tableColumnArgs
					{
					DebugLocation(68, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition270);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();

					stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(68, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition273);  
			stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(68, 55);
			PushFollow(Follow._block_in_procedureDefinition275);
			block12=block();
			PopFollow();

			stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: PROCEDURE, tableColumnArgs, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 68:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(68, 64);
				// Scrape.g:68:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(68, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(68, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(68, 85);
				// Scrape.g:68:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(68, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:71:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(71, 1);
		try
		{
			// Scrape.g:72:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement )
			int alt5=5;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt5 = 1;
				}
				break;
			case SELECT:
				{
				alt5 = 2;
				}
				break;
			case ID:
				{
				alt5 = 3;
				}
				break;
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt5 = 4;
				}
				break;
			case EACH:
				{
				alt5 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:72:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(72, 4);
				PushFollow(Follow._createTableStatement_in_statement303);
				createTableStatement13=createTableStatement();
				PopFollow();

				adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:73:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._sqlStatement_in_statement308);
				sqlStatement14=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:74:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement313);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();

				adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:75:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._insertStatement_in_statement318);
				insertStatement16=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:76:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._eachStatement_in_statement323);
				eachStatement17=eachStatement();
				PopFollow();

				adaptor.AddChild(root_0, eachStatement17.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:79:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 4);
		TraceIn("proxyStatement", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES18 = default(CommonToken);
		CommonToken OPENPAREN19 = default(CommonToken);
		CommonToken CLOSEPAREN21 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES18_tree = default(CommonTree);
		CommonTree OPENPAREN19_tree = default(CommonTree);
		CommonTree CLOSEPAREN21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(79, 1);
		try
		{
			// Scrape.g:80:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:80:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(80, 4);
			PROXIES18=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement334);  
			stream_PROXIES.Add(PROXIES18);

			DebugLocation(80, 12);
			OPENPAREN19=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement336);  
			stream_OPENPAREN.Add(OPENPAREN19);

			DebugLocation(80, 22);
			PushFollow(Follow._proxyList_in_proxyStatement338);
			proxyList20=proxyList();
			PopFollow();

			stream_proxyList.Add(proxyList20.Tree);
			DebugLocation(80, 32);
			CLOSEPAREN21=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement340);  
			stream_CLOSEPAREN.Add(CLOSEPAREN21);

			DebugLocation(80, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement342);
			proxyTest22=proxyTest();
			PopFollow();

			stream_proxyTest.Add(proxyTest22.Tree);


			{
			// AST REWRITE
			// elements: proxyTest, proxyList, PROXIES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 80:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(80, 56);
				// Scrape.g:80:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(80, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(80, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(80, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 4);
			LeaveRule("proxyStatement", 4);
			LeaveRule_proxyStatement();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:83:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 5);
		TraceIn("proxyList", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL23 = default(CommonToken);
		CommonToken COMMA24 = default(CommonToken);
		CommonToken STRING_LITERAL25 = default(CommonToken);

		CommonTree STRING_LITERAL23_tree = default(CommonTree);
		CommonTree COMMA24_tree = default(CommonTree);
		CommonTree STRING_LITERAL25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(83, 1);
		try
		{
			// Scrape.g:84:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:84:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(84, 4);
			// Scrape.g:84:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==STRING_LITERAL))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==COMMA))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:84:5: STRING_LITERAL COMMA
					{
					DebugLocation(84, 5);
					STRING_LITERAL23=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList364);  
					stream_STRING_LITERAL.Add(STRING_LITERAL23);

					DebugLocation(84, 20);
					COMMA24=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList366);  
					stream_COMMA.Add(COMMA24);


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(84, 28);
			STRING_LITERAL25=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList370);  
			stream_STRING_LITERAL.Add(STRING_LITERAL25);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 84:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(84, 46);
				// Scrape.g:84:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(84, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(84, 59);
				// Scrape.g:84:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(84, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 5);
			LeaveRule("proxyList", 5);
			LeaveRule_proxyList();
		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:87:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 6);
		TraceIn("proxyTest", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH26 = default(CommonToken);
		CommonToken TEST27 = default(CommonToken);
		CommonToken OPENBRACE28 = default(CommonToken);
		CommonToken CLOSEBRACE30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH26_tree = default(CommonTree);
		CommonTree TEST27_tree = default(CommonTree);
		CommonTree OPENBRACE28_tree = default(CommonTree);
		CommonTree CLOSEBRACE30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(87, 1);
		try
		{
			// Scrape.g:88:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:88:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(88, 4);
			WITH26=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest390);  
			stream_WITH.Add(WITH26);

			DebugLocation(88, 9);
			TEST27=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest392);  
			stream_TEST.Add(TEST27);

			DebugLocation(88, 14);
			OPENBRACE28=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest394);  
			stream_OPENBRACE.Add(OPENBRACE28);

			DebugLocation(88, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest396);
			sqlStatement29=sqlStatement();
			PopFollow();

			stream_sqlStatement.Add(sqlStatement29.Tree);
			DebugLocation(88, 37);
			CLOSEBRACE30=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest398);  
			stream_CLOSEBRACE.Add(CLOSEBRACE30);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 88:48: -> sqlStatement
			{
				DebugLocation(88, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 6);
			LeaveRule("proxyTest", 6);
			LeaveRule_proxyTest();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:91:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 7);
		TraceIn("eachStatement", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH31 = default(CommonToken);
		CommonToken OPENPAREN32 = default(CommonToken);
		CommonToken IN33 = default(CommonToken);
		CommonToken CLOSEPAREN34 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH31_tree = default(CommonTree);
		CommonTree OPENPAREN32_tree = default(CommonTree);
		CommonTree IN33_tree = default(CommonTree);
		CommonTree CLOSEPAREN34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(91, 1);
		try
		{
			// Scrape.g:92:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:92:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(92, 4);
			EACH31=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement413);  
			stream_EACH.Add(EACH31);

			DebugLocation(92, 9);
			OPENPAREN32=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement415);  
			stream_OPENPAREN.Add(OPENPAREN32);

			DebugLocation(92, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement419);  
			stream_ID.Add(v);

			DebugLocation(92, 24);
			IN33=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement421);  
			stream_IN.Add(IN33);

			DebugLocation(92, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement425);  
			stream_ID.Add(t);

			DebugLocation(92, 32);
			CLOSEPAREN34=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement427);  
			stream_CLOSEPAREN.Add(CLOSEPAREN34);

			DebugLocation(92, 43);
			PushFollow(Follow._block_in_eachStatement429);
			block35=block();
			PopFollow();

			stream_block.Add(block35.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 92:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(92, 52);
				// Scrape.g:92:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(92, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(92, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(92, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(92, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 7);
			LeaveRule("eachStatement", 7);
			LeaveRule_eachStatement();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:95:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 8);
		TraceIn("block", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE36 = default(CommonToken);
		CommonToken CLOSEBRACE38 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement37 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE36_tree = default(CommonTree);
		CommonTree CLOSEBRACE38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(95, 1);
		try
		{
			// Scrape.g:96:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:96:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(96, 4);
			OPENBRACE36=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block454);  
			stream_OPENBRACE.Add(OPENBRACE36);

			DebugLocation(96, 14);
			// Scrape.g:96:14: ( statement )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==CREATE||LA7_1==EACH||LA7_1==ID||LA7_1==INSERT_INTO||LA7_1==INSERT_OVERWRITE||LA7_1==SELECT))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:96:14: statement
					{
					DebugLocation(96, 14);
					PushFollow(Follow._statement_in_block456);
					statement37=statement();
					PopFollow();

					stream_statement.Add(statement37.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(96, 25);
			CLOSEBRACE38=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block459);  
			stream_CLOSEBRACE.Add(CLOSEBRACE38);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 96:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(96, 39);
				// Scrape.g:96:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(96, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(96, 47);
				// Scrape.g:96:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(96, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 8);
			LeaveRule("block", 8);
			LeaveRule_block();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:99:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 9);
		TraceIn("expandExpression", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND39 = default(CommonToken);
		CommonToken OPENPAREN40 = default(CommonToken);
		CommonToken TO42 = default(CommonToken);
		CommonToken CLOSEPAREN44 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar41 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND39_tree = default(CommonTree);
		CommonTree OPENPAREN40_tree = default(CommonTree);
		CommonTree TO42_tree = default(CommonTree);
		CommonTree CLOSEPAREN44_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(99, 1);
		try
		{
			// Scrape.g:100:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:100:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(100, 4);
			EXPAND39=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression479);  
			stream_EXPAND.Add(EXPAND39);

			DebugLocation(100, 11);
			OPENPAREN40=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression481);  
			stream_OPENPAREN.Add(OPENPAREN40);

			DebugLocation(100, 21);
			PushFollow(Follow._expandVar_in_expandExpression483);
			expandVar41=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar41.Tree);
			DebugLocation(100, 31);
			TO42=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression485);  
			stream_TO.Add(TO42);

			DebugLocation(100, 34);
			PushFollow(Follow._expandVar_in_expandExpression487);
			expandVar43=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar43.Tree);
			DebugLocation(100, 44);
			CLOSEPAREN44=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression489);  
			stream_CLOSEPAREN.Add(CLOSEPAREN44);

			DebugLocation(100, 55);
			// Scrape.g:100:55: ( expandBlock )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==OPENBRACE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:100:55: expandBlock
					{
					DebugLocation(100, 55);
					PushFollow(Follow._expandBlock_in_expandExpression491);
					expandBlock45=expandBlock();
					PopFollow();

					stream_expandBlock.Add(expandBlock45.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: expandVar, expandVar, expandBlock, EXPAND
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 100:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(100, 71);
				// Scrape.g:100:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(100, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(100, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(100, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(100, 100);
				// Scrape.g:100:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(100, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 9);
			LeaveRule("expandExpression", 9);
			LeaveRule_expandExpression();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:103:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 10);
		TraceIn("expandBlock", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE46 = default(CommonToken);
		CommonToken CLOSEBRACE48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE46_tree = default(CommonTree);
		CommonTree CLOSEBRACE48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(103, 1);
		try
		{
			// Scrape.g:104:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:104:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(104, 4);
			OPENBRACE46=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock516);  
			stream_OPENBRACE.Add(OPENBRACE46);

			DebugLocation(104, 14);
			// Scrape.g:104:14: ( mathExpression )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==ID||LA9_1==INT||LA9_1==NULL||LA9_1==OPENPAREN||LA9_1==STRING_LITERAL||LA9_1==101))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:104:14: mathExpression
					{
					DebugLocation(104, 14);
					PushFollow(Follow._mathExpression_in_expandBlock518);
					mathExpression47=mathExpression();
					PopFollow();

					stream_mathExpression.Add(mathExpression47.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(104, 30);
			CLOSEBRACE48=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock521);  
			stream_CLOSEBRACE.Add(CLOSEBRACE48);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 104:41: -> ( mathExpression )*
			{
				DebugLocation(104, 44);
				// Scrape.g:104:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(104, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 10);
			LeaveRule("expandBlock", 10);
			LeaveRule_expandBlock();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:107:1: expandVar : ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 11);
		TraceIn("expandVar", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT49 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT49_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(107, 1);
		try
		{
			// Scrape.g:108:2: ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==INT))
			{
				alt10 = 1;
			}
			else if ((LA10_1==ID))
			{
				int LA10_2 = input.LA(2);

				if ((LA10_2==DOT))
				{
					alt10 = 2;
				}
				else if ((LA10_2==CLOSEPAREN||LA10_2==TO))
				{
					alt10 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:108:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 4);
				INT49=(CommonToken)Match(input,INT,Follow._INT_in_expandVar537); 
				INT49_tree = (CommonTree)adaptor.Create(INT49);
				adaptor.AddChild(root_0, INT49_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:109:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._tableMemberReference_in_expandVar542);
				tableMemberReference50=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference50.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:110:4: ID
				{
				DebugLocation(110, 4);
				ID51=(CommonToken)Match(input,ID,Follow._ID_in_expandVar547);  
				stream_ID.Add(ID51);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 110:7: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(110, 10);
					// Scrape.g:110:10: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(110, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID51), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 11);
			LeaveRule("expandVar", 11);
			LeaveRule_expandVar();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:113:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 12);
		TraceIn("downloadExpression", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(113, 1);
		try
		{
			// Scrape.g:114:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==DOWNLOAD_PAGE))
			{
				alt11 = 1;
			}
			else if ((LA11_1==DOWNLOAD_IMAGE))
			{
				alt11 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:114:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression565);
				downloadPageExpresssion52=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion52.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:115:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(115, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression570);
				downloadImageExpression53=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression53.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 12);
			LeaveRule("downloadExpression", 12);
			LeaveRule_downloadExpression();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:118:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 13);
		TraceIn("downloadPageExpresssion", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE54 = default(CommonToken);
		CommonToken STRING_LITERAL55 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE57 = default(CommonToken);
		CommonToken ID58 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE54_tree = default(CommonTree);
		CommonTree STRING_LITERAL55_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE57_tree = default(CommonTree);
		CommonTree ID58_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(118, 1);
		try
		{
			// Scrape.g:119:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) )
			int alt13=3;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				int LA13_2 = input.LA(2);

				if ((LA13_2==ID))
				{
					int LA13_3 = input.LA(3);

					if ((LA13_3==DOT))
					{
						alt13 = 3;
					}
					else if ((LA13_3==EOF||LA13_3==CLOSEBRACE||LA13_3==CREATE||LA13_3==EACH||LA13_3==ID||LA13_3==INSERT_INTO||LA13_3==INSERT_OVERWRITE||LA13_3==SELECT||LA13_3==WHERE))
					{
						alt13 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 13, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA13_2==SELECT||LA13_2==STRING_LITERAL))
				{
					alt13 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:119:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 17);
				DOWNLOAD_PAGE54=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion581); 
				DOWNLOAD_PAGE54_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE54);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE54_tree, root_0);
				DebugLocation(119, 19);
				// Scrape.g:119:19: ( STRING_LITERAL | sqlStatement )
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1==STRING_LITERAL))
				{
					alt12 = 1;
				}
				else if ((LA12_1==SELECT))
				{
					alt12 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:119:20: STRING_LITERAL
					{
					DebugLocation(119, 20);
					STRING_LITERAL55=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion585); 
					STRING_LITERAL55_tree = (CommonTree)adaptor.Create(STRING_LITERAL55);
					adaptor.AddChild(root_0, STRING_LITERAL55_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:119:37: sqlStatement
					{
					DebugLocation(119, 37);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion589);
					sqlStatement56=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement56.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:120:4: DOWNLOAD_PAGE ID
				{
				DebugLocation(120, 4);
				DOWNLOAD_PAGE57=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion595);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE57);

				DebugLocation(120, 18);
				ID58=(CommonToken)Match(input,ID,Follow._ID_in_downloadPageExpresssion597);  
				stream_ID.Add(ID58);



				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 120:21: -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(120, 24);
					// Scrape.g:120:24: ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(120, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(120, 40);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID58));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:121:4: DOWNLOAD_PAGE tableMemberReference
				{
				DebugLocation(121, 4);
				DOWNLOAD_PAGE59=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion611);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE59);

				DebugLocation(121, 18);
				PushFollow(Follow._tableMemberReference_in_downloadPageExpresssion613);
				tableMemberReference60=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference60.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 121:39: -> ^( DOWNLOAD_PAGE tableMemberReference )
				{
					DebugLocation(121, 42);
					// Scrape.g:121:42: ^( DOWNLOAD_PAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(121, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(121, 58);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 13);
			LeaveRule("downloadPageExpresssion", 13);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:124:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 14);
		TraceIn("downloadImageExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE61 = default(CommonToken);
		CommonToken STRING_LITERAL62 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE64 = default(CommonToken);
		CommonToken ID65 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement63 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE61_tree = default(CommonTree);
		CommonTree STRING_LITERAL62_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE64_tree = default(CommonTree);
		CommonTree ID65_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(124, 1);
		try
		{
			// Scrape.g:125:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_IMAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==ID))
				{
					int LA15_3 = input.LA(3);

					if ((LA15_3==DOT))
					{
						alt15 = 3;
					}
					else if ((LA15_3==EOF||LA15_3==CLOSEBRACE||LA15_3==CREATE||LA15_3==EACH||LA15_3==ID||LA15_3==INSERT_INTO||LA15_3==INSERT_OVERWRITE||LA15_3==SELECT||LA15_3==WHERE))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA15_2==SELECT||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:125:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(125, 18);
				DOWNLOAD_IMAGE61=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression632); 
				DOWNLOAD_IMAGE61_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE61);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE61_tree, root_0);
				DebugLocation(125, 20);
				// Scrape.g:125:20: ( STRING_LITERAL | sqlStatement )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==SELECT))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:125:21: STRING_LITERAL
					{
					DebugLocation(125, 21);
					STRING_LITERAL62=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression636); 
					STRING_LITERAL62_tree = (CommonTree)adaptor.Create(STRING_LITERAL62);
					adaptor.AddChild(root_0, STRING_LITERAL62_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:125:38: sqlStatement
					{
					DebugLocation(125, 38);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression640);
					sqlStatement63=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement63.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:126:4: DOWNLOAD_IMAGE ID
				{
				DebugLocation(126, 4);
				DOWNLOAD_IMAGE64=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression646);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE64);

				DebugLocation(126, 19);
				ID65=(CommonToken)Match(input,ID,Follow._ID_in_downloadImageExpression648);  
				stream_ID.Add(ID65);



				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 126:22: -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(126, 25);
					// Scrape.g:126:25: ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(126, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(126, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID65));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:127:4: DOWNLOAD_IMAGE tableMemberReference
				{
				DebugLocation(127, 4);
				DOWNLOAD_IMAGE66=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression662);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE66);

				DebugLocation(127, 19);
				PushFollow(Follow._tableMemberReference_in_downloadImageExpression664);
				tableMemberReference67=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference67.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 127:40: -> ^( DOWNLOAD_IMAGE tableMemberReference )
				{
					DebugLocation(127, 43);
					// Scrape.g:127:43: ^( DOWNLOAD_IMAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(127, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(127, 60);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 14);
			LeaveRule("downloadImageExpression", 14);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:131:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 15);
		TraceIn("tableMemberReference", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT68 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT68_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(131, 1);
		try
		{
			// Scrape.g:132:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:132:4: t= ID DOT m= ID
			{
			DebugLocation(132, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference687);  
			stream_ID.Add(t);

			DebugLocation(132, 9);
			DOT68=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference689);  
			stream_DOT.Add(DOT68);

			DebugLocation(132, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference693);  
			stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 132:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(132, 21);
				// Scrape.g:132:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(132, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(132, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(132, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 15);
			LeaveRule("tableMemberReference", 15);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:135:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 16);
		TraceIn("variableDeclarationStatement", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID69 = default(CommonToken);
		CommonToken EQUALS70 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID69_tree = default(CommonTree);
		CommonTree EQUALS70_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(135, 1);
		try
		{
			// Scrape.g:136:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:136:4: ID EQUALS assignmentExpression
			{
			DebugLocation(136, 4);
			ID69=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement717);  
			stream_ID.Add(ID69);

			DebugLocation(136, 7);
			EQUALS70=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement719);  
			stream_EQUALS.Add(EQUALS70);

			DebugLocation(136, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement721);
			assignmentExpression71=assignmentExpression();
			PopFollow();

			stream_assignmentExpression.Add(assignmentExpression71.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 136:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(136, 38);
				// Scrape.g:136:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(136, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(136, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(136, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 16);
			LeaveRule("variableDeclarationStatement", 16);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:139:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 17);
		TraceIn("assignmentExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression73 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(139, 1);
		try
		{
			// Scrape.g:140:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case ID:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 101:
				{
				alt16 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt16 = 2;
				}
				break;
			case EXPAND:
				{
				alt16 = 3;
				}
				break;
			case SELECT:
				{
				alt16 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:140:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(140, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression742);
				mathExpression72=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression72.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:141:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression747);
				downloadExpression73=downloadExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadExpression73.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:142:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression752);
				expandExpression74=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression74.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:143:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression757);
				sqlStatement75=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement75.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 17);
			LeaveRule("assignmentExpression", 17);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(144, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:146:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 18);
		TraceIn("mathExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set77 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(146, 5);
		try
		{
			// Scrape.g:147:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:147:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression773);
			mathExpressionGroup76=mathExpressionGroup();
			PopFollow();

			adaptor.AddChild(root_0, mathExpressionGroup76.Tree);
			DebugLocation(147, 29);
			// Scrape.g:147:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==MINIS||LA17_1==PLUS))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:147:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(147, 46);

					set77=(CommonToken)input.LT(1);
					set77=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set77), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(147, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression787);
					mathExpressionGroup78=mathExpressionGroup();
					PopFollow();

					adaptor.AddChild(root_0, mathExpressionGroup78.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 18);
			LeaveRule("mathExpression", 18);
			LeaveRule_mathExpression();
		}
		DebugLocation(148, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:150:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 19);
		TraceIn("mathExpressionGroup", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set80 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set80_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(150, 3);
		try
		{
			// Scrape.g:151:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:151:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(151, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup805);
			atom79=atom();
			PopFollow();

			adaptor.AddChild(root_0, atom79.Tree);
			DebugLocation(151, 9);
			// Scrape.g:151:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==ASTERISK||LA18_1==DIV))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:151:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(151, 28);

					set80=(CommonToken)input.LT(1);
					set80=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set80), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(151, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup819);
					atom81=atom();
					PopFollow();

					adaptor.AddChild(root_0, atom81.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 19);
			LeaveRule("mathExpressionGroup", 19);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(152, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:154:1: atom : ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 20);
		TraceIn("atom", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID82 = default(CommonToken);
		CommonToken char_literal83 = default(CommonToken);
		CommonToken OPENPAREN86 = default(CommonToken);
		CommonToken CLOSEPAREN88 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID82_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree OPENPAREN86_tree = default(CommonTree);
		CommonTree CLOSEPAREN88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(154, 5);
		try
		{
			// Scrape.g:155:6: ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt19=5;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA19_2 = input.LA(2);

				if ((LA19_2==DOT))
				{
					alt19 = 3;
				}
				else if ((LA19_2==EOF||LA19_2==ASTERISK||(LA19_2>=CLOSEBRACE && LA19_2<=CLOSEPAREN)||LA19_2==CREATE||LA19_2==DIV||LA19_2==EACH||LA19_2==ID||LA19_2==INSERT_INTO||(LA19_2>=INSERT_OVERWRITE && LA19_2<=INT)||LA19_2==MINIS||LA19_2==NULL||LA19_2==OPENPAREN||LA19_2==PLUS||LA19_2==SELECT||LA19_2==STRING_LITERAL||LA19_2==101))
				{
					alt19 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 101:
				{
				alt19 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt19 = 4;
				}
				break;
			case OPENPAREN:
				{
				alt19 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:155:8: ID
				{
				DebugLocation(155, 8);
				ID82=(CommonToken)Match(input,ID,Follow._ID_in_atom840);  
				stream_ID.Add(ID82);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 155:11: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(155, 14);
					// Scrape.g:155:14: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(155, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID82), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:156:5: '$'
				{
				DebugLocation(156, 5);
				char_literal83=(CommonToken)Match(input,101,Follow._101_in_atom853);  
				stream_101.Add(char_literal83);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(156, 12);
					// Scrape.g:156:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(156, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:157:5: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 5);
				PushFollow(Follow._tableMemberReference_in_atom865);
				tableMemberReference84=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference84.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:158:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 5);
				PushFollow(Follow._literal_in_atom871);
				literal85=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal85.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:159:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 17);
				OPENPAREN86=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom880); 
				DebugLocation(159, 19);
				PushFollow(Follow._mathExpression_in_atom883);
				mathExpression87=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression87.Tree);
				DebugLocation(159, 44);
				CLOSEPAREN88=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom885); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 20);
			LeaveRule("atom", 20);
			LeaveRule_atom();
		}
		DebugLocation(160, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:162:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 21);
		TraceIn("literal", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set89 = default(CommonToken);

		CommonTree set89_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(162, 1);
		try
		{
			// Scrape.g:163:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(163, 2);

			set89=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set89));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 21);
			LeaveRule("literal", 21);
			LeaveRule_literal();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:171:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_INTO STRING_LITERAL sqlStatement -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 22);
		TraceIn("insertStatement", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO90 = default(CommonToken);
		CommonToken ID91 = default(CommonToken);
		CommonToken INSERT_INTO93 = default(CommonToken);
		CommonToken STRING_LITERAL94 = default(CommonToken);
		CommonToken INSERT_OVERWRITE96 = default(CommonToken);
		CommonToken ID97 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement95 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO90_tree = default(CommonTree);
		CommonTree ID91_tree = default(CommonTree);
		CommonTree INSERT_INTO93_tree = default(CommonTree);
		CommonTree STRING_LITERAL94_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE96_tree = default(CommonTree);
		CommonTree ID97_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(171, 1);
		try
		{
			// Scrape.g:172:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_INTO STRING_LITERAL sqlStatement -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==INSERT_INTO))
			{
				int LA20_2 = input.LA(2);

				if ((LA20_2==ID))
				{
					alt20 = 1;
				}
				else if ((LA20_2==STRING_LITERAL))
				{
					alt20 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA20_1==INSERT_OVERWRITE))
			{
				alt20 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:172:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(172, 4);
				INSERT_INTO90=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement927);  
				stream_INSERT_INTO.Add(INSERT_INTO90);

				DebugLocation(172, 16);
				ID91=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement929);  
				stream_ID.Add(ID91);

				DebugLocation(172, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement931);
				sqlStatement92=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement92.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 172:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(172, 34);
					// Scrape.g:172:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(172, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(172, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID91));
					DebugLocation(172, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:173:4: INSERT_INTO STRING_LITERAL sqlStatement
				{
				DebugLocation(173, 4);
				INSERT_INTO93=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement946);  
				stream_INSERT_INTO.Add(INSERT_INTO93);

				DebugLocation(173, 16);
				STRING_LITERAL94=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_insertStatement948);  
				stream_STRING_LITERAL.Add(STRING_LITERAL94);

				DebugLocation(173, 31);
				PushFollow(Follow._sqlStatement_in_insertStatement950);
				sqlStatement95=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement95.Tree);


				{
				// AST REWRITE
				// elements: STRING_LITERAL, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 173:43: -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement )
				{
					DebugLocation(173, 46);
					// Scrape.g:173:46: ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(173, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(173, 70);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
					DebugLocation(173, 85);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:174:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(174, 4);
				INSERT_OVERWRITE96=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement964);  
				stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE96);

				DebugLocation(174, 21);
				ID97=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement966);  
				stream_ID.Add(ID97);

				DebugLocation(174, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement968);
				sqlStatement98=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement98.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 174:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(174, 39);
					// Scrape.g:174:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(174, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(174, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID97));
					DebugLocation(174, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 22);
			LeaveRule("insertStatement", 22);
			LeaveRule_insertStatement();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:179:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 23);
		TraceIn("sqlStatement", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(179, 1);
		try
		{
			// Scrape.g:180:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:180:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(180, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement992);
			selectStatement99=selectStatement();
			PopFollow();

			stream_selectStatement.Add(selectStatement99.Tree);
			DebugLocation(180, 20);
			// Scrape.g:180:20: ( fromStatement )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==FROM))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:180:20: fromStatement
				{
				DebugLocation(180, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement994);
				fromStatement100=fromStatement();
				PopFollow();

				stream_fromStatement.Add(fromStatement100.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(180, 35);
			// Scrape.g:180:35: ( whereStatement )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==WHERE))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:180:35: whereStatement
				{
				DebugLocation(180, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement997);
				whereStatement101=whereStatement();
				PopFollow();

				stream_whereStatement.Add(whereStatement101.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: selectStatement, fromStatement, whereStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 180:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(180, 54);
				// Scrape.g:180:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(180, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(180, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(180, 89);
				// Scrape.g:180:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(180, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(180, 104);
				// Scrape.g:180:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(180, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 23);
			LeaveRule("sqlStatement", 23);
			LeaveRule_sqlStatement();
		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:183:1: whereStatement : WHERE ^ ID EQUALS ! STRING_LITERAL ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 24);
		TraceIn("whereStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE102 = default(CommonToken);
		CommonToken ID103 = default(CommonToken);
		CommonToken EQUALS104 = default(CommonToken);
		CommonToken STRING_LITERAL105 = default(CommonToken);

		CommonTree WHERE102_tree = default(CommonTree);
		CommonTree ID103_tree = default(CommonTree);
		CommonTree EQUALS104_tree = default(CommonTree);
		CommonTree STRING_LITERAL105_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(183, 1);
		try
		{
			// Scrape.g:184:2: ( WHERE ^ ID EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:184:4: WHERE ^ ID EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(184, 9);
			WHERE102=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1023); 
			WHERE102_tree = (CommonTree)adaptor.Create(WHERE102);
			root_0 = (CommonTree)adaptor.BecomeRoot(WHERE102_tree, root_0);
			DebugLocation(184, 11);
			ID103=(CommonToken)Match(input,ID,Follow._ID_in_whereStatement1026); 
			ID103_tree = (CommonTree)adaptor.Create(ID103);
			adaptor.AddChild(root_0, ID103_tree);
			DebugLocation(184, 20);
			EQUALS104=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_whereStatement1028); 
			DebugLocation(184, 22);
			STRING_LITERAL105=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_whereStatement1031); 
			STRING_LITERAL105_tree = (CommonTree)adaptor.Create(STRING_LITERAL105);
			adaptor.AddChild(root_0, STRING_LITERAL105_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 24);
			LeaveRule("whereStatement", 24);
			LeaveRule_whereStatement();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:187:1: fromStatement : ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 25);
		TraceIn("fromStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FROM106 = default(CommonToken);
		CommonToken ID107 = default(CommonToken);
		CommonToken FROM108 = default(CommonToken);
		CommonToken FROM110 = default(CommonToken);
		CommonToken FROM112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FROM106_tree = default(CommonTree);
		CommonTree ID107_tree = default(CommonTree);
		CommonTree FROM108_tree = default(CommonTree);
		CommonTree FROM110_tree = default(CommonTree);
		CommonTree FROM112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(187, 1);
		try
		{
			// Scrape.g:188:2: ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression )
			int alt23=4;
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt23 = 1;
					}
					break;
				case DOWNLOAD_PAGE:
					{
					alt23 = 2;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt23 = 3;
					}
					break;
				case EXPAND:
					{
					alt23 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 23, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:188:4: FROM ID
				{
				DebugLocation(188, 4);
				FROM106=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1042);  
				stream_FROM.Add(FROM106);

				DebugLocation(188, 9);
				ID107=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1044);  
				stream_ID.Add(ID107);



				{
				// AST REWRITE
				// elements: FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 188:12: -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(188, 15);
					// Scrape.g:188:15: ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(188, 17);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(188, 22);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID107));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:189:4: FROM ^ downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 8);
				FROM108=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1058); 
				FROM108_tree = (CommonTree)adaptor.Create(FROM108);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM108_tree, root_0);
				DebugLocation(189, 10);
				PushFollow(Follow._downloadPageExpresssion_in_fromStatement1061);
				downloadPageExpresssion109=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion109.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:190:4: FROM ^ downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 8);
				FROM110=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1066); 
				FROM110_tree = (CommonTree)adaptor.Create(FROM110);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM110_tree, root_0);
				DebugLocation(190, 10);
				PushFollow(Follow._downloadImageExpression_in_fromStatement1069);
				downloadImageExpression111=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression111.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:191:4: FROM ^ expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 8);
				FROM112=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1074); 
				FROM112_tree = (CommonTree)adaptor.Create(FROM112);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM112_tree, root_0);
				DebugLocation(191, 10);
				PushFollow(Follow._expandExpression_in_fromStatement1077);
				expandExpression113=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression113.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 25);
			LeaveRule("fromStatement", 25);
			LeaveRule_fromStatement();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:194:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 26);
		TraceIn("selectStatement", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT114 = default(CommonToken);
		CommonToken COMMA116 = default(CommonToken);
		CommonToken SELECT118 = default(CommonToken);
		CommonToken ASTERISK119 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT114_tree = default(CommonTree);
		CommonTree COMMA116_tree = default(CommonTree);
		CommonTree SELECT118_tree = default(CommonTree);
		CommonTree ASTERISK119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(194, 1);
		try
		{
			// Scrape.g:195:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==SELECT))
			{
				int LA25_2 = input.LA(2);

				if ((LA25_2==ASTERISK))
				{
					alt25 = 2;
				}
				else if ((LA25_2==CASE||LA25_2==ID||LA25_2==INT||LA25_2==NULL||LA25_2==PICK||LA25_2==STRING_LITERAL))
				{
					alt25 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:195:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(195, 4);
				SELECT114=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1088);  
				stream_SELECT.Add(SELECT114);

				DebugLocation(195, 11);
				// Scrape.g:195:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					try
					{
						alt24 = dfa24.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:195:12: selectArgs COMMA
						{
						DebugLocation(195, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1091);
						selectArgs115=selectArgs();
						PopFollow();

						stream_selectArgs.Add(selectArgs115.Tree);
						DebugLocation(195, 23);
						COMMA116=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1093);  
						stream_COMMA.Add(COMMA116);


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(195, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1097);
				selectArgs117=selectArgs();
				PopFollow();

				stream_selectArgs.Add(selectArgs117.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 195:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(195, 45);
					// Scrape.g:195:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(195, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(195, 54);
					// Scrape.g:195:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(195, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:196:4: SELECT ASTERISK
				{
				DebugLocation(196, 4);
				SELECT118=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1111);  
				stream_SELECT.Add(SELECT118);

				DebugLocation(196, 11);
				ASTERISK119=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1113);  
				stream_ASTERISK.Add(ASTERISK119);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(196, 23);
					// Scrape.g:196:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(196, 32);
					// Scrape.g:196:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(196, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK119));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 26);
			LeaveRule("selectStatement", 26);
			LeaveRule_selectStatement();
		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:200:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 27);
		TraceIn("selectArgs", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS121 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(200, 1);
		try
		{
			// Scrape.g:201:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==ID||LA27_1==INT||LA27_1==NULL||LA27_1==PICK||LA27_1==STRING_LITERAL))
			{
				alt27 = 1;
			}
			else if ((LA27_1==CASE))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:201:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(201, 4);
				// Scrape.g:201:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA26_2 = input.LA(2);

						if ((LA26_2==STRING_LITERAL))
						{
							int LA26_3 = input.LA(3);

							if ((LA26_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA26_5 = input.LA(5);

									if ((LA26_5==STRING_LITERAL))
									{
										int LA26_6 = input.LA(6);

										if ((LA26_6==MATCH))
										{
											int LA26_7 = input.LA(7);

											if ((LA26_7==STRING_LITERAL))
											{
												int LA26_8 = input.LA(8);

												if ((LA26_8==REPLACE))
												{
													int LA26_9 = input.LA(9);

													if ((LA26_9==STRING_LITERAL))
													{
														int LA26_10 = input.LA(10);

														if ((LA26_10==PLUS))
														{
															alt26 = 1;
														}


													}


												}
												else if ((LA26_8==PLUS))
												{
													alt26 = 1;
												}


											}


										}
										else if ((LA26_6==PLUS))
										{
											alt26 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA26_5 = input.LA(5);

									if ((LA26_5==MATCH))
									{
										int LA26_6 = input.LA(6);

										if ((LA26_6==STRING_LITERAL))
										{
											int LA26_7 = input.LA(7);

											if ((LA26_7==REPLACE))
											{
												int LA26_8 = input.LA(8);

												if ((LA26_8==STRING_LITERAL))
												{
													int LA26_9 = input.LA(9);

													if ((LA26_9==PLUS))
													{
														alt26 = 1;
													}


												}


											}
											else if ((LA26_7==PLUS))
											{
												alt26 = 1;
											}


										}


									}
									else if ((LA26_5==PLUS))
									{
										alt26 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA26_5 = input.LA(5);

									if ((LA26_5==MATCH))
									{
										int LA26_6 = input.LA(6);

										if ((LA26_6==STRING_LITERAL))
										{
											int LA26_7 = input.LA(7);

											if ((LA26_7==REPLACE))
											{
												int LA26_8 = input.LA(8);

												if ((LA26_8==STRING_LITERAL))
												{
													int LA26_9 = input.LA(9);

													if ((LA26_9==PLUS))
													{
														alt26 = 1;
													}


												}


											}
											else if ((LA26_7==PLUS))
											{
												alt26 = 1;
											}


										}


									}
									else if ((LA26_5==PLUS))
									{
										alt26 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA26_2 = input.LA(2);

						if ((LA26_2==PLUS))
						{
							alt26 = 1;
						}


						}
						break;
					case ID:
						{
						int LA26_2 = input.LA(2);

						if ((LA26_2==DOT))
						{
							int LA26_3 = input.LA(3);

							if ((LA26_3==ID))
							{
								int LA26_4 = input.LA(4);

								if ((LA26_4==PLUS))
								{
									alt26 = 1;
								}


							}


						}
						else if ((LA26_2==PLUS))
						{
							alt26 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:201:5: selectArg PLUS
						{
						DebugLocation(201, 5);
						PushFollow(Follow._selectArg_in_selectArgs1139);
						selectArg120=selectArg();
						PopFollow();

						stream_selectArg.Add(selectArg120.Tree);
						DebugLocation(201, 15);
						PLUS121=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1141);  
						stream_PLUS.Add(PLUS121);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(201, 22);
				PushFollow(Follow._selectArg_in_selectArgs1145);
				selectArg122=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg122.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 201:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(201, 35);
					// Scrape.g:201:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(201, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(201, 48);
					// Scrape.g:201:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(201, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:202:4: caseStatement
				{
				DebugLocation(202, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1159);
				caseStatement123=caseStatement();
				PopFollow();

				stream_caseStatement.Add(caseStatement123.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 202:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(202, 21);
					// Scrape.g:202:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(202, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(202, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 27);
			LeaveRule("selectArgs", 27);
			LeaveRule_selectArgs();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:207:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 28);
		TraceIn("caseStatement", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE124 = default(CommonToken);
		CommonToken ELSE126 = default(CommonToken);
		CommonToken END128 = default(CommonToken);
		CommonToken CASE129 = default(CommonToken);
		CommonToken ELSE132 = default(CommonToken);
		CommonToken END134 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE124_tree = default(CommonTree);
		CommonTree ELSE126_tree = default(CommonTree);
		CommonTree END128_tree = default(CommonTree);
		CommonTree CASE129_tree = default(CommonTree);
		CommonTree ELSE132_tree = default(CommonTree);
		CommonTree END134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(207, 1);
		try
		{
			// Scrape.g:208:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt32=2;
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==CASE))
			{
				int LA32_2 = input.LA(2);

				if ((LA32_2==WHEN))
				{
					alt32 = 1;
				}
				else if ((LA32_2==ID||LA32_2==INT||LA32_2==NULL||LA32_2==PICK||LA32_2==STRING_LITERAL))
				{
					alt32 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:208:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(208, 4);
				CASE124=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1181);  
				stream_CASE.Add(CASE124);

				DebugLocation(208, 9);
				// Scrape.g:208:9: ( whenBoolStatement )+
				int cnt28=0;
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_1 = input.LA(1);

					if ((LA28_1==WHEN))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:208:9: whenBoolStatement
						{
						DebugLocation(208, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1183);
						whenBoolStatement125=whenBoolStatement();
						PopFollow();

						stream_whenBoolStatement.Add(whenBoolStatement125.Tree);

						}
						break;

					default:
						if (cnt28 >= 1)
							goto loop28;

						EarlyExitException eee28 = new EarlyExitException( 28, input );
						DebugRecognitionException(eee28);
						throw eee28;
					}
					cnt28++;
				}
				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(208, 28);
				// Scrape.g:208:28: ( ELSE caseExpression )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==ELSE))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:208:29: ELSE caseExpression
					{
					DebugLocation(208, 29);
					ELSE126=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1187);  
					stream_ELSE.Add(ELSE126);

					DebugLocation(208, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1189);
					caseExpression127=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression127.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(208, 51);
				END128=(CommonToken)Match(input,END,Follow._END_in_caseStatement1193);  
				stream_END.Add(END128);



				{
				// AST REWRITE
				// elements: whenBoolStatement, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 208:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(208, 58);
					// Scrape.g:208:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(208, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(208, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(208, 89);
					// Scrape.g:208:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(208, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:209:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(209, 4);
				CASE129=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1210);  
				stream_CASE.Add(CASE129);

				DebugLocation(209, 9);
				PushFollow(Follow._selectArg_in_caseStatement1212);
				selectArg130=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg130.Tree);
				DebugLocation(209, 19);
				// Scrape.g:209:19: ( whenLiteralStatement )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if ((LA30_1==WHEN))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:209:19: whenLiteralStatement
						{
						DebugLocation(209, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1214);
						whenLiteralStatement131=whenLiteralStatement();
						PopFollow();

						stream_whenLiteralStatement.Add(whenLiteralStatement131.Tree);

						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(209, 41);
				// Scrape.g:209:41: ( ELSE caseExpression )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ELSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:209:42: ELSE caseExpression
					{
					DebugLocation(209, 42);
					ELSE132=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1218);  
					stream_ELSE.Add(ELSE132);

					DebugLocation(209, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1220);
					caseExpression133=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression133.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(209, 64);
				END134=(CommonToken)Match(input,END,Follow._END_in_caseStatement1224);  
				stream_END.Add(END134);



				{
				// AST REWRITE
				// elements: caseExpression, whenLiteralStatement, selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 209:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(209, 71);
					// Scrape.g:209:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(209, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(209, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(209, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(209, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(209, 114);
					// Scrape.g:209:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(209, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 28);
			LeaveRule("caseStatement", 28);
			LeaveRule_caseStatement();
		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:212:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 29);
		TraceIn("caseExpression", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(212, 1);
		try
		{
			// Scrape.g:213:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:213:4: selectArg
			{
			DebugLocation(213, 4);
			PushFollow(Follow._selectArg_in_caseExpression1249);
			selectArg135=selectArg();
			PopFollow();

			stream_selectArg.Add(selectArg135.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(213, 17);
				// Scrape.g:213:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(213, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 29);
			LeaveRule("caseExpression", 29);
			LeaveRule_caseExpression();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:216:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 30);
		TraceIn("whenLiteralStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN136 = default(CommonToken);
		CommonToken THEN138 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression139 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN136_tree = default(CommonTree);
		CommonTree THEN138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(216, 1);
		try
		{
			// Scrape.g:217:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:217:4: WHEN literal THEN caseExpression
			{
			DebugLocation(217, 4);
			WHEN136=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1268);  
			stream_WHEN.Add(WHEN136);

			DebugLocation(217, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1270);
			literal137=literal();
			PopFollow();

			stream_literal.Add(literal137.Tree);
			DebugLocation(217, 17);
			THEN138=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1272);  
			stream_THEN.Add(THEN138);

			DebugLocation(217, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1274);
			caseExpression139=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression139.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(217, 40);
				// Scrape.g:217:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(217, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(217, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(217, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 30);
			LeaveRule("whenLiteralStatement", 30);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:220:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 31);
		TraceIn("whenBoolStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN140 = default(CommonToken);
		CommonToken THEN142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN140_tree = default(CommonTree);
		CommonTree THEN142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(220, 1);
		try
		{
			// Scrape.g:221:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:221:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(221, 4);
			WHEN140=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1295);  
			stream_WHEN.Add(WHEN140);

			DebugLocation(221, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1297);
			boolExpression141=boolExpression();
			PopFollow();

			stream_boolExpression.Add(boolExpression141.Tree);
			DebugLocation(221, 24);
			THEN142=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1299);  
			stream_THEN.Add(THEN142);

			DebugLocation(221, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1301);
			caseExpression143=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression143.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 221:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(221, 47);
				// Scrape.g:221:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(221, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(221, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(221, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 31);
			LeaveRule("whenBoolStatement", 31);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:224:1: boolExpression : ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg );
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 32);
		TraceIn("boolExpression", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS145 = default(CommonToken);
		CommonToken LESSTHAN148 = default(CommonToken);
		CommonToken LESSTHANEQUAL151 = default(CommonToken);
		CommonToken GREATERTHAN154 = default(CommonToken);
		CommonToken GREATERTHANEQUAL157 = default(CommonToken);
		CommonToken NOTEQUAL160 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS145_tree = default(CommonTree);
		CommonTree LESSTHAN148_tree = default(CommonTree);
		CommonTree LESSTHANEQUAL151_tree = default(CommonTree);
		CommonTree GREATERTHAN154_tree = default(CommonTree);
		CommonTree GREATERTHANEQUAL157_tree = default(CommonTree);
		CommonTree NOTEQUAL160_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(224, 1);
		try
		{
			// Scrape.g:225:2: ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg )
			int alt33=6;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				int LA33_2 = input.LA(2);

				if ((LA33_2==STRING_LITERAL))
				{
					int LA33_3 = input.LA(3);

					if ((LA33_3==TAKE))
					{
						switch (input.LA(4))
						{
						case ATTRIBUTE:
							{
							int LA33_5 = input.LA(5);

							if ((LA33_5==STRING_LITERAL))
							{
								switch (input.LA(6))
								{
								case MATCH:
									{
									int LA33_7 = input.LA(7);

									if ((LA33_7==STRING_LITERAL))
									{
										switch (input.LA(8))
										{
										case REPLACE:
											{
											int LA33_9 = input.LA(9);

											if ((LA33_9==STRING_LITERAL))
											{
												switch (input.LA(10))
												{
												case EQUALS:
													{
													alt33 = 1;
													}
													break;
												case LESSTHAN:
													{
													alt33 = 2;
													}
													break;
												case LESSTHANEQUAL:
													{
													alt33 = 3;
													}
													break;
												case GREATERTHAN:
													{
													alt33 = 4;
													}
													break;
												case GREATERTHANEQUAL:
													{
													alt33 = 5;
													}
													break;
												case NOTEQUAL:
													{
													alt33 = 6;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 33, 21, input, 10);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 33, 20, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case EQUALS:
											{
											alt33 = 1;
											}
											break;
										case LESSTHAN:
											{
											alt33 = 2;
											}
											break;
										case LESSTHANEQUAL:
											{
											alt33 = 3;
											}
											break;
										case GREATERTHAN:
											{
											alt33 = 4;
											}
											break;
										case GREATERTHANEQUAL:
											{
											alt33 = 5;
											}
											break;
										case NOTEQUAL:
											{
											alt33 = 6;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 33, 19, input, 8);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 33, 18, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case EQUALS:
									{
									alt33 = 1;
									}
									break;
								case LESSTHAN:
									{
									alt33 = 2;
									}
									break;
								case LESSTHANEQUAL:
									{
									alt33 = 3;
									}
									break;
								case GREATERTHAN:
									{
									alt33 = 4;
									}
									break;
								case GREATERTHANEQUAL:
									{
									alt33 = 5;
									}
									break;
								case NOTEQUAL:
									{
									alt33 = 6;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 33, 17, input, 6);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 33, 14, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case TEXT:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA33_6 = input.LA(6);

								if ((LA33_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA33_8 = input.LA(8);

										if ((LA33_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt33 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt33 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt33 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt33 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt33 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt33 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 33, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 33, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt33 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt33 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt33 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt33 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt33 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt33 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 33, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 33, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt33 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt33 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt33 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt33 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt33 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt33 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 33, 15, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case HTML:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA33_6 = input.LA(6);

								if ((LA33_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA33_8 = input.LA(8);

										if ((LA33_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt33 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt33 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt33 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt33 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt33 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt33 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 33, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 33, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt33 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt33 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt33 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt33 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt33 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt33 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 33, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 33, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt33 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt33 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt33 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt33 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt33 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt33 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 33, 16, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 33, 12, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				switch (input.LA(2))
				{
				case EQUALS:
					{
					alt33 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt33 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt33 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt33 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt33 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt33 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case ID:
				{
				switch (input.LA(2))
				{
				case DOT:
					{
					int LA33_3 = input.LA(3);

					if ((LA33_3==ID))
					{
						switch (input.LA(4))
						{
						case EQUALS:
							{
							alt33 = 1;
							}
							break;
						case LESSTHAN:
							{
							alt33 = 2;
							}
							break;
						case LESSTHANEQUAL:
							{
							alt33 = 3;
							}
							break;
						case GREATERTHAN:
							{
							alt33 = 4;
							}
							break;
						case GREATERTHANEQUAL:
							{
							alt33 = 5;
							}
							break;
						case NOTEQUAL:
							{
							alt33 = 6;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 33, 13, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 11, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EQUALS:
					{
					alt33 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt33 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt33 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt33 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt33 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt33 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 33, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:225:4: selectArg EQUALS ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._selectArg_in_boolExpression1322);
				selectArg144=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg144.Tree);
				DebugLocation(225, 20);
				EQUALS145=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolExpression1324); 
				EQUALS145_tree = (CommonTree)adaptor.Create(EQUALS145);
				root_0 = (CommonTree)adaptor.BecomeRoot(EQUALS145_tree, root_0);
				DebugLocation(225, 22);
				PushFollow(Follow._selectArg_in_boolExpression1327);
				selectArg146=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg146.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:226:4: selectArg LESSTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._selectArg_in_boolExpression1332);
				selectArg147=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg147.Tree);
				DebugLocation(226, 22);
				LESSTHAN148=(CommonToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_boolExpression1334); 
				LESSTHAN148_tree = (CommonTree)adaptor.Create(LESSTHAN148);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHAN148_tree, root_0);
				DebugLocation(226, 24);
				PushFollow(Follow._selectArg_in_boolExpression1337);
				selectArg149=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg149.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:227:4: selectArg LESSTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._selectArg_in_boolExpression1342);
				selectArg150=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg150.Tree);
				DebugLocation(227, 27);
				LESSTHANEQUAL151=(CommonToken)Match(input,LESSTHANEQUAL,Follow._LESSTHANEQUAL_in_boolExpression1344); 
				LESSTHANEQUAL151_tree = (CommonTree)adaptor.Create(LESSTHANEQUAL151);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHANEQUAL151_tree, root_0);
				DebugLocation(227, 29);
				PushFollow(Follow._selectArg_in_boolExpression1347);
				selectArg152=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg152.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:228:4: selectArg GREATERTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._selectArg_in_boolExpression1352);
				selectArg153=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg153.Tree);
				DebugLocation(228, 25);
				GREATERTHAN154=(CommonToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_boolExpression1354); 
				GREATERTHAN154_tree = (CommonTree)adaptor.Create(GREATERTHAN154);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHAN154_tree, root_0);
				DebugLocation(228, 27);
				PushFollow(Follow._selectArg_in_boolExpression1357);
				selectArg155=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg155.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:229:4: selectArg GREATERTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._selectArg_in_boolExpression1362);
				selectArg156=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg156.Tree);
				DebugLocation(229, 30);
				GREATERTHANEQUAL157=(CommonToken)Match(input,GREATERTHANEQUAL,Follow._GREATERTHANEQUAL_in_boolExpression1364); 
				GREATERTHANEQUAL157_tree = (CommonTree)adaptor.Create(GREATERTHANEQUAL157);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHANEQUAL157_tree, root_0);
				DebugLocation(229, 32);
				PushFollow(Follow._selectArg_in_boolExpression1367);
				selectArg158=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg158.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:230:4: selectArg NOTEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				PushFollow(Follow._selectArg_in_boolExpression1372);
				selectArg159=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg159.Tree);
				DebugLocation(230, 22);
				NOTEQUAL160=(CommonToken)Match(input,NOTEQUAL,Follow._NOTEQUAL_in_boolExpression1374); 
				NOTEQUAL160_tree = (CommonTree)adaptor.Create(NOTEQUAL160);
				root_0 = (CommonTree)adaptor.BecomeRoot(NOTEQUAL160_tree, root_0);
				DebugLocation(230, 24);
				PushFollow(Follow._selectArg_in_boolExpression1377);
				selectArg161=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg161.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 32);
			LeaveRule("boolExpression", 32);
			LeaveRule_boolExpression();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:233:1: selectArg : ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 33);
		TraceIn("selectArg", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID164 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal163 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID164_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(233, 1);
		try
		{
			// Scrape.g:234:2: ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference )
			int alt34=4;
			try { DebugEnterDecision(34, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt34 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt34 = 2;
				}
				break;
			case ID:
				{
				int LA34_2 = input.LA(2);

				if ((LA34_2==DOT))
				{
					alt34 = 4;
				}
				else if ((LA34_2==EOF||LA34_2==CLOSEBRACE||LA34_2==COMMA||LA34_2==CREATE||(LA34_2>=EACH && LA34_2<=EQUALS)||(LA34_2>=FROM && LA34_2<=GREATERTHANEQUAL)||LA34_2==ID||LA34_2==INSERT_INTO||LA34_2==INSERT_OVERWRITE||(LA34_2>=LESSTHAN && LA34_2<=LESSTHANEQUAL)||LA34_2==NOTEQUAL||LA34_2==PLUS||LA34_2==SELECT||LA34_2==THEN||LA34_2==WHEN||LA34_2==WHERE))
				{
					alt34 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:234:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._pickStatement_in_selectArg1388);
				pickStatement162=pickStatement();
				PopFollow();

				adaptor.AddChild(root_0, pickStatement162.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:235:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				PushFollow(Follow._literal_in_selectArg1393);
				literal163=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal163.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:236:4: ID
				{
				DebugLocation(236, 4);
				ID164=(CommonToken)Match(input,ID,Follow._ID_in_selectArg1398);  
				stream_ID.Add(ID164);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(236, 10);
					// Scrape.g:236:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID164), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:237:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(237, 4);
				PushFollow(Follow._tableMemberReference_in_selectArg1410);
				tableMemberReference165=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference165.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 33);
			LeaveRule("selectArg", 33);
			LeaveRule_selectArg();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:240:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 34);
		TraceIn("pickStatement", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK166 = default(CommonToken);
		CommonToken STRING_LITERAL167 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK166_tree = default(CommonTree);
		CommonTree STRING_LITERAL167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(240, 1);
		try
		{
			// Scrape.g:241:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:241:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(241, 4);
			PICK166=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1422);  
			stream_PICK.Add(PICK166);

			DebugLocation(241, 9);
			STRING_LITERAL167=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1424);  
			stream_STRING_LITERAL.Add(STRING_LITERAL167);

			DebugLocation(241, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1426);
			takeStatement168=takeStatement();
			PopFollow();

			stream_takeStatement.Add(takeStatement168.Tree);
			DebugLocation(241, 38);
			// Scrape.g:241:38: ( matchStatement )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==MATCH))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:241:38: matchStatement
				{
				DebugLocation(241, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1428);
				matchStatement169=matchStatement();
				PopFollow();

				stream_matchStatement.Add(matchStatement169.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: PICK, matchStatement, STRING_LITERAL, takeStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(241, 57);
				// Scrape.g:241:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(241, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(241, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(241, 93);
				// Scrape.g:241:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(241, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 34);
			LeaveRule("pickStatement", 34);
			LeaveRule_pickStatement();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:244:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 35);
		TraceIn("takeStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE170 = default(CommonToken);
		CommonToken ATTRIBUTE171 = default(CommonToken);
		CommonToken STRING_LITERAL172 = default(CommonToken);
		CommonToken TAKE173 = default(CommonToken);
		CommonToken TEXT174 = default(CommonToken);
		CommonToken TAKE175 = default(CommonToken);
		CommonToken HTML176 = default(CommonToken);

		CommonTree TAKE170_tree = default(CommonTree);
		CommonTree ATTRIBUTE171_tree = default(CommonTree);
		CommonTree STRING_LITERAL172_tree = default(CommonTree);
		CommonTree TAKE173_tree = default(CommonTree);
		CommonTree TEXT174_tree = default(CommonTree);
		CommonTree TAKE175_tree = default(CommonTree);
		CommonTree HTML176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(244, 1);
		try
		{
			// Scrape.g:245:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt36 = 1;
					}
					break;
				case TEXT:
					{
					alt36 = 2;
					}
					break;
				case HTML:
					{
					alt36 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 36, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:245:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(245, 4);
				TAKE170=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1454);  
				stream_TAKE.Add(TAKE170);

				DebugLocation(245, 9);
				ATTRIBUTE171=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1456);  
				stream_ATTRIBUTE.Add(ATTRIBUTE171);

				DebugLocation(245, 19);
				STRING_LITERAL172=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1458);  
				stream_STRING_LITERAL.Add(STRING_LITERAL172);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(245, 37);
					// Scrape.g:245:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(245, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:246:4: TAKE TEXT
				{
				DebugLocation(246, 4);
				TAKE173=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1471);  
				stream_TAKE.Add(TAKE173);

				DebugLocation(246, 9);
				TEXT174=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1473);  
				stream_TEXT.Add(TEXT174);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 246:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(246, 17);
					// Scrape.g:246:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(246, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:247:4: TAKE HTML
				{
				DebugLocation(247, 4);
				TAKE175=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1484);  
				stream_TAKE.Add(TAKE175);

				DebugLocation(247, 9);
				HTML176=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1486);  
				stream_HTML.Add(HTML176);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 247:14: -> ^( TAKE_HTML )
				{
					DebugLocation(247, 17);
					// Scrape.g:247:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(247, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 35);
			LeaveRule("takeStatement", 35);
			LeaveRule_takeStatement();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:250:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 36);
		TraceIn("matchStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH177 = default(CommonToken);
		CommonToken STRING_LITERAL178 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH177_tree = default(CommonTree);
		CommonTree STRING_LITERAL178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(250, 1);
		try
		{
			// Scrape.g:251:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:251:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(251, 4);
			MATCH177=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1504);  
			stream_MATCH.Add(MATCH177);

			DebugLocation(251, 10);
			STRING_LITERAL178=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1506);  
			stream_STRING_LITERAL.Add(STRING_LITERAL178);

			DebugLocation(251, 25);
			// Scrape.g:251:25: ( replaceStatement )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==REPLACE))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:251:25: replaceStatement
				{
				DebugLocation(251, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1508);
				replaceStatement179=replaceStatement();
				PopFollow();

				stream_replaceStatement.Add(replaceStatement179.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: replaceStatement, MATCH, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(251, 46);
				// Scrape.g:251:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(251, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(251, 69);
				// Scrape.g:251:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(251, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 36);
			LeaveRule("matchStatement", 36);
			LeaveRule_matchStatement();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:254:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 37);
		TraceIn("replaceStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE180 = default(CommonToken);
		CommonToken STRING_LITERAL181 = default(CommonToken);

		CommonTree REPLACE180_tree = default(CommonTree);
		CommonTree STRING_LITERAL181_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(254, 1);
		try
		{
			// Scrape.g:255:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:255:4: REPLACE STRING_LITERAL
			{
			DebugLocation(255, 4);
			REPLACE180=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1531);  
			stream_REPLACE.Add(REPLACE180);

			DebugLocation(255, 12);
			STRING_LITERAL181=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1533);  
			stream_STRING_LITERAL.Add(STRING_LITERAL181);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(255, 30);
				// Scrape.g:255:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(255, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 37);
			LeaveRule("replaceStatement", 37);
			LeaveRule_replaceStatement();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:259:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 38);
		TraceIn("createTableStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE182 = default(CommonToken);
		CommonToken FILE183 = default(CommonToken);
		CommonToken ID184 = default(CommonToken);
		CommonToken OPENPAREN185 = default(CommonToken);
		CommonToken CLOSEPAREN187 = default(CommonToken);
		CommonToken CREATE190 = default(CommonToken);
		CommonToken BUFFER191 = default(CommonToken);
		CommonToken ID192 = default(CommonToken);
		CommonToken OPENPAREN193 = default(CommonToken);
		CommonToken CLOSEPAREN195 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement188 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE182_tree = default(CommonTree);
		CommonTree FILE183_tree = default(CommonTree);
		CommonTree ID184_tree = default(CommonTree);
		CommonTree OPENPAREN185_tree = default(CommonTree);
		CommonTree CLOSEPAREN187_tree = default(CommonTree);
		CommonTree CREATE190_tree = default(CommonTree);
		CommonTree BUFFER191_tree = default(CommonTree);
		CommonTree ID192_tree = default(CommonTree);
		CommonTree OPENPAREN193_tree = default(CommonTree);
		CommonTree CLOSEPAREN195_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(259, 1);
		try
		{
			// Scrape.g:260:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			int LA41_1 = input.LA(1);

			if ((LA41_1==CREATE))
			{
				int LA41_2 = input.LA(2);

				if ((LA41_2==FILE))
				{
					alt41 = 1;
				}
				else if ((LA41_2==BUFFER))
				{
					alt41 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 41, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:260:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(260, 4);
				CREATE182=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1554);  
				stream_CREATE.Add(CREATE182);

				DebugLocation(260, 11);
				FILE183=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1556);  
				stream_FILE.Add(FILE183);

				DebugLocation(260, 16);
				ID184=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1558);  
				stream_ID.Add(ID184);

				DebugLocation(260, 19);
				OPENPAREN185=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1560);  
				stream_OPENPAREN.Add(OPENPAREN185);

				DebugLocation(260, 29);
				// Scrape.g:260:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_1 = input.LA(1);

					if ((LA38_1==ID))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch ( alt38 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:260:29: tableColumnArgs
						{
						DebugLocation(260, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1562);
						tableColumnArgs186=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs186.Tree);

						}
						break;

					default:
						goto loop38;
					}
				}

				loop38:
					;

				} finally { DebugExitSubRule(38); }

				DebugLocation(260, 46);
				CLOSEPAREN187=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1565);  
				stream_CLOSEPAREN.Add(CLOSEPAREN187);

				DebugLocation(260, 57);
				// Scrape.g:260:57: ( fileTableWithStatement )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==WITH))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:260:57: fileTableWithStatement
					{
					DebugLocation(260, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1567);
					fileTableWithStatement188=fileTableWithStatement();
					PopFollow();

					stream_fileTableWithStatement.Add(fileTableWithStatement188.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(260, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1570);
				fileTableLocation189=fileTableLocation();
				PopFollow();

				stream_fileTableLocation.Add(fileTableLocation189.Tree);


				{
				// AST REWRITE
				// elements: tableColumnArgs, fileTableLocation, fileTableWithStatement, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(260, 102);
					// Scrape.g:260:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(260, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(260, 118);
					// Scrape.g:260:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(260, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(260, 135);
					// Scrape.g:260:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(260, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(260, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:261:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(261, 4);
				CREATE190=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1591);  
				stream_CREATE.Add(CREATE190);

				DebugLocation(261, 11);
				BUFFER191=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1593);  
				stream_BUFFER.Add(BUFFER191);

				DebugLocation(261, 18);
				ID192=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1595);  
				stream_ID.Add(ID192);

				DebugLocation(261, 21);
				OPENPAREN193=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1597);  
				stream_OPENPAREN.Add(OPENPAREN193);

				DebugLocation(261, 31);
				// Scrape.g:261:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==ID))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:261:31: tableColumnArgs
						{
						DebugLocation(261, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1599);
						tableColumnArgs194=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs194.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(261, 48);
				CLOSEPAREN195=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1602);  
				stream_CLOSEPAREN.Add(CLOSEPAREN195);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 261:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(261, 62);
					// Scrape.g:261:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(261, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(261, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(261, 80);
					// Scrape.g:261:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(261, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 38);
			LeaveRule("createTableStatement", 38);
			LeaveRule_createTableStatement();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:264:1: fileTableLocation : LOCATION ^ STRING_LITERAL ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 39);
		TraceIn("fileTableLocation", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION196 = default(CommonToken);
		CommonToken STRING_LITERAL197 = default(CommonToken);

		CommonTree LOCATION196_tree = default(CommonTree);
		CommonTree STRING_LITERAL197_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( LOCATION ^ STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:265:4: LOCATION ^ STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(265, 12);
			LOCATION196=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1624); 
			LOCATION196_tree = (CommonTree)adaptor.Create(LOCATION196);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION196_tree, root_0);
			DebugLocation(265, 14);
			STRING_LITERAL197=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableLocation1627); 
			STRING_LITERAL197_tree = (CommonTree)adaptor.Create(STRING_LITERAL197);
			adaptor.AddChild(root_0, STRING_LITERAL197_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 39);
			LeaveRule("fileTableLocation", 39);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:268:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 40);
		TraceIn("fileTableWithStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH198 = default(CommonToken);
		CommonToken OPENPAREN199 = default(CommonToken);
		CommonToken CLOSEPAREN201 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH198_tree = default(CommonTree);
		CommonTree OPENPAREN199_tree = default(CommonTree);
		CommonTree CLOSEPAREN201_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:269:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(269, 4);
			WITH198=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1638);  
			stream_WITH.Add(WITH198);

			DebugLocation(269, 9);
			OPENPAREN199=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1640);  
			stream_OPENPAREN.Add(OPENPAREN199);

			DebugLocation(269, 19);
			// Scrape.g:269:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==FIELD_TERMINATOR||LA42_1==ROW_TERMINATOR))
				{
					alt42 = 1;
				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:269:19: fileTableWithVariablesStatement
					{
					DebugLocation(269, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1642);
					fileTableWithVariablesStatement200=fileTableWithVariablesStatement();
					PopFollow();

					stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement200.Tree);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(269, 52);
			CLOSEPAREN201=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1645);  
			stream_CLOSEPAREN.Add(CLOSEPAREN201);



			{
			// AST REWRITE
			// elements: fileTableWithVariablesStatement, WITH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(269, 66);
				// Scrape.g:269:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(269, 73);
				// Scrape.g:269:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(269, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 40);
			LeaveRule("fileTableWithStatement", 40);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:272:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 41);
		TraceIn("fileTableWithVariablesStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA203 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement202 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA203_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:273:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(273, 4);
			// Scrape.g:273:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==FIELD_TERMINATOR||LA43_1==ROW_TERMINATOR))
				{
					int LA43_2 = input.LA(2);

					if ((LA43_2==EQUALS))
					{
						int LA43_3 = input.LA(3);

						if ((LA43_3==STRING_LITERAL))
						{
							int LA43_4 = input.LA(4);

							if ((LA43_4==COMMA))
							{
								alt43 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:273:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(273, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1668);
					fileTableWithVariableStatement202=fileTableWithVariableStatement();
					PopFollow();

					stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement202.Tree);
					DebugLocation(273, 36);
					COMMA203=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1670);  
					stream_COMMA.Add(COMMA203);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(273, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1674);
			fileTableWithVariableStatement204=fileTableWithVariableStatement();
			PopFollow();

			stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement204.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(273, 78);
				// Scrape.g:273:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(273, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 41);
			LeaveRule("fileTableWithVariablesStatement", 41);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:276:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 42);
		TraceIn("fileTableWithVariableStatement", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set205 = default(CommonToken);
		CommonToken EQUALS206 = default(CommonToken);
		CommonToken STRING_LITERAL207 = default(CommonToken);

		CommonTree set205_tree = default(CommonTree);
		CommonTree EQUALS206_tree = default(CommonTree);
		CommonTree STRING_LITERAL207_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(276, 1);
		try
		{
			// Scrape.g:277:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:277:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(277, 39);

			set205=(CommonToken)input.LT(1);
			set205=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set205), root_0);
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(277, 47);
			EQUALS206=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement1699); 
			DebugLocation(277, 49);
			STRING_LITERAL207=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement1702); 
			STRING_LITERAL207_tree = (CommonTree)adaptor.Create(STRING_LITERAL207);
			adaptor.AddChild(root_0, STRING_LITERAL207_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 42);
			LeaveRule("fileTableWithVariableStatement", 42);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:280:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 43);
		TraceIn("tableColumnArgs", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA209 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA209_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(280, 1);
		try
		{
			// Scrape.g:281:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:281:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(281, 4);
			// Scrape.g:281:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==ID))
				{
					int LA44_2 = input.LA(2);

					if ((LA44_2==FLOAT||LA44_2==IDENTITY||LA44_2==INTEGER||LA44_2==STRING))
					{
						int LA44_3 = input.LA(3);

						if ((LA44_3==COMMA))
						{
							alt44 = 1;
						}


					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:281:5: tableColumnArg COMMA
					{
					DebugLocation(281, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs1714);
					tableColumnArg208=tableColumnArg();
					PopFollow();

					stream_tableColumnArg.Add(tableColumnArg208.Tree);
					DebugLocation(281, 20);
					COMMA209=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs1716);  
					stream_COMMA.Add(COMMA209);


					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(281, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs1720);
			tableColumnArg210=tableColumnArg();
			PopFollow();

			stream_tableColumnArg.Add(tableColumnArg210.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 281:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(281, 46);
				// Scrape.g:281:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(281, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(281, 66);
				// Scrape.g:281:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(281, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 43);
			LeaveRule("tableColumnArgs", 43);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:284:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 44);
		TraceIn("tableColumnArg", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID211 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType212 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(284, 1);
		try
		{
			// Scrape.g:285:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:285:4: ID dataType
			{
			DebugLocation(285, 4);
			ID211=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg1741);  
			stream_ID.Add(ID211);

			DebugLocation(285, 7);
			PushFollow(Follow._dataType_in_tableColumnArg1743);
			dataType212=dataType();
			PopFollow();

			stream_dataType.Add(dataType212.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(285, 19);
				// Scrape.g:285:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(285, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(285, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 44);
			LeaveRule("tableColumnArg", 44);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:288:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 45);
		TraceIn("dataType", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set213 = default(CommonToken);

		CommonTree set213_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(288, 1);
		try
		{
			// Scrape.g:289:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(289, 2);

			set213=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set213));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 45);
			LeaveRule("dataType", 45);
			LeaveRule_dataType();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"
	#endregion Rules


	#region DFA
	private DFA24 dfa24;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa24 = new DFA24( this );
	}

	private class DFA24 : DFA
	{
		private const string DFA24_eotS =
			"\xD7\xFFFF";
		private const string DFA24_eofS =
			"\x2\xFFFF\x2\x7\xB\xFFFF\x1\x7\x7\xFFFF\x2\x7\xB\xFFFF\x1\x7\x19\xFFFF"+
			"\x1\x7\x2A\xFFFF\x1\x7\x1\xFFFF\x1\x7\x6\xFFFF\x1\x7\x64\xFFFF";
		private const string DFA24_minS =
			"\x1\xA\x1\x4F\x2\xE\x1\x26\x1\x54\x1\x26\x2\xFFFF\x2\x26\x1\x4F\x1\x5F"+
			"\x1\x15\x1\x6\x1\xE\x1\x4F\x1\x1B\x1\x15\x1\x54\x1\x2C\x1\x26\x1\x4F"+
			"\x2\xE\x1\x54\x7\x26\x1\x6\x1\x5A\x1\x5F\x1\xE\x1\x4F\x1\x6\x1\x4F\x1"+
			"\x5A\x1\x15\x1\x4F\x1\x5A\x1\x15\x1\x4F\x1\x5A\x1\x15\x1\x4F\x1\x5A\x1"+
			"\x15\x1\x4F\x1\x5A\x1\x15\x1\x4F\x1\x5A\x1\x15\x1\x1B\x1\x4F\x2\x34\x1"+
			"\x26\x1\xE\x1\x4F\x2\x1B\x1\x54\x2\x26\x1\x54\x1\x26\x1\x54\x1\x26\x1"+
			"\x54\x1\x26\x1\x54\x1\x26\x1\x54\x1\x26\x1\x34\x2\x4F\x1\x19\x1\x15\x1"+
			"\x4F\x1\x1B\x1\x4F\x1\x6\x1\x4F\x1\x19\x1\x15\x1\x5A\x1\x6\x1\x5A\x1"+
			"\x6\x1\x5A\x1\x6\x1\x5A\x1\x6\x1\x5A\x1\x6\x1\x5A\x1\x46\x1\x54\x1\x26"+
			"\x1\xE\x1\x26\x1\xE\x1\x1B\x1\x4F\x2\x34\x1\x54\x1\x26\x1\xE\x1\x26\x1"+
			"\x4F\x2\x34\x1\x4F\x2\x34\x1\x4F\x2\x34\x1\x4F\x2\x34\x1\x4F\x2\x34\x1"+
			"\x4F\x1\x6\x1\x4F\x1\x1A\x1\x15\x1\x19\x1\x4F\x1\x34\x1\x4F\x1\x6\x1"+
			"\x4F\x1\x1A\x1\x15\x1\x19\x1\x34\x1\x4F\x1\x34\x1\x4F\x1\x34\x1\x4F\x1"+
			"\x34\x1\x4F\x1\x34\x1\x4F\x1\x5F\x1\x4F\x2\x19\x1\x54\x1\x26\x1\x1B\x1"+
			"\x46\x1\x4F\x2\x19\x1\x54\x1\x26\x5\x46\x1\x19\x1\x4F\x1\x6\x1\x1A\x1"+
			"\x4F\x1\x19\x1\x4F\x1\x6\x1\x1A\x5\x4F\x1\x19\x1\x4F\x2\x1A\x1\x5A\x1"+
			"\x19\x1\x4F\x2\x1A\x5\x5A\x1\x4F\x1\x1A\x2\x4F\x1\x1A\x1\x4F\x1\x19\x1"+
			"\x1A\x1\x19\x1\x1A\x2\x4F\x2\x1A";
		private const string DFA24_maxS =
			"\x2\x4F\x2\x62\x1\x5F\x1\x54\x1\x4F\x2\xFFFF\x1\x26\x2\x4F\x2\x5F\x1"+
			"\x59\x1\x62\x1\x4F\x2\x38\x1\x54\x1\x4F\x1\x26\x1\x4F\x2\x62\x1\x54\x6"+
			"\x4F\x1\x26\x1\x59\x1\x5A\x1\x5F\x1\x62\x1\x4F\x1\x59\x1\x4F\x2\x5A\x1"+
			"\x4F\x2\x5A\x1\x4F\x2\x5A\x1\x4F\x2\x5A\x1\x4F\x2\x5A\x1\x4F\x2\x5A\x1"+
			"\x38\x1\x4F\x2\x5F\x1\x4F\x1\x62\x1\x4F\x2\x38\x1\x54\x1\x4F\x1\x26\x1"+
			"\x54\x1\x26\x1\x54\x1\x26\x1\x54\x1\x26\x1\x54\x1\x26\x1\x54\x1\x26\x1"+
			"\x5F\x2\x4F\x2\x5F\x1\x4F\x1\x38\x1\x4F\x1\x59\x1\x4F\x2\x5F\x1\x5A\x1"+
			"\x59\x1\x5A\x1\x59\x1\x5A\x1\x59\x1\x5A\x1\x59\x1\x5A\x1\x59\x1\x5A\x1"+
			"\x5F\x1\x54\x1\x4F\x1\x62\x1\x26\x1\x62\x1\x46\x1\x4F\x2\x5A\x1\x54\x1"+
			"\x4F\x1\x62\x1\x26\x1\x4F\x2\x5A\x1\x4F\x2\x5A\x1\x4F\x2\x5A\x1\x4F\x2"+
			"\x5A\x1\x4F\x2\x5A\x1\x4F\x1\x59\x1\x4F\x2\x1A\x1\x5F\x1\x4F\x1\x5A\x1"+
			"\x4F\x1\x59\x1\x4F\x2\x1A\x1\x5F\x1\x5A\x1\x4F\x1\x5A\x1\x4F\x1\x5A\x1"+
			"\x4F\x1\x5A\x1\x4F\x1\x5A\x1\x4F\x1\x5F\x1\x4F\x2\x5F\x1\x54\x1\x26\x1"+
			"\x38\x1\x5A\x1\x4F\x2\x5F\x1\x54\x1\x26\x5\x5A\x1\x5F\x1\x4F\x1\x59\x1"+
			"\x1A\x1\x4F\x1\x5F\x1\x4F\x1\x59\x1\x1A\x5\x4F\x1\x5F\x1\x4F\x2\x34\x1"+
			"\x5A\x1\x5F\x1\x4F\x2\x34\x5\x5A\x1\x4F\x1\x34\x2\x4F\x1\x34\x1\x4F\x1"+
			"\x5F\x1\x46\x1\x5F\x1\x46\x2\x4F\x2\x1A";
		private const string DFA24_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1\xCE\xFFFF";
		private const string DFA24_specialS =
			"\xD7\xFFFF}>";
		private static readonly string[] DFA24_transitionS =
			{
				"\x1\x4\x1B\xFFFF\x1\x3\x5\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1"+
				"\x11\xFFFF\x1\x2",
				"\x1\x5",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\xA\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x2\xFFFF\x1\x9\x2\xFFFF\x1\x7"+
				"\x9\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\xD\x5\xFFFF\x1\xC\xC\xFFFF\x1\xC\x3\xFFFF\x1\xB\x11\xFFFF\x1\xC"+
				"\xF\xFFFF\x1\xA",
				"\x1\xE",
				"\x1\x3\x5\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1\x11\xFFFF\x1\x2",
				"",
				"",
				"\x1\xF",
				"\x1\x12\x5\xFFFF\x1\x11\xC\xFFFF\x1\x11\x3\xFFFF\x1\x10\x11\xFFFF\x1"+
				"\x11",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15\x49\xFFFF\x1\x14",
				"\x1\x16\x1E\xFFFF\x1\x18\x33\xFFFF\x1\x17",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\xA\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x19",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x20\x5\xFFFF\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C"+
				"\x8\xFFFF\x1\x1F",
				"\x1\x21",
				"\x1\x22\xC\xFFFF\x1\x22\x15\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x26",
				"\x1\x29\x5\xFFFF\x1\x28\xC\xFFFF\x1\x28\x3\xFFFF\x1\x27\x11\xFFFF\x1"+
				"\x28",
				"\x1\x2C\x5\xFFFF\x1\x2B\xC\xFFFF\x1\x2B\x3\xFFFF\x1\x2A\x11\xFFFF\x1"+
				"\x2B",
				"\x1\x2F\x5\xFFFF\x1\x2E\xC\xFFFF\x1\x2E\x3\xFFFF\x1\x2D\x11\xFFFF\x1"+
				"\x2E",
				"\x1\x32\x5\xFFFF\x1\x31\xC\xFFFF\x1\x31\x3\xFFFF\x1\x30\x11\xFFFF\x1"+
				"\x31",
				"\x1\x35\x5\xFFFF\x1\x34\xC\xFFFF\x1\x34\x3\xFFFF\x1\x33\x11\xFFFF\x1"+
				"\x34",
				"\x1\x38\x5\xFFFF\x1\x37\xC\xFFFF\x1\x37\x3\xFFFF\x1\x36\x11\xFFFF\x1"+
				"\x37",
				"\x1\x39",
				"\x1\x3A\x1E\xFFFF\x1\x3C\x33\xFFFF\x1\x3B",
				"\x1\x3D",
				"\x1\x14",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x3E",
				"\x1\x3F\x1E\xFFFF\x1\x41\x33\xFFFF\x1\x40",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44\x44\xFFFF\x1\x43",
				"\x1\x45",
				"\x1\x43",
				"\x1\x46\x44\xFFFF\x1\x43",
				"\x1\x47",
				"\x1\x43",
				"\x1\x48\x44\xFFFF\x1\x43",
				"\x1\x49",
				"\x1\x43",
				"\x1\x4A\x44\xFFFF\x1\x43",
				"\x1\x4B",
				"\x1\x43",
				"\x1\x4C\x44\xFFFF\x1\x43",
				"\x1\x4D",
				"\x1\x43",
				"\x1\x4E\x44\xFFFF\x1\x43",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x4F",
				"\x1\x50\x2A\xFFFF\x1\x14",
				"\x1\x50\x2A\xFFFF\x1\x14",
				"\x1\x53\x5\xFFFF\x1\x52\xC\xFFFF\x1\x52\x3\xFFFF\x1\x51\x11\xFFFF\x1"+
				"\x52",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\x7\xFFFF"+
				"\x1\x54\x2\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x55",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x57",
				"\x1\x5A\x5\xFFFF\x1\x59\xC\xFFFF\x1\x59\x3\xFFFF\x1\x58\x11\xFFFF\x1"+
				"\x59",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x50\x2A\xFFFF\x1\x14",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68\x1\x69\x44\xFFFF\x1\x14",
				"\x1\x6A\x3\xFFFF\x1\x68\x1\x69\x44\xFFFF\x1\x14",
				"\x1\x6B",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x6C",
				"\x1\x6D\x1E\xFFFF\x1\x6F\x33\xFFFF\x1\x6E",
				"\x1\x70",
				"\x1\x71\x1\x72\x44\xFFFF\x1\xA",
				"\x1\x73\x3\xFFFF\x1\x71\x1\x72\x44\xFFFF\x1\xA",
				"\x1\x43",
				"\x1\x74\x1E\xFFFF\x1\x76\x33\xFFFF\x1\x75",
				"\x1\x43",
				"\x1\x77\x1E\xFFFF\x1\x79\x33\xFFFF\x1\x78",
				"\x1\x43",
				"\x1\x7A\x1E\xFFFF\x1\x7C\x33\xFFFF\x1\x7B",
				"\x1\x43",
				"\x1\x7D\x1E\xFFFF\x1\x7F\x33\xFFFF\x1\x7E",
				"\x1\x43",
				"\x1\x80\x1E\xFFFF\x1\x82\x33\xFFFF\x1\x81",
				"\x1\x43",
				"\x1\x83\x18\xFFFF\x1\x14",
				"\x1\x84",
				"\x1\x87\x5\xFFFF\x1\x86\xC\xFFFF\x1\x86\x3\xFFFF\x1\x85\x11\xFFFF\x1"+
				"\x86",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x1D\xFFFF\x1\x7\x18\xFFFF"+
				"\x1\x7",
				"\x1\x88",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\xA\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F"+
				"\xD\xFFFF\x1\x89",
				"\x1\x8A",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\x8C",
				"\x1\x8F\x5\xFFFF\x1\x8E\xC\xFFFF\x1\x8E\x3\xFFFF\x1\x8D\x11\xFFFF\x1"+
				"\x8E",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x1D\xFFFF\x1\x7\x18\xFFFF"+
				"\x1\x7",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\x93",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\x95",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\x97",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\x99",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\x9B",
				"\x1\x9C\x1E\xFFFF\x1\x9E\x33\xFFFF\x1\x9D",
				"\x1\x9F",
				"\x1\x69",
				"\x1\xA0\x4\xFFFF\x1\x69",
				"\x1\x68\x1\x69\x44\xFFFF\x1\x14",
				"\x1\xA1",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\xA2",
				"\x1\xA3\x1E\xFFFF\x1\xA5\x33\xFFFF\x1\xA4",
				"\x1\xA6",
				"\x1\x72",
				"\x1\xA7\x4\xFFFF\x1\x72",
				"\x1\x71\x1\x72\x44\xFFFF\x1\xA",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\xA8",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\xA9",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\xAA",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\xAB",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\xAC",
				"\x1\x14",
				"\x1\xAD",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x2A\xFFFF\x1\x14",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x2A\xFFFF\x1\x14",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\xB1\x13\xFFFF\x1\x43",
				"\x1\xB2",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x2A\xFFFF\x1\xA",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x2A\xFFFF\x1\xA",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6\x13\xFFFF\x1\x43",
				"\x1\xB7\x13\xFFFF\x1\x43",
				"\x1\xB8\x13\xFFFF\x1\x43",
				"\x1\xB9\x13\xFFFF\x1\x43",
				"\x1\xBA\x13\xFFFF\x1\x43",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x2A\xFFFF\x1\x14",
				"\x1\xBB",
				"\x1\xBC\x1E\xFFFF\x1\xBE\x33\xFFFF\x1\xBD",
				"\x1\x69",
				"\x1\xBF",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x2A\xFFFF\x1\xA",
				"\x1\xC0",
				"\x1\xC1\x1E\xFFFF\x1\xC3\x33\xFFFF\x1\xC2",
				"\x1\x72",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\x1\x68\x1\x69\x2B\xFFFF\x1\xC9\x18\xFFFF\x1\x14",
				"\x1\xCA",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\x43",
				"\x1\x71\x1\x72\x2B\xFFFF\x1\xCC\x18\xFFFF\x1\xA",
				"\x1\xCD",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\xCF",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\xD0",
				"\x1\xD1",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\xD2",
				"\x1\x68\x1\x69\x44\xFFFF\x1\x14",
				"\x1\x69\x2B\xFFFF\x1\xD3",
				"\x1\x71\x1\x72\x44\xFFFF\x1\xA",
				"\x1\x72\x2B\xFFFF\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\x69",
				"\x1\x72"
			};

		private static readonly short[] DFA24_eot = DFA.UnpackEncodedString(DFA24_eotS);
		private static readonly short[] DFA24_eof = DFA.UnpackEncodedString(DFA24_eofS);
		private static readonly char[] DFA24_min = DFA.UnpackEncodedStringToUnsignedChars(DFA24_minS);
		private static readonly char[] DFA24_max = DFA.UnpackEncodedStringToUnsignedChars(DFA24_maxS);
		private static readonly short[] DFA24_accept = DFA.UnpackEncodedString(DFA24_acceptS);
		private static readonly short[] DFA24_special = DFA.UnpackEncodedString(DFA24_specialS);
		private static readonly short[][] DFA24_transition;

		static DFA24()
		{
			int numStates = DFA24_transitionS.Length;
			DFA24_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA24_transition[i] = DFA.UnpackEncodedString(DFA24_transitionS[i]);
			}
		}

		public DFA24( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}

		public override string Description { get { return "()* loopback of 195:11: ( selectArgs COMMA )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_program207 = new BitSet(new ulong[]{0xA4001040000UL,0x200UL});
		public static readonly BitSet _EOF_in_program210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program224 = new BitSet(new ulong[]{0xA4001040000UL,0x200UL});
		public static readonly BitSet _statement_in_program226 = new BitSet(new ulong[]{0xA4001040000UL,0x200UL});
		public static readonly BitSet _EOF_in_program229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition264 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition266 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition268 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition270 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition273 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_procedureDefinition275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement334 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement336 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _proxyList_in_proxyStatement338 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement340 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList364 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_proxyList366 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest390 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _TEST_in_proxyTest392 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest394 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _sqlStatement_in_proxyTest396 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement413 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement415 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_eachStatement419 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _IN_in_eachStatement421 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_eachStatement425 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement427 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_eachStatement429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENBRACE_in_block454 = new BitSet(new ulong[]{0xA4001044000UL,0x200UL});
		public static readonly BitSet _statement_in_block456 = new BitSet(new ulong[]{0xA4001044000UL,0x200UL});
		public static readonly BitSet _CLOSEBRACE_in_block459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression479 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression481 = new BitSet(new ulong[]{0x104000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression483 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _TO_in_expandExpression485 = new BitSet(new ulong[]{0x104000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression487 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression489 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _expandBlock_in_expandExpression491 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock516 = new BitSet(new ulong[]{0xA00104000004000UL,0x2000008000UL});
		public static readonly BitSet _mathExpression_in_expandBlock518 = new BitSet(new ulong[]{0xA00104000004000UL,0x2000008000UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_expandVar542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_expandVar547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion581 = new BitSet(new ulong[]{0x0UL,0x8200UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion595 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_downloadPageExpresssion597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion611 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadPageExpresssion613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression632 = new BitSet(new ulong[]{0x0UL,0x8200UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression646 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_downloadImageExpression648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression662 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadImageExpression664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference687 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _DOT_in_tableMemberReference689 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement717 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement719 = new BitSet(new ulong[]{0xA00104010C00000UL,0x2000008200UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression773 = new BitSet(new ulong[]{0x4040000000000002UL});
		public static readonly BitSet _set_in_mathExpression776 = new BitSet(new ulong[]{0xA00104000000000UL,0x2000008000UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression787 = new BitSet(new ulong[]{0x4040000000000002UL});
		public static readonly BitSet _atom_in_mathExpressionGroup805 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _set_in_mathExpressionGroup808 = new BitSet(new ulong[]{0xA00104000000000UL,0x2000008000UL});
		public static readonly BitSet _atom_in_mathExpressionGroup819 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _ID_in_atom840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_atom853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_atom865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom880 = new BitSet(new ulong[]{0xA00104000000000UL,0x2000008000UL});
		public static readonly BitSet _mathExpression_in_atom883 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement927 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_insertStatement929 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _sqlStatement_in_insertStatement931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement946 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_insertStatement948 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _sqlStatement_in_insertStatement950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement964 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_insertStatement966 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _sqlStatement_in_insertStatement968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement992 = new BitSet(new ulong[]{0x400000002UL,0x400000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement994 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1023 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_whereStatement1026 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_whereStatement1028 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_whereStatement1031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1042 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_fromStatement1044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1058 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1066 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1074 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _expandExpression_in_fromStatement1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1088 = new BitSet(new ulong[]{0x2200104000000400UL,0x8000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1091 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_selectStatement1093 = new BitSet(new ulong[]{0x2200104000000400UL,0x8000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1111 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1139 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _PLUS_in_selectArgs1141 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_selectArgs1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1181 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1183 = new BitSet(new ulong[]{0x6000000UL,0x80000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1187 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1189 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1210 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_caseStatement1212 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1214 = new BitSet(new ulong[]{0x6000000UL,0x80000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1218 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1220 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1268 = new BitSet(new ulong[]{0x200100000000000UL,0x8000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1270 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1272 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1295 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1297 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1299 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1322 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_boolExpression1324 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1332 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LESSTHAN_in_boolExpression1334 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1342 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LESSTHANEQUAL_in_boolExpression1344 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1352 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _GREATERTHAN_in_boolExpression1354 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1362 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _GREATERTHANEQUAL_in_boolExpression1364 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1372 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NOTEQUAL_in_boolExpression1374 = new BitSet(new ulong[]{0x2200104000000000UL,0x8000UL});
		public static readonly BitSet _selectArg_in_boolExpression1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectArg1398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectArg1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1422 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1424 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1426 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1428 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1454 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1456 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1471 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1484 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1504 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1506 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1531 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1554 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1556 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1558 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1560 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1562 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1565 = new BitSet(new ulong[]{0x8000000000000UL,0x800000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1567 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1591 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1593 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1595 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1597 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1599 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1624 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableLocation1627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1638 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1640 = new BitSet(new ulong[]{0x40008000UL,0x100UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1642 = new BitSet(new ulong[]{0x40008000UL,0x100UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1668 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1670 = new BitSet(new ulong[]{0x40000000UL,0x100UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement1690 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement1699 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement1702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1714 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs1716 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg1741 = new BitSet(new ulong[]{0x208200000000UL,0x4000UL});
		public static readonly BitSet _dataType_in_tableColumnArg1743 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
