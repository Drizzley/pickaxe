//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-02-07 20:44:09

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NODES", "NOTEQUAL", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "TRUNCATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__114=114;
	public const int T__115=115;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CREATE=20;
	public const int DIGIT=21;
	public const int DIV=22;
	public const int DOT=23;
	public const int DOWNLOAD_IMAGE=24;
	public const int DOWNLOAD_PAGE=25;
	public const int EACH=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EQUALS=29;
	public const int EXEC=30;
	public const int EXPAND=31;
	public const int EXPAND_INTERATION_VARIABLE=32;
	public const int FIELD_TERMINATOR=33;
	public const int FILE=34;
	public const int FILE_TABLE=35;
	public const int FLOAT=36;
	public const int FROM=37;
	public const int GREATERTHAN=38;
	public const int GREATERTHANEQUAL=39;
	public const int HTML=40;
	public const int ID=41;
	public const int IDENTITY=42;
	public const int IDENTITY_VAR=43;
	public const int IN=44;
	public const int INNER_JOIN=45;
	public const int INSERT_DIRECTORY=46;
	public const int INSERT_INTO=47;
	public const int INSERT_INTO_DIRECTORY=48;
	public const int INSERT_OVERWRITE=49;
	public const int INT=50;
	public const int INTEGER=51;
	public const int JOIN=52;
	public const int LESSTHAN=53;
	public const int LESSTHANEQUAL=54;
	public const int LETTER=55;
	public const int LINE_COMMENT_DASH=56;
	public const int LINE_COMMENT_SLASH=57;
	public const int LOCATION=58;
	public const int MATCH=59;
	public const int MEMBER_REFERENCE=60;
	public const int MINIS=61;
	public const int NEWLINE=62;
	public const int NODES=63;
	public const int NOTEQUAL=64;
	public const int NULL=65;
	public const int NULL_OPERATOR=66;
	public const int OPENBRACE=67;
	public const int OPENPAREN=68;
	public const int OR=69;
	public const int OTHERCHARS=70;
	public const int PICK=71;
	public const int PLUS=72;
	public const int POST_PICK=73;
	public const int PRE_PICK=74;
	public const int PROCEDURE=75;
	public const int PROGRAM=76;
	public const int PROXIES=77;
	public const int PROXY_LIST=78;
	public const int QUOTE=79;
	public const int REPLACE=80;
	public const int ROW_REFERENCE=81;
	public const int ROW_TERMINATOR=82;
	public const int SELECT=83;
	public const int SELECT_ALL=84;
	public const int SELECT_ARG=85;
	public const int SELECT_ID=86;
	public const int SELECT_STATEMENT=87;
	public const int STRING=88;
	public const int STRING_LITERAL=89;
	public const int TABLE_ALIAS=90;
	public const int TABLE_COLUMN_ARG=91;
	public const int TABLE_COLUMN_ARGS=92;
	public const int TABLE_MEMBER_REFERENCE=93;
	public const int TABLE_VARIABLE_REFERENCE=94;
	public const int TAKE=95;
	public const int TAKE_ATTRIBUTE=96;
	public const int TAKE_HTML=97;
	public const int TAKE_TEXT=98;
	public const int TEST=99;
	public const int TEXT=100;
	public const int THEN=101;
	public const int TO=102;
	public const int TRUNCATE=103;
	public const int VAR=104;
	public const int VARIABLE_ASSIGNMENT=105;
	public const int VARIABLE_DECLARATION=106;
	public const int VARIABLE_REFERENCE=107;
	public const int WHEN=108;
	public const int WHEN_BOOL_STATEMENT=109;
	public const int WHEN_LITERAL_STATEMENT=110;
	public const int WHERE=111;
	public const int WITH=112;
	public const int WS=113;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:64:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(64, 1);
		try
		{
			// Scrape.g:65:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case VAR:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:65:4: noBraceBlock EOF
				{
				DebugLocation(65, 4);
				PushFollow(Follow._noBraceBlock_in_program227);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(65, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program229); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 65:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(65, 24);
					// Scrape.g:65:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(65, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(65, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:66:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(66, 4);
				PushFollow(Follow._proxyStatement_in_program242);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(66, 19);
				PushFollow(Follow._noBraceBlock_in_program244);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(66, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program246); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 66:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(66, 39);
					// Scrape.g:66:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(66, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(66, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(66, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:67:4: procedureDefinition
				{
				DebugLocation(67, 4);
				PushFollow(Follow._procedureDefinition_in_program261);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 67:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(67, 27);
					// Scrape.g:67:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(67, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(67, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(68, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:70:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(70, 1);
		try
		{
			// Scrape.g:71:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:71:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(71, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition280); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(71, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition282); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(71, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition284); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(71, 27);
			// Scrape.g:71:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:71:27: tableColumnArgs
					{
					DebugLocation(71, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition286);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(71, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(71, 55);
			PushFollow(Follow._block_in_procedureDefinition291);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: block, ID, tableColumnArgs, PROCEDURE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 71:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(71, 64);
				// Scrape.g:71:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(71, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(71, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(71, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(71, 85);
				// Scrape.g:71:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(71, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:74:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(74, 1);
		try
		{
			// Scrape.g:75:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | procedureCall | truncateTable )
			int alt3=8;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case VAR:
				{
				alt3 = 3;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 4;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 5;
				}
				break;
			case EACH:
				{
				alt3 = 6;
				}
				break;
			case EXEC:
				{
				alt3 = 7;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:75:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._createTableStatement_in_statement319);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:76:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._sqlStatement_in_statement324);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:77:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement329);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:78:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement334);
				variableAssignmentStatement16=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:79:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._insertStatement_in_statement339);
				insertStatement17=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:80:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._eachStatement_in_statement344);
				eachStatement18=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:81:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._procedureCall_in_statement349);
				procedureCall19=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:82:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._truncateTable_in_statement354);
				truncateTable20=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable20.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:85:1: truncateTable : TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE21 = default(CommonToken);
		CommonToken ID22 = default(CommonToken);

		CommonTree TRUNCATE21_tree = default(CommonTree);
		CommonTree ID22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(85, 1);
		try
		{
			// Scrape.g:86:2: ( TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:86:4: TRUNCATE ID
			{
			DebugLocation(86, 4);
			TRUNCATE21=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable365); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE21);

			DebugLocation(86, 13);
			ID22=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID22);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 86:16: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(86, 19);
				// Scrape.g:86:19: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(86, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(86, 30);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID22));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:90:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC23 = default(CommonToken);
		CommonToken ID24 = default(CommonToken);
		CommonToken OPENPAREN25 = default(CommonToken);
		CommonToken CLOSEPAREN27 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList26 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC23_tree = default(CommonTree);
		CommonTree ID24_tree = default(CommonTree);
		CommonTree OPENPAREN25_tree = default(CommonTree);
		CommonTree CLOSEPAREN27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(90, 1);
		try
		{
			// Scrape.g:91:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:91:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(91, 5);
			EXEC23=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC23);

			DebugLocation(91, 10);
			ID24=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall391); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID24);

			DebugLocation(91, 13);
			OPENPAREN25=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall393); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN25);

			DebugLocation(91, 23);
			// Scrape.g:91:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:91:23: procedureCallList
					{
					DebugLocation(91, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall395);
					procedureCallList26=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList26.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(91, 42);
			CLOSEPAREN27=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall398); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN27);



			{
			// AST REWRITE
			// elements: ID, procedureCallList, EXEC
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 91:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(91, 56);
				// Scrape.g:91:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(91, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(91, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(91, 66);
				// Scrape.g:91:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(91, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:94:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA29 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA29_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(94, 1);
		try
		{
			// Scrape.g:95:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:95:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(95, 4);
			// Scrape.g:95:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:95:5: callArgs COMMA
					{
					DebugLocation(95, 5);
					PushFollow(Follow._callArgs_in_procedureCallList421);
					callArgs28=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs28.Tree);
					DebugLocation(95, 14);
					COMMA29=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList423); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA29);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(95, 22);
			PushFollow(Follow._callArgs_in_procedureCallList427);
			callArgs30=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs30.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 95:31: -> ( callArgs )*
			{
				DebugLocation(95, 34);
				// Scrape.g:95:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(95, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:98:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL32_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(98, 1);
		try
		{
			// Scrape.g:99:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:99:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(99, 4);
				PushFollow(Follow._expandVar_in_callArgs443);
				expandVar31=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar31.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:100:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(100, 4);
				STRING_LITERAL32=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs448); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL32_tree = (CommonTree)adaptor.Create(STRING_LITERAL32);
				adaptor.AddChild(root_0, STRING_LITERAL32_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:103:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES33 = default(CommonToken);
		CommonToken OPENPAREN34 = default(CommonToken);
		CommonToken CLOSEPAREN36 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList35 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest37 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES33_tree = default(CommonTree);
		CommonTree OPENPAREN34_tree = default(CommonTree);
		CommonTree CLOSEPAREN36_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(103, 1);
		try
		{
			// Scrape.g:104:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:104:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(104, 4);
			PROXIES33=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement459); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES33);

			DebugLocation(104, 12);
			OPENPAREN34=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement461); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN34);

			DebugLocation(104, 22);
			PushFollow(Follow._proxyList_in_proxyStatement463);
			proxyList35=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList35.Tree);
			DebugLocation(104, 32);
			CLOSEPAREN36=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement465); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN36);

			DebugLocation(104, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement467);
			proxyTest37=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest37.Tree);


			{
			// AST REWRITE
			// elements: proxyList, proxyTest, PROXIES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 104:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(104, 56);
				// Scrape.g:104:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(104, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(104, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(104, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:107:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL38 = default(CommonToken);
		CommonToken COMMA39 = default(CommonToken);
		CommonToken STRING_LITERAL40 = default(CommonToken);

		CommonTree STRING_LITERAL38_tree = default(CommonTree);
		CommonTree COMMA39_tree = default(CommonTree);
		CommonTree STRING_LITERAL40_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(107, 1);
		try
		{
			// Scrape.g:108:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:108:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(108, 4);
			// Scrape.g:108:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:108:5: STRING_LITERAL COMMA
					{
					DebugLocation(108, 5);
					STRING_LITERAL38=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList489); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL38);

					DebugLocation(108, 20);
					COMMA39=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList491); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA39);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(108, 28);
			STRING_LITERAL40=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL40);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(108, 46);
				// Scrape.g:108:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(108, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(108, 59);
				// Scrape.g:108:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(108, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:111:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH41 = default(CommonToken);
		CommonToken TEST42 = default(CommonToken);
		CommonToken OPENBRACE43 = default(CommonToken);
		CommonToken CLOSEBRACE45 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH41_tree = default(CommonTree);
		CommonTree TEST42_tree = default(CommonTree);
		CommonTree OPENBRACE43_tree = default(CommonTree);
		CommonTree CLOSEBRACE45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(111, 1);
		try
		{
			// Scrape.g:112:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:112:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(112, 4);
			WITH41=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest515); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH41);

			DebugLocation(112, 9);
			TEST42=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest517); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST42);

			DebugLocation(112, 14);
			OPENBRACE43=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest519); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE43);

			DebugLocation(112, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest521);
			sqlStatement44=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement44.Tree);
			DebugLocation(112, 37);
			CLOSEBRACE45=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest523); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE45);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 112:48: -> sqlStatement
			{
				DebugLocation(112, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:115:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 11);
		TraceIn("eachStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH46 = default(CommonToken);
		CommonToken OPENPAREN47 = default(CommonToken);
		CommonToken IN48 = default(CommonToken);
		CommonToken CLOSEPAREN49 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH46_tree = default(CommonTree);
		CommonTree OPENPAREN47_tree = default(CommonTree);
		CommonTree IN48_tree = default(CommonTree);
		CommonTree CLOSEPAREN49_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(115, 1);
		try
		{
			// Scrape.g:116:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:116:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(116, 4);
			EACH46=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement538); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH46);

			DebugLocation(116, 9);
			OPENPAREN47=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN47);

			DebugLocation(116, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement544); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(116, 24);
			IN48=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement546); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN48);

			DebugLocation(116, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement550); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(116, 32);
			CLOSEPAREN49=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement552); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN49);

			DebugLocation(116, 43);
			PushFollow(Follow._block_in_eachStatement554);
			block50=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block50.Tree);


			{
			// AST REWRITE
			// elements: EACH, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 116:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(116, 52);
				// Scrape.g:116:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(116, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(116, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(116, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(116, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 11);
			LeaveRule("eachStatement", 11);
			LeaveRule_eachStatement();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:119:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 12);
		TraceIn("noBraceBlock", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement51 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(119, 1);
		try
		{
			// Scrape.g:120:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:120:4: ( statement )*
			{
			DebugLocation(120, 4);
			// Scrape.g:120:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:120:4: statement
					{
					DebugLocation(120, 4);
					PushFollow(Follow._statement_in_noBraceBlock579);
					statement51=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement51.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 120:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(120, 18);
				// Scrape.g:120:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(120, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(120, 26);
				// Scrape.g:120:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(120, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 12);
			LeaveRule("noBraceBlock", 12);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:123:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 13);
		TraceIn("block", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE52 = default(CommonToken);
		CommonToken CLOSEBRACE54 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE52_tree = default(CommonTree);
		CommonTree CLOSEBRACE54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(123, 1);
		try
		{
			// Scrape.g:124:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:124:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(124, 4);
			OPENBRACE52=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE52);

			DebugLocation(124, 14);
			// Scrape.g:124:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:124:14: statement
					{
					DebugLocation(124, 14);
					PushFollow(Follow._statement_in_block602);
					statement53=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement53.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(124, 25);
			CLOSEBRACE54=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block605); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE54);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 124:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(124, 39);
				// Scrape.g:124:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(124, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(124, 47);
				// Scrape.g:124:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(124, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 13);
			LeaveRule("block", 13);
			LeaveRule_block();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:127:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 14);
		TraceIn("expandExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND55 = default(CommonToken);
		CommonToken OPENPAREN56 = default(CommonToken);
		CommonToken TO58 = default(CommonToken);
		CommonToken CLOSEPAREN60 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar57 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock61 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND55_tree = default(CommonTree);
		CommonTree OPENPAREN56_tree = default(CommonTree);
		CommonTree TO58_tree = default(CommonTree);
		CommonTree CLOSEPAREN60_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(127, 1);
		try
		{
			// Scrape.g:128:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:128:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(128, 4);
			EXPAND55=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression625); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND55);

			DebugLocation(128, 11);
			OPENPAREN56=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression627); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN56);

			DebugLocation(128, 21);
			PushFollow(Follow._expandVar_in_expandExpression629);
			expandVar57=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar57.Tree);
			DebugLocation(128, 31);
			TO58=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression631); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO58);

			DebugLocation(128, 34);
			PushFollow(Follow._expandVar_in_expandExpression633);
			expandVar59=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar59.Tree);
			DebugLocation(128, 44);
			CLOSEPAREN60=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression635); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN60);

			DebugLocation(128, 55);
			// Scrape.g:128:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:128:55: expandBlock
					{
					DebugLocation(128, 55);
					PushFollow(Follow._expandBlock_in_expandExpression637);
					expandBlock61=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock61.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandBlock, expandVar, expandVar, EXPAND
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 128:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(128, 71);
				// Scrape.g:128:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(128, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(128, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(128, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(128, 100);
				// Scrape.g:128:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(128, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 14);
			LeaveRule("expandExpression", 14);
			LeaveRule_expandExpression();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:131:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 15);
		TraceIn("expandBlock", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE62 = default(CommonToken);
		CommonToken CLOSEBRACE64 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression63 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE62_tree = default(CommonTree);
		CommonTree CLOSEBRACE64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(131, 1);
		try
		{
			// Scrape.g:132:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:132:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(132, 4);
			OPENBRACE62=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock662); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE62);

			DebugLocation(132, 14);
			// Scrape.g:132:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==114))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:132:14: mathExpression
					{
					DebugLocation(132, 14);
					PushFollow(Follow._mathExpression_in_expandBlock664);
					mathExpression63=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression63.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(132, 30);
			CLOSEBRACE64=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock667); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE64);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 132:41: -> ( mathExpression )*
			{
				DebugLocation(132, 44);
				// Scrape.g:132:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(132, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 15);
			LeaveRule("expandBlock", 15);
			LeaveRule_expandBlock();
		}
		DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:135:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 16);
		TraceIn("expandVar", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT65 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT65_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(135, 1);
		try
		{
			// Scrape.g:136:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:136:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(136, 4);
				INT65=(CommonToken)Match(input,INT,Follow._INT_in_expandVar683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT65_tree = (CommonTree)adaptor.Create(INT65);
				adaptor.AddChild(root_0, INT65_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:137:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(137, 4);
				PushFollow(Follow._variableReference_in_expandVar688);
				variableReference66=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference66.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 16);
			LeaveRule("expandVar", 16);
			LeaveRule_expandVar();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:140:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 17);
		TraceIn("downloadExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(140, 1);
		try
		{
			// Scrape.g:141:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:141:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression699);
				downloadPageExpresssion67=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion67.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:142:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression704);
				downloadImageExpression68=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression68.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 17);
			LeaveRule("downloadExpression", 17);
			LeaveRule_downloadExpression();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:145:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE variableReference -> ^( DOWNLOAD_PAGE variableReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 18);
		TraceIn("downloadPageExpresssion", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE69 = default(CommonToken);
		CommonToken STRING_LITERAL70 = default(CommonToken);
		CommonToken OPENPAREN71 = default(CommonToken);
		CommonToken CLOSEPAREN73 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE69_tree = default(CommonTree);
		CommonTree STRING_LITERAL70_tree = default(CommonTree);
		CommonTree OPENPAREN71_tree = default(CommonTree);
		CommonTree CLOSEPAREN73_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE74_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(145, 1);
		try
		{
			// Scrape.g:146:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_PAGE variableReference -> ^( DOWNLOAD_PAGE variableReference ) )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_PAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==OPENPAREN||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else if ((LA15_2==COMMAND_VAR||LA15_2==ID||LA15_2==IDENTITY_VAR))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:146:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(146, 17);
				DOWNLOAD_PAGE69=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion715); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_PAGE69_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE69);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE69_tree, root_0);
				}
				DebugLocation(146, 19);
				// Scrape.g:146:19: ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==OPENPAREN))
				{
					alt14 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:146:20: STRING_LITERAL
					{
					DebugLocation(146, 20);
					STRING_LITERAL70=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion719); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL70_tree = (CommonTree)adaptor.Create(STRING_LITERAL70);
					adaptor.AddChild(root_0, STRING_LITERAL70_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:146:37: OPENPAREN sqlStatement CLOSEPAREN
					{
					DebugLocation(146, 37);
					OPENPAREN71=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadPageExpresssion723); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPENPAREN71_tree = (CommonTree)adaptor.Create(OPENPAREN71);
					adaptor.AddChild(root_0, OPENPAREN71_tree);
					}
					DebugLocation(146, 47);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion725);
					sqlStatement72=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement72.Tree);
					DebugLocation(146, 60);
					CLOSEPAREN73=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadPageExpresssion727); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CLOSEPAREN73_tree = (CommonTree)adaptor.Create(CLOSEPAREN73);
					adaptor.AddChild(root_0, CLOSEPAREN73_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:147:4: DOWNLOAD_PAGE variableReference
				{
				DebugLocation(147, 4);
				DOWNLOAD_PAGE74=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE74);

				DebugLocation(147, 18);
				PushFollow(Follow._variableReference_in_downloadPageExpresssion735);
				variableReference75=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableReference.Add(variableReference75.Tree);


				{
				// AST REWRITE
				// elements: variableReference, DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 147:36: -> ^( DOWNLOAD_PAGE variableReference )
				{
					DebugLocation(147, 39);
					// Scrape.g:147:39: ^( DOWNLOAD_PAGE variableReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(147, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(147, 55);
					adaptor.AddChild(root_1, stream_variableReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 18);
			LeaveRule("downloadPageExpresssion", 18);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:150:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_IMAGE variableReference -> ^( DOWNLOAD_IMAGE variableReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 19);
		TraceIn("downloadImageExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE76 = default(CommonToken);
		CommonToken STRING_LITERAL77 = default(CommonToken);
		CommonToken OPENPAREN78 = default(CommonToken);
		CommonToken CLOSEPAREN80 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE76_tree = default(CommonTree);
		CommonTree STRING_LITERAL77_tree = default(CommonTree);
		CommonTree OPENPAREN78_tree = default(CommonTree);
		CommonTree CLOSEPAREN80_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(150, 1);
		try
		{
			// Scrape.g:151:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN ) | DOWNLOAD_IMAGE variableReference -> ^( DOWNLOAD_IMAGE variableReference ) )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==DOWNLOAD_IMAGE))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==OPENPAREN||LA17_2==STRING_LITERAL))
				{
					alt17 = 1;
				}
				else if ((LA17_2==COMMAND_VAR||LA17_2==ID||LA17_2==IDENTITY_VAR))
				{
					alt17 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:151:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(151, 18);
				DOWNLOAD_IMAGE76=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression754); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOWNLOAD_IMAGE76_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE76);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE76_tree, root_0);
				}
				DebugLocation(151, 20);
				// Scrape.g:151:20: ( STRING_LITERAL | OPENPAREN sqlStatement CLOSEPAREN )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==STRING_LITERAL))
				{
					alt16 = 1;
				}
				else if ((LA16_1==OPENPAREN))
				{
					alt16 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:151:21: STRING_LITERAL
					{
					DebugLocation(151, 21);
					STRING_LITERAL77=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression758); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL77_tree = (CommonTree)adaptor.Create(STRING_LITERAL77);
					adaptor.AddChild(root_0, STRING_LITERAL77_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:151:38: OPENPAREN sqlStatement CLOSEPAREN
					{
					DebugLocation(151, 38);
					OPENPAREN78=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadImageExpression762); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OPENPAREN78_tree = (CommonTree)adaptor.Create(OPENPAREN78);
					adaptor.AddChild(root_0, OPENPAREN78_tree);
					}
					DebugLocation(151, 48);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression764);
					sqlStatement79=sqlStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement79.Tree);
					DebugLocation(151, 61);
					CLOSEPAREN80=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadImageExpression766); if (state.failed) return retval;
					if (state.backtracking == 0) {
					CLOSEPAREN80_tree = (CommonTree)adaptor.Create(CLOSEPAREN80);
					adaptor.AddChild(root_0, CLOSEPAREN80_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:152:4: DOWNLOAD_IMAGE variableReference
				{
				DebugLocation(152, 4);
				DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression772); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE81);

				DebugLocation(152, 19);
				PushFollow(Follow._variableReference_in_downloadImageExpression774);
				variableReference82=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variableReference.Add(variableReference82.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE, variableReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 152:37: -> ^( DOWNLOAD_IMAGE variableReference )
				{
					DebugLocation(152, 40);
					// Scrape.g:152:40: ^( DOWNLOAD_IMAGE variableReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(152, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(152, 57);
					adaptor.AddChild(root_1, stream_variableReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 19);
			LeaveRule("downloadImageExpression", 19);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:155:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 20);
		TraceIn("variableReference", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID83 = default(CommonToken);
		CommonToken COMMAND_VAR84 = default(CommonToken);
		CommonToken IDENTITY_VAR85 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference86 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID83_tree = default(CommonTree);
		CommonTree COMMAND_VAR84_tree = default(CommonTree);
		CommonTree IDENTITY_VAR85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(155, 1);
		try
		{
			// Scrape.g:156:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==DOT))
				{
					alt18 = 4;
				}
				else if ((LA18_2==EOF||LA18_2==ASTERISK||(LA18_2>=CLOSEBRACE && LA18_2<=COMMAND_VAR)||LA18_2==CREATE||LA18_2==DIV||LA18_2==EACH||(LA18_2>=EQUALS && LA18_2<=EXEC)||LA18_2==ID||LA18_2==IDENTITY_VAR||(LA18_2>=INSERT_DIRECTORY && LA18_2<=INSERT_INTO)||(LA18_2>=INSERT_OVERWRITE && LA18_2<=INT)||LA18_2==MINIS||(LA18_2>=NULL && LA18_2<=NULL_OPERATOR)||LA18_2==OPENPAREN||LA18_2==PLUS||LA18_2==SELECT||LA18_2==STRING_LITERAL||(LA18_2>=TO && LA18_2<=VAR)||LA18_2==WHERE||LA18_2==114))
				{
					alt18 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt18 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt18 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:156:4: ID
				{
				DebugLocation(156, 4);
				ID83=(CommonToken)Match(input,ID,Follow._ID_in_variableReference794); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID83);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 156:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(156, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID83));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:157:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				COMMAND_VAR84=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference804); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR84_tree = (CommonTree)adaptor.Create(COMMAND_VAR84);
				adaptor.AddChild(root_0, COMMAND_VAR84_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:158:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				IDENTITY_VAR85=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR85_tree = (CommonTree)adaptor.Create(IDENTITY_VAR85);
				adaptor.AddChild(root_0, IDENTITY_VAR85_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:159:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference814);
				tableMemberReference86=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference86.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 20);
			LeaveRule("variableReference", 20);
			LeaveRule_variableReference();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:162:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 21);
		TraceIn("tableMemberReference", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT87 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(162, 1);
		try
		{
			// Scrape.g:163:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:163:4: t= ID DOT m= ID
			{
			DebugLocation(163, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference828); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(163, 9);
			DOT87=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference830); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT87);

			DebugLocation(163, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference834); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 163:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(163, 21);
				// Scrape.g:163:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(163, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(163, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(163, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 21);
			LeaveRule("tableMemberReference", 21);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:166:1: variableDeclarationStatement : ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) | VAR ID );
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 22);
		TraceIn("variableDeclarationStatement", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR88 = default(CommonToken);
		CommonToken ID89 = default(CommonToken);
		CommonToken EQUALS90 = default(CommonToken);
		CommonToken VAR92 = default(CommonToken);
		CommonToken ID93 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR88_tree = default(CommonTree);
		CommonTree ID89_tree = default(CommonTree);
		CommonTree EQUALS90_tree = default(CommonTree);
		CommonTree VAR92_tree = default(CommonTree);
		CommonTree ID93_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(166, 1);
		try
		{
			// Scrape.g:167:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) | VAR ID )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==VAR))
			{
				int LA19_2 = input.LA(2);

				if ((LA19_2==ID))
				{
					int LA19_3 = input.LA(3);

					if ((LA19_3==EQUALS))
					{
						alt19 = 1;
					}
					else if ((LA19_3==EOF||LA19_3==CLOSEBRACE||LA19_3==COMMAND_VAR||LA19_3==CREATE||LA19_3==EACH||LA19_3==EXEC||LA19_3==ID||LA19_3==IDENTITY_VAR||(LA19_3>=INSERT_DIRECTORY && LA19_3<=INSERT_INTO)||LA19_3==INSERT_OVERWRITE||LA19_3==SELECT||(LA19_3>=TRUNCATE && LA19_3<=VAR)))
					{
						alt19 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 19, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:167:4: VAR ID EQUALS assignmentExpression
				{
				DebugLocation(167, 4);
				VAR88=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement858); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_VAR.Add(VAR88);

				DebugLocation(167, 8);
				ID89=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement860); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID89);

				DebugLocation(167, 11);
				EQUALS90=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement862); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS90);

				DebugLocation(167, 18);
				PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement864);
				assignmentExpression91=assignmentExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression91.Tree);


				{
				// AST REWRITE
				// elements: assignmentExpression, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
					DebugLocation(167, 42);
					// Scrape.g:167:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

					DebugLocation(167, 65);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(167, 68);
					adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:168:4: VAR ID
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				VAR92=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement879); if (state.failed) return retval;
				if (state.backtracking == 0) {
				VAR92_tree = (CommonTree)adaptor.Create(VAR92);
				adaptor.AddChild(root_0, VAR92_tree);
				}
				DebugLocation(168, 8);
				ID93=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement881); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ID93_tree = (CommonTree)adaptor.Create(ID93);
				adaptor.AddChild(root_0, ID93_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 22);
			LeaveRule("variableDeclarationStatement", 22);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:171:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 23);
		TraceIn("variableAssignmentStatement", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(171, 1);
		try
		{
			// Scrape.g:172:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:172:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(172, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement892);
			variableReference94=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference94.Tree);
			DebugLocation(172, 22);
			EQUALS95=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement894); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS95);

			DebugLocation(172, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement896);
			assignmentExpression96=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression96.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(172, 53);
				// Scrape.g:172:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(172, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(172, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 23);
			LeaveRule("variableAssignmentStatement", 23);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:175:1: nullOperator : variableReference NULL_OPERATOR ^ ( variableReference | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 24);
		TraceIn("nullOperator", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NULL_OPERATOR98 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NULL_OPERATOR98_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(175, 1);
		try
		{
			// Scrape.g:176:2: ( variableReference NULL_OPERATOR ^ ( variableReference | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:176:4: variableReference NULL_OPERATOR ^ ( variableReference | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(176, 4);
			PushFollow(Follow._variableReference_in_nullOperator917);
			variableReference97=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference97.Tree);
			DebugLocation(176, 35);
			NULL_OPERATOR98=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator919); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR98_tree = (CommonTree)adaptor.Create(NULL_OPERATOR98);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR98_tree, root_0);
			}
			DebugLocation(176, 37);
			// Scrape.g:176:37: ( variableReference | literal )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==COMMAND_VAR||LA20_1==ID||LA20_1==IDENTITY_VAR))
			{
				alt20 = 1;
			}
			else if ((LA20_1==INT||LA20_1==NULL||LA20_1==STRING_LITERAL))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:176:38: variableReference
				{
				DebugLocation(176, 38);
				PushFollow(Follow._variableReference_in_nullOperator923);
				variableReference99=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference99.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:176:56: literal
				{
				DebugLocation(176, 56);
				PushFollow(Follow._literal_in_nullOperator925);
				literal100=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal100.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 24);
			LeaveRule("nullOperator", 24);
			LeaveRule_nullOperator();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:179:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 25);
		TraceIn("assignmentExpression", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(179, 1);
		try
		{
			// Scrape.g:180:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt21=6;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==DOT||LA21_2==NULL_OPERATOR))
				{
					alt21 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt21 = 1;
				}
				else if ((true))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==NULL_OPERATOR))
				{
					alt21 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt21 = 1;
				}
				else if ((true))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==NULL_OPERATOR))
				{
					alt21 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt21 = 1;
				}
				else if ((true))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 114:
				{
				alt21 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt21 = 2;
				}
				break;
			case EXPAND:
				{
				alt21 = 3;
				}
				break;
			case SELECT:
				{
				alt21 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:180:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression937);
				mathExpression101=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression101.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:181:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression942);
				downloadExpression102=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression102.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:182:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression947);
				expandExpression103=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression103.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:183:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression952);
				sqlStatement104=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement104.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:184:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression957);
				nullOperator105=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator105.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:185:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression962);
				variableReference106=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference106.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 25);
			LeaveRule("assignmentExpression", 25);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:188:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 26);
		TraceIn("mathExpression", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set108 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set108_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(188, 5);
		try
		{
			// Scrape.g:189:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:189:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(189, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression978);
			mathExpressionGroup107=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup107.Tree);
			DebugLocation(189, 29);
			// Scrape.g:189:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==MINIS||LA22_1==PLUS))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:189:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(189, 46);

					set108=(CommonToken)input.LT(1);
					set108=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set108), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(189, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression992);
					mathExpressionGroup109=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup109.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 26);
			LeaveRule("mathExpression", 26);
			LeaveRule_mathExpression();
		}
		DebugLocation(190, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:192:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 27);
		TraceIn("mathExpressionGroup", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set111 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(192, 3);
		try
		{
			// Scrape.g:193:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:193:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(193, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup1010);
			atom110=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom110.Tree);
			DebugLocation(193, 9);
			// Scrape.g:193:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==ASTERISK||LA23_1==DIV))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:193:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(193, 28);

					set111=(CommonToken)input.LT(1);
					set111=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set111), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(193, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1024);
					atom112=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom112.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 27);
			LeaveRule("mathExpressionGroup", 27);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(194, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:196:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 28);
		TraceIn("atom", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal114 = default(CommonToken);
		CommonToken OPENPAREN116 = default(CommonToken);
		CommonToken CLOSEPAREN118 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression117 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree OPENPAREN116_tree = default(CommonTree);
		CommonTree CLOSEPAREN118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(196, 5);
		try
		{
			// Scrape.g:197:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt24=4;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt24 = 1;
				}
				break;
			case 114:
				{
				alt24 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt24 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt24 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:197:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(197, 8);
				PushFollow(Follow._variableReference_in_atom1045);
				variableReference113=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference113.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:198:5: '$'
				{
				DebugLocation(198, 5);
				char_literal114=(CommonToken)Match(input,114,Follow._114_in_atom1051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal114);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(198, 12);
					// Scrape.g:198:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:199:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(199, 5);
				PushFollow(Follow._literal_in_atom1063);
				literal115=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal115.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:200:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(200, 17);
				OPENPAREN116=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1072); if (state.failed) return retval;
				DebugLocation(200, 19);
				PushFollow(Follow._mathExpression_in_atom1075);
				mathExpression117=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression117.Tree);
				DebugLocation(200, 44);
				CLOSEPAREN118=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1077); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 28);
			LeaveRule("atom", 28);
			LeaveRule_atom();
		}
		DebugLocation(201, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:203:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 29);
		TraceIn("literal", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set119 = default(CommonToken);

		CommonTree set119_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(203, 1);
		try
		{
			// Scrape.g:204:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(204, 2);

			set119=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set119));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 29);
			LeaveRule("literal", 29);
			LeaveRule_literal();
		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:212:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 30);
		TraceIn("insertStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO120 = default(CommonToken);
		CommonToken ID121 = default(CommonToken);
		CommonToken INSERT_DIRECTORY123 = default(CommonToken);
		CommonToken INSERT_OVERWRITE126 = default(CommonToken);
		CommonToken ID127 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression124 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO120_tree = default(CommonTree);
		CommonTree ID121_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY123_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE126_tree = default(CommonTree);
		CommonTree ID127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(212, 1);
		try
		{
			// Scrape.g:213:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt25=3;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt25 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt25 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt25 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:213:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(213, 4);
				INSERT_INTO120=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1119); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO120);

				DebugLocation(213, 16);
				ID121=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1121); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID121);

				DebugLocation(213, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1123);
				sqlStatement122=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement122.Tree);


				{
				// AST REWRITE
				// elements: INSERT_INTO, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 213:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(213, 34);
					// Scrape.g:213:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(213, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(213, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID121));
					DebugLocation(213, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:214:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(214, 4);
				INSERT_DIRECTORY123=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1138); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY123);

				DebugLocation(214, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1140);
				mathExpression124=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression124.Tree);
				DebugLocation(214, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1142);
				sqlStatement125=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement125.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, mathExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 214:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(214, 51);
					// Scrape.g:214:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(214, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(214, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(214, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:215:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(215, 4);
				INSERT_OVERWRITE126=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1156); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE126);

				DebugLocation(215, 21);
				ID127=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1158); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID127);

				DebugLocation(215, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1160);
				sqlStatement128=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement128.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 215:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(215, 39);
					// Scrape.g:215:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(215, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(215, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID127));
					DebugLocation(215, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 30);
			LeaveRule("insertStatement", 30);
			LeaveRule_insertStatement();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:220:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 31);
		TraceIn("sqlStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement129 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(220, 1);
		try
		{
			// Scrape.g:221:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:221:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(221, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1184);
			selectStatement129=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement129.Tree);
			DebugLocation(221, 20);
			// Scrape.g:221:20: ( fromStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==FROM))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:221:20: fromStatement
				{
				DebugLocation(221, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1186);
				fromStatement130=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement130.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(221, 35);
			// Scrape.g:221:35: ( whereStatement )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==WHERE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:221:35: whereStatement
				{
				DebugLocation(221, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1189);
				whereStatement131=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement131.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: fromStatement, whereStatement, selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 221:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(221, 54);
				// Scrape.g:221:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(221, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(221, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(221, 89);
				// Scrape.g:221:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(221, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(221, 104);
				// Scrape.g:221:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(221, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 31);
			LeaveRule("sqlStatement", 31);
			LeaveRule_sqlStatement();
		}
		DebugLocation(222, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:224:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 32);
		TraceIn("whereStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE132 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(224, 1);
		try
		{
			// Scrape.g:225:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:225:5: WHERE boolExpression
			{
			DebugLocation(225, 5);
			WHERE132=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1216); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE132);

			DebugLocation(225, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1218);
			boolExpression133=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression133.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, WHERE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 225:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(225, 29);
				// Scrape.g:225:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(225, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(225, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 32);
			LeaveRule("whereStatement", 32);
			LeaveRule_whereStatement();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:228:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 33);
		TraceIn("fromStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM134 = default(CommonToken);
		CommonToken FROM136 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression139 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM134_tree = default(CommonTree);
		CommonTree FROM136_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(228, 1);
		try
		{
			// Scrape.g:229:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression ) )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==FROM))
			{
				int LA31_2 = input.LA(2);

				if ((LA31_2==ID))
				{
					alt31 = 1;
				}
				else if (((LA31_2>=DOWNLOAD_IMAGE && LA31_2<=DOWNLOAD_PAGE)||LA31_2==EXPAND))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:229:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(229, 4);
				FROM134=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1238); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM134);

				DebugLocation(229, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1242); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(229, 15);
				// Scrape.g:229:15: (a= ID )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ID))
				{
					int LA28_2 = input.LA(2);

					if ((LA28_2==EOF||(LA28_2>=CLOSEBRACE && LA28_2<=CLOSEPAREN)||LA28_2==COMMAND_VAR||LA28_2==CREATE||LA28_2==EACH||LA28_2==EXEC||LA28_2==ID||LA28_2==IDENTITY_VAR||(LA28_2>=INNER_JOIN && LA28_2<=INSERT_INTO)||LA28_2==INSERT_OVERWRITE||LA28_2==JOIN||LA28_2==SELECT||(LA28_2>=TRUNCATE && LA28_2<=VAR)||LA28_2==WHERE))
					{
						alt28 = 1;
					}
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:229:15: a= ID
					{
					DebugLocation(229, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1246); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(229, 20);
				// Scrape.g:229:20: ( innerJoinStatement )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==INNER_JOIN||LA29_1==JOIN))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:229:20: innerJoinStatement
					{
					DebugLocation(229, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1249);
					innerJoinStatement135=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement135.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, FROM, a
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(229, 43);
					// Scrape.g:229:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(229, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(229, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(229, 79);
					// Scrape.g:229:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(229, 79);
						// Scrape.g:229:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(229, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(229, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(229, 98);
					// Scrape.g:229:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(229, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:230:4: FROM ^ ( downloadPageExpresssion | downloadImageExpression | expandExpression )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 8);
				FROM136=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1276); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FROM136_tree = (CommonTree)adaptor.Create(FROM136);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM136_tree, root_0);
				}
				DebugLocation(230, 10);
				// Scrape.g:230:10: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
				int alt30=3;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				switch (input.LA(1))
				{
				case DOWNLOAD_PAGE:
					{
					alt30 = 1;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt30 = 2;
					}
					break;
				case EXPAND:
					{
					alt30 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:230:11: downloadPageExpresssion
					{
					DebugLocation(230, 11);
					PushFollow(Follow._downloadPageExpresssion_in_fromStatement1280);
					downloadPageExpresssion137=downloadPageExpresssion();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion137.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:230:37: downloadImageExpression
					{
					DebugLocation(230, 37);
					PushFollow(Follow._downloadImageExpression_in_fromStatement1284);
					downloadImageExpression138=downloadImageExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression138.Tree);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Scrape.g:230:63: expandExpression
					{
					DebugLocation(230, 63);
					PushFollow(Follow._expandExpression_in_fromStatement1288);
					expandExpression139=expandExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression139.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 33);
			LeaveRule("fromStatement", 33);
			LeaveRule_fromStatement();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:233:1: innerJoinStatement : innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 34);
		TraceIn("innerJoinStatement", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal141 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(233, 1);
		try
		{
			// Scrape.g:234:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:234:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
			{
			DebugLocation(234, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1300);
			innerJoin140=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin140.Tree);
			DebugLocation(234, 15);
			t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1304); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(234, 20);
			// Scrape.g:234:20: (a= ID )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==ID))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:234:20: a= ID
				{
				DebugLocation(234, 20);
				a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1308); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(a);


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(234, 25);
			string_literal141=(CommonToken)Match(input,115,Follow._115_in_innerJoinStatement1311); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(string_literal141);

			DebugLocation(234, 30);
			PushFollow(Follow._boolExpression_in_innerJoinStatement1313);
			boolExpression142=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression142.Tree);
			DebugLocation(234, 45);
			// Scrape.g:234:45: ( innerJoinStatement )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==INNER_JOIN||LA33_1==JOIN))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:234:45: innerJoinStatement
				{
				DebugLocation(234, 45);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1315);
				innerJoinStatement143=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: a, boolExpression, innerJoinStatement
			// token labels: a
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
			{
				DebugLocation(234, 68);
				// Scrape.g:234:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(234, 81);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(234, 110);
				// Scrape.g:234:110: ( ^( TABLE_ALIAS $a) )?
				if (stream_a.HasNext)
				{
					DebugLocation(234, 110);
					// Scrape.g:234:110: ^( TABLE_ALIAS $a)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(234, 112);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(234, 125);
					adaptor.AddChild(root_2, stream_a.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_a.Reset();
				DebugLocation(234, 129);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(234, 144);
				// Scrape.g:234:144: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(234, 144);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 34);
			LeaveRule("innerJoinStatement", 34);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:237:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 35);
		TraceIn("innerJoin", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set144 = default(CommonToken);

		CommonTree set144_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(237, 1);
		try
		{
			// Scrape.g:238:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(238, 2);

			set144=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set144));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 35);
			LeaveRule("innerJoin", 35);
			LeaveRule_innerJoin();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:242:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 36);
		TraceIn("selectStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT145 = default(CommonToken);
		CommonToken COMMA147 = default(CommonToken);
		CommonToken SELECT149 = default(CommonToken);
		CommonToken ASTERISK150 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT145_tree = default(CommonTree);
		CommonTree COMMA147_tree = default(CommonTree);
		CommonTree SELECT149_tree = default(CommonTree);
		CommonTree ASTERISK150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(242, 1);
		try
		{
			// Scrape.g:243:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==SELECT))
			{
				int LA35_2 = input.LA(2);

				if ((LA35_2==ASTERISK))
				{
					alt35 = 2;
				}
				else if ((LA35_2==CASE||LA35_2==COMMAND_VAR||LA35_2==ID||LA35_2==IDENTITY_VAR||LA35_2==INT||LA35_2==NULL||LA35_2==PICK||LA35_2==STRING_LITERAL))
				{
					alt35 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:243:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(243, 4);
				SELECT145=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1365); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT145);

				DebugLocation(243, 11);
				// Scrape.g:243:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case ID:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA34_2 = input.LA(2);

						if ((EvaluatePredicate(synpred56_Scrape_fragment)))
						{
							alt34 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:243:12: selectArgs COMMA
						{
						DebugLocation(243, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1368);
						selectArgs146=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs146.Tree);
						DebugLocation(243, 23);
						COMMA147=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1370); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA147);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(243, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1374);
				selectArgs148=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs148.Tree);


				{
				// AST REWRITE
				// elements: SELECT, selectArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 243:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(243, 45);
					// Scrape.g:243:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(243, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(243, 54);
					// Scrape.g:243:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(243, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:244:4: SELECT ASTERISK
				{
				DebugLocation(244, 4);
				SELECT149=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1388); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT149);

				DebugLocation(244, 11);
				ASTERISK150=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1390); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK150);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 244:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(244, 23);
					// Scrape.g:244:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(244, 32);
					// Scrape.g:244:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(244, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK150));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 36);
			LeaveRule("selectStatement", 36);
			LeaveRule_selectStatement();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:248:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 37);
		TraceIn("selectArgs", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS152 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg153 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(248, 1);
		try
		{
			// Scrape.g:249:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==COMMAND_VAR||LA37_1==ID||LA37_1==IDENTITY_VAR||LA37_1==INT||LA37_1==NULL||LA37_1==PICK||LA37_1==STRING_LITERAL))
			{
				alt37 = 1;
			}
			else if ((LA37_1==CASE))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:249:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(249, 4);
				// Scrape.g:249:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==STRING_LITERAL))
						{
							int LA36_3 = input.LA(3);

							if ((LA36_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==STRING_LITERAL))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==MATCH))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==STRING_LITERAL))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==REPLACE))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==STRING_LITERAL))
													{
														int LA36_10 = input.LA(10);

														if ((LA36_10==PLUS))
														{
															alt36 = 1;
														}


													}


												}
												else if ((LA36_8==PLUS))
												{
													alt36 = 1;
												}


											}


										}
										else if ((LA36_6==PLUS))
										{
											alt36 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==MATCH))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==STRING_LITERAL))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==REPLACE))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==STRING_LITERAL))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==PLUS))
													{
														alt36 = 1;
													}


												}


											}
											else if ((LA36_7==PLUS))
											{
												alt36 = 1;
											}


										}


									}
									else if ((LA36_5==PLUS))
									{
										alt36 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA36_5 = input.LA(5);

									if ((LA36_5==MATCH))
									{
										int LA36_6 = input.LA(6);

										if ((LA36_6==STRING_LITERAL))
										{
											int LA36_7 = input.LA(7);

											if ((LA36_7==REPLACE))
											{
												int LA36_8 = input.LA(8);

												if ((LA36_8==STRING_LITERAL))
												{
													int LA36_9 = input.LA(9);

													if ((LA36_9==PLUS))
													{
														alt36 = 1;
													}


												}


											}
											else if ((LA36_7==PLUS))
											{
												alt36 = 1;
											}


										}


									}
									else if ((LA36_5==PLUS))
									{
										alt36 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case ID:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==DOT))
						{
							int LA36_3 = input.LA(3);

							if ((LA36_3==ID))
							{
								int LA36_4 = input.LA(4);

								if ((LA36_4==PLUS))
								{
									alt36 = 1;
								}


							}


						}
						else if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA36_2 = input.LA(2);

						if ((LA36_2==PLUS))
						{
							alt36 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:249:5: selectArg PLUS
						{
						DebugLocation(249, 5);
						PushFollow(Follow._selectArg_in_selectArgs1416);
						selectArg151=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg151.Tree);
						DebugLocation(249, 15);
						PLUS152=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1418); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS152);


						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(249, 22);
				PushFollow(Follow._selectArg_in_selectArgs1422);
				selectArg153=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg153.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 249:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(249, 35);
					// Scrape.g:249:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(249, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(249, 48);
					// Scrape.g:249:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(249, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:250:4: caseStatement
				{
				DebugLocation(250, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1436);
				caseStatement154=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement154.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 250:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(250, 21);
					// Scrape.g:250:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(250, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(250, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 37);
			LeaveRule("selectArgs", 37);
			LeaveRule_selectArgs();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:255:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 38);
		TraceIn("caseStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE155 = default(CommonToken);
		CommonToken ELSE157 = default(CommonToken);
		CommonToken END159 = default(CommonToken);
		CommonToken CASE160 = default(CommonToken);
		CommonToken ELSE163 = default(CommonToken);
		CommonToken END165 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE155_tree = default(CommonTree);
		CommonTree ELSE157_tree = default(CommonTree);
		CommonTree END159_tree = default(CommonTree);
		CommonTree CASE160_tree = default(CommonTree);
		CommonTree ELSE163_tree = default(CommonTree);
		CommonTree END165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(255, 1);
		try
		{
			// Scrape.g:256:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==CASE))
			{
				int LA42_2 = input.LA(2);

				if ((LA42_2==WHEN))
				{
					alt42 = 1;
				}
				else if ((LA42_2==COMMAND_VAR||LA42_2==ID||LA42_2==IDENTITY_VAR||LA42_2==INT||LA42_2==NULL||LA42_2==PICK||LA42_2==STRING_LITERAL))
				{
					alt42 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:256:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(256, 4);
				CASE155=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1458); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE155);

				DebugLocation(256, 9);
				// Scrape.g:256:9: ( whenBoolStatement )+
				int cnt38=0;
				try { DebugEnterSubRule(38);
				while (true)
				{
					int alt38=2;
					try { DebugEnterDecision(38, false);
					int LA38_1 = input.LA(1);

					if ((LA38_1==WHEN))
					{
						alt38 = 1;
					}


					} finally { DebugExitDecision(38); }
					switch (alt38)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:256:9: whenBoolStatement
						{
						DebugLocation(256, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1460);
						whenBoolStatement156=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement156.Tree);

						}
						break;

					default:
						if (cnt38 >= 1)
							goto loop38;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee38 = new EarlyExitException( 38, input );
						DebugRecognitionException(eee38);
						throw eee38;
					}
					cnt38++;
				}
				loop38:
					;

				} finally { DebugExitSubRule(38); }

				DebugLocation(256, 28);
				// Scrape.g:256:28: ( ELSE caseExpression )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==ELSE))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:256:29: ELSE caseExpression
					{
					DebugLocation(256, 29);
					ELSE157=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE157);

					DebugLocation(256, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1466);
					caseExpression158=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression158.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(256, 51);
				END159=(CommonToken)Match(input,END,Follow._END_in_caseStatement1470); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END159);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(256, 58);
					// Scrape.g:256:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(256, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(256, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(256, 89);
					// Scrape.g:256:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(256, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:257:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(257, 4);
				CASE160=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1487); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE160);

				DebugLocation(257, 9);
				PushFollow(Follow._selectArg_in_caseStatement1489);
				selectArg161=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg161.Tree);
				DebugLocation(257, 19);
				// Scrape.g:257:19: ( whenLiteralStatement )+
				int cnt40=0;
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==WHEN))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:257:19: whenLiteralStatement
						{
						DebugLocation(257, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1491);
						whenLiteralStatement162=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement162.Tree);

						}
						break;

					default:
						if (cnt40 >= 1)
							goto loop40;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee40 = new EarlyExitException( 40, input );
						DebugRecognitionException(eee40);
						throw eee40;
					}
					cnt40++;
				}
				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(257, 41);
				// Scrape.g:257:41: ( ELSE caseExpression )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==ELSE))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:257:42: ELSE caseExpression
					{
					DebugLocation(257, 42);
					ELSE163=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1495); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE163);

					DebugLocation(257, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1497);
					caseExpression164=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression164.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(257, 64);
				END165=(CommonToken)Match(input,END,Follow._END_in_caseStatement1501); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END165);



				{
				// AST REWRITE
				// elements: whenLiteralStatement, selectArg, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 257:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(257, 71);
					// Scrape.g:257:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(257, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(257, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(257, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(257, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(257, 114);
					// Scrape.g:257:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(257, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 38);
			LeaveRule("caseStatement", 38);
			LeaveRule_caseStatement();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:260:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 39);
		TraceIn("caseExpression", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(260, 1);
		try
		{
			// Scrape.g:261:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:261:4: selectArg
			{
			DebugLocation(261, 4);
			PushFollow(Follow._selectArg_in_caseExpression1526);
			selectArg166=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg166.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(261, 17);
				// Scrape.g:261:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(261, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 39);
			LeaveRule("caseExpression", 39);
			LeaveRule_caseExpression();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:264:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 40);
		TraceIn("whenLiteralStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN167 = default(CommonToken);
		CommonToken THEN169 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN167_tree = default(CommonTree);
		CommonTree THEN169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:265:4: WHEN literal THEN caseExpression
			{
			DebugLocation(265, 4);
			WHEN167=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1545); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN167);

			DebugLocation(265, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1547);
			literal168=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal168.Tree);
			DebugLocation(265, 17);
			THEN169=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1549); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN169);

			DebugLocation(265, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1551);
			caseExpression170=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression170.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(265, 40);
				// Scrape.g:265:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(265, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(265, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 40);
			LeaveRule("whenLiteralStatement", 40);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:268:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 41);
		TraceIn("whenBoolStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN171 = default(CommonToken);
		CommonToken THEN173 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression174 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN171_tree = default(CommonTree);
		CommonTree THEN173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:269:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(269, 4);
			WHEN171=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1572); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN171);

			DebugLocation(269, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1574);
			boolExpression172=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression172.Tree);
			DebugLocation(269, 24);
			THEN173=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1576); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN173);

			DebugLocation(269, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1578);
			caseExpression174=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression174.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, caseExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(269, 47);
				// Scrape.g:269:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(269, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(269, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 41);
			LeaveRule("whenBoolStatement", 41);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:272:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 42);
		TraceIn("boolExpression", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR176 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR176_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(272, 1);
		try
		{
			// Scrape.g:273:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:273:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(273, 4);
			PushFollow(Follow._andExpression_in_boolExpression1599);
			andExpression175=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression175.Tree);
			DebugLocation(273, 18);
			// Scrape.g:273:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==OR))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:273:19: OR ^ andExpression
					{
					DebugLocation(273, 21);
					OR176=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1602); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR176_tree = (CommonTree)adaptor.Create(OR176);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR176_tree, root_0);
					}
					DebugLocation(273, 23);
					PushFollow(Follow._andExpression_in_boolExpression1605);
					andExpression177=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression177.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 42);
			LeaveRule("boolExpression", 42);
			LeaveRule_boolExpression();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:276:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 43);
		TraceIn("andExpression", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND179 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND179_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(276, 1);
		try
		{
			// Scrape.g:277:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:277:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(277, 5);
			PushFollow(Follow._boolTerm_in_andExpression1619);
			boolTerm178=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm178.Tree);
			DebugLocation(277, 14);
			// Scrape.g:277:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==AND))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:277:15: AND ^ boolTerm
					{
					DebugLocation(277, 18);
					AND179=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1622); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND179_tree = (CommonTree)adaptor.Create(AND179);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND179_tree, root_0);
					}
					DebugLocation(277, 20);
					PushFollow(Follow._boolTerm_in_andExpression1625);
					boolTerm180=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm180.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 43);
			LeaveRule("andExpression", 43);
			LeaveRule_andExpression();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:280:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 44);
		TraceIn("boolTerm", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken NODES181 = default(CommonToken);
		CommonToken EQUALS182 = default(CommonToken);
		CommonToken STRING_LITERAL183 = default(CommonToken);
		CommonToken OPENPAREN187 = default(CommonToken);
		CommonToken CLOSEPAREN189 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator185 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression188 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree NODES181_tree = default(CommonTree);
		CommonTree EQUALS182_tree = default(CommonTree);
		CommonTree STRING_LITERAL183_tree = default(CommonTree);
		CommonTree OPENPAREN187_tree = default(CommonTree);
		CommonTree CLOSEPAREN189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(280, 1);
		try
		{
			// Scrape.g:281:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt46=3;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt46 = 1;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt46 = 2;
				}
				break;
			case OPENPAREN:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:281:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(281, 4);
				NODES181=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1640); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES181);

				DebugLocation(281, 10);
				EQUALS182=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1642); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS182);

				DebugLocation(281, 17);
				STRING_LITERAL183=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1644); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL183);



				{
				// AST REWRITE
				// elements: STRING_LITERAL, NODES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(281, 35);
					// Scrape.g:281:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(281, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES181));
					DebugLocation(281, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:282:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(282, 4);
				PushFollow(Follow._selectArg_in_boolTerm1660);
				selectArg184=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg184.Tree);
				DebugLocation(282, 14);
				// Scrape.g:282:14: ( boolOperator ^ selectArg )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==EQUALS||(LA45_1>=GREATERTHAN && LA45_1<=GREATERTHANEQUAL)||(LA45_1>=LESSTHAN && LA45_1<=LESSTHANEQUAL)||LA45_1==NOTEQUAL))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:282:15: boolOperator ^ selectArg
					{
					DebugLocation(282, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1663);
					boolOperator185=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator185.Tree, root_0);
					DebugLocation(282, 29);
					PushFollow(Follow._selectArg_in_boolTerm1666);
					selectArg186=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg186.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:283:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(283, 13);
				OPENPAREN187=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1674); if (state.failed) return retval;
				DebugLocation(283, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1677);
				boolExpression188=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression188.Tree);
				DebugLocation(283, 40);
				CLOSEPAREN189=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1679); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 44);
			LeaveRule("boolTerm", 44);
			LeaveRule_boolTerm();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:286:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 45);
		TraceIn("boolOperator", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set190 = default(CommonToken);

		CommonTree set190_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(286, 1);
		try
		{
			// Scrape.g:287:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(287, 2);

			set190=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set190));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 45);
			LeaveRule("boolOperator", 45);
			LeaveRule_boolOperator();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:295:1: selectArg : ( pickStatement | literal | selectVariable );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 46);
		TraceIn("selectArg", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(295, 1);
		try
		{
			// Scrape.g:296:2: ( pickStatement | literal | selectVariable )
			int alt47=3;
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt47 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt47 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt47 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:296:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(296, 4);
				PushFollow(Follow._pickStatement_in_selectArg1727);
				pickStatement191=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement191.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:297:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(297, 4);
				PushFollow(Follow._literal_in_selectArg1732);
				literal192=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal192.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:298:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._selectVariable_in_selectArg1737);
				selectVariable193=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable193.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 46);
			LeaveRule("selectArg", 46);
			LeaveRule_selectArg();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:301:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 47);
		TraceIn("selectVariable", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID194 = default(CommonToken);
		CommonToken COMMAND_VAR195 = default(CommonToken);
		CommonToken IDENTITY_VAR196 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID194_tree = default(CommonTree);
		CommonTree COMMAND_VAR195_tree = default(CommonTree);
		CommonTree IDENTITY_VAR196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(301, 1);
		try
		{
			// Scrape.g:302:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt48=4;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA48_2 = input.LA(2);

				if ((LA48_2==DOT))
				{
					alt48 = 4;
				}
				else if ((LA48_2==EOF||LA48_2==AND||(LA48_2>=CLOSEBRACE && LA48_2<=COMMAND_VAR)||LA48_2==CREATE||(LA48_2>=EACH && LA48_2<=EXEC)||(LA48_2>=FROM && LA48_2<=GREATERTHANEQUAL)||LA48_2==ID||LA48_2==IDENTITY_VAR||(LA48_2>=INNER_JOIN && LA48_2<=INSERT_INTO)||LA48_2==INSERT_OVERWRITE||(LA48_2>=JOIN && LA48_2<=LESSTHANEQUAL)||LA48_2==NOTEQUAL||LA48_2==OR||LA48_2==PLUS||LA48_2==SELECT||LA48_2==THEN||(LA48_2>=TRUNCATE && LA48_2<=VAR)||LA48_2==WHEN||LA48_2==WHERE))
				{
					alt48 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt48 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt48 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:302:4: ID
				{
				DebugLocation(302, 4);
				ID194=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable1748); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID194);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(302, 10);
					// Scrape.g:302:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID194), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:303:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(303, 4);
				COMMAND_VAR195=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable1760); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR195_tree = (CommonTree)adaptor.Create(COMMAND_VAR195);
				adaptor.AddChild(root_0, COMMAND_VAR195_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:304:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(304, 4);
				IDENTITY_VAR196=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable1765); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR196_tree = (CommonTree)adaptor.Create(IDENTITY_VAR196);
				adaptor.AddChild(root_0, IDENTITY_VAR196_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:305:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(305, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable1770);
				tableMemberReference197=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference197.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 47);
			LeaveRule("selectVariable", 47);
			LeaveRule_selectVariable();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:308:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 48);
		TraceIn("pickStatement", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK198 = default(CommonToken);
		CommonToken STRING_LITERAL199 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK198_tree = default(CommonTree);
		CommonTree STRING_LITERAL199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(308, 1);
		try
		{
			// Scrape.g:309:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:309:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(309, 4);
			PICK198=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1782); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK198);

			DebugLocation(309, 9);
			STRING_LITERAL199=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1784); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL199);

			DebugLocation(309, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1786);
			takeStatement200=takeStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_takeStatement.Add(takeStatement200.Tree);
			DebugLocation(309, 38);
			// Scrape.g:309:38: ( matchStatement )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==MATCH))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:309:38: matchStatement
				{
				DebugLocation(309, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1788);
				matchStatement201=matchStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_matchStatement.Add(matchStatement201.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: matchStatement, STRING_LITERAL, takeStatement, PICK
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 309:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(309, 57);
				// Scrape.g:309:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(309, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(309, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(309, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(309, 93);
				// Scrape.g:309:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(309, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 48);
			LeaveRule("pickStatement", 48);
			LeaveRule_pickStatement();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:312:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 49);
		TraceIn("takeStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE202 = default(CommonToken);
		CommonToken ATTRIBUTE203 = default(CommonToken);
		CommonToken STRING_LITERAL204 = default(CommonToken);
		CommonToken TAKE205 = default(CommonToken);
		CommonToken TEXT206 = default(CommonToken);
		CommonToken TAKE207 = default(CommonToken);
		CommonToken HTML208 = default(CommonToken);

		CommonTree TAKE202_tree = default(CommonTree);
		CommonTree ATTRIBUTE203_tree = default(CommonTree);
		CommonTree STRING_LITERAL204_tree = default(CommonTree);
		CommonTree TAKE205_tree = default(CommonTree);
		CommonTree TEXT206_tree = default(CommonTree);
		CommonTree TAKE207_tree = default(CommonTree);
		CommonTree HTML208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(312, 1);
		try
		{
			// Scrape.g:313:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt50 = 1;
					}
					break;
				case TEXT:
					{
					alt50 = 2;
					}
					break;
				case HTML:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:313:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(313, 4);
				TAKE202=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1814); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE202);

				DebugLocation(313, 9);
				ATTRIBUTE203=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1816); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE203);

				DebugLocation(313, 19);
				STRING_LITERAL204=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1818); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL204);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 313:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(313, 37);
					// Scrape.g:313:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(313, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(313, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:314:4: TAKE TEXT
				{
				DebugLocation(314, 4);
				TAKE205=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1831); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE205);

				DebugLocation(314, 9);
				TEXT206=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1833); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT206);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(314, 17);
					// Scrape.g:314:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:315:4: TAKE HTML
				{
				DebugLocation(315, 4);
				TAKE207=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE207);

				DebugLocation(315, 9);
				HTML208=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1846); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML208);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:14: -> ^( TAKE_HTML )
				{
					DebugLocation(315, 17);
					// Scrape.g:315:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 49);
			LeaveRule("takeStatement", 49);
			LeaveRule_takeStatement();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:318:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 50);
		TraceIn("matchStatement", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH209 = default(CommonToken);
		CommonToken STRING_LITERAL210 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement211 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH209_tree = default(CommonTree);
		CommonTree STRING_LITERAL210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(318, 1);
		try
		{
			// Scrape.g:319:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:319:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(319, 4);
			MATCH209=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1864); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH209);

			DebugLocation(319, 10);
			STRING_LITERAL210=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1866); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL210);

			DebugLocation(319, 25);
			// Scrape.g:319:25: ( replaceStatement )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==REPLACE))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:319:25: replaceStatement
				{
				DebugLocation(319, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1868);
				replaceStatement211=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement211.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: MATCH, replaceStatement, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(319, 46);
				// Scrape.g:319:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(319, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(319, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(319, 69);
				// Scrape.g:319:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(319, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 50);
			LeaveRule("matchStatement", 50);
			LeaveRule_matchStatement();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:322:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 51);
		TraceIn("replaceStatement", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE212 = default(CommonToken);
		CommonToken STRING_LITERAL213 = default(CommonToken);

		CommonTree REPLACE212_tree = default(CommonTree);
		CommonTree STRING_LITERAL213_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(322, 1);
		try
		{
			// Scrape.g:323:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:323:4: REPLACE STRING_LITERAL
			{
			DebugLocation(323, 4);
			REPLACE212=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1891); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE212);

			DebugLocation(323, 12);
			STRING_LITERAL213=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1893); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL213);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(323, 30);
				// Scrape.g:323:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(323, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 51);
			LeaveRule("replaceStatement", 51);
			LeaveRule_replaceStatement();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:327:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 52);
		TraceIn("createTableStatement", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE214 = default(CommonToken);
		CommonToken FILE215 = default(CommonToken);
		CommonToken ID216 = default(CommonToken);
		CommonToken OPENPAREN217 = default(CommonToken);
		CommonToken CLOSEPAREN219 = default(CommonToken);
		CommonToken CREATE222 = default(CommonToken);
		CommonToken BUFFER223 = default(CommonToken);
		CommonToken ID224 = default(CommonToken);
		CommonToken OPENPAREN225 = default(CommonToken);
		CommonToken CLOSEPAREN227 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs218 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement220 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation221 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs226 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE214_tree = default(CommonTree);
		CommonTree FILE215_tree = default(CommonTree);
		CommonTree ID216_tree = default(CommonTree);
		CommonTree OPENPAREN217_tree = default(CommonTree);
		CommonTree CLOSEPAREN219_tree = default(CommonTree);
		CommonTree CREATE222_tree = default(CommonTree);
		CommonTree BUFFER223_tree = default(CommonTree);
		CommonTree ID224_tree = default(CommonTree);
		CommonTree OPENPAREN225_tree = default(CommonTree);
		CommonTree CLOSEPAREN227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(327, 1);
		try
		{
			// Scrape.g:328:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==CREATE))
			{
				int LA55_2 = input.LA(2);

				if ((LA55_2==FILE))
				{
					alt55 = 1;
				}
				else if ((LA55_2==BUFFER))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:328:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(328, 4);
				CREATE214=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE214);

				DebugLocation(328, 11);
				FILE215=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1916); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE215);

				DebugLocation(328, 16);
				ID216=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1918); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID216);

				DebugLocation(328, 19);
				OPENPAREN217=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1920); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN217);

				DebugLocation(328, 29);
				// Scrape.g:328:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(52);
				while (true)
				{
					int alt52=2;
					try { DebugEnterDecision(52, false);
					int LA52_1 = input.LA(1);

					if ((LA52_1==ID))
					{
						alt52 = 1;
					}


					} finally { DebugExitDecision(52); }
					switch ( alt52 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:328:29: tableColumnArgs
						{
						DebugLocation(328, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1922);
						tableColumnArgs218=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs218.Tree);

						}
						break;

					default:
						goto loop52;
					}
				}

				loop52:
					;

				} finally { DebugExitSubRule(52); }

				DebugLocation(328, 46);
				CLOSEPAREN219=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1925); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN219);

				DebugLocation(328, 57);
				// Scrape.g:328:57: ( fileTableWithStatement )?
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_1 = input.LA(1);

				if ((LA53_1==WITH))
				{
					alt53 = 1;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:328:57: fileTableWithStatement
					{
					DebugLocation(328, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1927);
					fileTableWithStatement220=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement220.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(53); }

				DebugLocation(328, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1930);
				fileTableLocation221=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation221.Tree);


				{
				// AST REWRITE
				// elements: ID, fileTableWithStatement, tableColumnArgs, fileTableLocation
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(328, 102);
					// Scrape.g:328:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(328, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(328, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(328, 118);
					// Scrape.g:328:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(328, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(328, 135);
					// Scrape.g:328:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(328, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(328, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:329:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(329, 4);
				CREATE222=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1951); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE222);

				DebugLocation(329, 11);
				BUFFER223=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1953); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER223);

				DebugLocation(329, 18);
				ID224=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1955); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID224);

				DebugLocation(329, 21);
				OPENPAREN225=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1957); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN225);

				DebugLocation(329, 31);
				// Scrape.g:329:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(54);
				while (true)
				{
					int alt54=2;
					try { DebugEnterDecision(54, false);
					int LA54_1 = input.LA(1);

					if ((LA54_1==ID))
					{
						alt54 = 1;
					}


					} finally { DebugExitDecision(54); }
					switch ( alt54 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:329:31: tableColumnArgs
						{
						DebugLocation(329, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1959);
						tableColumnArgs226=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs226.Tree);

						}
						break;

					default:
						goto loop54;
					}
				}

				loop54:
					;

				} finally { DebugExitSubRule(54); }

				DebugLocation(329, 48);
				CLOSEPAREN227=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1962); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN227);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(329, 62);
					// Scrape.g:329:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(329, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(329, 80);
					// Scrape.g:329:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(329, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 52);
			LeaveRule("createTableStatement", 52);
			LeaveRule_createTableStatement();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:332:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 53);
		TraceIn("fileTableLocation", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION228 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression229 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(332, 1);
		try
		{
			// Scrape.g:333:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:333:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(333, 12);
			LOCATION228=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1984); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION228_tree = (CommonTree)adaptor.Create(LOCATION228);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION228_tree, root_0);
			}
			DebugLocation(333, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation1987);
			mathExpression229=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression229.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 53);
			LeaveRule("fileTableLocation", 53);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:336:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 54);
		TraceIn("fileTableWithStatement", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH230 = default(CommonToken);
		CommonToken OPENPAREN231 = default(CommonToken);
		CommonToken CLOSEPAREN233 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement232 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH230_tree = default(CommonTree);
		CommonTree OPENPAREN231_tree = default(CommonTree);
		CommonTree CLOSEPAREN233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(336, 1);
		try
		{
			// Scrape.g:337:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:337:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(337, 4);
			WITH230=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1999); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH230);

			DebugLocation(337, 9);
			OPENPAREN231=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2001); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN231);

			DebugLocation(337, 19);
			// Scrape.g:337:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==FIELD_TERMINATOR||LA56_1==ROW_TERMINATOR))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:337:19: fileTableWithVariablesStatement
					{
					DebugLocation(337, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2003);
					fileTableWithVariablesStatement232=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement232.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(337, 52);
			CLOSEPAREN233=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2006); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN233);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(337, 66);
				// Scrape.g:337:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(337, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(337, 73);
				// Scrape.g:337:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(337, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 54);
			LeaveRule("fileTableWithStatement", 54);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:340:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 55);
		TraceIn("fileTableWithVariablesStatement", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA235 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement234 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement236 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(340, 1);
		try
		{
			// Scrape.g:341:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:341:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(341, 4);
			// Scrape.g:341:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==FIELD_TERMINATOR||LA57_1==ROW_TERMINATOR))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==EQUALS))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==STRING_LITERAL))
						{
							int LA57_4 = input.LA(4);

							if ((LA57_4==COMMA))
							{
								alt57 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:341:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(341, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2029);
					fileTableWithVariableStatement234=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement234.Tree);
					DebugLocation(341, 36);
					COMMA235=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2031); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA235);


					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }

			DebugLocation(341, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2035);
			fileTableWithVariableStatement236=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement236.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(341, 78);
				// Scrape.g:341:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(341, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 55);
			LeaveRule("fileTableWithVariablesStatement", 55);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:344:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 56);
		TraceIn("fileTableWithVariableStatement", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set237 = default(CommonToken);
		CommonToken EQUALS238 = default(CommonToken);
		CommonToken STRING_LITERAL239 = default(CommonToken);

		CommonTree set237_tree = default(CommonTree);
		CommonTree EQUALS238_tree = default(CommonTree);
		CommonTree STRING_LITERAL239_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(344, 1);
		try
		{
			// Scrape.g:345:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:345:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(345, 39);

			set237=(CommonToken)input.LT(1);
			set237=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set237), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(345, 47);
			EQUALS238=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2060); if (state.failed) return retval;
			DebugLocation(345, 49);
			STRING_LITERAL239=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2063); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL239_tree = (CommonTree)adaptor.Create(STRING_LITERAL239);
			adaptor.AddChild(root_0, STRING_LITERAL239_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 56);
			LeaveRule("fileTableWithVariableStatement", 56);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:348:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 57);
		TraceIn("tableColumnArgs", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA241 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg240 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg242 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(348, 1);
		try
		{
			// Scrape.g:349:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:349:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(349, 4);
			// Scrape.g:349:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==ID))
				{
					int LA58_2 = input.LA(2);

					if ((LA58_2==FLOAT||LA58_2==IDENTITY||LA58_2==INTEGER||LA58_2==STRING))
					{
						int LA58_3 = input.LA(3);

						if ((LA58_3==COMMA))
						{
							alt58 = 1;
						}


					}


				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:349:5: tableColumnArg COMMA
					{
					DebugLocation(349, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2075);
					tableColumnArg240=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg240.Tree);
					DebugLocation(349, 20);
					COMMA241=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2077); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA241);


					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(349, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2081);
			tableColumnArg242=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg242.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(349, 46);
				// Scrape.g:349:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(349, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(349, 66);
				// Scrape.g:349:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(349, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 57);
			LeaveRule("tableColumnArgs", 57);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:352:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 58);
		TraceIn("tableColumnArg", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID243 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType244 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(352, 1);
		try
		{
			// Scrape.g:353:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:353:4: ID dataType
			{
			DebugLocation(353, 4);
			ID243=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2102); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID243);

			DebugLocation(353, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2104);
			dataType244=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType244.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 353:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(353, 19);
				// Scrape.g:353:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(353, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(353, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(353, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 58);
			LeaveRule("tableColumnArg", 58);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:356:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 59);
		TraceIn("dataType", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set245 = default(CommonToken);

		CommonTree set245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(356, 1);
		try
		{
			// Scrape.g:357:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(357, 2);

			set245=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set245));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 59);
			LeaveRule("dataType", 59);
			LeaveRule_dataType();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred30_Scrape_fragment();
	partial void LeaveRule_synpred30_Scrape_fragment();

	// $ANTLR start synpred30_Scrape
	private void synpred30_Scrape_fragment()
	{
		EnterRule_synpred30_Scrape_fragment();
		EnterRule("synpred30_Scrape_fragment", 89);
		TraceIn("synpred30_Scrape_fragment", 89);
		try
		{
			// Scrape.g:180:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:180:4: mathExpression
			{
			DebugLocation(180, 4);
			PushFollow(Follow._mathExpression_in_synpred30_Scrape937);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_Scrape_fragment", 89);
			LeaveRule("synpred30_Scrape_fragment", 89);
			LeaveRule_synpred30_Scrape_fragment();
		}
	}
	// $ANTLR end synpred30_Scrape

	partial void EnterRule_synpred56_Scrape_fragment();
	partial void LeaveRule_synpred56_Scrape_fragment();

	// $ANTLR start synpred56_Scrape
	private void synpred56_Scrape_fragment()
	{
		EnterRule_synpred56_Scrape_fragment();
		EnterRule("synpred56_Scrape_fragment", 115);
		TraceIn("synpred56_Scrape_fragment", 115);
		try
		{
			// Scrape.g:243:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:243:12: selectArgs COMMA
			{
			DebugLocation(243, 12);
			PushFollow(Follow._selectArgs_in_synpred56_Scrape1368);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(243, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred56_Scrape1370); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred56_Scrape_fragment", 115);
			LeaveRule("synpred56_Scrape_fragment", 115);
			LeaveRule_synpred56_Scrape_fragment();
		}
	}
	// $ANTLR end synpred56_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program227 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program242 = new BitSet(new ulong[]{0x2CA0044140000UL,0x18000080000UL});
		public static readonly BitSet _noBraceBlock_in_program244 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition280 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition282 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition284 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition286 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition289 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_procedureDefinition291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable365 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_truncateTable367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall389 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_procedureCall391 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall393 = new BitSet(new ulong[]{0x40A0000050000UL,0x2000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall395 = new BitSet(new ulong[]{0x40A0000050000UL,0x2000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList421 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList423 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement459 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement461 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement463 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement465 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList489 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList491 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest515 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _TEST_in_proxyTest517 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest519 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest521 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement538 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement540 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement544 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _IN_in_eachStatement546 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_eachStatement550 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement552 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _block_in_eachStatement554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock579 = new BitSet(new ulong[]{0x2CA0044140002UL,0x18000080000UL});
		public static readonly BitSet _OPENBRACE_in_block600 = new BitSet(new ulong[]{0x2CA0044148000UL,0x18000080000UL});
		public static readonly BitSet _statement_in_block602 = new BitSet(new ulong[]{0x2CA0044148000UL,0x18000080000UL});
		public static readonly BitSet _CLOSEBRACE_in_block605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression625 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression627 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression629 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _TO_in_expandExpression631 = new BitSet(new ulong[]{0x40A0000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression633 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression635 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _expandBlock_in_expandExpression637 = new BitSet(new ulong[]{0x2UL,0x8UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock662 = new BitSet(new ulong[]{0x40A0000048000UL,0x4000002000012UL});
		public static readonly BitSet _mathExpression_in_expandBlock664 = new BitSet(new ulong[]{0x40A0000048000UL,0x4000002000012UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion715 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadPageExpresssion723 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion725 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadPageExpresssion727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion733 = new BitSet(new ulong[]{0xA0000040000UL});
		public static readonly BitSet _variableReference_in_downloadPageExpresssion735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression754 = new BitSet(new ulong[]{0x0UL,0x2000010UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadImageExpression762 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression764 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadImageExpression766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression772 = new BitSet(new ulong[]{0xA0000040000UL});
		public static readonly BitSet _variableReference_in_downloadImageExpression774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference828 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _DOT_in_tableMemberReference830 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement858 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement860 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement862 = new BitSet(new ulong[]{0x40A0083040000UL,0x4000002080012UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement879 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement892 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement894 = new BitSet(new ulong[]{0x40A0083040000UL,0x4000002080012UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_nullOperator917 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator919 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000002UL});
		public static readonly BitSet _variableReference_in_nullOperator923 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression978 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _set_in_mathExpression981 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000002000012UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression992 = new BitSet(new ulong[]{0x2000000000000002UL,0x100UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1010 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _set_in_mathExpressionGroup1013 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000002000012UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1024 = new BitSet(new ulong[]{0x400042UL});
		public static readonly BitSet _variableReference_in_atom1045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_atom1051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1072 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000002000012UL});
		public static readonly BitSet _mathExpression_in_atom1075 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1119 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1121 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1123 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1138 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000002000012UL});
		public static readonly BitSet _mathExpression_in_insertStatement1140 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1156 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_insertStatement1158 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1184 = new BitSet(new ulong[]{0x2000000002UL,0x800000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1186 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1216 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_whereStatement1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1238 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_fromStatement1242 = new BitSet(new ulong[]{0x10220000000002UL});
		public static readonly BitSet _ID_in_fromStatement1246 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1276 = new BitSet(new ulong[]{0x83000000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_fromStatement1288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1300 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1304 = new BitSet(new ulong[]{0x20000000000UL,0x8000000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1308 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_innerJoinStatement1311 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1313 = new BitSet(new ulong[]{0x10200000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1365 = new BitSet(new ulong[]{0x40A0000040800UL,0x2000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1368 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1370 = new BitSet(new ulong[]{0x40A0000040800UL,0x2000082UL});
		public static readonly BitSet _selectArgs_in_selectStatement1374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1388 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1416 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _PLUS_in_selectArgs1418 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_selectArgs1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1458 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1460 = new BitSet(new ulong[]{0x18000000UL,0x100000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1464 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1466 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1487 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_caseStatement1489 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1491 = new BitSet(new ulong[]{0x18000000UL,0x100000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1495 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_caseStatement1497 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _END_in_caseStatement1501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1545 = new BitSet(new ulong[]{0x4000000000000UL,0x2000002UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1547 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1549 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1572 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1574 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1576 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1599 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _OR_in_boolExpression1602 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _andExpression_in_boolExpression1605 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _boolTerm_in_andExpression1619 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1622 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolTerm_in_andExpression1625 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1640 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1642 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1660 = new BitSet(new ulong[]{0x6000C020000002UL,0x1UL});
		public static readonly BitSet _boolOperator_in_boolTerm1663 = new BitSet(new ulong[]{0x40A0000040000UL,0x2000082UL});
		public static readonly BitSet _selectArg_in_boolTerm1666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1674 = new BitSet(new ulong[]{0x80040A0000040000UL,0x2000092UL});
		public static readonly BitSet _boolExpression_in_boolTerm1677 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg1737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable1760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable1770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1782 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1784 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1786 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1814 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1816 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1831 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1844 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1864 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1866 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1891 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1914 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1916 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1918 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1920 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1922 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1925 = new BitSet(new ulong[]{0x400000000000000UL,0x1000000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1927 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1951 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1953 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1955 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1957 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1959 = new BitSet(new ulong[]{0x20000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1984 = new BitSet(new ulong[]{0x40A0000040000UL,0x4000002000012UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation1987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1999 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2001 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2003 = new BitSet(new ulong[]{0x200010000UL,0x40000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2029 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2031 = new BitSet(new ulong[]{0x200000000UL,0x40000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2051 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2060 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2075 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2077 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2102 = new BitSet(new ulong[]{0x8041000000000UL,0x1000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred30_Scrape937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred56_Scrape1368 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred56_Scrape1370 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
