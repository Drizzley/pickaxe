//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2015-12-17 17:41:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NOTEQUAL", "NULL", "OPENBRACE", "OPENPAREN", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "TRUNCATE", "VARIABLE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'"
	};
	public const int EOF=-1;
	public const int T__104=104;
	public const int APOSTRAPHE=4;
	public const int ASTERISK=5;
	public const int ATTRIBUTE=6;
	public const int BLOCK=7;
	public const int BUFFER=8;
	public const int BUFFER_TABLE=9;
	public const int CASE=10;
	public const int CASE_BOOL=11;
	public const int CASE_EXPRESSION=12;
	public const int CASE_VAR=13;
	public const int CLOSEBRACE=14;
	public const int CLOSEPAREN=15;
	public const int COMMA=16;
	public const int COMMENT=17;
	public const int CREATE=18;
	public const int DIGIT=19;
	public const int DIV=20;
	public const int DOT=21;
	public const int DOWNLOAD_IMAGE=22;
	public const int DOWNLOAD_PAGE=23;
	public const int EACH=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQUALS=27;
	public const int EXEC=28;
	public const int EXPAND=29;
	public const int EXPAND_INTERATION_VARIABLE=30;
	public const int FIELD_TERMINATOR=31;
	public const int FILE=32;
	public const int FILE_TABLE=33;
	public const int FLOAT=34;
	public const int FROM=35;
	public const int GREATERTHAN=36;
	public const int GREATERTHANEQUAL=37;
	public const int HTML=38;
	public const int ID=39;
	public const int IDENTITY=40;
	public const int IN=41;
	public const int INSERT_DIRECTORY=42;
	public const int INSERT_INTO=43;
	public const int INSERT_INTO_DIRECTORY=44;
	public const int INSERT_OVERWRITE=45;
	public const int INT=46;
	public const int INTEGER=47;
	public const int LESSTHAN=48;
	public const int LESSTHANEQUAL=49;
	public const int LETTER=50;
	public const int LINE_COMMENT_DASH=51;
	public const int LINE_COMMENT_SLASH=52;
	public const int LOCATION=53;
	public const int MATCH=54;
	public const int MEMBER_REFERENCE=55;
	public const int MINIS=56;
	public const int NEWLINE=57;
	public const int NOTEQUAL=58;
	public const int NULL=59;
	public const int OPENBRACE=60;
	public const int OPENPAREN=61;
	public const int OTHERCHARS=62;
	public const int PICK=63;
	public const int PLUS=64;
	public const int POST_PICK=65;
	public const int PRE_PICK=66;
	public const int PROCEDURE=67;
	public const int PROGRAM=68;
	public const int PROXIES=69;
	public const int PROXY_LIST=70;
	public const int QUOTE=71;
	public const int REPLACE=72;
	public const int ROW_REFERENCE=73;
	public const int ROW_TERMINATOR=74;
	public const int SELECT=75;
	public const int SELECT_ALL=76;
	public const int SELECT_ARG=77;
	public const int SELECT_ID=78;
	public const int SELECT_STATEMENT=79;
	public const int STRING=80;
	public const int STRING_LITERAL=81;
	public const int TABLE_COLUMN_ARG=82;
	public const int TABLE_COLUMN_ARGS=83;
	public const int TABLE_MEMBER_REFERENCE=84;
	public const int TABLE_VARIABLE_REFERENCE=85;
	public const int TAKE=86;
	public const int TAKE_ATTRIBUTE=87;
	public const int TAKE_HTML=88;
	public const int TAKE_TEXT=89;
	public const int TEST=90;
	public const int TEXT=91;
	public const int THEN=92;
	public const int TO=93;
	public const int TRUNCATE=94;
	public const int VARIABLE=95;
	public const int VARIABLE_DECLARATION=96;
	public const int VARIABLE_REFERENCE=97;
	public const int WHEN=98;
	public const int WHEN_BOOL_STATEMENT=99;
	public const int WHEN_LITERAL_STATEMENT=100;
	public const int WHERE=101;
	public const int WITH=102;
	public const int WS=103;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:61:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(61, 1);
		try
		{
			// Scrape.g:62:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:62:4: noBraceBlock EOF
				{
				DebugLocation(62, 4);
				PushFollow(Follow._noBraceBlock_in_program207);
				noBraceBlock1=noBraceBlock();
				PopFollow();

				stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(62, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program209);  
				stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 62:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(62, 24);
					// Scrape.g:62:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(62, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(62, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:63:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(63, 4);
				PushFollow(Follow._proxyStatement_in_program222);
				proxyStatement3=proxyStatement();
				PopFollow();

				stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(63, 19);
				PushFollow(Follow._noBraceBlock_in_program224);
				noBraceBlock4=noBraceBlock();
				PopFollow();

				stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(63, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program226);  
				stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: noBraceBlock, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 63:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(63, 39);
					// Scrape.g:63:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(63, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(63, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(63, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:64:4: procedureDefinition
				{
				DebugLocation(64, 4);
				PushFollow(Follow._procedureDefinition_in_program241);
				procedureDefinition6=procedureDefinition();
				PopFollow();

				stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 64:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(64, 27);
					// Scrape.g:64:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(64, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(64, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:67:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(67, 1);
		try
		{
			// Scrape.g:68:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:68:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(68, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition260);  
			stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(68, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition262);  
			stream_ID.Add(ID8);

			DebugLocation(68, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition264);  
			stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(68, 27);
			// Scrape.g:68:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:68:27: tableColumnArgs
					{
					DebugLocation(68, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition266);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();

					stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(68, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition269);  
			stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(68, 55);
			PushFollow(Follow._block_in_procedureDefinition271);
			block12=block();
			PopFollow();

			stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArgs, PROCEDURE, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 68:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(68, 64);
				// Scrape.g:68:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(68, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(68, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(68, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(68, 85);
				// Scrape.g:68:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(68, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:71:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(71, 1);
		try
		{
			// Scrape.g:72:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement | procedureCall | truncateTable )
			int alt3=7;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case ID:
				{
				alt3 = 3;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 4;
				}
				break;
			case EACH:
				{
				alt3 = 5;
				}
				break;
			case EXEC:
				{
				alt3 = 6;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:72:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(72, 4);
				PushFollow(Follow._createTableStatement_in_statement299);
				createTableStatement13=createTableStatement();
				PopFollow();

				adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:73:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(73, 4);
				PushFollow(Follow._sqlStatement_in_statement304);
				sqlStatement14=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:74:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(74, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement309);
				variableDeclarationStatement15=variableDeclarationStatement();
				PopFollow();

				adaptor.AddChild(root_0, variableDeclarationStatement15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:75:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(75, 4);
				PushFollow(Follow._insertStatement_in_statement314);
				insertStatement16=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:76:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._eachStatement_in_statement319);
				eachStatement17=eachStatement();
				PopFollow();

				adaptor.AddChild(root_0, eachStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:77:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._procedureCall_in_statement324);
				procedureCall18=procedureCall();
				PopFollow();

				adaptor.AddChild(root_0, procedureCall18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:78:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._truncateTable_in_statement329);
				truncateTable19=truncateTable();
				PopFollow();

				adaptor.AddChild(root_0, truncateTable19.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:81:1: truncateTable : TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE20 = default(CommonToken);
		CommonToken ID21 = default(CommonToken);

		CommonTree TRUNCATE20_tree = default(CommonTree);
		CommonTree ID21_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(81, 1);
		try
		{
			// Scrape.g:82:2: ( TRUNCATE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:82:4: TRUNCATE ID
			{
			DebugLocation(82, 4);
			TRUNCATE20=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable340);  
			stream_TRUNCATE.Add(TRUNCATE20);

			DebugLocation(82, 13);
			ID21=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable342);  
			stream_ID.Add(ID21);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 82:16: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(82, 19);
				// Scrape.g:82:19: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(82, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(82, 30);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID21));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:86:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC22 = default(CommonToken);
		CommonToken ID23 = default(CommonToken);
		CommonToken OPENPAREN24 = default(CommonToken);
		CommonToken CLOSEPAREN26 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC22_tree = default(CommonTree);
		CommonTree ID23_tree = default(CommonTree);
		CommonTree OPENPAREN24_tree = default(CommonTree);
		CommonTree CLOSEPAREN26_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(86, 1);
		try
		{
			// Scrape.g:87:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:87:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(87, 5);
			EXEC22=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall364);  
			stream_EXEC.Add(EXEC22);

			DebugLocation(87, 10);
			ID23=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall366);  
			stream_ID.Add(ID23);

			DebugLocation(87, 13);
			OPENPAREN24=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall368);  
			stream_OPENPAREN.Add(OPENPAREN24);

			DebugLocation(87, 23);
			// Scrape.g:87:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ID||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:87:23: procedureCallList
					{
					DebugLocation(87, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall370);
					procedureCallList25=procedureCallList();
					PopFollow();

					stream_procedureCallList.Add(procedureCallList25.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(87, 42);
			CLOSEPAREN26=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall373);  
			stream_CLOSEPAREN.Add(CLOSEPAREN26);



			{
			// AST REWRITE
			// elements: ID, EXEC, procedureCallList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 87:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(87, 56);
				// Scrape.g:87:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(87, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(87, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(87, 66);
				// Scrape.g:87:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(87, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:90:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA28 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(90, 1);
		try
		{
			// Scrape.g:91:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:91:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(91, 4);
			// Scrape.g:91:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:91:5: callArgs COMMA
					{
					DebugLocation(91, 5);
					PushFollow(Follow._callArgs_in_procedureCallList396);
					callArgs27=callArgs();
					PopFollow();

					stream_callArgs.Add(callArgs27.Tree);
					DebugLocation(91, 14);
					COMMA28=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList398);  
					stream_COMMA.Add(COMMA28);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(91, 22);
			PushFollow(Follow._callArgs_in_procedureCallList402);
			callArgs29=callArgs();
			PopFollow();

			stream_callArgs.Add(callArgs29.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 91:31: -> ( callArgs )*
			{
				DebugLocation(91, 34);
				// Scrape.g:91:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(91, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:94:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL31_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(94, 1);
		try
		{
			// Scrape.g:95:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==ID||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:95:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(95, 4);
				PushFollow(Follow._expandVar_in_callArgs418);
				expandVar30=expandVar();
				PopFollow();

				adaptor.AddChild(root_0, expandVar30.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:96:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(96, 4);
				STRING_LITERAL31=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs423); 
				STRING_LITERAL31_tree = (CommonTree)adaptor.Create(STRING_LITERAL31);
				adaptor.AddChild(root_0, STRING_LITERAL31_tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:99:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES32 = default(CommonToken);
		CommonToken OPENPAREN33 = default(CommonToken);
		CommonToken CLOSEPAREN35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES32_tree = default(CommonTree);
		CommonTree OPENPAREN33_tree = default(CommonTree);
		CommonTree CLOSEPAREN35_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(99, 1);
		try
		{
			// Scrape.g:100:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:100:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(100, 4);
			PROXIES32=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement434);  
			stream_PROXIES.Add(PROXIES32);

			DebugLocation(100, 12);
			OPENPAREN33=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement436);  
			stream_OPENPAREN.Add(OPENPAREN33);

			DebugLocation(100, 22);
			PushFollow(Follow._proxyList_in_proxyStatement438);
			proxyList34=proxyList();
			PopFollow();

			stream_proxyList.Add(proxyList34.Tree);
			DebugLocation(100, 32);
			CLOSEPAREN35=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement440);  
			stream_CLOSEPAREN.Add(CLOSEPAREN35);

			DebugLocation(100, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement442);
			proxyTest36=proxyTest();
			PopFollow();

			stream_proxyTest.Add(proxyTest36.Tree);


			{
			// AST REWRITE
			// elements: proxyList, PROXIES, proxyTest
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 100:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(100, 56);
				// Scrape.g:100:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(100, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(100, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(100, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(101, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:103:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL37 = default(CommonToken);
		CommonToken COMMA38 = default(CommonToken);
		CommonToken STRING_LITERAL39 = default(CommonToken);

		CommonTree STRING_LITERAL37_tree = default(CommonTree);
		CommonTree COMMA38_tree = default(CommonTree);
		CommonTree STRING_LITERAL39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(103, 1);
		try
		{
			// Scrape.g:104:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:104:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(104, 4);
			// Scrape.g:104:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:104:5: STRING_LITERAL COMMA
					{
					DebugLocation(104, 5);
					STRING_LITERAL37=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList464);  
					stream_STRING_LITERAL.Add(STRING_LITERAL37);

					DebugLocation(104, 20);
					COMMA38=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList466);  
					stream_COMMA.Add(COMMA38);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(104, 28);
			STRING_LITERAL39=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList470);  
			stream_STRING_LITERAL.Add(STRING_LITERAL39);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 104:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(104, 46);
				// Scrape.g:104:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(104, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(104, 59);
				// Scrape.g:104:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(104, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(105, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:107:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH40 = default(CommonToken);
		CommonToken TEST41 = default(CommonToken);
		CommonToken OPENBRACE42 = default(CommonToken);
		CommonToken CLOSEBRACE44 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH40_tree = default(CommonTree);
		CommonTree TEST41_tree = default(CommonTree);
		CommonTree OPENBRACE42_tree = default(CommonTree);
		CommonTree CLOSEBRACE44_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(107, 1);
		try
		{
			// Scrape.g:108:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:108:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(108, 4);
			WITH40=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest490);  
			stream_WITH.Add(WITH40);

			DebugLocation(108, 9);
			TEST41=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest492);  
			stream_TEST.Add(TEST41);

			DebugLocation(108, 14);
			OPENBRACE42=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest494);  
			stream_OPENBRACE.Add(OPENBRACE42);

			DebugLocation(108, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest496);
			sqlStatement43=sqlStatement();
			PopFollow();

			stream_sqlStatement.Add(sqlStatement43.Tree);
			DebugLocation(108, 37);
			CLOSEBRACE44=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest498);  
			stream_CLOSEBRACE.Add(CLOSEBRACE44);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 108:48: -> sqlStatement
			{
				DebugLocation(108, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(109, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:111:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 11);
		TraceIn("eachStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH45 = default(CommonToken);
		CommonToken OPENPAREN46 = default(CommonToken);
		CommonToken IN47 = default(CommonToken);
		CommonToken CLOSEPAREN48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH45_tree = default(CommonTree);
		CommonTree OPENPAREN46_tree = default(CommonTree);
		CommonTree IN47_tree = default(CommonTree);
		CommonTree CLOSEPAREN48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(111, 1);
		try
		{
			// Scrape.g:112:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:112:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(112, 4);
			EACH45=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement513);  
			stream_EACH.Add(EACH45);

			DebugLocation(112, 9);
			OPENPAREN46=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement515);  
			stream_OPENPAREN.Add(OPENPAREN46);

			DebugLocation(112, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement519);  
			stream_ID.Add(v);

			DebugLocation(112, 24);
			IN47=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement521);  
			stream_IN.Add(IN47);

			DebugLocation(112, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement525);  
			stream_ID.Add(t);

			DebugLocation(112, 32);
			CLOSEPAREN48=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement527);  
			stream_CLOSEPAREN.Add(CLOSEPAREN48);

			DebugLocation(112, 43);
			PushFollow(Follow._block_in_eachStatement529);
			block49=block();
			PopFollow();

			stream_block.Add(block49.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 112:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(112, 52);
				// Scrape.g:112:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(112, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(112, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(112, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(112, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 11);
			LeaveRule("eachStatement", 11);
			LeaveRule_eachStatement();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:115:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 12);
		TraceIn("noBraceBlock", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(115, 1);
		try
		{
			// Scrape.g:116:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:116:4: ( statement )*
			{
			DebugLocation(116, 4);
			// Scrape.g:116:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||LA8_1==TRUNCATE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:116:4: statement
					{
					DebugLocation(116, 4);
					PushFollow(Follow._statement_in_noBraceBlock554);
					statement50=statement();
					PopFollow();

					stream_statement.Add(statement50.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 116:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(116, 18);
				// Scrape.g:116:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(116, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(116, 26);
				// Scrape.g:116:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(116, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 12);
			LeaveRule("noBraceBlock", 12);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:119:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 13);
		TraceIn("block", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE51 = default(CommonToken);
		CommonToken CLOSEBRACE53 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE51_tree = default(CommonTree);
		CommonTree CLOSEBRACE53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(119, 1);
		try
		{
			// Scrape.g:120:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:120:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(120, 4);
			OPENBRACE51=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block575);  
			stream_OPENBRACE.Add(OPENBRACE51);

			DebugLocation(120, 14);
			// Scrape.g:120:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||LA9_1==TRUNCATE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:120:14: statement
					{
					DebugLocation(120, 14);
					PushFollow(Follow._statement_in_block577);
					statement52=statement();
					PopFollow();

					stream_statement.Add(statement52.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(120, 25);
			CLOSEBRACE53=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block580);  
			stream_CLOSEBRACE.Add(CLOSEBRACE53);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 120:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(120, 39);
				// Scrape.g:120:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(120, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(120, 47);
				// Scrape.g:120:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(120, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 13);
			LeaveRule("block", 13);
			LeaveRule_block();
		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:123:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 14);
		TraceIn("expandExpression", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken TO57 = default(CommonToken);
		CommonToken CLOSEPAREN59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar58 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree TO57_tree = default(CommonTree);
		CommonTree CLOSEPAREN59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(123, 1);
		try
		{
			// Scrape.g:124:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:124:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(124, 4);
			EXPAND54=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression600);  
			stream_EXPAND.Add(EXPAND54);

			DebugLocation(124, 11);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression602);  
			stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(124, 21);
			PushFollow(Follow._expandVar_in_expandExpression604);
			expandVar56=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar56.Tree);
			DebugLocation(124, 31);
			TO57=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression606);  
			stream_TO.Add(TO57);

			DebugLocation(124, 34);
			PushFollow(Follow._expandVar_in_expandExpression608);
			expandVar58=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar58.Tree);
			DebugLocation(124, 44);
			CLOSEPAREN59=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression610);  
			stream_CLOSEPAREN.Add(CLOSEPAREN59);

			DebugLocation(124, 55);
			// Scrape.g:124:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:124:55: expandBlock
					{
					DebugLocation(124, 55);
					PushFollow(Follow._expandBlock_in_expandExpression612);
					expandBlock60=expandBlock();
					PopFollow();

					stream_expandBlock.Add(expandBlock60.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandVar, EXPAND, expandBlock, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 124:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(124, 71);
				// Scrape.g:124:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(124, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(124, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(124, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(124, 100);
				// Scrape.g:124:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(124, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 14);
			LeaveRule("expandExpression", 14);
			LeaveRule_expandExpression();
		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:127:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 15);
		TraceIn("expandBlock", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(127, 1);
		try
		{
			// Scrape.g:128:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:128:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(128, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock637);  
			stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(128, 14);
			// Scrape.g:128:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==ID||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==104))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:128:14: mathExpression
					{
					DebugLocation(128, 14);
					PushFollow(Follow._mathExpression_in_expandBlock639);
					mathExpression62=mathExpression();
					PopFollow();

					stream_mathExpression.Add(mathExpression62.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(128, 30);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock642);  
			stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 128:41: -> ( mathExpression )*
			{
				DebugLocation(128, 44);
				// Scrape.g:128:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(128, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 15);
			LeaveRule("expandBlock", 15);
			LeaveRule_expandBlock();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:131:1: expandVar : ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 16);
		TraceIn("expandVar", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT64 = default(CommonToken);
		CommonToken ID66 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT64_tree = default(CommonTree);
		CommonTree ID66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(131, 1);
		try
		{
			// Scrape.g:132:2: ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==ID))
			{
				int LA12_2 = input.LA(2);

				if ((LA12_2==DOT))
				{
					alt12 = 2;
				}
				else if (((LA12_2>=CLOSEPAREN && LA12_2<=COMMA)||LA12_2==ID||LA12_2==INT||LA12_2==STRING_LITERAL||LA12_2==TO))
				{
					alt12 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:132:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(132, 4);
				INT64=(CommonToken)Match(input,INT,Follow._INT_in_expandVar658); 
				INT64_tree = (CommonTree)adaptor.Create(INT64);
				adaptor.AddChild(root_0, INT64_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:133:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(133, 4);
				PushFollow(Follow._tableMemberReference_in_expandVar663);
				tableMemberReference65=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference65.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:134:4: ID
				{
				DebugLocation(134, 4);
				ID66=(CommonToken)Match(input,ID,Follow._ID_in_expandVar668);  
				stream_ID.Add(ID66);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 134:7: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(134, 10);
					// Scrape.g:134:10: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(134, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID66), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 16);
			LeaveRule("expandVar", 16);
			LeaveRule_expandVar();
		}
		DebugLocation(135, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:137:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 17);
		TraceIn("downloadExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(137, 1);
		try
		{
			// Scrape.g:138:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:138:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression686);
				downloadPageExpresssion67=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion67.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:139:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(139, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression691);
				downloadImageExpression68=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression68.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 17);
			LeaveRule("downloadExpression", 17);
			LeaveRule_downloadExpression();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:142:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 18);
		TraceIn("downloadPageExpresssion", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE69 = default(CommonToken);
		CommonToken STRING_LITERAL70 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE72 = default(CommonToken);
		CommonToken ID73 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE69_tree = default(CommonTree);
		CommonTree STRING_LITERAL70_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE72_tree = default(CommonTree);
		CommonTree ID73_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE74_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(142, 1);
		try
		{
			// Scrape.g:143:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==DOWNLOAD_PAGE))
			{
				int LA15_2 = input.LA(2);

				if ((LA15_2==ID))
				{
					int LA15_3 = input.LA(3);

					if ((LA15_3==DOT))
					{
						alt15 = 3;
					}
					else if ((LA15_3==EOF||LA15_3==CLOSEBRACE||LA15_3==CREATE||LA15_3==EACH||LA15_3==EXEC||LA15_3==ID||(LA15_3>=INSERT_DIRECTORY && LA15_3<=INSERT_INTO)||LA15_3==INSERT_OVERWRITE||LA15_3==SELECT||LA15_3==TRUNCATE||LA15_3==WHERE))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA15_2==SELECT||LA15_2==STRING_LITERAL))
				{
					alt15 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:143:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 17);
				DOWNLOAD_PAGE69=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion702); 
				DOWNLOAD_PAGE69_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE69);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE69_tree, root_0);
				DebugLocation(143, 19);
				// Scrape.g:143:19: ( STRING_LITERAL | sqlStatement )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==SELECT))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:143:20: STRING_LITERAL
					{
					DebugLocation(143, 20);
					STRING_LITERAL70=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion706); 
					STRING_LITERAL70_tree = (CommonTree)adaptor.Create(STRING_LITERAL70);
					adaptor.AddChild(root_0, STRING_LITERAL70_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:143:37: sqlStatement
					{
					DebugLocation(143, 37);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion710);
					sqlStatement71=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement71.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:144:4: DOWNLOAD_PAGE ID
				{
				DebugLocation(144, 4);
				DOWNLOAD_PAGE72=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion716);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE72);

				DebugLocation(144, 18);
				ID73=(CommonToken)Match(input,ID,Follow._ID_in_downloadPageExpresssion718);  
				stream_ID.Add(ID73);



				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 144:21: -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(144, 24);
					// Scrape.g:144:24: ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(144, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(144, 40);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID73));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:145:4: DOWNLOAD_PAGE tableMemberReference
				{
				DebugLocation(145, 4);
				DOWNLOAD_PAGE74=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion732);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE74);

				DebugLocation(145, 18);
				PushFollow(Follow._tableMemberReference_in_downloadPageExpresssion734);
				tableMemberReference75=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference75.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 145:39: -> ^( DOWNLOAD_PAGE tableMemberReference )
				{
					DebugLocation(145, 42);
					// Scrape.g:145:42: ^( DOWNLOAD_PAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(145, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(145, 58);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 18);
			LeaveRule("downloadPageExpresssion", 18);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:148:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 19);
		TraceIn("downloadImageExpression", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE76 = default(CommonToken);
		CommonToken STRING_LITERAL77 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE79 = default(CommonToken);
		CommonToken ID80 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE76_tree = default(CommonTree);
		CommonTree STRING_LITERAL77_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE79_tree = default(CommonTree);
		CommonTree ID80_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(148, 1);
		try
		{
			// Scrape.g:149:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==DOWNLOAD_IMAGE))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==ID))
				{
					int LA17_3 = input.LA(3);

					if ((LA17_3==DOT))
					{
						alt17 = 3;
					}
					else if ((LA17_3==EOF||LA17_3==CLOSEBRACE||LA17_3==CREATE||LA17_3==EACH||LA17_3==EXEC||LA17_3==ID||(LA17_3>=INSERT_DIRECTORY && LA17_3<=INSERT_INTO)||LA17_3==INSERT_OVERWRITE||LA17_3==SELECT||LA17_3==TRUNCATE||LA17_3==WHERE))
					{
						alt17 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_2==SELECT||LA17_2==STRING_LITERAL))
				{
					alt17 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:149:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 18);
				DOWNLOAD_IMAGE76=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression753); 
				DOWNLOAD_IMAGE76_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE76);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE76_tree, root_0);
				DebugLocation(149, 20);
				// Scrape.g:149:20: ( STRING_LITERAL | sqlStatement )
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==STRING_LITERAL))
				{
					alt16 = 1;
				}
				else if ((LA16_1==SELECT))
				{
					alt16 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:149:21: STRING_LITERAL
					{
					DebugLocation(149, 21);
					STRING_LITERAL77=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression757); 
					STRING_LITERAL77_tree = (CommonTree)adaptor.Create(STRING_LITERAL77);
					adaptor.AddChild(root_0, STRING_LITERAL77_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:149:38: sqlStatement
					{
					DebugLocation(149, 38);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression761);
					sqlStatement78=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement78.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:150:4: DOWNLOAD_IMAGE ID
				{
				DebugLocation(150, 4);
				DOWNLOAD_IMAGE79=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression767);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE79);

				DebugLocation(150, 19);
				ID80=(CommonToken)Match(input,ID,Follow._ID_in_downloadImageExpression769);  
				stream_ID.Add(ID80);



				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:22: -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(150, 25);
					// Scrape.g:150:25: ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(150, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID80));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:151:4: DOWNLOAD_IMAGE tableMemberReference
				{
				DebugLocation(151, 4);
				DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression783);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE81);

				DebugLocation(151, 19);
				PushFollow(Follow._tableMemberReference_in_downloadImageExpression785);
				tableMemberReference82=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference82.Tree);


				{
				// AST REWRITE
				// elements: tableMemberReference, DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:40: -> ^( DOWNLOAD_IMAGE tableMemberReference )
				{
					DebugLocation(151, 43);
					// Scrape.g:151:43: ^( DOWNLOAD_IMAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(151, 60);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 19);
			LeaveRule("downloadImageExpression", 19);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:155:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 20);
		TraceIn("tableMemberReference", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT83 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT83_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(155, 1);
		try
		{
			// Scrape.g:156:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:156:4: t= ID DOT m= ID
			{
			DebugLocation(156, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference808);  
			stream_ID.Add(t);

			DebugLocation(156, 9);
			DOT83=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference810);  
			stream_DOT.Add(DOT83);

			DebugLocation(156, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference814);  
			stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 156:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(156, 21);
				// Scrape.g:156:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(156, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(156, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(156, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 20);
			LeaveRule("tableMemberReference", 20);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:159:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 21);
		TraceIn("variableDeclarationStatement", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID84 = default(CommonToken);
		CommonToken EQUALS85 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression86 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID84_tree = default(CommonTree);
		CommonTree EQUALS85_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(159, 1);
		try
		{
			// Scrape.g:160:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:160:4: ID EQUALS assignmentExpression
			{
			DebugLocation(160, 4);
			ID84=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement838);  
			stream_ID.Add(ID84);

			DebugLocation(160, 7);
			EQUALS85=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement840);  
			stream_EQUALS.Add(EQUALS85);

			DebugLocation(160, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement842);
			assignmentExpression86=assignmentExpression();
			PopFollow();

			stream_assignmentExpression.Add(assignmentExpression86.Tree);


			{
			// AST REWRITE
			// elements: ID, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 160:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(160, 38);
				// Scrape.g:160:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(160, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(160, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(160, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 21);
			LeaveRule("variableDeclarationStatement", 21);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:163:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 22);
		TraceIn("assignmentExpression", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression89 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(163, 1);
		try
		{
			// Scrape.g:164:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 104:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:164:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression863);
				mathExpression87=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression87.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:165:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression868);
				downloadExpression88=downloadExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadExpression88.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:166:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression873);
				expandExpression89=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression89.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:167:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression878);
				sqlStatement90=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement90.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 22);
			LeaveRule("assignmentExpression", 22);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:170:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 23);
		TraceIn("mathExpression", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set92 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(170, 5);
		try
		{
			// Scrape.g:171:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:171:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(171, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression894);
			mathExpressionGroup91=mathExpressionGroup();
			PopFollow();

			adaptor.AddChild(root_0, mathExpressionGroup91.Tree);
			DebugLocation(171, 29);
			// Scrape.g:171:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:171:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(171, 46);

					set92=(CommonToken)input.LT(1);
					set92=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set92), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(171, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression908);
					mathExpressionGroup93=mathExpressionGroup();
					PopFollow();

					adaptor.AddChild(root_0, mathExpressionGroup93.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 23);
			LeaveRule("mathExpression", 23);
			LeaveRule_mathExpression();
		}
		DebugLocation(172, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:174:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 24);
		TraceIn("mathExpressionGroup", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set95_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(174, 3);
		try
		{
			// Scrape.g:175:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:175:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(175, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup926);
			atom94=atom();
			PopFollow();

			adaptor.AddChild(root_0, atom94.Tree);
			DebugLocation(175, 9);
			// Scrape.g:175:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:175:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(175, 28);

					set95=(CommonToken)input.LT(1);
					set95=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set95), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(175, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup940);
					atom96=atom();
					PopFollow();

					adaptor.AddChild(root_0, atom96.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 24);
			LeaveRule("mathExpressionGroup", 24);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(176, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:178:1: atom : ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 25);
		TraceIn("atom", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID97 = default(CommonToken);
		CommonToken char_literal98 = default(CommonToken);
		CommonToken OPENPAREN101 = default(CommonToken);
		CommonToken CLOSEPAREN103 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal100 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID97_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree OPENPAREN101_tree = default(CommonTree);
		CommonTree CLOSEPAREN103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(178, 5);
		try
		{
			// Scrape.g:179:6: ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=5;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA21_2 = input.LA(2);

				if ((LA21_2==DOT))
				{
					alt21 = 3;
				}
				else if ((LA21_2==EOF||LA21_2==ASTERISK||(LA21_2>=CLOSEBRACE && LA21_2<=CLOSEPAREN)||LA21_2==CREATE||LA21_2==DIV||LA21_2==EACH||LA21_2==EXEC||LA21_2==ID||(LA21_2>=INSERT_DIRECTORY && LA21_2<=INSERT_INTO)||(LA21_2>=INSERT_OVERWRITE && LA21_2<=INT)||LA21_2==MINIS||LA21_2==NULL||LA21_2==OPENPAREN||LA21_2==PLUS||LA21_2==SELECT||LA21_2==STRING_LITERAL||LA21_2==TRUNCATE||LA21_2==104))
				{
					alt21 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 104:
				{
				alt21 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 4;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:179:8: ID
				{
				DebugLocation(179, 8);
				ID97=(CommonToken)Match(input,ID,Follow._ID_in_atom961);  
				stream_ID.Add(ID97);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 179:11: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(179, 14);
					// Scrape.g:179:14: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(179, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID97), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:180:5: '$'
				{
				DebugLocation(180, 5);
				char_literal98=(CommonToken)Match(input,104,Follow._104_in_atom974);  
				stream_104.Add(char_literal98);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 180:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(180, 12);
					// Scrape.g:180:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(180, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:181:5: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 5);
				PushFollow(Follow._tableMemberReference_in_atom986);
				tableMemberReference99=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference99.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:182:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 5);
				PushFollow(Follow._literal_in_atom992);
				literal100=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal100.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:183:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 17);
				OPENPAREN101=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1001); 
				DebugLocation(183, 19);
				PushFollow(Follow._mathExpression_in_atom1004);
				mathExpression102=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression102.Tree);
				DebugLocation(183, 44);
				CLOSEPAREN103=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1006); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 25);
			LeaveRule("atom", 25);
			LeaveRule_atom();
		}
		DebugLocation(184, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:186:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 26);
		TraceIn("literal", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set104 = default(CommonToken);

		CommonTree set104_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(186, 1);
		try
		{
			// Scrape.g:187:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(187, 2);

			set104=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set104));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 26);
			LeaveRule("literal", 26);
			LeaveRule_literal();
		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:195:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 27);
		TraceIn("insertStatement", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO105 = default(CommonToken);
		CommonToken ID106 = default(CommonToken);
		CommonToken INSERT_DIRECTORY108 = default(CommonToken);
		CommonToken INSERT_OVERWRITE111 = default(CommonToken);
		CommonToken ID112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO105_tree = default(CommonTree);
		CommonTree ID106_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY108_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE111_tree = default(CommonTree);
		CommonTree ID112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(195, 1);
		try
		{
			// Scrape.g:196:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:196:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(196, 4);
				INSERT_INTO105=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1048);  
				stream_INSERT_INTO.Add(INSERT_INTO105);

				DebugLocation(196, 16);
				ID106=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1050);  
				stream_ID.Add(ID106);

				DebugLocation(196, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1052);
				sqlStatement107=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement107.Tree);


				{
				// AST REWRITE
				// elements: INSERT_INTO, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(196, 34);
					// Scrape.g:196:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(196, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID106));
					DebugLocation(196, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:197:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(197, 4);
				INSERT_DIRECTORY108=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1067);  
				stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY108);

				DebugLocation(197, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1069);
				mathExpression109=mathExpression();
				PopFollow();

				stream_mathExpression.Add(mathExpression109.Tree);
				DebugLocation(197, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1071);
				sqlStatement110=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement110.Tree);


				{
				// AST REWRITE
				// elements: mathExpression, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(197, 51);
					// Scrape.g:197:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(197, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(197, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:198:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(198, 4);
				INSERT_OVERWRITE111=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1085);  
				stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE111);

				DebugLocation(198, 21);
				ID112=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1087);  
				stream_ID.Add(ID112);

				DebugLocation(198, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1089);
				sqlStatement113=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement113.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(198, 39);
					// Scrape.g:198:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(198, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID112));
					DebugLocation(198, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 27);
			LeaveRule("insertStatement", 27);
			LeaveRule_insertStatement();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:203:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 28);
		TraceIn("sqlStatement", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(203, 1);
		try
		{
			// Scrape.g:204:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:204:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(204, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1113);
			selectStatement114=selectStatement();
			PopFollow();

			stream_selectStatement.Add(selectStatement114.Tree);
			DebugLocation(204, 20);
			// Scrape.g:204:20: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:204:20: fromStatement
				{
				DebugLocation(204, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1115);
				fromStatement115=fromStatement();
				PopFollow();

				stream_fromStatement.Add(fromStatement115.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(204, 35);
			// Scrape.g:204:35: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:204:35: whereStatement
				{
				DebugLocation(204, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1118);
				whereStatement116=whereStatement();
				PopFollow();

				stream_whereStatement.Add(whereStatement116.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: whereStatement, selectStatement, fromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 204:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(204, 54);
				// Scrape.g:204:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(204, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(204, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(204, 89);
				// Scrape.g:204:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(204, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(204, 104);
				// Scrape.g:204:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(204, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 28);
			LeaveRule("sqlStatement", 28);
			LeaveRule_sqlStatement();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:207:1: whereStatement : WHERE ^ ID EQUALS ! STRING_LITERAL ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 29);
		TraceIn("whereStatement", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE117 = default(CommonToken);
		CommonToken ID118 = default(CommonToken);
		CommonToken EQUALS119 = default(CommonToken);
		CommonToken STRING_LITERAL120 = default(CommonToken);

		CommonTree WHERE117_tree = default(CommonTree);
		CommonTree ID118_tree = default(CommonTree);
		CommonTree EQUALS119_tree = default(CommonTree);
		CommonTree STRING_LITERAL120_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(207, 1);
		try
		{
			// Scrape.g:208:2: ( WHERE ^ ID EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:208:4: WHERE ^ ID EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(208, 9);
			WHERE117=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1144); 
			WHERE117_tree = (CommonTree)adaptor.Create(WHERE117);
			root_0 = (CommonTree)adaptor.BecomeRoot(WHERE117_tree, root_0);
			DebugLocation(208, 11);
			ID118=(CommonToken)Match(input,ID,Follow._ID_in_whereStatement1147); 
			ID118_tree = (CommonTree)adaptor.Create(ID118);
			adaptor.AddChild(root_0, ID118_tree);
			DebugLocation(208, 20);
			EQUALS119=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_whereStatement1149); 
			DebugLocation(208, 22);
			STRING_LITERAL120=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_whereStatement1152); 
			STRING_LITERAL120_tree = (CommonTree)adaptor.Create(STRING_LITERAL120);
			adaptor.AddChild(root_0, STRING_LITERAL120_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 29);
			LeaveRule("whereStatement", 29);
			LeaveRule_whereStatement();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:211:1: fromStatement : ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 30);
		TraceIn("fromStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FROM121 = default(CommonToken);
		CommonToken ID122 = default(CommonToken);
		CommonToken FROM123 = default(CommonToken);
		CommonToken FROM125 = default(CommonToken);
		CommonToken FROM127 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion124 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FROM121_tree = default(CommonTree);
		CommonTree ID122_tree = default(CommonTree);
		CommonTree FROM123_tree = default(CommonTree);
		CommonTree FROM125_tree = default(CommonTree);
		CommonTree FROM127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(211, 1);
		try
		{
			// Scrape.g:212:2: ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression )
			int alt25=4;
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt25 = 1;
					}
					break;
				case DOWNLOAD_PAGE:
					{
					alt25 = 2;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt25 = 3;
					}
					break;
				case EXPAND:
					{
					alt25 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 25, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:212:4: FROM ID
				{
				DebugLocation(212, 4);
				FROM121=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1163);  
				stream_FROM.Add(FROM121);

				DebugLocation(212, 9);
				ID122=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1165);  
				stream_ID.Add(ID122);



				{
				// AST REWRITE
				// elements: FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 212:12: -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(212, 15);
					// Scrape.g:212:15: ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(212, 17);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(212, 22);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID122));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:213:4: FROM ^ downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 8);
				FROM123=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1179); 
				FROM123_tree = (CommonTree)adaptor.Create(FROM123);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM123_tree, root_0);
				DebugLocation(213, 10);
				PushFollow(Follow._downloadPageExpresssion_in_fromStatement1182);
				downloadPageExpresssion124=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion124.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:214:4: FROM ^ downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 8);
				FROM125=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1187); 
				FROM125_tree = (CommonTree)adaptor.Create(FROM125);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM125_tree, root_0);
				DebugLocation(214, 10);
				PushFollow(Follow._downloadImageExpression_in_fromStatement1190);
				downloadImageExpression126=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression126.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:215:4: FROM ^ expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 8);
				FROM127=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1195); 
				FROM127_tree = (CommonTree)adaptor.Create(FROM127);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM127_tree, root_0);
				DebugLocation(215, 10);
				PushFollow(Follow._expandExpression_in_fromStatement1198);
				expandExpression128=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression128.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 30);
			LeaveRule("fromStatement", 30);
			LeaveRule_fromStatement();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:218:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 31);
		TraceIn("selectStatement", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT129 = default(CommonToken);
		CommonToken COMMA131 = default(CommonToken);
		CommonToken SELECT133 = default(CommonToken);
		CommonToken ASTERISK134 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT129_tree = default(CommonTree);
		CommonTree COMMA131_tree = default(CommonTree);
		CommonTree SELECT133_tree = default(CommonTree);
		CommonTree ASTERISK134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(218, 1);
		try
		{
			// Scrape.g:219:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt27=2;
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==SELECT))
			{
				int LA27_2 = input.LA(2);

				if ((LA27_2==ASTERISK))
				{
					alt27 = 2;
				}
				else if ((LA27_2==CASE||LA27_2==ID||LA27_2==INT||LA27_2==NULL||LA27_2==PICK||LA27_2==STRING_LITERAL))
				{
					alt27 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:219:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(219, 4);
				SELECT129=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1209);  
				stream_SELECT.Add(SELECT129);

				DebugLocation(219, 11);
				// Scrape.g:219:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					try
					{
						alt26 = dfa26.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:219:12: selectArgs COMMA
						{
						DebugLocation(219, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1212);
						selectArgs130=selectArgs();
						PopFollow();

						stream_selectArgs.Add(selectArgs130.Tree);
						DebugLocation(219, 23);
						COMMA131=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1214);  
						stream_COMMA.Add(COMMA131);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(219, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1218);
				selectArgs132=selectArgs();
				PopFollow();

				stream_selectArgs.Add(selectArgs132.Tree);


				{
				// AST REWRITE
				// elements: selectArgs, SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 219:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(219, 45);
					// Scrape.g:219:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(219, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(219, 54);
					// Scrape.g:219:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(219, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:220:4: SELECT ASTERISK
				{
				DebugLocation(220, 4);
				SELECT133=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1232);  
				stream_SELECT.Add(SELECT133);

				DebugLocation(220, 11);
				ASTERISK134=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1234);  
				stream_ASTERISK.Add(ASTERISK134);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 220:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(220, 23);
					// Scrape.g:220:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(220, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(220, 32);
					// Scrape.g:220:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(220, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(220, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK134));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 31);
			LeaveRule("selectStatement", 31);
			LeaveRule_selectStatement();
		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:224:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 32);
		TraceIn("selectArgs", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS136 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS136_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(224, 1);
		try
		{
			// Scrape.g:225:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==ID||LA29_1==INT||LA29_1==NULL||LA29_1==PICK||LA29_1==STRING_LITERAL))
			{
				alt29 = 1;
			}
			else if ((LA29_1==CASE))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:225:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(225, 4);
				// Scrape.g:225:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==STRING_LITERAL))
						{
							int LA28_3 = input.LA(3);

							if ((LA28_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==STRING_LITERAL))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==MATCH))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==STRING_LITERAL))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==REPLACE))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==STRING_LITERAL))
													{
														int LA28_10 = input.LA(10);

														if ((LA28_10==PLUS))
														{
															alt28 = 1;
														}


													}


												}
												else if ((LA28_8==PLUS))
												{
													alt28 = 1;
												}


											}


										}
										else if ((LA28_6==PLUS))
										{
											alt28 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==MATCH))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==STRING_LITERAL))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==REPLACE))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==STRING_LITERAL))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==PLUS))
													{
														alt28 = 1;
													}


												}


											}
											else if ((LA28_7==PLUS))
											{
												alt28 = 1;
											}


										}


									}
									else if ((LA28_5==PLUS))
									{
										alt28 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA28_5 = input.LA(5);

									if ((LA28_5==MATCH))
									{
										int LA28_6 = input.LA(6);

										if ((LA28_6==STRING_LITERAL))
										{
											int LA28_7 = input.LA(7);

											if ((LA28_7==REPLACE))
											{
												int LA28_8 = input.LA(8);

												if ((LA28_8==STRING_LITERAL))
												{
													int LA28_9 = input.LA(9);

													if ((LA28_9==PLUS))
													{
														alt28 = 1;
													}


												}


											}
											else if ((LA28_7==PLUS))
											{
												alt28 = 1;
											}


										}


									}
									else if ((LA28_5==PLUS))
									{
										alt28 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==PLUS))
						{
							alt28 = 1;
						}


						}
						break;
					case ID:
						{
						int LA28_2 = input.LA(2);

						if ((LA28_2==DOT))
						{
							int LA28_3 = input.LA(3);

							if ((LA28_3==ID))
							{
								int LA28_4 = input.LA(4);

								if ((LA28_4==PLUS))
								{
									alt28 = 1;
								}


							}


						}
						else if ((LA28_2==PLUS))
						{
							alt28 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:225:5: selectArg PLUS
						{
						DebugLocation(225, 5);
						PushFollow(Follow._selectArg_in_selectArgs1260);
						selectArg135=selectArg();
						PopFollow();

						stream_selectArg.Add(selectArg135.Tree);
						DebugLocation(225, 15);
						PLUS136=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1262);  
						stream_PLUS.Add(PLUS136);


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(225, 22);
				PushFollow(Follow._selectArg_in_selectArgs1266);
				selectArg137=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg137.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 225:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(225, 35);
					// Scrape.g:225:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(225, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(225, 48);
					// Scrape.g:225:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(225, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:226:4: caseStatement
				{
				DebugLocation(226, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1280);
				caseStatement138=caseStatement();
				PopFollow();

				stream_caseStatement.Add(caseStatement138.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(226, 21);
					// Scrape.g:226:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(226, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 32);
			LeaveRule("selectArgs", 32);
			LeaveRule_selectArgs();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:231:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 33);
		TraceIn("caseStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE139 = default(CommonToken);
		CommonToken ELSE141 = default(CommonToken);
		CommonToken END143 = default(CommonToken);
		CommonToken CASE144 = default(CommonToken);
		CommonToken ELSE147 = default(CommonToken);
		CommonToken END149 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE139_tree = default(CommonTree);
		CommonTree ELSE141_tree = default(CommonTree);
		CommonTree END143_tree = default(CommonTree);
		CommonTree CASE144_tree = default(CommonTree);
		CommonTree ELSE147_tree = default(CommonTree);
		CommonTree END149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(231, 1);
		try
		{
			// Scrape.g:232:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==CASE))
			{
				int LA34_2 = input.LA(2);

				if ((LA34_2==WHEN))
				{
					alt34 = 1;
				}
				else if ((LA34_2==ID||LA34_2==INT||LA34_2==NULL||LA34_2==PICK||LA34_2==STRING_LITERAL))
				{
					alt34 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:232:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(232, 4);
				CASE139=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1302);  
				stream_CASE.Add(CASE139);

				DebugLocation(232, 9);
				// Scrape.g:232:9: ( whenBoolStatement )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if ((LA30_1==WHEN))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:232:9: whenBoolStatement
						{
						DebugLocation(232, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1304);
						whenBoolStatement140=whenBoolStatement();
						PopFollow();

						stream_whenBoolStatement.Add(whenBoolStatement140.Tree);

						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(232, 28);
				// Scrape.g:232:28: ( ELSE caseExpression )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ELSE))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:232:29: ELSE caseExpression
					{
					DebugLocation(232, 29);
					ELSE141=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1308);  
					stream_ELSE.Add(ELSE141);

					DebugLocation(232, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1310);
					caseExpression142=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression142.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(232, 51);
				END143=(CommonToken)Match(input,END,Follow._END_in_caseStatement1314);  
				stream_END.Add(END143);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(232, 58);
					// Scrape.g:232:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(232, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(232, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(232, 89);
					// Scrape.g:232:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(232, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:233:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(233, 4);
				CASE144=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1331);  
				stream_CASE.Add(CASE144);

				DebugLocation(233, 9);
				PushFollow(Follow._selectArg_in_caseStatement1333);
				selectArg145=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg145.Tree);
				DebugLocation(233, 19);
				// Scrape.g:233:19: ( whenLiteralStatement )+
				int cnt32=0;
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_1 = input.LA(1);

					if ((LA32_1==WHEN))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch (alt32)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:233:19: whenLiteralStatement
						{
						DebugLocation(233, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1335);
						whenLiteralStatement146=whenLiteralStatement();
						PopFollow();

						stream_whenLiteralStatement.Add(whenLiteralStatement146.Tree);

						}
						break;

					default:
						if (cnt32 >= 1)
							goto loop32;

						EarlyExitException eee32 = new EarlyExitException( 32, input );
						DebugRecognitionException(eee32);
						throw eee32;
					}
					cnt32++;
				}
				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(233, 41);
				// Scrape.g:233:41: ( ELSE caseExpression )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_1 = input.LA(1);

				if ((LA33_1==ELSE))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:233:42: ELSE caseExpression
					{
					DebugLocation(233, 42);
					ELSE147=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1339);  
					stream_ELSE.Add(ELSE147);

					DebugLocation(233, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1341);
					caseExpression148=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression148.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(233, 64);
				END149=(CommonToken)Match(input,END,Follow._END_in_caseStatement1345);  
				stream_END.Add(END149);



				{
				// AST REWRITE
				// elements: whenLiteralStatement, selectArg, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(233, 71);
					// Scrape.g:233:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(233, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(233, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(233, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(233, 114);
					// Scrape.g:233:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(233, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 33);
			LeaveRule("caseStatement", 33);
			LeaveRule_caseStatement();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:236:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 34);
		TraceIn("caseExpression", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(236, 1);
		try
		{
			// Scrape.g:237:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:237:4: selectArg
			{
			DebugLocation(237, 4);
			PushFollow(Follow._selectArg_in_caseExpression1370);
			selectArg150=selectArg();
			PopFollow();

			stream_selectArg.Add(selectArg150.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(237, 17);
				// Scrape.g:237:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(237, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(237, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 34);
			LeaveRule("caseExpression", 34);
			LeaveRule_caseExpression();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:240:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 35);
		TraceIn("whenLiteralStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN151 = default(CommonToken);
		CommonToken THEN153 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN151_tree = default(CommonTree);
		CommonTree THEN153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(240, 1);
		try
		{
			// Scrape.g:241:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:241:4: WHEN literal THEN caseExpression
			{
			DebugLocation(241, 4);
			WHEN151=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1389);  
			stream_WHEN.Add(WHEN151);

			DebugLocation(241, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1391);
			literal152=literal();
			PopFollow();

			stream_literal.Add(literal152.Tree);
			DebugLocation(241, 17);
			THEN153=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1393);  
			stream_THEN.Add(THEN153);

			DebugLocation(241, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1395);
			caseExpression154=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression154.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(241, 40);
				// Scrape.g:241:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(241, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(241, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 35);
			LeaveRule("whenLiteralStatement", 35);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:244:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 36);
		TraceIn("whenBoolStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN155 = default(CommonToken);
		CommonToken THEN157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN155_tree = default(CommonTree);
		CommonTree THEN157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(244, 1);
		try
		{
			// Scrape.g:245:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:245:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(245, 4);
			WHEN155=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1416);  
			stream_WHEN.Add(WHEN155);

			DebugLocation(245, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1418);
			boolExpression156=boolExpression();
			PopFollow();

			stream_boolExpression.Add(boolExpression156.Tree);
			DebugLocation(245, 24);
			THEN157=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1420);  
			stream_THEN.Add(THEN157);

			DebugLocation(245, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1422);
			caseExpression158=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression158.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 245:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(245, 47);
				// Scrape.g:245:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(245, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(245, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(245, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 36);
			LeaveRule("whenBoolStatement", 36);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:248:1: boolExpression : ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg );
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 37);
		TraceIn("boolExpression", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS160 = default(CommonToken);
		CommonToken LESSTHAN163 = default(CommonToken);
		CommonToken LESSTHANEQUAL166 = default(CommonToken);
		CommonToken GREATERTHAN169 = default(CommonToken);
		CommonToken GREATERTHANEQUAL172 = default(CommonToken);
		CommonToken NOTEQUAL175 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg159 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg165 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg167 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg171 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg174 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS160_tree = default(CommonTree);
		CommonTree LESSTHAN163_tree = default(CommonTree);
		CommonTree LESSTHANEQUAL166_tree = default(CommonTree);
		CommonTree GREATERTHAN169_tree = default(CommonTree);
		CommonTree GREATERTHANEQUAL172_tree = default(CommonTree);
		CommonTree NOTEQUAL175_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(248, 1);
		try
		{
			// Scrape.g:249:2: ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg )
			int alt35=6;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				int LA35_2 = input.LA(2);

				if ((LA35_2==STRING_LITERAL))
				{
					int LA35_3 = input.LA(3);

					if ((LA35_3==TAKE))
					{
						switch (input.LA(4))
						{
						case ATTRIBUTE:
							{
							int LA35_5 = input.LA(5);

							if ((LA35_5==STRING_LITERAL))
							{
								switch (input.LA(6))
								{
								case MATCH:
									{
									int LA35_7 = input.LA(7);

									if ((LA35_7==STRING_LITERAL))
									{
										switch (input.LA(8))
										{
										case REPLACE:
											{
											int LA35_9 = input.LA(9);

											if ((LA35_9==STRING_LITERAL))
											{
												switch (input.LA(10))
												{
												case EQUALS:
													{
													alt35 = 1;
													}
													break;
												case LESSTHAN:
													{
													alt35 = 2;
													}
													break;
												case LESSTHANEQUAL:
													{
													alt35 = 3;
													}
													break;
												case GREATERTHAN:
													{
													alt35 = 4;
													}
													break;
												case GREATERTHANEQUAL:
													{
													alt35 = 5;
													}
													break;
												case NOTEQUAL:
													{
													alt35 = 6;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 35, 21, input, 10);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 35, 20, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case EQUALS:
											{
											alt35 = 1;
											}
											break;
										case LESSTHAN:
											{
											alt35 = 2;
											}
											break;
										case LESSTHANEQUAL:
											{
											alt35 = 3;
											}
											break;
										case GREATERTHAN:
											{
											alt35 = 4;
											}
											break;
										case GREATERTHANEQUAL:
											{
											alt35 = 5;
											}
											break;
										case NOTEQUAL:
											{
											alt35 = 6;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 35, 19, input, 8);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 35, 18, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case EQUALS:
									{
									alt35 = 1;
									}
									break;
								case LESSTHAN:
									{
									alt35 = 2;
									}
									break;
								case LESSTHANEQUAL:
									{
									alt35 = 3;
									}
									break;
								case GREATERTHAN:
									{
									alt35 = 4;
									}
									break;
								case GREATERTHANEQUAL:
									{
									alt35 = 5;
									}
									break;
								case NOTEQUAL:
									{
									alt35 = 6;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 35, 17, input, 6);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 35, 14, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case TEXT:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA35_6 = input.LA(6);

								if ((LA35_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA35_8 = input.LA(8);

										if ((LA35_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt35 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt35 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt35 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt35 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt35 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt35 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 35, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 35, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt35 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt35 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt35 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt35 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt35 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt35 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 35, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 35, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt35 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt35 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt35 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt35 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt35 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt35 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 35, 15, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case HTML:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA35_6 = input.LA(6);

								if ((LA35_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA35_8 = input.LA(8);

										if ((LA35_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt35 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt35 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt35 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt35 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt35 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt35 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 35, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 35, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt35 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt35 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt35 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt35 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt35 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt35 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 35, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 35, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt35 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt35 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt35 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt35 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt35 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt35 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 35, 16, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 35, 12, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				switch (input.LA(2))
				{
				case EQUALS:
					{
					alt35 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt35 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt35 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt35 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt35 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt35 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case ID:
				{
				switch (input.LA(2))
				{
				case DOT:
					{
					int LA35_3 = input.LA(3);

					if ((LA35_3==ID))
					{
						switch (input.LA(4))
						{
						case EQUALS:
							{
							alt35 = 1;
							}
							break;
						case LESSTHAN:
							{
							alt35 = 2;
							}
							break;
						case LESSTHANEQUAL:
							{
							alt35 = 3;
							}
							break;
						case GREATERTHAN:
							{
							alt35 = 4;
							}
							break;
						case GREATERTHANEQUAL:
							{
							alt35 = 5;
							}
							break;
						case NOTEQUAL:
							{
							alt35 = 6;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 35, 13, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 11, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EQUALS:
					{
					alt35 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt35 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt35 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt35 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt35 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt35 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:249:4: selectArg EQUALS ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(249, 4);
				PushFollow(Follow._selectArg_in_boolExpression1443);
				selectArg159=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg159.Tree);
				DebugLocation(249, 20);
				EQUALS160=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolExpression1445); 
				EQUALS160_tree = (CommonTree)adaptor.Create(EQUALS160);
				root_0 = (CommonTree)adaptor.BecomeRoot(EQUALS160_tree, root_0);
				DebugLocation(249, 22);
				PushFollow(Follow._selectArg_in_boolExpression1448);
				selectArg161=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg161.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:250:4: selectArg LESSTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(250, 4);
				PushFollow(Follow._selectArg_in_boolExpression1453);
				selectArg162=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg162.Tree);
				DebugLocation(250, 22);
				LESSTHAN163=(CommonToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_boolExpression1455); 
				LESSTHAN163_tree = (CommonTree)adaptor.Create(LESSTHAN163);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHAN163_tree, root_0);
				DebugLocation(250, 24);
				PushFollow(Follow._selectArg_in_boolExpression1458);
				selectArg164=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg164.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:251:4: selectArg LESSTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(251, 4);
				PushFollow(Follow._selectArg_in_boolExpression1463);
				selectArg165=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg165.Tree);
				DebugLocation(251, 27);
				LESSTHANEQUAL166=(CommonToken)Match(input,LESSTHANEQUAL,Follow._LESSTHANEQUAL_in_boolExpression1465); 
				LESSTHANEQUAL166_tree = (CommonTree)adaptor.Create(LESSTHANEQUAL166);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHANEQUAL166_tree, root_0);
				DebugLocation(251, 29);
				PushFollow(Follow._selectArg_in_boolExpression1468);
				selectArg167=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg167.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:252:4: selectArg GREATERTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(252, 4);
				PushFollow(Follow._selectArg_in_boolExpression1473);
				selectArg168=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg168.Tree);
				DebugLocation(252, 25);
				GREATERTHAN169=(CommonToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_boolExpression1475); 
				GREATERTHAN169_tree = (CommonTree)adaptor.Create(GREATERTHAN169);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHAN169_tree, root_0);
				DebugLocation(252, 27);
				PushFollow(Follow._selectArg_in_boolExpression1478);
				selectArg170=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg170.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:253:4: selectArg GREATERTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(253, 4);
				PushFollow(Follow._selectArg_in_boolExpression1483);
				selectArg171=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg171.Tree);
				DebugLocation(253, 30);
				GREATERTHANEQUAL172=(CommonToken)Match(input,GREATERTHANEQUAL,Follow._GREATERTHANEQUAL_in_boolExpression1485); 
				GREATERTHANEQUAL172_tree = (CommonTree)adaptor.Create(GREATERTHANEQUAL172);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHANEQUAL172_tree, root_0);
				DebugLocation(253, 32);
				PushFollow(Follow._selectArg_in_boolExpression1488);
				selectArg173=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg173.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:254:4: selectArg NOTEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(254, 4);
				PushFollow(Follow._selectArg_in_boolExpression1493);
				selectArg174=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg174.Tree);
				DebugLocation(254, 22);
				NOTEQUAL175=(CommonToken)Match(input,NOTEQUAL,Follow._NOTEQUAL_in_boolExpression1495); 
				NOTEQUAL175_tree = (CommonTree)adaptor.Create(NOTEQUAL175);
				root_0 = (CommonTree)adaptor.BecomeRoot(NOTEQUAL175_tree, root_0);
				DebugLocation(254, 24);
				PushFollow(Follow._selectArg_in_boolExpression1498);
				selectArg176=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg176.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 37);
			LeaveRule("boolExpression", 37);
			LeaveRule_boolExpression();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:257:1: selectArg : ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 38);
		TraceIn("selectArg", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID179 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference180 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID179_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(257, 1);
		try
		{
			// Scrape.g:258:2: ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference )
			int alt36=4;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt36 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt36 = 2;
				}
				break;
			case ID:
				{
				int LA36_2 = input.LA(2);

				if ((LA36_2==DOT))
				{
					alt36 = 4;
				}
				else if ((LA36_2==EOF||LA36_2==CLOSEBRACE||LA36_2==COMMA||LA36_2==CREATE||(LA36_2>=EACH && LA36_2<=EXEC)||(LA36_2>=FROM && LA36_2<=GREATERTHANEQUAL)||LA36_2==ID||(LA36_2>=INSERT_DIRECTORY && LA36_2<=INSERT_INTO)||LA36_2==INSERT_OVERWRITE||(LA36_2>=LESSTHAN && LA36_2<=LESSTHANEQUAL)||LA36_2==NOTEQUAL||LA36_2==PLUS||LA36_2==SELECT||LA36_2==THEN||LA36_2==TRUNCATE||LA36_2==WHEN||LA36_2==WHERE))
				{
					alt36 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:258:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(258, 4);
				PushFollow(Follow._pickStatement_in_selectArg1509);
				pickStatement177=pickStatement();
				PopFollow();

				adaptor.AddChild(root_0, pickStatement177.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:259:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 4);
				PushFollow(Follow._literal_in_selectArg1514);
				literal178=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal178.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:260:4: ID
				{
				DebugLocation(260, 4);
				ID179=(CommonToken)Match(input,ID,Follow._ID_in_selectArg1519);  
				stream_ID.Add(ID179);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 260:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(260, 10);
					// Scrape.g:260:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(260, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID179), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:261:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(261, 4);
				PushFollow(Follow._tableMemberReference_in_selectArg1531);
				tableMemberReference180=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference180.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 38);
			LeaveRule("selectArg", 38);
			LeaveRule_selectArg();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:264:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 39);
		TraceIn("pickStatement", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK181 = default(CommonToken);
		CommonToken STRING_LITERAL182 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK181_tree = default(CommonTree);
		CommonTree STRING_LITERAL182_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(264, 1);
		try
		{
			// Scrape.g:265:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:265:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(265, 4);
			PICK181=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1543);  
			stream_PICK.Add(PICK181);

			DebugLocation(265, 9);
			STRING_LITERAL182=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1545);  
			stream_STRING_LITERAL.Add(STRING_LITERAL182);

			DebugLocation(265, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1547);
			takeStatement183=takeStatement();
			PopFollow();

			stream_takeStatement.Add(takeStatement183.Tree);
			DebugLocation(265, 38);
			// Scrape.g:265:38: ( matchStatement )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==MATCH))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:265:38: matchStatement
				{
				DebugLocation(265, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1549);
				matchStatement184=matchStatement();
				PopFollow();

				stream_matchStatement.Add(matchStatement184.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: takeStatement, PICK, matchStatement, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(265, 57);
				// Scrape.g:265:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(265, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(265, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(265, 93);
				// Scrape.g:265:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(265, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 39);
			LeaveRule("pickStatement", 39);
			LeaveRule_pickStatement();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:268:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 40);
		TraceIn("takeStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE185 = default(CommonToken);
		CommonToken ATTRIBUTE186 = default(CommonToken);
		CommonToken STRING_LITERAL187 = default(CommonToken);
		CommonToken TAKE188 = default(CommonToken);
		CommonToken TEXT189 = default(CommonToken);
		CommonToken TAKE190 = default(CommonToken);
		CommonToken HTML191 = default(CommonToken);

		CommonTree TAKE185_tree = default(CommonTree);
		CommonTree ATTRIBUTE186_tree = default(CommonTree);
		CommonTree STRING_LITERAL187_tree = default(CommonTree);
		CommonTree TAKE188_tree = default(CommonTree);
		CommonTree TEXT189_tree = default(CommonTree);
		CommonTree TAKE190_tree = default(CommonTree);
		CommonTree HTML191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt38 = 1;
					}
					break;
				case TEXT:
					{
					alt38 = 2;
					}
					break;
				case HTML:
					{
					alt38 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 38, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:269:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(269, 4);
				TAKE185=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1575);  
				stream_TAKE.Add(TAKE185);

				DebugLocation(269, 9);
				ATTRIBUTE186=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1577);  
				stream_ATTRIBUTE.Add(ATTRIBUTE186);

				DebugLocation(269, 19);
				STRING_LITERAL187=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1579);  
				stream_STRING_LITERAL.Add(STRING_LITERAL187);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 269:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(269, 37);
					// Scrape.g:269:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(269, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(269, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:270:4: TAKE TEXT
				{
				DebugLocation(270, 4);
				TAKE188=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1592);  
				stream_TAKE.Add(TAKE188);

				DebugLocation(270, 9);
				TEXT189=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1594);  
				stream_TEXT.Add(TEXT189);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(270, 17);
					// Scrape.g:270:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:271:4: TAKE HTML
				{
				DebugLocation(271, 4);
				TAKE190=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1605);  
				stream_TAKE.Add(TAKE190);

				DebugLocation(271, 9);
				HTML191=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1607);  
				stream_HTML.Add(HTML191);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:14: -> ^( TAKE_HTML )
				{
					DebugLocation(271, 17);
					// Scrape.g:271:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 40);
			LeaveRule("takeStatement", 40);
			LeaveRule_takeStatement();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:274:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 41);
		TraceIn("matchStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH192 = default(CommonToken);
		CommonToken STRING_LITERAL193 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH192_tree = default(CommonTree);
		CommonTree STRING_LITERAL193_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(274, 1);
		try
		{
			// Scrape.g:275:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:275:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(275, 4);
			MATCH192=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1625);  
			stream_MATCH.Add(MATCH192);

			DebugLocation(275, 10);
			STRING_LITERAL193=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1627);  
			stream_STRING_LITERAL.Add(STRING_LITERAL193);

			DebugLocation(275, 25);
			// Scrape.g:275:25: ( replaceStatement )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==REPLACE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:275:25: replaceStatement
				{
				DebugLocation(275, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1629);
				replaceStatement194=replaceStatement();
				PopFollow();

				stream_replaceStatement.Add(replaceStatement194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: MATCH, STRING_LITERAL, replaceStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(275, 46);
				// Scrape.g:275:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(275, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(275, 69);
				// Scrape.g:275:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(275, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 41);
			LeaveRule("matchStatement", 41);
			LeaveRule_matchStatement();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:278:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 42);
		TraceIn("replaceStatement", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE195 = default(CommonToken);
		CommonToken STRING_LITERAL196 = default(CommonToken);

		CommonTree REPLACE195_tree = default(CommonTree);
		CommonTree STRING_LITERAL196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(278, 1);
		try
		{
			// Scrape.g:279:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:279:4: REPLACE STRING_LITERAL
			{
			DebugLocation(279, 4);
			REPLACE195=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1652);  
			stream_REPLACE.Add(REPLACE195);

			DebugLocation(279, 12);
			STRING_LITERAL196=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1654);  
			stream_STRING_LITERAL.Add(STRING_LITERAL196);



			{
			// AST REWRITE
			// elements: STRING_LITERAL, REPLACE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(279, 30);
				// Scrape.g:279:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(279, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 42);
			LeaveRule("replaceStatement", 42);
			LeaveRule_replaceStatement();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:283:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 43);
		TraceIn("createTableStatement", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE197 = default(CommonToken);
		CommonToken FILE198 = default(CommonToken);
		CommonToken ID199 = default(CommonToken);
		CommonToken OPENPAREN200 = default(CommonToken);
		CommonToken CLOSEPAREN202 = default(CommonToken);
		CommonToken CREATE205 = default(CommonToken);
		CommonToken BUFFER206 = default(CommonToken);
		CommonToken ID207 = default(CommonToken);
		CommonToken OPENPAREN208 = default(CommonToken);
		CommonToken CLOSEPAREN210 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement203 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs209 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE197_tree = default(CommonTree);
		CommonTree FILE198_tree = default(CommonTree);
		CommonTree ID199_tree = default(CommonTree);
		CommonTree OPENPAREN200_tree = default(CommonTree);
		CommonTree CLOSEPAREN202_tree = default(CommonTree);
		CommonTree CREATE205_tree = default(CommonTree);
		CommonTree BUFFER206_tree = default(CommonTree);
		CommonTree ID207_tree = default(CommonTree);
		CommonTree OPENPAREN208_tree = default(CommonTree);
		CommonTree CLOSEPAREN210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(283, 1);
		try
		{
			// Scrape.g:284:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==CREATE))
			{
				int LA43_2 = input.LA(2);

				if ((LA43_2==FILE))
				{
					alt43 = 1;
				}
				else if ((LA43_2==BUFFER))
				{
					alt43 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:284:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(284, 4);
				CREATE197=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1675);  
				stream_CREATE.Add(CREATE197);

				DebugLocation(284, 11);
				FILE198=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1677);  
				stream_FILE.Add(FILE198);

				DebugLocation(284, 16);
				ID199=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1679);  
				stream_ID.Add(ID199);

				DebugLocation(284, 19);
				OPENPAREN200=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1681);  
				stream_OPENPAREN.Add(OPENPAREN200);

				DebugLocation(284, 29);
				// Scrape.g:284:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_1 = input.LA(1);

					if ((LA40_1==ID))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:284:29: tableColumnArgs
						{
						DebugLocation(284, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1683);
						tableColumnArgs201=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs201.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(284, 46);
				CLOSEPAREN202=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1686);  
				stream_CLOSEPAREN.Add(CLOSEPAREN202);

				DebugLocation(284, 57);
				// Scrape.g:284:57: ( fileTableWithStatement )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==WITH))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:284:57: fileTableWithStatement
					{
					DebugLocation(284, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1688);
					fileTableWithStatement203=fileTableWithStatement();
					PopFollow();

					stream_fileTableWithStatement.Add(fileTableWithStatement203.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(284, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1691);
				fileTableLocation204=fileTableLocation();
				PopFollow();

				stream_fileTableLocation.Add(fileTableLocation204.Tree);


				{
				// AST REWRITE
				// elements: ID, tableColumnArgs, fileTableLocation, fileTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(284, 102);
					// Scrape.g:284:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(284, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(284, 118);
					// Scrape.g:284:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(284, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(284, 135);
					// Scrape.g:284:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(284, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(284, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:285:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(285, 4);
				CREATE205=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1712);  
				stream_CREATE.Add(CREATE205);

				DebugLocation(285, 11);
				BUFFER206=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1714);  
				stream_BUFFER.Add(BUFFER206);

				DebugLocation(285, 18);
				ID207=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1716);  
				stream_ID.Add(ID207);

				DebugLocation(285, 21);
				OPENPAREN208=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1718);  
				stream_OPENPAREN.Add(OPENPAREN208);

				DebugLocation(285, 31);
				// Scrape.g:285:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==ID))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:285:31: tableColumnArgs
						{
						DebugLocation(285, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1720);
						tableColumnArgs209=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs209.Tree);

						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(285, 48);
				CLOSEPAREN210=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1723);  
				stream_CLOSEPAREN.Add(CLOSEPAREN210);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(285, 62);
					// Scrape.g:285:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(285, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(285, 80);
					// Scrape.g:285:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(285, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 43);
			LeaveRule("createTableStatement", 43);
			LeaveRule_createTableStatement();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:288:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 44);
		TraceIn("fileTableLocation", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION211 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression212 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION211_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(288, 1);
		try
		{
			// Scrape.g:289:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:289:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(289, 12);
			LOCATION211=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1745); 
			LOCATION211_tree = (CommonTree)adaptor.Create(LOCATION211);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION211_tree, root_0);
			DebugLocation(289, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation1748);
			mathExpression212=mathExpression();
			PopFollow();

			adaptor.AddChild(root_0, mathExpression212.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 44);
			LeaveRule("fileTableLocation", 44);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:292:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 45);
		TraceIn("fileTableWithStatement", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH213 = default(CommonToken);
		CommonToken OPENPAREN214 = default(CommonToken);
		CommonToken CLOSEPAREN216 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH213_tree = default(CommonTree);
		CommonTree OPENPAREN214_tree = default(CommonTree);
		CommonTree CLOSEPAREN216_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(292, 1);
		try
		{
			// Scrape.g:293:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:293:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(293, 4);
			WITH213=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1760);  
			stream_WITH.Add(WITH213);

			DebugLocation(293, 9);
			OPENPAREN214=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1762);  
			stream_OPENPAREN.Add(OPENPAREN214);

			DebugLocation(293, 19);
			// Scrape.g:293:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==FIELD_TERMINATOR||LA44_1==ROW_TERMINATOR))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:293:19: fileTableWithVariablesStatement
					{
					DebugLocation(293, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1764);
					fileTableWithVariablesStatement215=fileTableWithVariablesStatement();
					PopFollow();

					stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement215.Tree);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }

			DebugLocation(293, 52);
			CLOSEPAREN216=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1767);  
			stream_CLOSEPAREN.Add(CLOSEPAREN216);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(293, 66);
				// Scrape.g:293:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(293, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(293, 73);
				// Scrape.g:293:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(293, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 45);
			LeaveRule("fileTableWithStatement", 45);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:296:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 46);
		TraceIn("fileTableWithVariablesStatement", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA218 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement217 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement219 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(296, 1);
		try
		{
			// Scrape.g:297:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:297:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(297, 4);
			// Scrape.g:297:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==FIELD_TERMINATOR||LA45_1==ROW_TERMINATOR))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==EQUALS))
					{
						int LA45_3 = input.LA(3);

						if ((LA45_3==STRING_LITERAL))
						{
							int LA45_4 = input.LA(4);

							if ((LA45_4==COMMA))
							{
								alt45 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:297:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(297, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1790);
					fileTableWithVariableStatement217=fileTableWithVariableStatement();
					PopFollow();

					stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement217.Tree);
					DebugLocation(297, 36);
					COMMA218=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1792);  
					stream_COMMA.Add(COMMA218);


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(297, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1796);
			fileTableWithVariableStatement219=fileTableWithVariableStatement();
			PopFollow();

			stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement219.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(297, 78);
				// Scrape.g:297:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(297, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 46);
			LeaveRule("fileTableWithVariablesStatement", 46);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:300:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 47);
		TraceIn("fileTableWithVariableStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set220 = default(CommonToken);
		CommonToken EQUALS221 = default(CommonToken);
		CommonToken STRING_LITERAL222 = default(CommonToken);

		CommonTree set220_tree = default(CommonTree);
		CommonTree EQUALS221_tree = default(CommonTree);
		CommonTree STRING_LITERAL222_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(300, 1);
		try
		{
			// Scrape.g:301:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:301:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(301, 39);

			set220=(CommonToken)input.LT(1);
			set220=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set220), root_0);
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(301, 47);
			EQUALS221=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement1821); 
			DebugLocation(301, 49);
			STRING_LITERAL222=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement1824); 
			STRING_LITERAL222_tree = (CommonTree)adaptor.Create(STRING_LITERAL222);
			adaptor.AddChild(root_0, STRING_LITERAL222_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 47);
			LeaveRule("fileTableWithVariableStatement", 47);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:304:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 48);
		TraceIn("tableColumnArgs", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA224 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg223 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg225 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(304, 1);
		try
		{
			// Scrape.g:305:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:305:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(305, 4);
			// Scrape.g:305:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ID))
				{
					int LA46_2 = input.LA(2);

					if ((LA46_2==FLOAT||LA46_2==IDENTITY||LA46_2==INTEGER||LA46_2==STRING))
					{
						int LA46_3 = input.LA(3);

						if ((LA46_3==COMMA))
						{
							alt46 = 1;
						}


					}


				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:305:5: tableColumnArg COMMA
					{
					DebugLocation(305, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs1836);
					tableColumnArg223=tableColumnArg();
					PopFollow();

					stream_tableColumnArg.Add(tableColumnArg223.Tree);
					DebugLocation(305, 20);
					COMMA224=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs1838);  
					stream_COMMA.Add(COMMA224);


					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }

			DebugLocation(305, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs1842);
			tableColumnArg225=tableColumnArg();
			PopFollow();

			stream_tableColumnArg.Add(tableColumnArg225.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 305:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(305, 46);
				// Scrape.g:305:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(305, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(305, 66);
				// Scrape.g:305:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(305, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 48);
			LeaveRule("tableColumnArgs", 48);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:308:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 49);
		TraceIn("tableColumnArg", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID226 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(308, 1);
		try
		{
			// Scrape.g:309:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:309:4: ID dataType
			{
			DebugLocation(309, 4);
			ID226=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg1863);  
			stream_ID.Add(ID226);

			DebugLocation(309, 7);
			PushFollow(Follow._dataType_in_tableColumnArg1865);
			dataType227=dataType();
			PopFollow();

			stream_dataType.Add(dataType227.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 309:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(309, 19);
				// Scrape.g:309:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(309, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(309, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(309, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 49);
			LeaveRule("tableColumnArg", 49);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:312:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 50);
		TraceIn("dataType", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set228 = default(CommonToken);

		CommonTree set228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(312, 1);
		try
		{
			// Scrape.g:313:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(313, 2);

			set228=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set228));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 50);
			LeaveRule("dataType", 50);
			LeaveRule_dataType();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"
	#endregion Rules


	#region DFA
	private DFA26 dfa26;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa26 = new DFA26( this );
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\xD7\xFFFF";
		private const string DFA26_eofS =
			"\x2\xFFFF\x2\x7\xB\xFFFF\x1\x7\x7\xFFFF\x2\x7\xB\xFFFF\x1\x7\x19\xFFFF"+
			"\x1\x7\x2A\xFFFF\x1\x7\x1\xFFFF\x1\x7\x6\xFFFF\x1\x7\x64\xFFFF";
		private const string DFA26_minS =
			"\x1\xA\x1\x51\x2\xE\x1\x27\x1\x56\x1\x27\x2\xFFFF\x2\x27\x1\x51\x1\x62"+
			"\x1\x15\x1\x6\x1\xE\x1\x51\x1\x1B\x1\x15\x1\x56\x1\x2E\x1\x27\x1\x51"+
			"\x2\xE\x1\x56\x7\x27\x1\x6\x1\x5C\x1\x62\x1\xE\x1\x51\x1\x6\x1\x51\x1"+
			"\x5C\x1\x15\x1\x51\x1\x5C\x1\x15\x1\x51\x1\x5C\x1\x15\x1\x51\x1\x5C\x1"+
			"\x15\x1\x51\x1\x5C\x1\x15\x1\x51\x1\x5C\x1\x15\x1\x1B\x1\x51\x2\x36\x1"+
			"\x27\x1\xE\x1\x51\x2\x1B\x1\x56\x2\x27\x1\x56\x1\x27\x1\x56\x1\x27\x1"+
			"\x56\x1\x27\x1\x56\x1\x27\x1\x56\x1\x27\x1\x36\x2\x51\x1\x19\x1\x15\x1"+
			"\x51\x1\x1B\x1\x51\x1\x6\x1\x51\x1\x19\x1\x15\x1\x5C\x1\x6\x1\x5C\x1"+
			"\x6\x1\x5C\x1\x6\x1\x5C\x1\x6\x1\x5C\x1\x6\x1\x5C\x1\x48\x1\x56\x1\x27"+
			"\x1\xE\x1\x27\x1\xE\x1\x1B\x1\x51\x2\x36\x1\x56\x1\x27\x1\xE\x1\x27\x1"+
			"\x51\x2\x36\x1\x51\x2\x36\x1\x51\x2\x36\x1\x51\x2\x36\x1\x51\x2\x36\x1"+
			"\x51\x1\x6\x1\x51\x1\x1A\x1\x15\x1\x19\x1\x51\x1\x36\x1\x51\x1\x6\x1"+
			"\x51\x1\x1A\x1\x15\x1\x19\x1\x36\x1\x51\x1\x36\x1\x51\x1\x36\x1\x51\x1"+
			"\x36\x1\x51\x1\x36\x1\x51\x1\x62\x1\x51\x2\x19\x1\x56\x1\x27\x1\x1B\x1"+
			"\x48\x1\x51\x2\x19\x1\x56\x1\x27\x5\x48\x1\x19\x1\x51\x1\x6\x1\x1A\x1"+
			"\x51\x1\x19\x1\x51\x1\x6\x1\x1A\x5\x51\x1\x19\x1\x51\x2\x1A\x1\x5C\x1"+
			"\x19\x1\x51\x2\x1A\x5\x5C\x1\x51\x1\x1A\x2\x51\x1\x1A\x1\x51\x1\x19\x1"+
			"\x1A\x1\x19\x1\x1A\x2\x51\x2\x1A";
		private const string DFA26_maxS =
			"\x2\x51\x2\x65\x1\x62\x1\x56\x1\x51\x2\xFFFF\x1\x27\x2\x51\x2\x62\x1"+
			"\x5B\x1\x65\x1\x51\x2\x3A\x1\x56\x1\x51\x1\x27\x1\x51\x2\x65\x1\x56\x6"+
			"\x51\x1\x27\x1\x5B\x1\x5C\x1\x62\x1\x65\x1\x51\x1\x5B\x1\x51\x2\x5C\x1"+
			"\x51\x2\x5C\x1\x51\x2\x5C\x1\x51\x2\x5C\x1\x51\x2\x5C\x1\x51\x2\x5C\x1"+
			"\x3A\x1\x51\x2\x62\x1\x51\x1\x65\x1\x51\x2\x3A\x1\x56\x1\x51\x1\x27\x1"+
			"\x56\x1\x27\x1\x56\x1\x27\x1\x56\x1\x27\x1\x56\x1\x27\x1\x56\x1\x27\x1"+
			"\x62\x2\x51\x2\x62\x1\x51\x1\x3A\x1\x51\x1\x5B\x1\x51\x2\x62\x1\x5C\x1"+
			"\x5B\x1\x5C\x1\x5B\x1\x5C\x1\x5B\x1\x5C\x1\x5B\x1\x5C\x1\x5B\x1\x5C\x1"+
			"\x62\x1\x56\x1\x51\x1\x65\x1\x27\x1\x65\x1\x48\x1\x51\x2\x5C\x1\x56\x1"+
			"\x51\x1\x65\x1\x27\x1\x51\x2\x5C\x1\x51\x2\x5C\x1\x51\x2\x5C\x1\x51\x2"+
			"\x5C\x1\x51\x2\x5C\x1\x51\x1\x5B\x1\x51\x2\x1A\x1\x62\x1\x51\x1\x5C\x1"+
			"\x51\x1\x5B\x1\x51\x2\x1A\x1\x62\x1\x5C\x1\x51\x1\x5C\x1\x51\x1\x5C\x1"+
			"\x51\x1\x5C\x1\x51\x1\x5C\x1\x51\x1\x62\x1\x51\x2\x62\x1\x56\x1\x27\x1"+
			"\x3A\x1\x5C\x1\x51\x2\x62\x1\x56\x1\x27\x5\x5C\x1\x62\x1\x51\x1\x5B\x1"+
			"\x1A\x1\x51\x1\x62\x1\x51\x1\x5B\x1\x1A\x5\x51\x1\x62\x1\x51\x2\x36\x1"+
			"\x5C\x1\x62\x1\x51\x2\x36\x5\x5C\x1\x51\x1\x36\x2\x51\x1\x36\x1\x51\x1"+
			"\x62\x1\x48\x1\x62\x1\x48\x2\x51\x2\x1A";
		private const string DFA26_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1\xCE\xFFFF";
		private const string DFA26_specialS =
			"\xD7\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x4\x1C\xFFFF\x1\x3\x6\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1"+
				"\x11\xFFFF\x1\x2",
				"\x1\x5",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x2\xFFFF\x1\x9\x2\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF"+
				"\x1\x7\x12\xFFFF\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\xD\x6\xFFFF\x1\xC\xC\xFFFF\x1\xC\x3\xFFFF\x1\xB\x11\xFFFF\x1\xC"+
				"\x10\xFFFF\x1\xA",
				"\x1\xE",
				"\x1\x3\x6\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1\x11\xFFFF\x1\x2",
				"",
				"",
				"\x1\xF",
				"\x1\x12\x6\xFFFF\x1\x11\xC\xFFFF\x1\x11\x3\xFFFF\x1\x10\x11\xFFFF\x1"+
				"\x11",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15\x4C\xFFFF\x1\x14",
				"\x1\x16\x1F\xFFFF\x1\x18\x34\xFFFF\x1\x17",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x19",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x20\x5\xFFFF\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C"+
				"\x8\xFFFF\x1\x1F",
				"\x1\x21",
				"\x1\x22\xC\xFFFF\x1\x22\x15\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x8\xFFFF"+
				"\x1\x25\x9\xFFFF\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x8\xFFFF"+
				"\x1\x25\x9\xFFFF\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x26",
				"\x1\x29\x6\xFFFF\x1\x28\xC\xFFFF\x1\x28\x3\xFFFF\x1\x27\x11\xFFFF\x1"+
				"\x28",
				"\x1\x2C\x6\xFFFF\x1\x2B\xC\xFFFF\x1\x2B\x3\xFFFF\x1\x2A\x11\xFFFF\x1"+
				"\x2B",
				"\x1\x2F\x6\xFFFF\x1\x2E\xC\xFFFF\x1\x2E\x3\xFFFF\x1\x2D\x11\xFFFF\x1"+
				"\x2E",
				"\x1\x32\x6\xFFFF\x1\x31\xC\xFFFF\x1\x31\x3\xFFFF\x1\x30\x11\xFFFF\x1"+
				"\x31",
				"\x1\x35\x6\xFFFF\x1\x34\xC\xFFFF\x1\x34\x3\xFFFF\x1\x33\x11\xFFFF\x1"+
				"\x34",
				"\x1\x38\x6\xFFFF\x1\x37\xC\xFFFF\x1\x37\x3\xFFFF\x1\x36\x11\xFFFF\x1"+
				"\x37",
				"\x1\x39",
				"\x1\x3A\x1F\xFFFF\x1\x3C\x34\xFFFF\x1\x3B",
				"\x1\x3D",
				"\x1\x14",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x8\xFFFF"+
				"\x1\x25\x9\xFFFF\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x3E",
				"\x1\x3F\x1F\xFFFF\x1\x41\x34\xFFFF\x1\x40",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44\x46\xFFFF\x1\x43",
				"\x1\x45",
				"\x1\x43",
				"\x1\x46\x46\xFFFF\x1\x43",
				"\x1\x47",
				"\x1\x43",
				"\x1\x48\x46\xFFFF\x1\x43",
				"\x1\x49",
				"\x1\x43",
				"\x1\x4A\x46\xFFFF\x1\x43",
				"\x1\x4B",
				"\x1\x43",
				"\x1\x4C\x46\xFFFF\x1\x43",
				"\x1\x4D",
				"\x1\x43",
				"\x1\x4E\x46\xFFFF\x1\x43",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x4F",
				"\x1\x50\x2B\xFFFF\x1\x14",
				"\x1\x50\x2B\xFFFF\x1\x14",
				"\x1\x53\x6\xFFFF\x1\x52\xC\xFFFF\x1\x52\x3\xFFFF\x1\x51\x11\xFFFF\x1"+
				"\x52",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\x7\xFFFF\x1\x54\x2\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x55",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x57",
				"\x1\x5A\x6\xFFFF\x1\x59\xC\xFFFF\x1\x59\x3\xFFFF\x1\x58\x11\xFFFF\x1"+
				"\x59",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x50\x2B\xFFFF\x1\x14",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68\x1\x69\x47\xFFFF\x1\x14",
				"\x1\x6A\x3\xFFFF\x1\x68\x1\x69\x47\xFFFF\x1\x14",
				"\x1\x6B",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x6C",
				"\x1\x6D\x1F\xFFFF\x1\x6F\x34\xFFFF\x1\x6E",
				"\x1\x70",
				"\x1\x71\x1\x72\x47\xFFFF\x1\xA",
				"\x1\x73\x3\xFFFF\x1\x71\x1\x72\x47\xFFFF\x1\xA",
				"\x1\x43",
				"\x1\x74\x1F\xFFFF\x1\x76\x34\xFFFF\x1\x75",
				"\x1\x43",
				"\x1\x77\x1F\xFFFF\x1\x79\x34\xFFFF\x1\x78",
				"\x1\x43",
				"\x1\x7A\x1F\xFFFF\x1\x7C\x34\xFFFF\x1\x7B",
				"\x1\x43",
				"\x1\x7D\x1F\xFFFF\x1\x7F\x34\xFFFF\x1\x7E",
				"\x1\x43",
				"\x1\x80\x1F\xFFFF\x1\x82\x34\xFFFF\x1\x81",
				"\x1\x43",
				"\x1\x83\x19\xFFFF\x1\x14",
				"\x1\x84",
				"\x1\x87\x6\xFFFF\x1\x86\xC\xFFFF\x1\x86\x3\xFFFF\x1\x85\x11\xFFFF\x1"+
				"\x86",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x1D\xFFFF"+
				"\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x88",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\xA\xFFFF\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F"+
				"\xD\xFFFF\x1\x89",
				"\x1\x8A",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\x8C",
				"\x1\x8F\x6\xFFFF\x1\x8E\xC\xFFFF\x1\x8E\x3\xFFFF\x1\x8D\x11\xFFFF\x1"+
				"\x8E",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x3\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x2\x7\x1\xFFFF\x1\x7\x1D\xFFFF"+
				"\x1\x7\x12\xFFFF\x1\x7\x6\xFFFF\x1\x7",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\x93",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\x95",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\x97",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\x99",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\x9B",
				"\x1\x9C\x1F\xFFFF\x1\x9E\x34\xFFFF\x1\x9D",
				"\x1\x9F",
				"\x1\x69",
				"\x1\xA0\x4\xFFFF\x1\x69",
				"\x1\x68\x1\x69\x47\xFFFF\x1\x14",
				"\x1\xA1",
				"\x1\x8B\x25\xFFFF\x1\x43",
				"\x1\xA2",
				"\x1\xA3\x1F\xFFFF\x1\xA5\x34\xFFFF\x1\xA4",
				"\x1\xA6",
				"\x1\x72",
				"\x1\xA7\x4\xFFFF\x1\x72",
				"\x1\x71\x1\x72\x47\xFFFF\x1\xA",
				"\x1\x92\x25\xFFFF\x1\x43",
				"\x1\xA8",
				"\x1\x94\x25\xFFFF\x1\x43",
				"\x1\xA9",
				"\x1\x96\x25\xFFFF\x1\x43",
				"\x1\xAA",
				"\x1\x98\x25\xFFFF\x1\x43",
				"\x1\xAB",
				"\x1\x9A\x25\xFFFF\x1\x43",
				"\x1\xAC",
				"\x1\x14",
				"\x1\xAD",
				"\x1\x68\x1\x69\x1B\xFFFF\x1\xAE\x2B\xFFFF\x1\x14",
				"\x1\x68\x1\x69\x1B\xFFFF\x1\xAE\x2B\xFFFF\x1\x14",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\x1A\x8\xFFFF\x1\x1D\x1\x1E\xA\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\xB1\x13\xFFFF\x1\x43",
				"\x1\xB2",
				"\x1\x71\x1\x72\x1B\xFFFF\x1\xB3\x2B\xFFFF\x1\xA",
				"\x1\x71\x1\x72\x1B\xFFFF\x1\xB3\x2B\xFFFF\x1\xA",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6\x13\xFFFF\x1\x43",
				"\x1\xB7\x13\xFFFF\x1\x43",
				"\x1\xB8\x13\xFFFF\x1\x43",
				"\x1\xB9\x13\xFFFF\x1\x43",
				"\x1\xBA\x13\xFFFF\x1\x43",
				"\x1\x68\x1\x69\x1B\xFFFF\x1\xAE\x2B\xFFFF\x1\x14",
				"\x1\xBB",
				"\x1\xBC\x1F\xFFFF\x1\xBE\x34\xFFFF\x1\xBD",
				"\x1\x69",
				"\x1\xBF",
				"\x1\x71\x1\x72\x1B\xFFFF\x1\xB3\x2B\xFFFF\x1\xA",
				"\x1\xC0",
				"\x1\xC1\x1F\xFFFF\x1\xC3\x34\xFFFF\x1\xC2",
				"\x1\x72",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\x1\x68\x1\x69\x2D\xFFFF\x1\xC9\x19\xFFFF\x1\x14",
				"\x1\xCA",
				"\x1\x69\x1B\xFFFF\x1\xCB",
				"\x1\x69\x1B\xFFFF\x1\xCB",
				"\x1\x43",
				"\x1\x71\x1\x72\x2D\xFFFF\x1\xCC\x19\xFFFF\x1\xA",
				"\x1\xCD",
				"\x1\x72\x1B\xFFFF\x1\xCE",
				"\x1\x72\x1B\xFFFF\x1\xCE",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\xCF",
				"\x1\x69\x1B\xFFFF\x1\xCB",
				"\x1\xD0",
				"\x1\xD1",
				"\x1\x72\x1B\xFFFF\x1\xCE",
				"\x1\xD2",
				"\x1\x68\x1\x69\x47\xFFFF\x1\x14",
				"\x1\x69\x2D\xFFFF\x1\xD3",
				"\x1\x71\x1\x72\x47\xFFFF\x1\xA",
				"\x1\x72\x2D\xFFFF\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\x69",
				"\x1\x72"
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "()* loopback of 219:11: ( selectArgs COMMA )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program207 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program222 = new BitSet(new ulong[]{0x2C8011040000UL,0x40000800UL});
		public static readonly BitSet _noBraceBlock_in_program224 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition260 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition262 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition264 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition266 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition269 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _block_in_procedureDefinition271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable340 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_truncateTable342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall364 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_procedureCall366 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall368 = new BitSet(new ulong[]{0x408000008000UL,0x20000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall370 = new BitSet(new ulong[]{0x408000008000UL,0x20000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList396 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_procedureCallList398 = new BitSet(new ulong[]{0x408000000000UL,0x20000UL});
		public static readonly BitSet _callArgs_in_procedureCallList402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement434 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement436 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _proxyList_in_proxyStatement438 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement440 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList464 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_proxyList466 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest490 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _TEST_in_proxyTest492 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest494 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _sqlStatement_in_proxyTest496 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement513 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement515 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_eachStatement519 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IN_in_eachStatement521 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_eachStatement525 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement527 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _block_in_eachStatement529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock554 = new BitSet(new ulong[]{0x2C8011040002UL,0x40000800UL});
		public static readonly BitSet _OPENBRACE_in_block575 = new BitSet(new ulong[]{0x2C8011044000UL,0x40000800UL});
		public static readonly BitSet _statement_in_block577 = new BitSet(new ulong[]{0x2C8011044000UL,0x40000800UL});
		public static readonly BitSet _CLOSEBRACE_in_block580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression600 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression602 = new BitSet(new ulong[]{0x408000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression604 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _TO_in_expandExpression606 = new BitSet(new ulong[]{0x408000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression608 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression610 = new BitSet(new ulong[]{0x1000000000000002UL});
		public static readonly BitSet _expandBlock_in_expandExpression612 = new BitSet(new ulong[]{0x1000000000000002UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock637 = new BitSet(new ulong[]{0x2800408000004000UL,0x10000020000UL});
		public static readonly BitSet _mathExpression_in_expandBlock639 = new BitSet(new ulong[]{0x2800408000004000UL,0x10000020000UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_expandVar663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_expandVar668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion702 = new BitSet(new ulong[]{0x0UL,0x20800UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion716 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_downloadPageExpresssion718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion732 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadPageExpresssion734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression753 = new BitSet(new ulong[]{0x0UL,0x20800UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression767 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_downloadImageExpression769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression783 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadImageExpression785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference808 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _DOT_in_tableMemberReference810 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement838 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement840 = new BitSet(new ulong[]{0x2800408020C00000UL,0x10000020800UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression894 = new BitSet(new ulong[]{0x100000000000002UL,0x1UL});
		public static readonly BitSet _set_in_mathExpression897 = new BitSet(new ulong[]{0x2800408000000000UL,0x10000020000UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression908 = new BitSet(new ulong[]{0x100000000000002UL,0x1UL});
		public static readonly BitSet _atom_in_mathExpressionGroup926 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _set_in_mathExpressionGroup929 = new BitSet(new ulong[]{0x2800408000000000UL,0x10000020000UL});
		public static readonly BitSet _atom_in_mathExpressionGroup940 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _ID_in_atom961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_atom974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_atom986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1001 = new BitSet(new ulong[]{0x2800408000000000UL,0x10000020000UL});
		public static readonly BitSet _mathExpression_in_atom1004 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1048 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_insertStatement1050 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1067 = new BitSet(new ulong[]{0x2800408000000000UL,0x10000020000UL});
		public static readonly BitSet _mathExpression_in_insertStatement1069 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1085 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_insertStatement1087 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1113 = new BitSet(new ulong[]{0x800000002UL,0x2000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1115 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1144 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_whereStatement1147 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_whereStatement1149 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_whereStatement1152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1163 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_fromStatement1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1179 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1187 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1195 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _expandExpression_in_fromStatement1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1209 = new BitSet(new ulong[]{0x8800408000000400UL,0x20000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1212 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_selectStatement1214 = new BitSet(new ulong[]{0x8800408000000400UL,0x20000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1232 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1260 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _PLUS_in_selectArgs1262 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_selectArgs1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1302 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1304 = new BitSet(new ulong[]{0x6000000UL,0x400000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1308 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1310 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1331 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_caseStatement1333 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1335 = new BitSet(new ulong[]{0x6000000UL,0x400000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1339 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1341 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1389 = new BitSet(new ulong[]{0x800400000000000UL,0x20000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1391 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1393 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1416 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1418 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1420 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1443 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_boolExpression1445 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1453 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _LESSTHAN_in_boolExpression1455 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1463 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _LESSTHANEQUAL_in_boolExpression1465 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1473 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _GREATERTHAN_in_boolExpression1475 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1483 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _GREATERTHANEQUAL_in_boolExpression1485 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1493 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _NOTEQUAL_in_boolExpression1495 = new BitSet(new ulong[]{0x8800408000000000UL,0x20000UL});
		public static readonly BitSet _selectArg_in_boolExpression1498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectArg1519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectArg1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1543 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1545 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1547 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1575 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1577 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1592 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1605 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1625 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1627 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1652 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1675 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1677 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1679 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1681 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1683 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1686 = new BitSet(new ulong[]{0x20000000000000UL,0x4000000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1688 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1712 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1714 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1716 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1718 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1720 = new BitSet(new ulong[]{0x8000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1745 = new BitSet(new ulong[]{0x2800408000000000UL,0x10000020000UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1760 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1762 = new BitSet(new ulong[]{0x80008000UL,0x400UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1764 = new BitSet(new ulong[]{0x80008000UL,0x400UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1790 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1792 = new BitSet(new ulong[]{0x80000000UL,0x400UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement1812 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement1821 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement1824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1836 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs1838 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg1863 = new BitSet(new ulong[]{0x810400000000UL,0x10000UL});
		public static readonly BitSet _dataType_in_tableColumnArg1865 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
