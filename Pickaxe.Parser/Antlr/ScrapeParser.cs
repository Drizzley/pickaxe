//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2015-09-03 17:59:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMENT", "CREATE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FLOAT", "FROM", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IN", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "NEWLINE", "NOTEQUAL", "NULL", "OPENBRACE", "OPENPAREN", "OTHERCHARS", "PICK", "PLUS", "POST_PICK", "PRE_PICK", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "STRING", "STRING_LITERAL", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "TO", "VARIABLE", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WITH", "WS", "'$'"
	};
	public const int EOF=-1;
	public const int T__100=100;
	public const int APOSTRAPHE=4;
	public const int ASTERISK=5;
	public const int ATTRIBUTE=6;
	public const int BLOCK=7;
	public const int BUFFER=8;
	public const int BUFFER_TABLE=9;
	public const int CASE=10;
	public const int CASE_BOOL=11;
	public const int CASE_EXPRESSION=12;
	public const int CASE_VAR=13;
	public const int CLOSEBRACE=14;
	public const int CLOSEPAREN=15;
	public const int COMMA=16;
	public const int COMMENT=17;
	public const int CREATE=18;
	public const int DIGIT=19;
	public const int DIV=20;
	public const int DOT=21;
	public const int DOWNLOAD_IMAGE=22;
	public const int DOWNLOAD_PAGE=23;
	public const int EACH=24;
	public const int ELSE=25;
	public const int END=26;
	public const int EQUALS=27;
	public const int EXPAND=28;
	public const int EXPAND_INTERATION_VARIABLE=29;
	public const int FIELD_TERMINATOR=30;
	public const int FILE=31;
	public const int FILE_TABLE=32;
	public const int FLOAT=33;
	public const int FROM=34;
	public const int GREATERTHAN=35;
	public const int GREATERTHANEQUAL=36;
	public const int HTML=37;
	public const int ID=38;
	public const int IDENTITY=39;
	public const int IN=40;
	public const int INSERT_INTO=41;
	public const int INSERT_INTO_DIRECTORY=42;
	public const int INSERT_OVERWRITE=43;
	public const int INT=44;
	public const int INTEGER=45;
	public const int LESSTHAN=46;
	public const int LESSTHANEQUAL=47;
	public const int LETTER=48;
	public const int LINE_COMMENT_DASH=49;
	public const int LINE_COMMENT_SLASH=50;
	public const int LOCATION=51;
	public const int MATCH=52;
	public const int MEMBER_REFERENCE=53;
	public const int MINIS=54;
	public const int NEWLINE=55;
	public const int NOTEQUAL=56;
	public const int NULL=57;
	public const int OPENBRACE=58;
	public const int OPENPAREN=59;
	public const int OTHERCHARS=60;
	public const int PICK=61;
	public const int PLUS=62;
	public const int POST_PICK=63;
	public const int PRE_PICK=64;
	public const int PROGRAM=65;
	public const int PROXIES=66;
	public const int PROXY_LIST=67;
	public const int QUOTE=68;
	public const int REPLACE=69;
	public const int ROW_REFERENCE=70;
	public const int ROW_TERMINATOR=71;
	public const int SELECT=72;
	public const int SELECT_ALL=73;
	public const int SELECT_ARG=74;
	public const int SELECT_ID=75;
	public const int SELECT_STATEMENT=76;
	public const int STRING=77;
	public const int STRING_LITERAL=78;
	public const int TABLE_COLUMN_ARG=79;
	public const int TABLE_COLUMN_ARGS=80;
	public const int TABLE_MEMBER_REFERENCE=81;
	public const int TABLE_VARIABLE_REFERENCE=82;
	public const int TAKE=83;
	public const int TAKE_ATTRIBUTE=84;
	public const int TAKE_HTML=85;
	public const int TAKE_TEXT=86;
	public const int TEST=87;
	public const int TEXT=88;
	public const int THEN=89;
	public const int TO=90;
	public const int VARIABLE=91;
	public const int VARIABLE_DECLARATION=92;
	public const int VARIABLE_REFERENCE=93;
	public const int WHEN=94;
	public const int WHEN_BOOL_STATEMENT=95;
	public const int WHEN_LITERAL_STATEMENT=96;
	public const int WHERE=97;
	public const int WITH=98;
	public const int WS=99;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:61:8: public program : ( ( statement )+ EOF -> ^( PROGRAM ( statement )+ ) | proxyStatement ( statement )* EOF -> ^( PROGRAM proxyStatement ( statement )* ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(61, 1);
		try
		{
			// Scrape.g:62:2: ( ( statement )+ EOF -> ^( PROGRAM ( statement )+ ) | proxyStatement ( statement )* EOF -> ^( PROGRAM proxyStatement ( statement )* ) )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==CREATE||LA3_1==EACH||LA3_1==ID||LA3_1==INSERT_INTO||LA3_1==INSERT_OVERWRITE||LA3_1==SELECT))
			{
				alt3 = 1;
			}
			else if ((LA3_1==PROXIES))
			{
				alt3 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:62:4: ( statement )+ EOF
				{
				DebugLocation(62, 4);
				// Scrape.g:62:4: ( statement )+
				int cnt1=0;
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_1 = input.LA(1);

					if ((LA1_1==CREATE||LA1_1==EACH||LA1_1==ID||LA1_1==INSERT_INTO||LA1_1==INSERT_OVERWRITE||LA1_1==SELECT))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch (alt1)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:62:4: statement
						{
						DebugLocation(62, 4);
						PushFollow(Follow._statement_in_program207);
						statement1=statement();
						PopFollow();

						stream_statement.Add(statement1.Tree);

						}
						break;

					default:
						if (cnt1 >= 1)
							goto loop1;

						EarlyExitException eee1 = new EarlyExitException( 1, input );
						DebugRecognitionException(eee1);
						throw eee1;
					}
					cnt1++;
				}
				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(62, 15);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program210);  
				stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 62:19: -> ^( PROGRAM ( statement )+ )
				{
					DebugLocation(62, 22);
					// Scrape.g:62:22: ^( PROGRAM ( statement )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(62, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(62, 32);
					if (!(stream_statement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_statement.HasNext )
					{
						DebugLocation(62, 32);
						adaptor.AddChild(root_1, stream_statement.NextTree());

					}
					stream_statement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:63:4: proxyStatement ( statement )* EOF
				{
				DebugLocation(63, 4);
				PushFollow(Follow._proxyStatement_in_program224);
				proxyStatement3=proxyStatement();
				PopFollow();

				stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(63, 19);
				// Scrape.g:63:19: ( statement )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1==CREATE||LA2_1==EACH||LA2_1==ID||LA2_1==INSERT_INTO||LA2_1==INSERT_OVERWRITE||LA2_1==SELECT))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:63:19: statement
						{
						DebugLocation(63, 19);
						PushFollow(Follow._statement_in_program226);
						statement4=statement();
						PopFollow();

						stream_statement.Add(statement4.Tree);

						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(63, 30);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program229);  
				stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: statement, proxyStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 63:34: -> ^( PROGRAM proxyStatement ( statement )* )
				{
					DebugLocation(63, 37);
					// Scrape.g:63:37: ^( PROGRAM proxyStatement ( statement )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(63, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(63, 47);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(63, 62);
					// Scrape.g:63:62: ( statement )*
					while ( stream_statement.HasNext )
					{
						DebugLocation(63, 62);
						adaptor.AddChild(root_1, stream_statement.NextTree());

					}
					stream_statement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:66:1: statement : ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		TraceIn("statement", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement7 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement8 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement9 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(66, 1);
		try
		{
			// Scrape.g:67:2: ( createTableStatement | sqlStatement | variableDeclarationStatement | insertStatement | eachStatement )
			int alt4=5;
			try { DebugEnterDecision(4, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt4 = 1;
				}
				break;
			case SELECT:
				{
				alt4 = 2;
				}
				break;
			case ID:
				{
				alt4 = 3;
				}
				break;
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt4 = 4;
				}
				break;
			case EACH:
				{
				alt4 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:67:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(67, 4);
				PushFollow(Follow._createTableStatement_in_statement252);
				createTableStatement6=createTableStatement();
				PopFollow();

				adaptor.AddChild(root_0, createTableStatement6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:68:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(68, 4);
				PushFollow(Follow._sqlStatement_in_statement257);
				sqlStatement7=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:69:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(69, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement262);
				variableDeclarationStatement8=variableDeclarationStatement();
				PopFollow();

				adaptor.AddChild(root_0, variableDeclarationStatement8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:70:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(70, 4);
				PushFollow(Follow._insertStatement_in_statement267);
				insertStatement9=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:71:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(71, 4);
				PushFollow(Follow._eachStatement_in_statement272);
				eachStatement10=eachStatement();
				PopFollow();

				adaptor.AddChild(root_0, eachStatement10.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:74:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 3);
		TraceIn("proxyStatement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES11 = default(CommonToken);
		CommonToken OPENPAREN12 = default(CommonToken);
		CommonToken CLOSEPAREN14 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES11_tree = default(CommonTree);
		CommonTree OPENPAREN12_tree = default(CommonTree);
		CommonTree CLOSEPAREN14_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(74, 1);
		try
		{
			// Scrape.g:75:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:75:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(75, 4);
			PROXIES11=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement283);  
			stream_PROXIES.Add(PROXIES11);

			DebugLocation(75, 12);
			OPENPAREN12=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement285);  
			stream_OPENPAREN.Add(OPENPAREN12);

			DebugLocation(75, 22);
			PushFollow(Follow._proxyList_in_proxyStatement287);
			proxyList13=proxyList();
			PopFollow();

			stream_proxyList.Add(proxyList13.Tree);
			DebugLocation(75, 32);
			CLOSEPAREN14=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement289);  
			stream_CLOSEPAREN.Add(CLOSEPAREN14);

			DebugLocation(75, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement291);
			proxyTest15=proxyTest();
			PopFollow();

			stream_proxyTest.Add(proxyTest15.Tree);


			{
			// AST REWRITE
			// elements: proxyTest, proxyList, PROXIES
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 75:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(75, 56);
				// Scrape.g:75:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(75, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(75, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(75, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 3);
			LeaveRule("proxyStatement", 3);
			LeaveRule_proxyStatement();
		}
		DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:78:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 4);
		TraceIn("proxyList", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL16 = default(CommonToken);
		CommonToken COMMA17 = default(CommonToken);
		CommonToken STRING_LITERAL18 = default(CommonToken);

		CommonTree STRING_LITERAL16_tree = default(CommonTree);
		CommonTree COMMA17_tree = default(CommonTree);
		CommonTree STRING_LITERAL18_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(78, 1);
		try
		{
			// Scrape.g:79:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:79:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(79, 4);
			// Scrape.g:79:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==STRING_LITERAL))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:79:5: STRING_LITERAL COMMA
					{
					DebugLocation(79, 5);
					STRING_LITERAL16=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList313);  
					stream_STRING_LITERAL.Add(STRING_LITERAL16);

					DebugLocation(79, 20);
					COMMA17=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList315);  
					stream_COMMA.Add(COMMA17);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(79, 28);
			STRING_LITERAL18=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList319);  
			stream_STRING_LITERAL.Add(STRING_LITERAL18);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 79:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(79, 46);
				// Scrape.g:79:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(79, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(79, 59);
				// Scrape.g:79:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(79, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 4);
			LeaveRule("proxyList", 4);
			LeaveRule_proxyList();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:82:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 5);
		TraceIn("proxyTest", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH19 = default(CommonToken);
		CommonToken TEST20 = default(CommonToken);
		CommonToken OPENBRACE21 = default(CommonToken);
		CommonToken CLOSEBRACE23 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH19_tree = default(CommonTree);
		CommonTree TEST20_tree = default(CommonTree);
		CommonTree OPENBRACE21_tree = default(CommonTree);
		CommonTree CLOSEBRACE23_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(82, 1);
		try
		{
			// Scrape.g:83:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:83:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(83, 4);
			WITH19=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest339);  
			stream_WITH.Add(WITH19);

			DebugLocation(83, 9);
			TEST20=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest341);  
			stream_TEST.Add(TEST20);

			DebugLocation(83, 14);
			OPENBRACE21=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest343);  
			stream_OPENBRACE.Add(OPENBRACE21);

			DebugLocation(83, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest345);
			sqlStatement22=sqlStatement();
			PopFollow();

			stream_sqlStatement.Add(sqlStatement22.Tree);
			DebugLocation(83, 37);
			CLOSEBRACE23=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest347);  
			stream_CLOSEBRACE.Add(CLOSEBRACE23);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 83:48: -> sqlStatement
			{
				DebugLocation(83, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 5);
			LeaveRule("proxyTest", 5);
			LeaveRule_proxyTest();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:86:1: eachStatement : EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 6);
		TraceIn("eachStatement", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH24 = default(CommonToken);
		CommonToken OPENPAREN25 = default(CommonToken);
		CommonToken IN26 = default(CommonToken);
		CommonToken CLOSEPAREN27 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH24_tree = default(CommonTree);
		CommonTree OPENPAREN25_tree = default(CommonTree);
		CommonTree IN26_tree = default(CommonTree);
		CommonTree CLOSEPAREN27_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(86, 1);
		try
		{
			// Scrape.g:87:2: ( EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:87:4: EACH OPENPAREN v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(87, 4);
			EACH24=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement362);  
			stream_EACH.Add(EACH24);

			DebugLocation(87, 9);
			OPENPAREN25=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement364);  
			stream_OPENPAREN.Add(OPENPAREN25);

			DebugLocation(87, 20);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement368);  
			stream_ID.Add(v);

			DebugLocation(87, 24);
			IN26=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement370);  
			stream_IN.Add(IN26);

			DebugLocation(87, 28);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement374);  
			stream_ID.Add(t);

			DebugLocation(87, 32);
			CLOSEPAREN27=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement376);  
			stream_CLOSEPAREN.Add(CLOSEPAREN27);

			DebugLocation(87, 43);
			PushFollow(Follow._block_in_eachStatement378);
			block28=block();
			PopFollow();

			stream_block.Add(block28.Tree);


			{
			// AST REWRITE
			// elements: EACH, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 87:49: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(87, 52);
				// Scrape.g:87:52: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(87, 54);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(87, 59);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(87, 84);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(87, 113);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 6);
			LeaveRule("eachStatement", 6);
			LeaveRule_eachStatement();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:90:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 7);
		TraceIn("block", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE29 = default(CommonToken);
		CommonToken CLOSEBRACE31 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement30 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE29_tree = default(CommonTree);
		CommonTree CLOSEBRACE31_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(90, 1);
		try
		{
			// Scrape.g:91:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:91:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(91, 4);
			OPENBRACE29=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block403);  
			stream_OPENBRACE.Add(OPENBRACE29);

			DebugLocation(91, 14);
			// Scrape.g:91:14: ( statement )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==CREATE||LA6_1==EACH||LA6_1==ID||LA6_1==INSERT_INTO||LA6_1==INSERT_OVERWRITE||LA6_1==SELECT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:91:14: statement
					{
					DebugLocation(91, 14);
					PushFollow(Follow._statement_in_block405);
					statement30=statement();
					PopFollow();

					stream_statement.Add(statement30.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(91, 25);
			CLOSEBRACE31=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block408);  
			stream_CLOSEBRACE.Add(CLOSEBRACE31);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 91:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(91, 39);
				// Scrape.g:91:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(91, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(91, 47);
				// Scrape.g:91:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(91, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 7);
			LeaveRule("block", 7);
			LeaveRule_block();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:94:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 8);
		TraceIn("expandExpression", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND32 = default(CommonToken);
		CommonToken OPENPAREN33 = default(CommonToken);
		CommonToken TO35 = default(CommonToken);
		CommonToken CLOSEPAREN37 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar36 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND32_tree = default(CommonTree);
		CommonTree OPENPAREN33_tree = default(CommonTree);
		CommonTree TO35_tree = default(CommonTree);
		CommonTree CLOSEPAREN37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(94, 1);
		try
		{
			// Scrape.g:95:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:95:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(95, 4);
			EXPAND32=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression428);  
			stream_EXPAND.Add(EXPAND32);

			DebugLocation(95, 11);
			OPENPAREN33=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression430);  
			stream_OPENPAREN.Add(OPENPAREN33);

			DebugLocation(95, 21);
			PushFollow(Follow._expandVar_in_expandExpression432);
			expandVar34=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar34.Tree);
			DebugLocation(95, 31);
			TO35=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression434);  
			stream_TO.Add(TO35);

			DebugLocation(95, 34);
			PushFollow(Follow._expandVar_in_expandExpression436);
			expandVar36=expandVar();
			PopFollow();

			stream_expandVar.Add(expandVar36.Tree);
			DebugLocation(95, 44);
			CLOSEPAREN37=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression438);  
			stream_CLOSEPAREN.Add(CLOSEPAREN37);

			DebugLocation(95, 55);
			// Scrape.g:95:55: ( expandBlock )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==OPENBRACE))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:95:55: expandBlock
					{
					DebugLocation(95, 55);
					PushFollow(Follow._expandBlock_in_expandExpression440);
					expandBlock38=expandBlock();
					PopFollow();

					stream_expandBlock.Add(expandBlock38.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: expandBlock, EXPAND, expandVar, expandVar
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 95:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(95, 71);
				// Scrape.g:95:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(95, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(95, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(95, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(95, 100);
				// Scrape.g:95:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(95, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 8);
			LeaveRule("expandExpression", 8);
			LeaveRule_expandExpression();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:98:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 9);
		TraceIn("expandBlock", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE39 = default(CommonToken);
		CommonToken CLOSEBRACE41 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE39_tree = default(CommonTree);
		CommonTree CLOSEBRACE41_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(98, 1);
		try
		{
			// Scrape.g:99:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:99:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(99, 4);
			OPENBRACE39=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock465);  
			stream_OPENBRACE.Add(OPENBRACE39);

			DebugLocation(99, 14);
			// Scrape.g:99:14: ( mathExpression )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==ID||LA8_1==INT||LA8_1==NULL||LA8_1==OPENPAREN||LA8_1==STRING_LITERAL||LA8_1==100))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:99:14: mathExpression
					{
					DebugLocation(99, 14);
					PushFollow(Follow._mathExpression_in_expandBlock467);
					mathExpression40=mathExpression();
					PopFollow();

					stream_mathExpression.Add(mathExpression40.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(99, 30);
			CLOSEBRACE41=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock470);  
			stream_CLOSEBRACE.Add(CLOSEBRACE41);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 99:41: -> ( mathExpression )*
			{
				DebugLocation(99, 44);
				// Scrape.g:99:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(99, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 9);
			LeaveRule("expandBlock", 9);
			LeaveRule_expandBlock();
		}
		DebugLocation(100, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:102:1: expandVar : ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 10);
		TraceIn("expandVar", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT42 = default(CommonToken);
		CommonToken ID44 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT42_tree = default(CommonTree);
		CommonTree ID44_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(102, 1);
		try
		{
			// Scrape.g:103:2: ( INT | tableMemberReference | ID -> ^( VARIABLE_REFERENCE[$ID] ) )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==INT))
			{
				alt9 = 1;
			}
			else if ((LA9_1==ID))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==DOT))
				{
					alt9 = 2;
				}
				else if ((LA9_2==CLOSEPAREN||LA9_2==TO))
				{
					alt9 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:103:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(103, 4);
				INT42=(CommonToken)Match(input,INT,Follow._INT_in_expandVar486); 
				INT42_tree = (CommonTree)adaptor.Create(INT42);
				adaptor.AddChild(root_0, INT42_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:104:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(104, 4);
				PushFollow(Follow._tableMemberReference_in_expandVar491);
				tableMemberReference43=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference43.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:105:4: ID
				{
				DebugLocation(105, 4);
				ID44=(CommonToken)Match(input,ID,Follow._ID_in_expandVar496);  
				stream_ID.Add(ID44);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 105:7: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(105, 10);
					// Scrape.g:105:10: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(105, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID44), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 10);
			LeaveRule("expandVar", 10);
			LeaveRule_expandVar();
		}
		DebugLocation(106, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:108:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 11);
		TraceIn("downloadExpression", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression46 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(108, 1);
		try
		{
			// Scrape.g:109:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==DOWNLOAD_PAGE))
			{
				alt10 = 1;
			}
			else if ((LA10_1==DOWNLOAD_IMAGE))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:109:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(109, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression514);
				downloadPageExpresssion45=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion45.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:110:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(110, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression519);
				downloadImageExpression46=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression46.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 11);
			LeaveRule("downloadExpression", 11);
			LeaveRule_downloadExpression();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:113:1: downloadPageExpresssion : ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) );
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 12);
		TraceIn("downloadPageExpresssion", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE47 = default(CommonToken);
		CommonToken STRING_LITERAL48 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE50 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		CommonToken DOWNLOAD_PAGE52 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement49 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE47_tree = default(CommonTree);
		CommonTree STRING_LITERAL48_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE50_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		CommonTree DOWNLOAD_PAGE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DOWNLOAD_PAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_PAGE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(113, 1);
		try
		{
			// Scrape.g:114:2: ( DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_PAGE ID -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_PAGE tableMemberReference -> ^( DOWNLOAD_PAGE tableMemberReference ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==DOWNLOAD_PAGE))
			{
				int LA12_2 = input.LA(2);

				if ((LA12_2==ID))
				{
					int LA12_3 = input.LA(3);

					if ((LA12_3==DOT))
					{
						alt12 = 3;
					}
					else if ((LA12_3==EOF||LA12_3==CLOSEBRACE||LA12_3==CREATE||LA12_3==EACH||LA12_3==ID||LA12_3==INSERT_INTO||LA12_3==INSERT_OVERWRITE||LA12_3==SELECT||LA12_3==WHERE))
					{
						alt12 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA12_2==SELECT||LA12_2==STRING_LITERAL))
				{
					alt12 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:114:4: DOWNLOAD_PAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(114, 17);
				DOWNLOAD_PAGE47=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion530); 
				DOWNLOAD_PAGE47_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE47);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE47_tree, root_0);
				DebugLocation(114, 19);
				// Scrape.g:114:19: ( STRING_LITERAL | sqlStatement )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==STRING_LITERAL))
				{
					alt11 = 1;
				}
				else if ((LA11_1==SELECT))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:114:20: STRING_LITERAL
					{
					DebugLocation(114, 20);
					STRING_LITERAL48=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadPageExpresssion534); 
					STRING_LITERAL48_tree = (CommonTree)adaptor.Create(STRING_LITERAL48);
					adaptor.AddChild(root_0, STRING_LITERAL48_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:114:37: sqlStatement
					{
					DebugLocation(114, 37);
					PushFollow(Follow._sqlStatement_in_downloadPageExpresssion538);
					sqlStatement49=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement49.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:115:4: DOWNLOAD_PAGE ID
				{
				DebugLocation(115, 4);
				DOWNLOAD_PAGE50=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion544);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE50);

				DebugLocation(115, 18);
				ID51=(CommonToken)Match(input,ID,Follow._ID_in_downloadPageExpresssion546);  
				stream_ID.Add(ID51);



				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 115:21: -> ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(115, 24);
					// Scrape.g:115:24: ^( DOWNLOAD_PAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(115, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(115, 40);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID51));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:116:4: DOWNLOAD_PAGE tableMemberReference
				{
				DebugLocation(116, 4);
				DOWNLOAD_PAGE52=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion560);  
				stream_DOWNLOAD_PAGE.Add(DOWNLOAD_PAGE52);

				DebugLocation(116, 18);
				PushFollow(Follow._tableMemberReference_in_downloadPageExpresssion562);
				tableMemberReference53=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference53.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_PAGE, tableMemberReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 116:39: -> ^( DOWNLOAD_PAGE tableMemberReference )
				{
					DebugLocation(116, 42);
					// Scrape.g:116:42: ^( DOWNLOAD_PAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(116, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_PAGE.NextNode(), root_1);

					DebugLocation(116, 58);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 12);
			LeaveRule("downloadPageExpresssion", 12);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:119:1: downloadImageExpression : ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) );
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 13);
		TraceIn("downloadImageExpression", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE54 = default(CommonToken);
		CommonToken STRING_LITERAL55 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE57 = default(CommonToken);
		CommonToken ID58 = default(CommonToken);
		CommonToken DOWNLOAD_IMAGE59 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement56 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE54_tree = default(CommonTree);
		CommonTree STRING_LITERAL55_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE57_tree = default(CommonTree);
		CommonTree ID58_tree = default(CommonTree);
		CommonTree DOWNLOAD_IMAGE59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOWNLOAD_IMAGE=new RewriteRuleITokenStream(adaptor,"token DOWNLOAD_IMAGE");
		RewriteRuleSubtreeStream stream_tableMemberReference=new RewriteRuleSubtreeStream(adaptor,"rule tableMemberReference");
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(119, 1);
		try
		{
			// Scrape.g:120:2: ( DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement ) | DOWNLOAD_IMAGE ID -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] ) | DOWNLOAD_IMAGE tableMemberReference -> ^( DOWNLOAD_IMAGE tableMemberReference ) )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==DOWNLOAD_IMAGE))
			{
				int LA14_2 = input.LA(2);

				if ((LA14_2==ID))
				{
					int LA14_3 = input.LA(3);

					if ((LA14_3==DOT))
					{
						alt14 = 3;
					}
					else if ((LA14_3==EOF||LA14_3==CLOSEBRACE||LA14_3==CREATE||LA14_3==EACH||LA14_3==ID||LA14_3==INSERT_INTO||LA14_3==INSERT_OVERWRITE||LA14_3==SELECT||LA14_3==WHERE))
					{
						alt14 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA14_2==SELECT||LA14_2==STRING_LITERAL))
				{
					alt14 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:120:4: DOWNLOAD_IMAGE ^ ( STRING_LITERAL | sqlStatement )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 18);
				DOWNLOAD_IMAGE54=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression581); 
				DOWNLOAD_IMAGE54_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE54);
				root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE54_tree, root_0);
				DebugLocation(120, 20);
				// Scrape.g:120:20: ( STRING_LITERAL | sqlStatement )
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1==STRING_LITERAL))
				{
					alt13 = 1;
				}
				else if ((LA13_1==SELECT))
				{
					alt13 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:120:21: STRING_LITERAL
					{
					DebugLocation(120, 21);
					STRING_LITERAL55=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadImageExpression585); 
					STRING_LITERAL55_tree = (CommonTree)adaptor.Create(STRING_LITERAL55);
					adaptor.AddChild(root_0, STRING_LITERAL55_tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Scrape.g:120:38: sqlStatement
					{
					DebugLocation(120, 38);
					PushFollow(Follow._sqlStatement_in_downloadImageExpression589);
					sqlStatement56=sqlStatement();
					PopFollow();

					adaptor.AddChild(root_0, sqlStatement56.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:121:4: DOWNLOAD_IMAGE ID
				{
				DebugLocation(121, 4);
				DOWNLOAD_IMAGE57=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression595);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE57);

				DebugLocation(121, 19);
				ID58=(CommonToken)Match(input,ID,Follow._ID_in_downloadImageExpression597);  
				stream_ID.Add(ID58);



				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 121:22: -> ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(121, 25);
					// Scrape.g:121:25: ^( DOWNLOAD_IMAGE VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(121, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(121, 42);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID58));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:122:4: DOWNLOAD_IMAGE tableMemberReference
				{
				DebugLocation(122, 4);
				DOWNLOAD_IMAGE59=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression611);  
				stream_DOWNLOAD_IMAGE.Add(DOWNLOAD_IMAGE59);

				DebugLocation(122, 19);
				PushFollow(Follow._tableMemberReference_in_downloadImageExpression613);
				tableMemberReference60=tableMemberReference();
				PopFollow();

				stream_tableMemberReference.Add(tableMemberReference60.Tree);


				{
				// AST REWRITE
				// elements: DOWNLOAD_IMAGE, tableMemberReference
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 122:40: -> ^( DOWNLOAD_IMAGE tableMemberReference )
				{
					DebugLocation(122, 43);
					// Scrape.g:122:43: ^( DOWNLOAD_IMAGE tableMemberReference )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(122, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOWNLOAD_IMAGE.NextNode(), root_1);

					DebugLocation(122, 60);
					adaptor.AddChild(root_1, stream_tableMemberReference.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 13);
			LeaveRule("downloadImageExpression", 13);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:126:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 14);
		TraceIn("tableMemberReference", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT61 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT61_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(126, 1);
		try
		{
			// Scrape.g:127:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:127:4: t= ID DOT m= ID
			{
			DebugLocation(127, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference636);  
			stream_ID.Add(t);

			DebugLocation(127, 9);
			DOT61=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference638);  
			stream_DOT.Add(DOT61);

			DebugLocation(127, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference642);  
			stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 127:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(127, 21);
				// Scrape.g:127:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(127, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(127, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(127, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 14);
			LeaveRule("tableMemberReference", 14);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:130:1: variableDeclarationStatement : ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 15);
		TraceIn("variableDeclarationStatement", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID62 = default(CommonToken);
		CommonToken EQUALS63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID62_tree = default(CommonTree);
		CommonTree EQUALS63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(130, 1);
		try
		{
			// Scrape.g:131:2: ( ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:131:4: ID EQUALS assignmentExpression
			{
			DebugLocation(131, 4);
			ID62=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement666);  
			stream_ID.Add(ID62);

			DebugLocation(131, 7);
			EQUALS63=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement668);  
			stream_EQUALS.Add(EQUALS63);

			DebugLocation(131, 14);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement670);
			assignmentExpression64=assignmentExpression();
			PopFollow();

			stream_assignmentExpression.Add(assignmentExpression64.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 131:35: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(131, 38);
				// Scrape.g:131:38: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(131, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(131, 61);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(131, 64);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 15);
			LeaveRule("variableDeclarationStatement", 15);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:134:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 16);
		TraceIn("assignmentExpression", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression67 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(134, 1);
		try
		{
			// Scrape.g:135:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case ID:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 100:
				{
				alt15 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt15 = 2;
				}
				break;
			case EXPAND:
				{
				alt15 = 3;
				}
				break;
			case SELECT:
				{
				alt15 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:135:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(135, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression691);
				mathExpression65=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression65.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:136:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(136, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression696);
				downloadExpression66=downloadExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadExpression66.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:137:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(137, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression701);
				expandExpression67=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression67.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:138:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(138, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression706);
				sqlStatement68=sqlStatement();
				PopFollow();

				adaptor.AddChild(root_0, sqlStatement68.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 16);
			LeaveRule("assignmentExpression", 16);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(139, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:141:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 17);
		TraceIn("mathExpression", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set70 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup69 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup71 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set70_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(141, 5);
		try
		{
			// Scrape.g:142:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:142:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(142, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression722);
			mathExpressionGroup69=mathExpressionGroup();
			PopFollow();

			adaptor.AddChild(root_0, mathExpressionGroup69.Tree);
			DebugLocation(142, 29);
			// Scrape.g:142:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==MINIS||LA16_1==PLUS))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:142:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(142, 46);

					set70=(CommonToken)input.LT(1);
					set70=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set70), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(142, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression736);
					mathExpressionGroup71=mathExpressionGroup();
					PopFollow();

					adaptor.AddChild(root_0, mathExpressionGroup71.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 17);
			LeaveRule("mathExpression", 17);
			LeaveRule_mathExpression();
		}
		DebugLocation(143, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:145:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 18);
		TraceIn("mathExpressionGroup", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set73_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(145, 3);
		try
		{
			// Scrape.g:146:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:146:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(146, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup754);
			atom72=atom();
			PopFollow();

			adaptor.AddChild(root_0, atom72.Tree);
			DebugLocation(146, 9);
			// Scrape.g:146:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==ASTERISK||LA17_1==DIV))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:146:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(146, 28);

					set73=(CommonToken)input.LT(1);
					set73=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set73), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(146, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup768);
					atom74=atom();
					PopFollow();

					adaptor.AddChild(root_0, atom74.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 18);
			LeaveRule("mathExpressionGroup", 18);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(147, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:149:1: atom : ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 19);
		TraceIn("atom", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID75 = default(CommonToken);
		CommonToken char_literal76 = default(CommonToken);
		CommonToken OPENPAREN79 = default(CommonToken);
		CommonToken CLOSEPAREN81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID75_tree = default(CommonTree);
		CommonTree char_literal76_tree = default(CommonTree);
		CommonTree OPENPAREN79_tree = default(CommonTree);
		CommonTree CLOSEPAREN81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(149, 5);
		try
		{
			// Scrape.g:150:6: ( ID -> ^( VARIABLE_REFERENCE[$ID] ) | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | tableMemberReference | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt18=5;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==DOT))
				{
					alt18 = 3;
				}
				else if ((LA18_2==EOF||LA18_2==ASTERISK||(LA18_2>=CLOSEBRACE && LA18_2<=CLOSEPAREN)||LA18_2==CREATE||LA18_2==DIV||LA18_2==EACH||LA18_2==ID||LA18_2==INSERT_INTO||(LA18_2>=INSERT_OVERWRITE && LA18_2<=INT)||LA18_2==MINIS||LA18_2==NULL||LA18_2==OPENPAREN||LA18_2==PLUS||LA18_2==SELECT||LA18_2==STRING_LITERAL||LA18_2==100))
				{
					alt18 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 100:
				{
				alt18 = 2;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt18 = 4;
				}
				break;
			case OPENPAREN:
				{
				alt18 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:150:8: ID
				{
				DebugLocation(150, 8);
				ID75=(CommonToken)Match(input,ID,Follow._ID_in_atom789);  
				stream_ID.Add(ID75);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 150:11: -> ^( VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(150, 14);
					// Scrape.g:150:14: ^( VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(150, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID75), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:151:5: '$'
				{
				DebugLocation(151, 5);
				char_literal76=(CommonToken)Match(input,100,Follow._100_in_atom802);  
				stream_100.Add(char_literal76);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 151:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(151, 12);
					// Scrape.g:151:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(151, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:152:5: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(152, 5);
				PushFollow(Follow._tableMemberReference_in_atom814);
				tableMemberReference77=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference77.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:153:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(153, 5);
				PushFollow(Follow._literal_in_atom820);
				literal78=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal78.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:154:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(154, 17);
				OPENPAREN79=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom829); 
				DebugLocation(154, 19);
				PushFollow(Follow._mathExpression_in_atom832);
				mathExpression80=mathExpression();
				PopFollow();

				adaptor.AddChild(root_0, mathExpression80.Tree);
				DebugLocation(154, 44);
				CLOSEPAREN81=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom834); 

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 19);
			LeaveRule("atom", 19);
			LeaveRule_atom();
		}
		DebugLocation(155, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:157:1: literal : ( INT | STRING_LITERAL | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 20);
		TraceIn("literal", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set82 = default(CommonToken);

		CommonTree set82_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(157, 1);
		try
		{
			// Scrape.g:158:2: ( INT | STRING_LITERAL | NULL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(158, 2);

			set82=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set82));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 20);
			LeaveRule("literal", 20);
			LeaveRule_literal();
		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:166:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_INTO STRING_LITERAL sqlStatement -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 21);
		TraceIn("insertStatement", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO83 = default(CommonToken);
		CommonToken ID84 = default(CommonToken);
		CommonToken INSERT_INTO86 = default(CommonToken);
		CommonToken STRING_LITERAL87 = default(CommonToken);
		CommonToken INSERT_OVERWRITE89 = default(CommonToken);
		CommonToken ID90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement88 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO83_tree = default(CommonTree);
		CommonTree ID84_tree = default(CommonTree);
		CommonTree INSERT_INTO86_tree = default(CommonTree);
		CommonTree STRING_LITERAL87_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE89_tree = default(CommonTree);
		CommonTree ID90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(166, 1);
		try
		{
			// Scrape.g:167:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_INTO STRING_LITERAL sqlStatement -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==INSERT_INTO))
			{
				int LA19_2 = input.LA(2);

				if ((LA19_2==ID))
				{
					alt19 = 1;
				}
				else if ((LA19_2==STRING_LITERAL))
				{
					alt19 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA19_1==INSERT_OVERWRITE))
			{
				alt19 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:167:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(167, 4);
				INSERT_INTO83=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement876);  
				stream_INSERT_INTO.Add(INSERT_INTO83);

				DebugLocation(167, 16);
				ID84=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement878);  
				stream_ID.Add(ID84);

				DebugLocation(167, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement880);
				sqlStatement85=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement85.Tree);


				{
				// AST REWRITE
				// elements: INSERT_INTO, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(167, 34);
					// Scrape.g:167:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(167, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(167, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID84));
					DebugLocation(167, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:168:4: INSERT_INTO STRING_LITERAL sqlStatement
				{
				DebugLocation(168, 4);
				INSERT_INTO86=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement895);  
				stream_INSERT_INTO.Add(INSERT_INTO86);

				DebugLocation(168, 16);
				STRING_LITERAL87=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_insertStatement897);  
				stream_STRING_LITERAL.Add(STRING_LITERAL87);

				DebugLocation(168, 31);
				PushFollow(Follow._sqlStatement_in_insertStatement899);
				sqlStatement88=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement88.Tree);


				{
				// AST REWRITE
				// elements: STRING_LITERAL, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 168:43: -> ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement )
				{
					DebugLocation(168, 46);
					// Scrape.g:168:46: ^( INSERT_INTO_DIRECTORY STRING_LITERAL sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(168, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(168, 70);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
					DebugLocation(168, 85);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:169:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(169, 4);
				INSERT_OVERWRITE89=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement913);  
				stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE89);

				DebugLocation(169, 21);
				ID90=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement915);  
				stream_ID.Add(ID90);

				DebugLocation(169, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement917);
				sqlStatement91=sqlStatement();
				PopFollow();

				stream_sqlStatement.Add(sqlStatement91.Tree);


				{
				// AST REWRITE
				// elements: INSERT_OVERWRITE, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 169:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(169, 39);
					// Scrape.g:169:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(169, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(169, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID90));
					DebugLocation(169, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 21);
			LeaveRule("insertStatement", 21);
			LeaveRule_insertStatement();
		}
		DebugLocation(170, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:174:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 22);
		TraceIn("sqlStatement", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(174, 1);
		try
		{
			// Scrape.g:175:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:175:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(175, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement941);
			selectStatement92=selectStatement();
			PopFollow();

			stream_selectStatement.Add(selectStatement92.Tree);
			DebugLocation(175, 20);
			// Scrape.g:175:20: ( fromStatement )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==FROM))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:175:20: fromStatement
				{
				DebugLocation(175, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement943);
				fromStatement93=fromStatement();
				PopFollow();

				stream_fromStatement.Add(fromStatement93.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(175, 35);
			// Scrape.g:175:35: ( whereStatement )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==WHERE))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:175:35: whereStatement
				{
				DebugLocation(175, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement946);
				whereStatement94=whereStatement();
				PopFollow();

				stream_whereStatement.Add(whereStatement94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: selectStatement, whereStatement, fromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 175:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(175, 54);
				// Scrape.g:175:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(175, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(175, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(175, 89);
				// Scrape.g:175:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(175, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(175, 104);
				// Scrape.g:175:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(175, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 22);
			LeaveRule("sqlStatement", 22);
			LeaveRule_sqlStatement();
		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:178:1: whereStatement : WHERE ^ ID EQUALS ! STRING_LITERAL ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 23);
		TraceIn("whereStatement", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE95 = default(CommonToken);
		CommonToken ID96 = default(CommonToken);
		CommonToken EQUALS97 = default(CommonToken);
		CommonToken STRING_LITERAL98 = default(CommonToken);

		CommonTree WHERE95_tree = default(CommonTree);
		CommonTree ID96_tree = default(CommonTree);
		CommonTree EQUALS97_tree = default(CommonTree);
		CommonTree STRING_LITERAL98_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(178, 1);
		try
		{
			// Scrape.g:179:2: ( WHERE ^ ID EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:179:4: WHERE ^ ID EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(179, 9);
			WHERE95=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement972); 
			WHERE95_tree = (CommonTree)adaptor.Create(WHERE95);
			root_0 = (CommonTree)adaptor.BecomeRoot(WHERE95_tree, root_0);
			DebugLocation(179, 11);
			ID96=(CommonToken)Match(input,ID,Follow._ID_in_whereStatement975); 
			ID96_tree = (CommonTree)adaptor.Create(ID96);
			adaptor.AddChild(root_0, ID96_tree);
			DebugLocation(179, 20);
			EQUALS97=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_whereStatement977); 
			DebugLocation(179, 22);
			STRING_LITERAL98=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_whereStatement980); 
			STRING_LITERAL98_tree = (CommonTree)adaptor.Create(STRING_LITERAL98);
			adaptor.AddChild(root_0, STRING_LITERAL98_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 23);
			LeaveRule("whereStatement", 23);
			LeaveRule_whereStatement();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:182:1: fromStatement : ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 24);
		TraceIn("fromStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken FROM99 = default(CommonToken);
		CommonToken ID100 = default(CommonToken);
		CommonToken FROM101 = default(CommonToken);
		CommonToken FROM103 = default(CommonToken);
		CommonToken FROM105 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion102 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree FROM99_tree = default(CommonTree);
		CommonTree ID100_tree = default(CommonTree);
		CommonTree FROM101_tree = default(CommonTree);
		CommonTree FROM103_tree = default(CommonTree);
		CommonTree FROM105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(182, 1);
		try
		{
			// Scrape.g:183:2: ( FROM ID -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] ) | FROM ^ downloadPageExpresssion | FROM ^ downloadImageExpression | FROM ^ expandExpression )
			int alt22=4;
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==FROM))
			{
				switch (input.LA(2))
				{
				case ID:
					{
					alt22 = 1;
					}
					break;
				case DOWNLOAD_PAGE:
					{
					alt22 = 2;
					}
					break;
				case DOWNLOAD_IMAGE:
					{
					alt22 = 3;
					}
					break;
				case EXPAND:
					{
					alt22 = 4;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 22, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:183:4: FROM ID
				{
				DebugLocation(183, 4);
				FROM99=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement991);  
				stream_FROM.Add(FROM99);

				DebugLocation(183, 9);
				ID100=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement993);  
				stream_ID.Add(ID100);



				{
				// AST REWRITE
				// elements: FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 183:12: -> ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
				{
					DebugLocation(183, 15);
					// Scrape.g:183:15: ^( FROM TABLE_VARIABLE_REFERENCE[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(183, 17);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(183, 22);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID100));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:184:4: FROM ^ downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 8);
				FROM101=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1007); 
				FROM101_tree = (CommonTree)adaptor.Create(FROM101);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM101_tree, root_0);
				DebugLocation(184, 10);
				PushFollow(Follow._downloadPageExpresssion_in_fromStatement1010);
				downloadPageExpresssion102=downloadPageExpresssion();
				PopFollow();

				adaptor.AddChild(root_0, downloadPageExpresssion102.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:185:4: FROM ^ downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 8);
				FROM103=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1015); 
				FROM103_tree = (CommonTree)adaptor.Create(FROM103);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM103_tree, root_0);
				DebugLocation(185, 10);
				PushFollow(Follow._downloadImageExpression_in_fromStatement1018);
				downloadImageExpression104=downloadImageExpression();
				PopFollow();

				adaptor.AddChild(root_0, downloadImageExpression104.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:186:4: FROM ^ expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 8);
				FROM105=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1023); 
				FROM105_tree = (CommonTree)adaptor.Create(FROM105);
				root_0 = (CommonTree)adaptor.BecomeRoot(FROM105_tree, root_0);
				DebugLocation(186, 10);
				PushFollow(Follow._expandExpression_in_fromStatement1026);
				expandExpression106=expandExpression();
				PopFollow();

				adaptor.AddChild(root_0, expandExpression106.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 24);
			LeaveRule("fromStatement", 24);
			LeaveRule_fromStatement();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:189:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 25);
		TraceIn("selectStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT107 = default(CommonToken);
		CommonToken COMMA109 = default(CommonToken);
		CommonToken SELECT111 = default(CommonToken);
		CommonToken ASTERISK112 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT107_tree = default(CommonTree);
		CommonTree COMMA109_tree = default(CommonTree);
		CommonTree SELECT111_tree = default(CommonTree);
		CommonTree ASTERISK112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(189, 1);
		try
		{
			// Scrape.g:190:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==SELECT))
			{
				int LA24_2 = input.LA(2);

				if ((LA24_2==ASTERISK))
				{
					alt24 = 2;
				}
				else if ((LA24_2==CASE||LA24_2==ID||LA24_2==INT||LA24_2==NULL||LA24_2==PICK||LA24_2==STRING_LITERAL))
				{
					alt24 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 24, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:190:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(190, 4);
				SELECT107=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1037);  
				stream_SELECT.Add(SELECT107);

				DebugLocation(190, 11);
				// Scrape.g:190:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					try
					{
						alt23 = dfa23.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:190:12: selectArgs COMMA
						{
						DebugLocation(190, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1040);
						selectArgs108=selectArgs();
						PopFollow();

						stream_selectArgs.Add(selectArgs108.Tree);
						DebugLocation(190, 23);
						COMMA109=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1042);  
						stream_COMMA.Add(COMMA109);


						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }

				DebugLocation(190, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1046);
				selectArgs110=selectArgs();
				PopFollow();

				stream_selectArgs.Add(selectArgs110.Tree);


				{
				// AST REWRITE
				// elements: selectArgs, SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 190:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(190, 45);
					// Scrape.g:190:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(190, 54);
					// Scrape.g:190:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(190, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:191:4: SELECT ASTERISK
				{
				DebugLocation(191, 4);
				SELECT111=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1060);  
				stream_SELECT.Add(SELECT111);

				DebugLocation(191, 11);
				ASTERISK112=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1062);  
				stream_ASTERISK.Add(ASTERISK112);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 191:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(191, 23);
					// Scrape.g:191:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(191, 32);
					// Scrape.g:191:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(191, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(191, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK112));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 25);
			LeaveRule("selectStatement", 25);
			LeaveRule_selectStatement();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:195:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 26);
		TraceIn("selectArgs", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS114 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(195, 1);
		try
		{
			// Scrape.g:196:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt26=2;
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==ID||LA26_1==INT||LA26_1==NULL||LA26_1==PICK||LA26_1==STRING_LITERAL))
			{
				alt26 = 1;
			}
			else if ((LA26_1==CASE))
			{
				alt26 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:196:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(196, 4);
				// Scrape.g:196:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA25_2 = input.LA(2);

						if ((LA25_2==STRING_LITERAL))
						{
							int LA25_3 = input.LA(3);

							if ((LA25_3==TAKE))
							{
								switch (input.LA(4))
								{
								case ATTRIBUTE:
									{
									int LA25_5 = input.LA(5);

									if ((LA25_5==STRING_LITERAL))
									{
										int LA25_6 = input.LA(6);

										if ((LA25_6==MATCH))
										{
											int LA25_7 = input.LA(7);

											if ((LA25_7==STRING_LITERAL))
											{
												int LA25_8 = input.LA(8);

												if ((LA25_8==REPLACE))
												{
													int LA25_9 = input.LA(9);

													if ((LA25_9==STRING_LITERAL))
													{
														int LA25_10 = input.LA(10);

														if ((LA25_10==PLUS))
														{
															alt25 = 1;
														}


													}


												}
												else if ((LA25_8==PLUS))
												{
													alt25 = 1;
												}


											}


										}
										else if ((LA25_6==PLUS))
										{
											alt25 = 1;
										}


									}


									}
									break;
								case TEXT:
									{
									int LA25_5 = input.LA(5);

									if ((LA25_5==MATCH))
									{
										int LA25_6 = input.LA(6);

										if ((LA25_6==STRING_LITERAL))
										{
											int LA25_7 = input.LA(7);

											if ((LA25_7==REPLACE))
											{
												int LA25_8 = input.LA(8);

												if ((LA25_8==STRING_LITERAL))
												{
													int LA25_9 = input.LA(9);

													if ((LA25_9==PLUS))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_7==PLUS))
											{
												alt25 = 1;
											}


										}


									}
									else if ((LA25_5==PLUS))
									{
										alt25 = 1;
									}


									}
									break;
								case HTML:
									{
									int LA25_5 = input.LA(5);

									if ((LA25_5==MATCH))
									{
										int LA25_6 = input.LA(6);

										if ((LA25_6==STRING_LITERAL))
										{
											int LA25_7 = input.LA(7);

											if ((LA25_7==REPLACE))
											{
												int LA25_8 = input.LA(8);

												if ((LA25_8==STRING_LITERAL))
												{
													int LA25_9 = input.LA(9);

													if ((LA25_9==PLUS))
													{
														alt25 = 1;
													}


												}


											}
											else if ((LA25_7==PLUS))
											{
												alt25 = 1;
											}


										}


									}
									else if ((LA25_5==PLUS))
									{
										alt25 = 1;
									}


									}
									break;
								}

							}


						}


						}
						break;
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA25_2 = input.LA(2);

						if ((LA25_2==PLUS))
						{
							alt25 = 1;
						}


						}
						break;
					case ID:
						{
						int LA25_2 = input.LA(2);

						if ((LA25_2==DOT))
						{
							int LA25_3 = input.LA(3);

							if ((LA25_3==ID))
							{
								int LA25_4 = input.LA(4);

								if ((LA25_4==PLUS))
								{
									alt25 = 1;
								}


							}


						}
						else if ((LA25_2==PLUS))
						{
							alt25 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:196:5: selectArg PLUS
						{
						DebugLocation(196, 5);
						PushFollow(Follow._selectArg_in_selectArgs1088);
						selectArg113=selectArg();
						PopFollow();

						stream_selectArg.Add(selectArg113.Tree);
						DebugLocation(196, 15);
						PLUS114=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1090);  
						stream_PLUS.Add(PLUS114);


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(196, 22);
				PushFollow(Follow._selectArg_in_selectArgs1094);
				selectArg115=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg115.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 196:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(196, 35);
					// Scrape.g:196:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(196, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(196, 48);
					// Scrape.g:196:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(196, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:197:4: caseStatement
				{
				DebugLocation(197, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1108);
				caseStatement116=caseStatement();
				PopFollow();

				stream_caseStatement.Add(caseStatement116.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(197, 21);
					// Scrape.g:197:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(197, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 26);
			LeaveRule("selectArgs", 26);
			LeaveRule_selectArgs();
		}
		DebugLocation(198, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:202:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 27);
		TraceIn("caseStatement", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE117 = default(CommonToken);
		CommonToken ELSE119 = default(CommonToken);
		CommonToken END121 = default(CommonToken);
		CommonToken CASE122 = default(CommonToken);
		CommonToken ELSE125 = default(CommonToken);
		CommonToken END127 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement124 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE117_tree = default(CommonTree);
		CommonTree ELSE119_tree = default(CommonTree);
		CommonTree END121_tree = default(CommonTree);
		CommonTree CASE122_tree = default(CommonTree);
		CommonTree ELSE125_tree = default(CommonTree);
		CommonTree END127_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(202, 1);
		try
		{
			// Scrape.g:203:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_1 = input.LA(1);

			if ((LA31_1==CASE))
			{
				int LA31_2 = input.LA(2);

				if ((LA31_2==WHEN))
				{
					alt31 = 1;
				}
				else if ((LA31_2==ID||LA31_2==INT||LA31_2==NULL||LA31_2==PICK||LA31_2==STRING_LITERAL))
				{
					alt31 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:203:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(203, 4);
				CASE117=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1130);  
				stream_CASE.Add(CASE117);

				DebugLocation(203, 9);
				// Scrape.g:203:9: ( whenBoolStatement )+
				int cnt27=0;
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_1 = input.LA(1);

					if ((LA27_1==WHEN))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch (alt27)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:203:9: whenBoolStatement
						{
						DebugLocation(203, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1132);
						whenBoolStatement118=whenBoolStatement();
						PopFollow();

						stream_whenBoolStatement.Add(whenBoolStatement118.Tree);

						}
						break;

					default:
						if (cnt27 >= 1)
							goto loop27;

						EarlyExitException eee27 = new EarlyExitException( 27, input );
						DebugRecognitionException(eee27);
						throw eee27;
					}
					cnt27++;
				}
				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(203, 28);
				// Scrape.g:203:28: ( ELSE caseExpression )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ELSE))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:203:29: ELSE caseExpression
					{
					DebugLocation(203, 29);
					ELSE119=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1136);  
					stream_ELSE.Add(ELSE119);

					DebugLocation(203, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1138);
					caseExpression120=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression120.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(203, 51);
				END121=(CommonToken)Match(input,END,Follow._END_in_caseStatement1142);  
				stream_END.Add(END121);



				{
				// AST REWRITE
				// elements: whenBoolStatement, caseExpression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 203:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(203, 58);
					// Scrape.g:203:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(203, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(203, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(203, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(203, 89);
					// Scrape.g:203:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(203, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:204:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(204, 4);
				CASE122=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1159);  
				stream_CASE.Add(CASE122);

				DebugLocation(204, 9);
				PushFollow(Follow._selectArg_in_caseStatement1161);
				selectArg123=selectArg();
				PopFollow();

				stream_selectArg.Add(selectArg123.Tree);
				DebugLocation(204, 19);
				// Scrape.g:204:19: ( whenLiteralStatement )+
				int cnt29=0;
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==WHEN))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:204:19: whenLiteralStatement
						{
						DebugLocation(204, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1163);
						whenLiteralStatement124=whenLiteralStatement();
						PopFollow();

						stream_whenLiteralStatement.Add(whenLiteralStatement124.Tree);

						}
						break;

					default:
						if (cnt29 >= 1)
							goto loop29;

						EarlyExitException eee29 = new EarlyExitException( 29, input );
						DebugRecognitionException(eee29);
						throw eee29;
					}
					cnt29++;
				}
				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(204, 41);
				// Scrape.g:204:41: ( ELSE caseExpression )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ELSE))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:204:42: ELSE caseExpression
					{
					DebugLocation(204, 42);
					ELSE125=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1167);  
					stream_ELSE.Add(ELSE125);

					DebugLocation(204, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1169);
					caseExpression126=caseExpression();
					PopFollow();

					stream_caseExpression.Add(caseExpression126.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(204, 64);
				END127=(CommonToken)Match(input,END,Follow._END_in_caseStatement1173);  
				stream_END.Add(END127);



				{
				// AST REWRITE
				// elements: caseExpression, selectArg, whenLiteralStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 204:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(204, 71);
					// Scrape.g:204:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(204, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(204, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(204, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(204, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(204, 114);
					// Scrape.g:204:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(204, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 27);
			LeaveRule("caseStatement", 27);
			LeaveRule_caseStatement();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:207:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 28);
		TraceIn("caseExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(207, 1);
		try
		{
			// Scrape.g:208:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:208:4: selectArg
			{
			DebugLocation(208, 4);
			PushFollow(Follow._selectArg_in_caseExpression1198);
			selectArg128=selectArg();
			PopFollow();

			stream_selectArg.Add(selectArg128.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 208:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(208, 17);
				// Scrape.g:208:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(208, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(208, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 28);
			LeaveRule("caseExpression", 28);
			LeaveRule_caseExpression();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:211:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 29);
		TraceIn("whenLiteralStatement", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN129 = default(CommonToken);
		CommonToken THEN131 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression132 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN129_tree = default(CommonTree);
		CommonTree THEN131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(211, 1);
		try
		{
			// Scrape.g:212:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:212:4: WHEN literal THEN caseExpression
			{
			DebugLocation(212, 4);
			WHEN129=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1217);  
			stream_WHEN.Add(WHEN129);

			DebugLocation(212, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1219);
			literal130=literal();
			PopFollow();

			stream_literal.Add(literal130.Tree);
			DebugLocation(212, 17);
			THEN131=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1221);  
			stream_THEN.Add(THEN131);

			DebugLocation(212, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1223);
			caseExpression132=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression132.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(212, 40);
				// Scrape.g:212:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(212, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(212, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 29);
			LeaveRule("whenLiteralStatement", 29);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:215:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 30);
		TraceIn("whenBoolStatement", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN133 = default(CommonToken);
		CommonToken THEN135 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN133_tree = default(CommonTree);
		CommonTree THEN135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(215, 1);
		try
		{
			// Scrape.g:216:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:216:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(216, 4);
			WHEN133=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1244);  
			stream_WHEN.Add(WHEN133);

			DebugLocation(216, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1246);
			boolExpression134=boolExpression();
			PopFollow();

			stream_boolExpression.Add(boolExpression134.Tree);
			DebugLocation(216, 24);
			THEN135=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1248);  
			stream_THEN.Add(THEN135);

			DebugLocation(216, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1250);
			caseExpression136=caseExpression();
			PopFollow();

			stream_caseExpression.Add(caseExpression136.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, caseExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 216:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(216, 47);
				// Scrape.g:216:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(216, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(216, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(216, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 30);
			LeaveRule("whenBoolStatement", 30);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:219:1: boolExpression : ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg );
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 31);
		TraceIn("boolExpression", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS138 = default(CommonToken);
		CommonToken LESSTHAN141 = default(CommonToken);
		CommonToken LESSTHANEQUAL144 = default(CommonToken);
		CommonToken GREATERTHAN147 = default(CommonToken);
		CommonToken GREATERTHANEQUAL150 = default(CommonToken);
		CommonToken NOTEQUAL153 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg139 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg142 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS138_tree = default(CommonTree);
		CommonTree LESSTHAN141_tree = default(CommonTree);
		CommonTree LESSTHANEQUAL144_tree = default(CommonTree);
		CommonTree GREATERTHAN147_tree = default(CommonTree);
		CommonTree GREATERTHANEQUAL150_tree = default(CommonTree);
		CommonTree NOTEQUAL153_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(219, 1);
		try
		{
			// Scrape.g:220:2: ( selectArg EQUALS ^ selectArg | selectArg LESSTHAN ^ selectArg | selectArg LESSTHANEQUAL ^ selectArg | selectArg GREATERTHAN ^ selectArg | selectArg GREATERTHANEQUAL ^ selectArg | selectArg NOTEQUAL ^ selectArg )
			int alt32=6;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				int LA32_2 = input.LA(2);

				if ((LA32_2==STRING_LITERAL))
				{
					int LA32_3 = input.LA(3);

					if ((LA32_3==TAKE))
					{
						switch (input.LA(4))
						{
						case ATTRIBUTE:
							{
							int LA32_5 = input.LA(5);

							if ((LA32_5==STRING_LITERAL))
							{
								switch (input.LA(6))
								{
								case MATCH:
									{
									int LA32_7 = input.LA(7);

									if ((LA32_7==STRING_LITERAL))
									{
										switch (input.LA(8))
										{
										case REPLACE:
											{
											int LA32_9 = input.LA(9);

											if ((LA32_9==STRING_LITERAL))
											{
												switch (input.LA(10))
												{
												case EQUALS:
													{
													alt32 = 1;
													}
													break;
												case LESSTHAN:
													{
													alt32 = 2;
													}
													break;
												case LESSTHANEQUAL:
													{
													alt32 = 3;
													}
													break;
												case GREATERTHAN:
													{
													alt32 = 4;
													}
													break;
												case GREATERTHANEQUAL:
													{
													alt32 = 5;
													}
													break;
												case NOTEQUAL:
													{
													alt32 = 6;
													}
													break;
												default:
													{
														NoViableAltException nvae = new NoViableAltException("", 32, 21, input, 10);
														DebugRecognitionException(nvae);
														throw nvae;
													}
												}

											}
											else
											{
												NoViableAltException nvae = new NoViableAltException("", 32, 20, input, 9);
												DebugRecognitionException(nvae);
												throw nvae;
											}
											}
											break;
										case EQUALS:
											{
											alt32 = 1;
											}
											break;
										case LESSTHAN:
											{
											alt32 = 2;
											}
											break;
										case LESSTHANEQUAL:
											{
											alt32 = 3;
											}
											break;
										case GREATERTHAN:
											{
											alt32 = 4;
											}
											break;
										case GREATERTHANEQUAL:
											{
											alt32 = 5;
											}
											break;
										case NOTEQUAL:
											{
											alt32 = 6;
											}
											break;
										default:
											{
												NoViableAltException nvae = new NoViableAltException("", 32, 19, input, 8);
												DebugRecognitionException(nvae);
												throw nvae;
											}
										}

									}
									else
									{
										NoViableAltException nvae = new NoViableAltException("", 32, 18, input, 7);
										DebugRecognitionException(nvae);
										throw nvae;
									}
									}
									break;
								case EQUALS:
									{
									alt32 = 1;
									}
									break;
								case LESSTHAN:
									{
									alt32 = 2;
									}
									break;
								case LESSTHANEQUAL:
									{
									alt32 = 3;
									}
									break;
								case GREATERTHAN:
									{
									alt32 = 4;
									}
									break;
								case GREATERTHANEQUAL:
									{
									alt32 = 5;
									}
									break;
								case NOTEQUAL:
									{
									alt32 = 6;
									}
									break;
								default:
									{
										NoViableAltException nvae = new NoViableAltException("", 32, 17, input, 6);
										DebugRecognitionException(nvae);
										throw nvae;
									}
								}

							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 32, 14, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case TEXT:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA32_6 = input.LA(6);

								if ((LA32_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA32_8 = input.LA(8);

										if ((LA32_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt32 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt32 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt32 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt32 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt32 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt32 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 32, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 32, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt32 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt32 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt32 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt32 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt32 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt32 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 32, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 32, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt32 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt32 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt32 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt32 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt32 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt32 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 32, 15, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						case HTML:
							{
							switch (input.LA(5))
							{
							case MATCH:
								{
								int LA32_6 = input.LA(6);

								if ((LA32_6==STRING_LITERAL))
								{
									switch (input.LA(7))
									{
									case REPLACE:
										{
										int LA32_8 = input.LA(8);

										if ((LA32_8==STRING_LITERAL))
										{
											switch (input.LA(9))
											{
											case EQUALS:
												{
												alt32 = 1;
												}
												break;
											case LESSTHAN:
												{
												alt32 = 2;
												}
												break;
											case LESSTHANEQUAL:
												{
												alt32 = 3;
												}
												break;
											case GREATERTHAN:
												{
												alt32 = 4;
												}
												break;
											case GREATERTHANEQUAL:
												{
												alt32 = 5;
												}
												break;
											case NOTEQUAL:
												{
												alt32 = 6;
												}
												break;
											default:
												{
													NoViableAltException nvae = new NoViableAltException("", 32, 21, input, 9);
													DebugRecognitionException(nvae);
													throw nvae;
												}
											}

										}
										else
										{
											NoViableAltException nvae = new NoViableAltException("", 32, 20, input, 8);
											DebugRecognitionException(nvae);
											throw nvae;
										}
										}
										break;
									case EQUALS:
										{
										alt32 = 1;
										}
										break;
									case LESSTHAN:
										{
										alt32 = 2;
										}
										break;
									case LESSTHANEQUAL:
										{
										alt32 = 3;
										}
										break;
									case GREATERTHAN:
										{
										alt32 = 4;
										}
										break;
									case GREATERTHANEQUAL:
										{
										alt32 = 5;
										}
										break;
									case NOTEQUAL:
										{
										alt32 = 6;
										}
										break;
									default:
										{
											NoViableAltException nvae = new NoViableAltException("", 32, 19, input, 7);
											DebugRecognitionException(nvae);
											throw nvae;
										}
									}

								}
								else
								{
									NoViableAltException nvae = new NoViableAltException("", 32, 18, input, 6);
									DebugRecognitionException(nvae);
									throw nvae;
								}
								}
								break;
							case EQUALS:
								{
								alt32 = 1;
								}
								break;
							case LESSTHAN:
								{
								alt32 = 2;
								}
								break;
							case LESSTHANEQUAL:
								{
								alt32 = 3;
								}
								break;
							case GREATERTHAN:
								{
								alt32 = 4;
								}
								break;
							case GREATERTHANEQUAL:
								{
								alt32 = 5;
								}
								break;
							case NOTEQUAL:
								{
								alt32 = 6;
								}
								break;
							default:
								{
									NoViableAltException nvae = new NoViableAltException("", 32, 16, input, 5);
									DebugRecognitionException(nvae);
									throw nvae;
								}
							}

							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 32, 12, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				switch (input.LA(2))
				{
				case EQUALS:
					{
					alt32 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt32 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt32 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt32 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt32 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt32 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case ID:
				{
				switch (input.LA(2))
				{
				case DOT:
					{
					int LA32_3 = input.LA(3);

					if ((LA32_3==ID))
					{
						switch (input.LA(4))
						{
						case EQUALS:
							{
							alt32 = 1;
							}
							break;
						case LESSTHAN:
							{
							alt32 = 2;
							}
							break;
						case LESSTHANEQUAL:
							{
							alt32 = 3;
							}
							break;
						case GREATERTHAN:
							{
							alt32 = 4;
							}
							break;
						case GREATERTHANEQUAL:
							{
							alt32 = 5;
							}
							break;
						case NOTEQUAL:
							{
							alt32 = 6;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 32, 13, input, 4);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 11, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EQUALS:
					{
					alt32 = 1;
					}
					break;
				case LESSTHAN:
					{
					alt32 = 2;
					}
					break;
				case LESSTHANEQUAL:
					{
					alt32 = 3;
					}
					break;
				case GREATERTHAN:
					{
					alt32 = 4;
					}
					break;
				case GREATERTHANEQUAL:
					{
					alt32 = 5;
					}
					break;
				case NOTEQUAL:
					{
					alt32 = 6;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 32, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:220:4: selectArg EQUALS ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._selectArg_in_boolExpression1271);
				selectArg137=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg137.Tree);
				DebugLocation(220, 20);
				EQUALS138=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolExpression1273); 
				EQUALS138_tree = (CommonTree)adaptor.Create(EQUALS138);
				root_0 = (CommonTree)adaptor.BecomeRoot(EQUALS138_tree, root_0);
				DebugLocation(220, 22);
				PushFollow(Follow._selectArg_in_boolExpression1276);
				selectArg139=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:221:4: selectArg LESSTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._selectArg_in_boolExpression1281);
				selectArg140=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg140.Tree);
				DebugLocation(221, 22);
				LESSTHAN141=(CommonToken)Match(input,LESSTHAN,Follow._LESSTHAN_in_boolExpression1283); 
				LESSTHAN141_tree = (CommonTree)adaptor.Create(LESSTHAN141);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHAN141_tree, root_0);
				DebugLocation(221, 24);
				PushFollow(Follow._selectArg_in_boolExpression1286);
				selectArg142=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg142.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:222:4: selectArg LESSTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._selectArg_in_boolExpression1291);
				selectArg143=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg143.Tree);
				DebugLocation(222, 27);
				LESSTHANEQUAL144=(CommonToken)Match(input,LESSTHANEQUAL,Follow._LESSTHANEQUAL_in_boolExpression1293); 
				LESSTHANEQUAL144_tree = (CommonTree)adaptor.Create(LESSTHANEQUAL144);
				root_0 = (CommonTree)adaptor.BecomeRoot(LESSTHANEQUAL144_tree, root_0);
				DebugLocation(222, 29);
				PushFollow(Follow._selectArg_in_boolExpression1296);
				selectArg145=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg145.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:223:4: selectArg GREATERTHAN ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._selectArg_in_boolExpression1301);
				selectArg146=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg146.Tree);
				DebugLocation(223, 25);
				GREATERTHAN147=(CommonToken)Match(input,GREATERTHAN,Follow._GREATERTHAN_in_boolExpression1303); 
				GREATERTHAN147_tree = (CommonTree)adaptor.Create(GREATERTHAN147);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHAN147_tree, root_0);
				DebugLocation(223, 27);
				PushFollow(Follow._selectArg_in_boolExpression1306);
				selectArg148=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg148.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:224:4: selectArg GREATERTHANEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._selectArg_in_boolExpression1311);
				selectArg149=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg149.Tree);
				DebugLocation(224, 30);
				GREATERTHANEQUAL150=(CommonToken)Match(input,GREATERTHANEQUAL,Follow._GREATERTHANEQUAL_in_boolExpression1313); 
				GREATERTHANEQUAL150_tree = (CommonTree)adaptor.Create(GREATERTHANEQUAL150);
				root_0 = (CommonTree)adaptor.BecomeRoot(GREATERTHANEQUAL150_tree, root_0);
				DebugLocation(224, 32);
				PushFollow(Follow._selectArg_in_boolExpression1316);
				selectArg151=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg151.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:225:4: selectArg NOTEQUAL ^ selectArg
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._selectArg_in_boolExpression1321);
				selectArg152=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg152.Tree);
				DebugLocation(225, 22);
				NOTEQUAL153=(CommonToken)Match(input,NOTEQUAL,Follow._NOTEQUAL_in_boolExpression1323); 
				NOTEQUAL153_tree = (CommonTree)adaptor.Create(NOTEQUAL153);
				root_0 = (CommonTree)adaptor.BecomeRoot(NOTEQUAL153_tree, root_0);
				DebugLocation(225, 24);
				PushFollow(Follow._selectArg_in_boolExpression1326);
				selectArg154=selectArg();
				PopFollow();

				adaptor.AddChild(root_0, selectArg154.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 31);
			LeaveRule("boolExpression", 31);
			LeaveRule_boolExpression();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:228:1: selectArg : ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 32);
		TraceIn("selectArg", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID157 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal156 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(228, 1);
		try
		{
			// Scrape.g:229:2: ( pickStatement | literal | ID -> ^( SELECT_ID[$ID] ) | tableMemberReference )
			int alt33=4;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt33 = 1;
				}
				break;
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt33 = 2;
				}
				break;
			case ID:
				{
				int LA33_2 = input.LA(2);

				if ((LA33_2==DOT))
				{
					alt33 = 4;
				}
				else if ((LA33_2==EOF||LA33_2==CLOSEBRACE||LA33_2==COMMA||LA33_2==CREATE||(LA33_2>=EACH && LA33_2<=EQUALS)||(LA33_2>=FROM && LA33_2<=GREATERTHANEQUAL)||LA33_2==ID||LA33_2==INSERT_INTO||LA33_2==INSERT_OVERWRITE||(LA33_2>=LESSTHAN && LA33_2<=LESSTHANEQUAL)||LA33_2==NOTEQUAL||LA33_2==PLUS||LA33_2==SELECT||LA33_2==THEN||LA33_2==WHEN||LA33_2==WHERE))
				{
					alt33 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:229:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._pickStatement_in_selectArg1337);
				pickStatement155=pickStatement();
				PopFollow();

				adaptor.AddChild(root_0, pickStatement155.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:230:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				PushFollow(Follow._literal_in_selectArg1342);
				literal156=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal156.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:231:4: ID
				{
				DebugLocation(231, 4);
				ID157=(CommonToken)Match(input,ID,Follow._ID_in_selectArg1347);  
				stream_ID.Add(ID157);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 231:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(231, 10);
					// Scrape.g:231:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID157), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:232:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				PushFollow(Follow._tableMemberReference_in_selectArg1359);
				tableMemberReference158=tableMemberReference();
				PopFollow();

				adaptor.AddChild(root_0, tableMemberReference158.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 32);
			LeaveRule("selectArg", 32);
			LeaveRule_selectArg();
		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:235:1: pickStatement : PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 33);
		TraceIn("pickStatement", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK159 = default(CommonToken);
		CommonToken STRING_LITERAL160 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK159_tree = default(CommonTree);
		CommonTree STRING_LITERAL160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(235, 1);
		try
		{
			// Scrape.g:236:2: ( PICK STRING_LITERAL takeStatement ( matchStatement )? -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:236:4: PICK STRING_LITERAL takeStatement ( matchStatement )?
			{
			DebugLocation(236, 4);
			PICK159=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement1371);  
			stream_PICK.Add(PICK159);

			DebugLocation(236, 9);
			STRING_LITERAL160=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement1373);  
			stream_STRING_LITERAL.Add(STRING_LITERAL160);

			DebugLocation(236, 24);
			PushFollow(Follow._takeStatement_in_pickStatement1375);
			takeStatement161=takeStatement();
			PopFollow();

			stream_takeStatement.Add(takeStatement161.Tree);
			DebugLocation(236, 38);
			// Scrape.g:236:38: ( matchStatement )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==MATCH))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:236:38: matchStatement
				{
				DebugLocation(236, 38);
				PushFollow(Follow._matchStatement_in_pickStatement1377);
				matchStatement162=matchStatement();
				PopFollow();

				stream_matchStatement.Add(matchStatement162.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: takeStatement, PICK, matchStatement, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:54: -> ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
			{
				DebugLocation(236, 57);
				// Scrape.g:236:57: ^( PICK STRING_LITERAL takeStatement ( matchStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(236, 64);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(236, 79);
				adaptor.AddChild(root_1, stream_takeStatement.NextTree());
				DebugLocation(236, 93);
				// Scrape.g:236:93: ( matchStatement )?
				if (stream_matchStatement.HasNext)
				{
					DebugLocation(236, 93);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 33);
			LeaveRule("pickStatement", 33);
			LeaveRule_pickStatement();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:239:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 34);
		TraceIn("takeStatement", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE163 = default(CommonToken);
		CommonToken ATTRIBUTE164 = default(CommonToken);
		CommonToken STRING_LITERAL165 = default(CommonToken);
		CommonToken TAKE166 = default(CommonToken);
		CommonToken TEXT167 = default(CommonToken);
		CommonToken TAKE168 = default(CommonToken);
		CommonToken HTML169 = default(CommonToken);

		CommonTree TAKE163_tree = default(CommonTree);
		CommonTree ATTRIBUTE164_tree = default(CommonTree);
		CommonTree STRING_LITERAL165_tree = default(CommonTree);
		CommonTree TAKE166_tree = default(CommonTree);
		CommonTree TEXT167_tree = default(CommonTree);
		CommonTree TAKE168_tree = default(CommonTree);
		CommonTree HTML169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(239, 1);
		try
		{
			// Scrape.g:240:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt35 = 1;
					}
					break;
				case TEXT:
					{
					alt35 = 2;
					}
					break;
				case HTML:
					{
					alt35 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 35, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:240:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(240, 4);
				TAKE163=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1403);  
				stream_TAKE.Add(TAKE163);

				DebugLocation(240, 9);
				ATTRIBUTE164=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement1405);  
				stream_ATTRIBUTE.Add(ATTRIBUTE164);

				DebugLocation(240, 19);
				STRING_LITERAL165=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement1407);  
				stream_STRING_LITERAL.Add(STRING_LITERAL165);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(240, 37);
					// Scrape.g:240:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(240, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:241:4: TAKE TEXT
				{
				DebugLocation(241, 4);
				TAKE166=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1420);  
				stream_TAKE.Add(TAKE166);

				DebugLocation(241, 9);
				TEXT167=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement1422);  
				stream_TEXT.Add(TEXT167);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(241, 17);
					// Scrape.g:241:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:242:4: TAKE HTML
				{
				DebugLocation(242, 4);
				TAKE168=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement1433);  
				stream_TAKE.Add(TAKE168);

				DebugLocation(242, 9);
				HTML169=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement1435);  
				stream_HTML.Add(HTML169);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:14: -> ^( TAKE_HTML )
				{
					DebugLocation(242, 17);
					// Scrape.g:242:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 34);
			LeaveRule("takeStatement", 34);
			LeaveRule_takeStatement();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:245:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 35);
		TraceIn("matchStatement", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH170 = default(CommonToken);
		CommonToken STRING_LITERAL171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement172 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH170_tree = default(CommonTree);
		CommonTree STRING_LITERAL171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(245, 1);
		try
		{
			// Scrape.g:246:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:246:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(246, 4);
			MATCH170=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement1453);  
			stream_MATCH.Add(MATCH170);

			DebugLocation(246, 10);
			STRING_LITERAL171=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement1455);  
			stream_STRING_LITERAL.Add(STRING_LITERAL171);

			DebugLocation(246, 25);
			// Scrape.g:246:25: ( replaceStatement )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==REPLACE))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:246:25: replaceStatement
				{
				DebugLocation(246, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement1457);
				replaceStatement172=replaceStatement();
				PopFollow();

				stream_replaceStatement.Add(replaceStatement172.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, replaceStatement, MATCH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(246, 46);
				// Scrape.g:246:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(246, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(246, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(246, 69);
				// Scrape.g:246:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(246, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 35);
			LeaveRule("matchStatement", 35);
			LeaveRule_matchStatement();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:249:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 36);
		TraceIn("replaceStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE173 = default(CommonToken);
		CommonToken STRING_LITERAL174 = default(CommonToken);

		CommonTree REPLACE173_tree = default(CommonTree);
		CommonTree STRING_LITERAL174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(249, 1);
		try
		{
			// Scrape.g:250:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:250:4: REPLACE STRING_LITERAL
			{
			DebugLocation(250, 4);
			REPLACE173=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement1480);  
			stream_REPLACE.Add(REPLACE173);

			DebugLocation(250, 12);
			STRING_LITERAL174=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement1482);  
			stream_STRING_LITERAL.Add(STRING_LITERAL174);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(250, 30);
				// Scrape.g:250:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(250, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 36);
			LeaveRule("replaceStatement", 36);
			LeaveRule_replaceStatement();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:254:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 37);
		TraceIn("createTableStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE175 = default(CommonToken);
		CommonToken FILE176 = default(CommonToken);
		CommonToken ID177 = default(CommonToken);
		CommonToken OPENPAREN178 = default(CommonToken);
		CommonToken CLOSEPAREN180 = default(CommonToken);
		CommonToken CREATE183 = default(CommonToken);
		CommonToken BUFFER184 = default(CommonToken);
		CommonToken ID185 = default(CommonToken);
		CommonToken OPENPAREN186 = default(CommonToken);
		CommonToken CLOSEPAREN188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement181 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation182 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE175_tree = default(CommonTree);
		CommonTree FILE176_tree = default(CommonTree);
		CommonTree ID177_tree = default(CommonTree);
		CommonTree OPENPAREN178_tree = default(CommonTree);
		CommonTree CLOSEPAREN180_tree = default(CommonTree);
		CommonTree CREATE183_tree = default(CommonTree);
		CommonTree BUFFER184_tree = default(CommonTree);
		CommonTree ID185_tree = default(CommonTree);
		CommonTree OPENPAREN186_tree = default(CommonTree);
		CommonTree CLOSEPAREN188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(254, 1);
		try
		{
			// Scrape.g:255:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) )
			int alt40=2;
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==CREATE))
			{
				int LA40_2 = input.LA(2);

				if ((LA40_2==FILE))
				{
					alt40 = 1;
				}
				else if ((LA40_2==BUFFER))
				{
					alt40 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:255:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(255, 4);
				CREATE175=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1503);  
				stream_CREATE.Add(CREATE175);

				DebugLocation(255, 11);
				FILE176=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement1505);  
				stream_FILE.Add(FILE176);

				DebugLocation(255, 16);
				ID177=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1507);  
				stream_ID.Add(ID177);

				DebugLocation(255, 19);
				OPENPAREN178=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1509);  
				stream_OPENPAREN.Add(OPENPAREN178);

				DebugLocation(255, 29);
				// Scrape.g:255:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==ID))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:255:29: tableColumnArgs
						{
						DebugLocation(255, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1511);
						tableColumnArgs179=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs179.Tree);

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(255, 46);
				CLOSEPAREN180=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1514);  
				stream_CLOSEPAREN.Add(CLOSEPAREN180);

				DebugLocation(255, 57);
				// Scrape.g:255:57: ( fileTableWithStatement )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==WITH))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:255:57: fileTableWithStatement
					{
					DebugLocation(255, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement1516);
					fileTableWithStatement181=fileTableWithStatement();
					PopFollow();

					stream_fileTableWithStatement.Add(fileTableWithStatement181.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(255, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement1519);
				fileTableLocation182=fileTableLocation();
				PopFollow();

				stream_fileTableLocation.Add(fileTableLocation182.Tree);


				{
				// AST REWRITE
				// elements: ID, tableColumnArgs, fileTableLocation, fileTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 255:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(255, 102);
					// Scrape.g:255:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(255, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(255, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(255, 118);
					// Scrape.g:255:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(255, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(255, 135);
					// Scrape.g:255:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(255, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(255, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:256:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(256, 4);
				CREATE183=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement1540);  
				stream_CREATE.Add(CREATE183);

				DebugLocation(256, 11);
				BUFFER184=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement1542);  
				stream_BUFFER.Add(BUFFER184);

				DebugLocation(256, 18);
				ID185=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement1544);  
				stream_ID.Add(ID185);

				DebugLocation(256, 21);
				OPENPAREN186=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement1546);  
				stream_OPENPAREN.Add(OPENPAREN186);

				DebugLocation(256, 31);
				// Scrape.g:256:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_1 = input.LA(1);

					if ((LA39_1==ID))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch ( alt39 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:256:31: tableColumnArgs
						{
						DebugLocation(256, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement1548);
						tableColumnArgs187=tableColumnArgs();
						PopFollow();

						stream_tableColumnArgs.Add(tableColumnArgs187.Tree);

						}
						break;

					default:
						goto loop39;
					}
				}

				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(256, 48);
				CLOSEPAREN188=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement1551);  
				stream_CLOSEPAREN.Add(CLOSEPAREN188);



				{
				// AST REWRITE
				// elements: ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(256, 62);
					// Scrape.g:256:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(256, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(256, 80);
					// Scrape.g:256:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(256, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 37);
			LeaveRule("createTableStatement", 37);
			LeaveRule_createTableStatement();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:259:1: fileTableLocation : LOCATION ^ STRING_LITERAL ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 38);
		TraceIn("fileTableLocation", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION189 = default(CommonToken);
		CommonToken STRING_LITERAL190 = default(CommonToken);

		CommonTree LOCATION189_tree = default(CommonTree);
		CommonTree STRING_LITERAL190_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(259, 1);
		try
		{
			// Scrape.g:260:2: ( LOCATION ^ STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:260:4: LOCATION ^ STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(260, 12);
			LOCATION189=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation1573); 
			LOCATION189_tree = (CommonTree)adaptor.Create(LOCATION189);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION189_tree, root_0);
			DebugLocation(260, 14);
			STRING_LITERAL190=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableLocation1576); 
			STRING_LITERAL190_tree = (CommonTree)adaptor.Create(STRING_LITERAL190);
			adaptor.AddChild(root_0, STRING_LITERAL190_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 38);
			LeaveRule("fileTableLocation", 38);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:263:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 39);
		TraceIn("fileTableWithStatement", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH191 = default(CommonToken);
		CommonToken OPENPAREN192 = default(CommonToken);
		CommonToken CLOSEPAREN194 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH191_tree = default(CommonTree);
		CommonTree OPENPAREN192_tree = default(CommonTree);
		CommonTree CLOSEPAREN194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(263, 1);
		try
		{
			// Scrape.g:264:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:264:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(264, 4);
			WITH191=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement1587);  
			stream_WITH.Add(WITH191);

			DebugLocation(264, 9);
			OPENPAREN192=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement1589);  
			stream_OPENPAREN.Add(OPENPAREN192);

			DebugLocation(264, 19);
			// Scrape.g:264:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==FIELD_TERMINATOR||LA41_1==ROW_TERMINATOR))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:264:19: fileTableWithVariablesStatement
					{
					DebugLocation(264, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement1591);
					fileTableWithVariablesStatement193=fileTableWithVariablesStatement();
					PopFollow();

					stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement193.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }

			DebugLocation(264, 52);
			CLOSEPAREN194=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement1594);  
			stream_CLOSEPAREN.Add(CLOSEPAREN194);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(264, 66);
				// Scrape.g:264:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(264, 73);
				// Scrape.g:264:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(264, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 39);
			LeaveRule("fileTableWithStatement", 39);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:267:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 40);
		TraceIn("fileTableWithVariablesStatement", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA196 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement195 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(267, 1);
		try
		{
			// Scrape.g:268:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:268:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(268, 4);
			// Scrape.g:268:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_1 = input.LA(1);

				if ((LA42_1==FIELD_TERMINATOR||LA42_1==ROW_TERMINATOR))
				{
					int LA42_2 = input.LA(2);

					if ((LA42_2==EQUALS))
					{
						int LA42_3 = input.LA(3);

						if ((LA42_3==STRING_LITERAL))
						{
							int LA42_4 = input.LA(4);

							if ((LA42_4==COMMA))
							{
								alt42 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:268:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(268, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1617);
					fileTableWithVariableStatement195=fileTableWithVariableStatement();
					PopFollow();

					stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement195.Tree);
					DebugLocation(268, 36);
					COMMA196=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement1619);  
					stream_COMMA.Add(COMMA196);


					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }

			DebugLocation(268, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement1623);
			fileTableWithVariableStatement197=fileTableWithVariableStatement();
			PopFollow();

			stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement197.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(268, 78);
				// Scrape.g:268:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(268, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 40);
			LeaveRule("fileTableWithVariablesStatement", 40);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:271:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 41);
		TraceIn("fileTableWithVariableStatement", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set198 = default(CommonToken);
		CommonToken EQUALS199 = default(CommonToken);
		CommonToken STRING_LITERAL200 = default(CommonToken);

		CommonTree set198_tree = default(CommonTree);
		CommonTree EQUALS199_tree = default(CommonTree);
		CommonTree STRING_LITERAL200_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(271, 1);
		try
		{
			// Scrape.g:272:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:272:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(272, 39);

			set198=(CommonToken)input.LT(1);
			set198=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set198), root_0);
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(272, 47);
			EQUALS199=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement1648); 
			DebugLocation(272, 49);
			STRING_LITERAL200=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement1651); 
			STRING_LITERAL200_tree = (CommonTree)adaptor.Create(STRING_LITERAL200);
			adaptor.AddChild(root_0, STRING_LITERAL200_tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 41);
			LeaveRule("fileTableWithVariableStatement", 41);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:275:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 42);
		TraceIn("tableColumnArgs", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA202 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg203 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(275, 1);
		try
		{
			// Scrape.g:276:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:276:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(276, 4);
			// Scrape.g:276:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==ID))
				{
					int LA43_2 = input.LA(2);

					if ((LA43_2==FLOAT||LA43_2==IDENTITY||LA43_2==INTEGER||LA43_2==STRING))
					{
						int LA43_3 = input.LA(3);

						if ((LA43_3==COMMA))
						{
							alt43 = 1;
						}


					}


				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:276:5: tableColumnArg COMMA
					{
					DebugLocation(276, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs1663);
					tableColumnArg201=tableColumnArg();
					PopFollow();

					stream_tableColumnArg.Add(tableColumnArg201.Tree);
					DebugLocation(276, 20);
					COMMA202=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs1665);  
					stream_COMMA.Add(COMMA202);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(276, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs1669);
			tableColumnArg203=tableColumnArg();
			PopFollow();

			stream_tableColumnArg.Add(tableColumnArg203.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(276, 46);
				// Scrape.g:276:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(276, 66);
				// Scrape.g:276:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(276, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 42);
			LeaveRule("tableColumnArgs", 42);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:279:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 43);
		TraceIn("tableColumnArg", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID204 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(279, 1);
		try
		{
			// Scrape.g:280:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:280:4: ID dataType
			{
			DebugLocation(280, 4);
			ID204=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg1690);  
			stream_ID.Add(ID204);

			DebugLocation(280, 7);
			PushFollow(Follow._dataType_in_tableColumnArg1692);
			dataType205=dataType();
			PopFollow();

			stream_dataType.Add(dataType205.Tree);


			{
			// AST REWRITE
			// elements: ID, dataType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 280:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(280, 19);
				// Scrape.g:280:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(280, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(280, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(280, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 43);
			LeaveRule("tableColumnArg", 43);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:283:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 44);
		TraceIn("dataType", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set206 = default(CommonToken);

		CommonTree set206_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(283, 1);
		try
		{
			// Scrape.g:284:2: ( STRING | INTEGER | FLOAT | IDENTITY )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(284, 2);

			set206=(CommonToken)input.LT(1);
			if (input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set206));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 44);
			LeaveRule("dataType", 44);
			LeaveRule_dataType();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"
	#endregion Rules


	#region DFA
	private DFA23 dfa23;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa23 = new DFA23( this );
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\xD7\xFFFF";
		private const string DFA23_eofS =
			"\x2\xFFFF\x2\x7\xB\xFFFF\x1\x7\x7\xFFFF\x2\x7\xB\xFFFF\x1\x7\x19\xFFFF"+
			"\x1\x7\x2A\xFFFF\x1\x7\x1\xFFFF\x1\x7\x6\xFFFF\x1\x7\x64\xFFFF";
		private const string DFA23_minS =
			"\x1\xA\x1\x4E\x2\xE\x1\x26\x1\x53\x1\x26\x2\xFFFF\x2\x26\x1\x4E\x1\x5E"+
			"\x1\x15\x1\x6\x1\xE\x1\x4E\x1\x1B\x1\x15\x1\x53\x1\x2C\x1\x26\x1\x4E"+
			"\x2\xE\x1\x53\x7\x26\x1\x6\x1\x59\x1\x5E\x1\xE\x1\x4E\x1\x6\x1\x4E\x1"+
			"\x59\x1\x15\x1\x4E\x1\x59\x1\x15\x1\x4E\x1\x59\x1\x15\x1\x4E\x1\x59\x1"+
			"\x15\x1\x4E\x1\x59\x1\x15\x1\x4E\x1\x59\x1\x15\x1\x1B\x1\x4E\x2\x34\x1"+
			"\x26\x1\xE\x1\x4E\x2\x1B\x1\x53\x2\x26\x1\x53\x1\x26\x1\x53\x1\x26\x1"+
			"\x53\x1\x26\x1\x53\x1\x26\x1\x53\x1\x26\x1\x34\x2\x4E\x1\x19\x1\x15\x1"+
			"\x4E\x1\x1B\x1\x4E\x1\x6\x1\x4E\x1\x19\x1\x15\x1\x59\x1\x6\x1\x59\x1"+
			"\x6\x1\x59\x1\x6\x1\x59\x1\x6\x1\x59\x1\x6\x1\x59\x1\x45\x1\x53\x1\x26"+
			"\x1\xE\x1\x26\x1\xE\x1\x1B\x1\x4E\x2\x34\x1\x53\x1\x26\x1\xE\x1\x26\x1"+
			"\x4E\x2\x34\x1\x4E\x2\x34\x1\x4E\x2\x34\x1\x4E\x2\x34\x1\x4E\x2\x34\x1"+
			"\x4E\x1\x6\x1\x4E\x1\x1A\x1\x15\x1\x19\x1\x4E\x1\x34\x1\x4E\x1\x6\x1"+
			"\x4E\x1\x1A\x1\x15\x1\x19\x1\x34\x1\x4E\x1\x34\x1\x4E\x1\x34\x1\x4E\x1"+
			"\x34\x1\x4E\x1\x34\x1\x4E\x1\x5E\x1\x4E\x2\x19\x1\x53\x1\x26\x1\x1B\x1"+
			"\x45\x1\x4E\x2\x19\x1\x53\x1\x26\x5\x45\x1\x19\x1\x4E\x1\x6\x1\x1A\x1"+
			"\x4E\x1\x19\x1\x4E\x1\x6\x1\x1A\x5\x4E\x1\x19\x1\x4E\x2\x1A\x1\x59\x1"+
			"\x19\x1\x4E\x2\x1A\x5\x59\x1\x4E\x1\x1A\x2\x4E\x1\x1A\x1\x4E\x1\x19\x1"+
			"\x1A\x1\x19\x1\x1A\x2\x4E\x2\x1A";
		private const string DFA23_maxS =
			"\x2\x4E\x2\x61\x1\x5E\x1\x53\x1\x4E\x2\xFFFF\x1\x26\x2\x4E\x2\x5E\x1"+
			"\x58\x1\x61\x1\x4E\x2\x38\x1\x53\x1\x4E\x1\x26\x1\x4E\x2\x61\x1\x53\x6"+
			"\x4E\x1\x26\x1\x58\x1\x59\x1\x5E\x1\x61\x1\x4E\x1\x58\x1\x4E\x2\x59\x1"+
			"\x4E\x2\x59\x1\x4E\x2\x59\x1\x4E\x2\x59\x1\x4E\x2\x59\x1\x4E\x2\x59\x1"+
			"\x38\x1\x4E\x2\x5E\x1\x4E\x1\x61\x1\x4E\x2\x38\x1\x53\x1\x4E\x1\x26\x1"+
			"\x53\x1\x26\x1\x53\x1\x26\x1\x53\x1\x26\x1\x53\x1\x26\x1\x53\x1\x26\x1"+
			"\x5E\x2\x4E\x2\x5E\x1\x4E\x1\x38\x1\x4E\x1\x58\x1\x4E\x2\x5E\x1\x59\x1"+
			"\x58\x1\x59\x1\x58\x1\x59\x1\x58\x1\x59\x1\x58\x1\x59\x1\x58\x1\x59\x1"+
			"\x5E\x1\x53\x1\x4E\x1\x61\x1\x26\x1\x61\x1\x45\x1\x4E\x2\x59\x1\x53\x1"+
			"\x4E\x1\x61\x1\x26\x1\x4E\x2\x59\x1\x4E\x2\x59\x1\x4E\x2\x59\x1\x4E\x2"+
			"\x59\x1\x4E\x2\x59\x1\x4E\x1\x58\x1\x4E\x2\x1A\x1\x5E\x1\x4E\x1\x59\x1"+
			"\x4E\x1\x58\x1\x4E\x2\x1A\x1\x5E\x1\x59\x1\x4E\x1\x59\x1\x4E\x1\x59\x1"+
			"\x4E\x1\x59\x1\x4E\x1\x59\x1\x4E\x1\x5E\x1\x4E\x2\x5E\x1\x53\x1\x26\x1"+
			"\x38\x1\x59\x1\x4E\x2\x5E\x1\x53\x1\x26\x5\x59\x1\x5E\x1\x4E\x1\x58\x1"+
			"\x1A\x1\x4E\x1\x5E\x1\x4E\x1\x58\x1\x1A\x5\x4E\x1\x5E\x1\x4E\x2\x34\x1"+
			"\x59\x1\x5E\x1\x4E\x2\x34\x5\x59\x1\x4E\x1\x34\x2\x4E\x1\x34\x1\x4E\x1"+
			"\x5E\x1\x45\x1\x5E\x1\x45\x2\x4E\x2\x1A";
		private const string DFA23_acceptS =
			"\x7\xFFFF\x1\x2\x1\x1\xCE\xFFFF";
		private const string DFA23_specialS =
			"\xD7\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x1\x4\x1B\xFFFF\x1\x3\x5\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1"+
				"\x10\xFFFF\x1\x2",
				"\x1\x5",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\x9\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x2\xFFFF\x1\x9\x2\xFFFF\x1\x7"+
				"\x9\xFFFF\x1\x7\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF"+
				"\x1\x6\x9\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\xD\x5\xFFFF\x1\xC\xC\xFFFF\x1\xC\x3\xFFFF\x1\xB\x10\xFFFF\x1\xC"+
				"\xF\xFFFF\x1\xA",
				"\x1\xE",
				"\x1\x3\x5\xFFFF\x1\x2\xC\xFFFF\x1\x2\x3\xFFFF\x1\x1\x10\xFFFF\x1\x2",
				"",
				"",
				"\x1\xF",
				"\x1\x12\x5\xFFFF\x1\x11\xC\xFFFF\x1\x11\x3\xFFFF\x1\x10\x10\xFFFF\x1"+
				"\x11",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15\x48\xFFFF\x1\x14",
				"\x1\x16\x1E\xFFFF\x1\x18\x32\xFFFF\x1\x17",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\x9\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x19",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x20\x5\xFFFF\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C"+
				"\x8\xFFFF\x1\x1F",
				"\x1\x21",
				"\x1\x22\xC\xFFFF\x1\x22\x14\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\x9\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\x9\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x26",
				"\x1\x29\x5\xFFFF\x1\x28\xC\xFFFF\x1\x28\x3\xFFFF\x1\x27\x10\xFFFF\x1"+
				"\x28",
				"\x1\x2C\x5\xFFFF\x1\x2B\xC\xFFFF\x1\x2B\x3\xFFFF\x1\x2A\x10\xFFFF\x1"+
				"\x2B",
				"\x1\x2F\x5\xFFFF\x1\x2E\xC\xFFFF\x1\x2E\x3\xFFFF\x1\x2D\x10\xFFFF\x1"+
				"\x2E",
				"\x1\x32\x5\xFFFF\x1\x31\xC\xFFFF\x1\x31\x3\xFFFF\x1\x30\x10\xFFFF\x1"+
				"\x31",
				"\x1\x35\x5\xFFFF\x1\x34\xC\xFFFF\x1\x34\x3\xFFFF\x1\x33\x10\xFFFF\x1"+
				"\x34",
				"\x1\x38\x5\xFFFF\x1\x37\xC\xFFFF\x1\x37\x3\xFFFF\x1\x36\x10\xFFFF\x1"+
				"\x37",
				"\x1\x39",
				"\x1\x3A\x1E\xFFFF\x1\x3C\x32\xFFFF\x1\x3B",
				"\x1\x3D",
				"\x1\x14",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x8\xFFFF\x1\x25\x9\xFFFF"+
				"\x1\x6\x9\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x3E",
				"\x1\x3F\x1E\xFFFF\x1\x41\x32\xFFFF\x1\x40",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44\x43\xFFFF\x1\x43",
				"\x1\x45",
				"\x1\x43",
				"\x1\x46\x43\xFFFF\x1\x43",
				"\x1\x47",
				"\x1\x43",
				"\x1\x48\x43\xFFFF\x1\x43",
				"\x1\x49",
				"\x1\x43",
				"\x1\x4A\x43\xFFFF\x1\x43",
				"\x1\x4B",
				"\x1\x43",
				"\x1\x4C\x43\xFFFF\x1\x43",
				"\x1\x4D",
				"\x1\x43",
				"\x1\x4E\x43\xFFFF\x1\x43",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\x4F",
				"\x1\x50\x29\xFFFF\x1\x14",
				"\x1\x50\x29\xFFFF\x1\x14",
				"\x1\x53\x5\xFFFF\x1\x52\xC\xFFFF\x1\x52\x3\xFFFF\x1\x51\x10\xFFFF\x1"+
				"\x52",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\x6\xFFFF"+
				"\x1\x54\x2\xFFFF\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x55",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x57",
				"\x1\x5A\x5\xFFFF\x1\x59\xC\xFFFF\x1\x59\x3\xFFFF\x1\x58\x10\xFFFF\x1"+
				"\x59",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x50\x29\xFFFF\x1\x14",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68\x1\x69\x43\xFFFF\x1\x14",
				"\x1\x6A\x3\xFFFF\x1\x68\x1\x69\x43\xFFFF\x1\x14",
				"\x1\x6B",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x4\xFFFF\x1\x56"+
				"\x3\xFFFF\x1\x1F",
				"\x1\x6C",
				"\x1\x6D\x1E\xFFFF\x1\x6F\x32\xFFFF\x1\x6E",
				"\x1\x70",
				"\x1\x71\x1\x72\x43\xFFFF\x1\xA",
				"\x1\x73\x3\xFFFF\x1\x71\x1\x72\x43\xFFFF\x1\xA",
				"\x1\x43",
				"\x1\x74\x1E\xFFFF\x1\x76\x32\xFFFF\x1\x75",
				"\x1\x43",
				"\x1\x77\x1E\xFFFF\x1\x79\x32\xFFFF\x1\x78",
				"\x1\x43",
				"\x1\x7A\x1E\xFFFF\x1\x7C\x32\xFFFF\x1\x7B",
				"\x1\x43",
				"\x1\x7D\x1E\xFFFF\x1\x7F\x32\xFFFF\x1\x7E",
				"\x1\x43",
				"\x1\x80\x1E\xFFFF\x1\x82\x32\xFFFF\x1\x81",
				"\x1\x43",
				"\x1\x83\x18\xFFFF\x1\x14",
				"\x1\x84",
				"\x1\x87\x5\xFFFF\x1\x86\xC\xFFFF\x1\x86\x3\xFFFF\x1\x85\x10\xFFFF\x1"+
				"\x86",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x1C\xFFFF\x1\x7\x18\xFFFF"+
				"\x1\x7",
				"\x1\x88",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x12\xFFFF\x1\x6\x9\xFFFF"+
				"\x1\x7\x18\xFFFF\x1\x7",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F"+
				"\xC\xFFFF\x1\x89",
				"\x1\x8A",
				"\x1\x8B\x24\xFFFF\x1\x43",
				"\x1\x8B\x24\xFFFF\x1\x43",
				"\x1\x8C",
				"\x1\x8F\x5\xFFFF\x1\x8E\xC\xFFFF\x1\x8E\x3\xFFFF\x1\x8D\x10\xFFFF\x1"+
				"\x8E",
				"\x1\x7\x1\xFFFF\x1\x8\x1\xFFFF\x1\x7\x5\xFFFF\x1\x7\x9\xFFFF\x1\x7"+
				"\x3\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x1C\xFFFF\x1\x7\x18\xFFFF"+
				"\x1\x7",
				"\x1\x90",
				"\x1\x91",
				"\x1\x92\x24\xFFFF\x1\x43",
				"\x1\x92\x24\xFFFF\x1\x43",
				"\x1\x93",
				"\x1\x94\x24\xFFFF\x1\x43",
				"\x1\x94\x24\xFFFF\x1\x43",
				"\x1\x95",
				"\x1\x96\x24\xFFFF\x1\x43",
				"\x1\x96\x24\xFFFF\x1\x43",
				"\x1\x97",
				"\x1\x98\x24\xFFFF\x1\x43",
				"\x1\x98\x24\xFFFF\x1\x43",
				"\x1\x99",
				"\x1\x9A\x24\xFFFF\x1\x43",
				"\x1\x9A\x24\xFFFF\x1\x43",
				"\x1\x9B",
				"\x1\x9C\x1E\xFFFF\x1\x9E\x32\xFFFF\x1\x9D",
				"\x1\x9F",
				"\x1\x69",
				"\x1\xA0\x4\xFFFF\x1\x69",
				"\x1\x68\x1\x69\x43\xFFFF\x1\x14",
				"\x1\xA1",
				"\x1\x8B\x24\xFFFF\x1\x43",
				"\x1\xA2",
				"\x1\xA3\x1E\xFFFF\x1\xA5\x32\xFFFF\x1\xA4",
				"\x1\xA6",
				"\x1\x72",
				"\x1\xA7\x4\xFFFF\x1\x72",
				"\x1\x71\x1\x72\x43\xFFFF\x1\xA",
				"\x1\x92\x24\xFFFF\x1\x43",
				"\x1\xA8",
				"\x1\x94\x24\xFFFF\x1\x43",
				"\x1\xA9",
				"\x1\x96\x24\xFFFF\x1\x43",
				"\x1\xAA",
				"\x1\x98\x24\xFFFF\x1\x43",
				"\x1\xAB",
				"\x1\x9A\x24\xFFFF\x1\x43",
				"\x1\xAC",
				"\x1\x14",
				"\x1\xAD",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x29\xFFFF\x1\x14",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x29\xFFFF\x1\x14",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\x1A\x7\xFFFF\x1\x1D\x1\x1E\x9\xFFFF\x1\x1B\x1\x1C\x8\xFFFF\x1\x1F",
				"\x1\xB1\x13\xFFFF\x1\x43",
				"\x1\xB2",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x29\xFFFF\x1\xA",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x29\xFFFF\x1\xA",
				"\x1\xB4",
				"\x1\xB5",
				"\x1\xB6\x13\xFFFF\x1\x43",
				"\x1\xB7\x13\xFFFF\x1\x43",
				"\x1\xB8\x13\xFFFF\x1\x43",
				"\x1\xB9\x13\xFFFF\x1\x43",
				"\x1\xBA\x13\xFFFF\x1\x43",
				"\x1\x68\x1\x69\x19\xFFFF\x1\xAE\x29\xFFFF\x1\x14",
				"\x1\xBB",
				"\x1\xBC\x1E\xFFFF\x1\xBE\x32\xFFFF\x1\xBD",
				"\x1\x69",
				"\x1\xBF",
				"\x1\x71\x1\x72\x19\xFFFF\x1\xB3\x29\xFFFF\x1\xA",
				"\x1\xC0",
				"\x1\xC1\x1E\xFFFF\x1\xC3\x32\xFFFF\x1\xC2",
				"\x1\x72",
				"\x1\xC4",
				"\x1\xC5",
				"\x1\xC6",
				"\x1\xC7",
				"\x1\xC8",
				"\x1\x68\x1\x69\x2A\xFFFF\x1\xC9\x18\xFFFF\x1\x14",
				"\x1\xCA",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\x43",
				"\x1\x71\x1\x72\x2A\xFFFF\x1\xCC\x18\xFFFF\x1\xA",
				"\x1\xCD",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\x43",
				"\x1\xCF",
				"\x1\x69\x19\xFFFF\x1\xCB",
				"\x1\xD0",
				"\x1\xD1",
				"\x1\x72\x19\xFFFF\x1\xCE",
				"\x1\xD2",
				"\x1\x68\x1\x69\x43\xFFFF\x1\x14",
				"\x1\x69\x2A\xFFFF\x1\xD3",
				"\x1\x71\x1\x72\x43\xFFFF\x1\xA",
				"\x1\x72\x2A\xFFFF\x1\xD4",
				"\x1\xD5",
				"\x1\xD6",
				"\x1\x69",
				"\x1\x72"
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "()* loopback of 190:11: ( selectArgs COMMA )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_program207 = new BitSet(new ulong[]{0xA4001040000UL,0x100UL});
		public static readonly BitSet _EOF_in_program210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program224 = new BitSet(new ulong[]{0xA4001040000UL,0x100UL});
		public static readonly BitSet _statement_in_program226 = new BitSet(new ulong[]{0xA4001040000UL,0x100UL});
		public static readonly BitSet _EOF_in_program229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement283 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement285 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _proxyList_in_proxyStatement287 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement289 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _proxyTest_in_proxyStatement291 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList313 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_proxyList315 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest339 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _TEST_in_proxyTest341 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest343 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _sqlStatement_in_proxyTest345 = new BitSet(new ulong[]{0x4000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement362 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement364 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_eachStatement368 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _IN_in_eachStatement370 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_eachStatement374 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement376 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _block_in_eachStatement378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENBRACE_in_block403 = new BitSet(new ulong[]{0xA4001044000UL,0x100UL});
		public static readonly BitSet _statement_in_block405 = new BitSet(new ulong[]{0xA4001044000UL,0x100UL});
		public static readonly BitSet _CLOSEBRACE_in_block408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression428 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression430 = new BitSet(new ulong[]{0x104000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression432 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _TO_in_expandExpression434 = new BitSet(new ulong[]{0x104000000000UL});
		public static readonly BitSet _expandVar_in_expandExpression436 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression438 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _expandBlock_in_expandExpression440 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock465 = new BitSet(new ulong[]{0xA00104000004000UL,0x1000004000UL});
		public static readonly BitSet _mathExpression_in_expandBlock467 = new BitSet(new ulong[]{0xA00104000004000UL,0x1000004000UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_expandVar491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_expandVar496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion530 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadPageExpresssion534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadPageExpresssion538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion544 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_downloadPageExpresssion546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion560 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadPageExpresssion562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression581 = new BitSet(new ulong[]{0x0UL,0x4100UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadImageExpression585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_downloadImageExpression589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression595 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_downloadImageExpression597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression611 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableMemberReference_in_downloadImageExpression613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference636 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _DOT_in_tableMemberReference638 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement666 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement668 = new BitSet(new ulong[]{0xA00104010C00000UL,0x1000004100UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression722 = new BitSet(new ulong[]{0x4040000000000002UL});
		public static readonly BitSet _set_in_mathExpression725 = new BitSet(new ulong[]{0xA00104000000000UL,0x1000004000UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression736 = new BitSet(new ulong[]{0x4040000000000002UL});
		public static readonly BitSet _atom_in_mathExpressionGroup754 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _set_in_mathExpressionGroup757 = new BitSet(new ulong[]{0xA00104000000000UL,0x1000004000UL});
		public static readonly BitSet _atom_in_mathExpressionGroup768 = new BitSet(new ulong[]{0x100022UL});
		public static readonly BitSet _ID_in_atom789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_atom802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_atom814 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom829 = new BitSet(new ulong[]{0xA00104000000000UL,0x1000004000UL});
		public static readonly BitSet _mathExpression_in_atom832 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement876 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_insertStatement878 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _sqlStatement_in_insertStatement880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement895 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_insertStatement897 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _sqlStatement_in_insertStatement899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement913 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_insertStatement915 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _sqlStatement_in_insertStatement917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement941 = new BitSet(new ulong[]{0x400000002UL,0x200000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement943 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement972 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_whereStatement975 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_whereStatement977 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_whereStatement980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement991 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_fromStatement993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1007 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _downloadPageExpresssion_in_fromStatement1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1015 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _downloadImageExpression_in_fromStatement1018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1023 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _expandExpression_in_fromStatement1026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1037 = new BitSet(new ulong[]{0x2200104000000400UL,0x4000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1040 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_selectStatement1042 = new BitSet(new ulong[]{0x2200104000000400UL,0x4000UL});
		public static readonly BitSet _selectArgs_in_selectStatement1046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1060 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1088 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _PLUS_in_selectArgs1090 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_selectArgs1094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1108 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1130 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1132 = new BitSet(new ulong[]{0x6000000UL,0x40000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1136 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1138 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1159 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_caseStatement1161 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1163 = new BitSet(new ulong[]{0x6000000UL,0x40000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1167 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _caseExpression_in_caseStatement1169 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _END_in_caseStatement1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1217 = new BitSet(new ulong[]{0x200100000000000UL,0x4000UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1219 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1221 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1244 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1246 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1248 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1271 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_boolExpression1273 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1281 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _LESSTHAN_in_boolExpression1283 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1291 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _LESSTHANEQUAL_in_boolExpression1293 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1301 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _GREATERTHAN_in_boolExpression1303 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1311 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _GREATERTHANEQUAL_in_boolExpression1313 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolExpression1321 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NOTEQUAL_in_boolExpression1323 = new BitSet(new ulong[]{0x2200104000000000UL,0x4000UL});
		public static readonly BitSet _selectArg_in_boolExpression1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg1337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectArg1347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectArg1359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement1371 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement1373 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _takeStatement_in_pickStatement1375 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _matchStatement_in_pickStatement1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1403 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement1405 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1420 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _TEXT_in_takeStatement1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement1433 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _HTML_in_takeStatement1435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement1453 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement1455 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _replaceStatement_in_matchStatement1457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement1480 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement1482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1503 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _FILE_in_createTableStatement1505 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1507 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1509 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1511 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1514 = new BitSet(new ulong[]{0x8000000000000UL,0x400000000UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement1516 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement1519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement1540 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _BUFFER_in_createTableStatement1542 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _ID_in_createTableStatement1544 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement1546 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement1548 = new BitSet(new ulong[]{0x4000008000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement1551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation1573 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableLocation1576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement1587 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement1589 = new BitSet(new ulong[]{0x40008000UL,0x80UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement1591 = new BitSet(new ulong[]{0x40008000UL,0x80UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1617 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement1619 = new BitSet(new ulong[]{0x40000000UL,0x80UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement1639 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement1648 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement1651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1663 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs1665 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg1690 = new BitSet(new ulong[]{0x208200000000UL,0x2000UL});
		public static readonly BitSet _dataType_in_tableColumnArg1692 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
