//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.2 Scrape.g 2016-12-09 10:44:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.2")]
[System.CLSCompliant(false)]
public partial class ScrapeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AND", "APOSTRAPHE", "ASTERISK", "ATTRIBUTE", "BLOCK", "BUFFER", "BUFFER_TABLE", "CASE", "CASE_BOOL", "CASE_EXPRESSION", "CASE_VAR", "CLOSEBRACE", "CLOSEPAREN", "COMMA", "COMMAND_VAR", "COMMENT", "CONNECTIONSTRING", "CREATE", "DATETIME", "DBTABLE", "DIGIT", "DIV", "DOT", "DOWNLOAD_IMAGE", "DOWNLOAD_PAGE", "EACH", "ELSE", "END", "EQUALS", "EXEC", "EXPAND", "EXPAND_INTERATION_VARIABLE", "FIELD_TERMINATOR", "FILE", "FILE_TABLE", "FL", "FLOAT", "FROM", "GETDATE", "GREATERTHAN", "GREATERTHANEQUAL", "HTML", "ID", "IDENTITY", "IDENTITY_VAR", "IN", "INNER_JOIN", "INSERT_DIRECTORY", "INSERT_INTO", "INSERT_INTO_DIRECTORY", "INSERT_OVERWRITE", "INT", "INTEGER", "JOIN", "JS", "LESSTHAN", "LESSTHANEQUAL", "LETTER", "LIKE", "LINE_COMMENT_DASH", "LINE_COMMENT_SLASH", "LOCATION", "MATCH", "MEMBER_REFERENCE", "MINIS", "MSSQL", "MSSQL_TABLE", "NEWLINE", "NODES", "NOTEQUAL", "NOTLIKE", "NULL", "NULL_OPERATOR", "OPENBRACE", "OPENPAREN", "OR", "OTHERCHARS", "PICK", "PIPE", "PLUS", "POST_PICK", "PRE_PICK", "PROCEDURE", "PROGRAM", "PROXIES", "PROXY_LIST", "QUOTE", "REPLACE", "ROW_REFERENCE", "ROW_TERMINATOR", "SELECT", "SELECT_ALL", "SELECT_ARG", "SELECT_ID", "SELECT_STATEMENT", "SET", "STRING", "STRING_LITERAL", "TABLE", "TABLE_ALIAS", "TABLE_COLUMN_ARG", "TABLE_COLUMN_ARGS", "TABLE_MEMBER_REFERENCE", "TABLE_VARIABLE_REFERENCE", "TAKE", "TAKE_ATTRIBUTE", "TAKE_HTML", "TAKE_TEXT", "TEST", "TEXT", "THEN", "THREAD", "TO", "TRUNCATE", "UPDATE", "VAR", "VARIABLE_ASSIGNMENT", "VARIABLE_DECLARATION", "VARIABLE_REFERENCE", "WHEN", "WHEN_BOOL_STATEMENT", "WHEN_LITERAL_STATEMENT", "WHERE", "WHILE", "WITH", "WS", "'$'", "'on'"
	};
	public const int EOF=-1;
	public const int T__130=130;
	public const int T__131=131;
	public const int AND=4;
	public const int APOSTRAPHE=5;
	public const int ASTERISK=6;
	public const int ATTRIBUTE=7;
	public const int BLOCK=8;
	public const int BUFFER=9;
	public const int BUFFER_TABLE=10;
	public const int CASE=11;
	public const int CASE_BOOL=12;
	public const int CASE_EXPRESSION=13;
	public const int CASE_VAR=14;
	public const int CLOSEBRACE=15;
	public const int CLOSEPAREN=16;
	public const int COMMA=17;
	public const int COMMAND_VAR=18;
	public const int COMMENT=19;
	public const int CONNECTIONSTRING=20;
	public const int CREATE=21;
	public const int DATETIME=22;
	public const int DBTABLE=23;
	public const int DIGIT=24;
	public const int DIV=25;
	public const int DOT=26;
	public const int DOWNLOAD_IMAGE=27;
	public const int DOWNLOAD_PAGE=28;
	public const int EACH=29;
	public const int ELSE=30;
	public const int END=31;
	public const int EQUALS=32;
	public const int EXEC=33;
	public const int EXPAND=34;
	public const int EXPAND_INTERATION_VARIABLE=35;
	public const int FIELD_TERMINATOR=36;
	public const int FILE=37;
	public const int FILE_TABLE=38;
	public const int FL=39;
	public const int FLOAT=40;
	public const int FROM=41;
	public const int GETDATE=42;
	public const int GREATERTHAN=43;
	public const int GREATERTHANEQUAL=44;
	public const int HTML=45;
	public const int ID=46;
	public const int IDENTITY=47;
	public const int IDENTITY_VAR=48;
	public const int IN=49;
	public const int INNER_JOIN=50;
	public const int INSERT_DIRECTORY=51;
	public const int INSERT_INTO=52;
	public const int INSERT_INTO_DIRECTORY=53;
	public const int INSERT_OVERWRITE=54;
	public const int INT=55;
	public const int INTEGER=56;
	public const int JOIN=57;
	public const int JS=58;
	public const int LESSTHAN=59;
	public const int LESSTHANEQUAL=60;
	public const int LETTER=61;
	public const int LIKE=62;
	public const int LINE_COMMENT_DASH=63;
	public const int LINE_COMMENT_SLASH=64;
	public const int LOCATION=65;
	public const int MATCH=66;
	public const int MEMBER_REFERENCE=67;
	public const int MINIS=68;
	public const int MSSQL=69;
	public const int MSSQL_TABLE=70;
	public const int NEWLINE=71;
	public const int NODES=72;
	public const int NOTEQUAL=73;
	public const int NOTLIKE=74;
	public const int NULL=75;
	public const int NULL_OPERATOR=76;
	public const int OPENBRACE=77;
	public const int OPENPAREN=78;
	public const int OR=79;
	public const int OTHERCHARS=80;
	public const int PICK=81;
	public const int PIPE=82;
	public const int PLUS=83;
	public const int POST_PICK=84;
	public const int PRE_PICK=85;
	public const int PROCEDURE=86;
	public const int PROGRAM=87;
	public const int PROXIES=88;
	public const int PROXY_LIST=89;
	public const int QUOTE=90;
	public const int REPLACE=91;
	public const int ROW_REFERENCE=92;
	public const int ROW_TERMINATOR=93;
	public const int SELECT=94;
	public const int SELECT_ALL=95;
	public const int SELECT_ARG=96;
	public const int SELECT_ID=97;
	public const int SELECT_STATEMENT=98;
	public const int SET=99;
	public const int STRING=100;
	public const int STRING_LITERAL=101;
	public const int TABLE=102;
	public const int TABLE_ALIAS=103;
	public const int TABLE_COLUMN_ARG=104;
	public const int TABLE_COLUMN_ARGS=105;
	public const int TABLE_MEMBER_REFERENCE=106;
	public const int TABLE_VARIABLE_REFERENCE=107;
	public const int TAKE=108;
	public const int TAKE_ATTRIBUTE=109;
	public const int TAKE_HTML=110;
	public const int TAKE_TEXT=111;
	public const int TEST=112;
	public const int TEXT=113;
	public const int THEN=114;
	public const int THREAD=115;
	public const int TO=116;
	public const int TRUNCATE=117;
	public const int UPDATE=118;
	public const int VAR=119;
	public const int VARIABLE_ASSIGNMENT=120;
	public const int VARIABLE_DECLARATION=121;
	public const int VARIABLE_REFERENCE=122;
	public const int WHEN=123;
	public const int WHEN_BOOL_STATEMENT=124;
	public const int WHEN_LITERAL_STATEMENT=125;
	public const int WHERE=126;
	public const int WHILE=127;
	public const int WITH=128;
	public const int WS=129;

	public ScrapeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public ScrapeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ScrapeParser.tokenNames; } }
	public override string GrammarFileName { get { return "Scrape.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_program();
	partial void LeaveRule_program();
	// $ANTLR start "program"
	// Scrape.g:65:8: public program : ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) );
	[GrammarRule("program")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF2 = default(CommonToken);
		CommonToken EOF5 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EOF2_tree = default(CommonTree);
		CommonTree EOF5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_proxyStatement=new RewriteRuleSubtreeStream(adaptor,"rule proxyStatement");
		RewriteRuleSubtreeStream stream_procedureDefinition=new RewriteRuleSubtreeStream(adaptor,"rule procedureDefinition");
		RewriteRuleSubtreeStream stream_noBraceBlock=new RewriteRuleSubtreeStream(adaptor,"rule noBraceBlock");
		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(65, 1);
		try
		{
			// Scrape.g:66:2: ( noBraceBlock EOF -> ^( PROGRAM noBraceBlock ) | proxyStatement noBraceBlock EOF -> ^( PROGRAM proxyStatement noBraceBlock ) | procedureDefinition -> ^( PROGRAM procedureDefinition ) )
			int alt1=3;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case EOF:
			case COMMAND_VAR:
			case CREATE:
			case EACH:
			case EXEC:
			case ID:
			case IDENTITY_VAR:
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
			case SELECT:
			case TRUNCATE:
			case UPDATE:
			case VAR:
			case WHILE:
				{
				alt1 = 1;
				}
				break;
			case PROXIES:
				{
				alt1 = 2;
				}
				break;
			case PROCEDURE:
				{
				alt1 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:66:4: noBraceBlock EOF
				{
				DebugLocation(66, 4);
				PushFollow(Follow._noBraceBlock_in_program232);
				noBraceBlock1=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock1.Tree);
				DebugLocation(66, 17);
				EOF2=(CommonToken)Match(input,EOF,Follow._EOF_in_program234); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF2);



				{
				// AST REWRITE
				// elements: noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 66:21: -> ^( PROGRAM noBraceBlock )
				{
					DebugLocation(66, 24);
					// Scrape.g:66:24: ^( PROGRAM noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(66, 26);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(66, 34);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:67:4: proxyStatement noBraceBlock EOF
				{
				DebugLocation(67, 4);
				PushFollow(Follow._proxyStatement_in_program247);
				proxyStatement3=proxyStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_proxyStatement.Add(proxyStatement3.Tree);
				DebugLocation(67, 19);
				PushFollow(Follow._noBraceBlock_in_program249);
				noBraceBlock4=noBraceBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_noBraceBlock.Add(noBraceBlock4.Tree);
				DebugLocation(67, 32);
				EOF5=(CommonToken)Match(input,EOF,Follow._EOF_in_program251); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EOF.Add(EOF5);



				{
				// AST REWRITE
				// elements: proxyStatement, noBraceBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 67:36: -> ^( PROGRAM proxyStatement noBraceBlock )
				{
					DebugLocation(67, 39);
					// Scrape.g:67:39: ^( PROGRAM proxyStatement noBraceBlock )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(67, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(67, 49);
					adaptor.AddChild(root_1, stream_proxyStatement.NextTree());
					DebugLocation(67, 64);
					adaptor.AddChild(root_1, stream_noBraceBlock.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:68:4: procedureDefinition
				{
				DebugLocation(68, 4);
				PushFollow(Follow._procedureDefinition_in_program266);
				procedureDefinition6=procedureDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_procedureDefinition.Add(procedureDefinition6.Tree);


				{
				// AST REWRITE
				// elements: procedureDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 68:24: -> ^( PROGRAM procedureDefinition )
				{
					DebugLocation(68, 27);
					// Scrape.g:68:27: ^( PROGRAM procedureDefinition )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(68, 29);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROGRAM, "PROGRAM"), root_1);

					DebugLocation(68, 37);
					adaptor.AddChild(root_1, stream_procedureDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	partial void EnterRule_procedureDefinition();
	partial void LeaveRule_procedureDefinition();
	// $ANTLR start "procedureDefinition"
	// Scrape.g:71:1: procedureDefinition : PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) ;
	[GrammarRule("procedureDefinition")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureDefinition()
	{
		EnterRule_procedureDefinition();
		EnterRule("procedureDefinition", 2);
		TraceIn("procedureDefinition", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROCEDURE7 = default(CommonToken);
		CommonToken ID8 = default(CommonToken);
		CommonToken OPENPAREN9 = default(CommonToken);
		CommonToken CLOSEPAREN11 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs10 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block12 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROCEDURE7_tree = default(CommonTree);
		CommonTree ID8_tree = default(CommonTree);
		CommonTree OPENPAREN9_tree = default(CommonTree);
		CommonTree CLOSEPAREN11_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_PROCEDURE=new RewriteRuleITokenStream(adaptor,"token PROCEDURE");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "procedureDefinition");
		DebugLocation(71, 1);
		try
		{
			// Scrape.g:72:2: ( PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block -> ^( PROCEDURE ID block ( tableColumnArgs )* ) )
			DebugEnterAlt(1);
			// Scrape.g:72:4: PROCEDURE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN block
			{
			DebugLocation(72, 4);
			PROCEDURE7=(CommonToken)Match(input,PROCEDURE,Follow._PROCEDURE_in_procedureDefinition285); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROCEDURE.Add(PROCEDURE7);

			DebugLocation(72, 14);
			ID8=(CommonToken)Match(input,ID,Follow._ID_in_procedureDefinition287); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID8);

			DebugLocation(72, 17);
			OPENPAREN9=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureDefinition289); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN9);

			DebugLocation(72, 27);
			// Scrape.g:72:27: ( tableColumnArgs )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if ((LA2_1==ID))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:72:27: tableColumnArgs
					{
					DebugLocation(72, 27);
					PushFollow(Follow._tableColumnArgs_in_procedureDefinition291);
					tableColumnArgs10=tableColumnArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs10.Tree);

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(72, 44);
			CLOSEPAREN11=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureDefinition294); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN11);

			DebugLocation(72, 55);
			PushFollow(Follow._block_in_procedureDefinition296);
			block12=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block12.Tree);


			{
			// AST REWRITE
			// elements: PROCEDURE, tableColumnArgs, ID, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 72:61: -> ^( PROCEDURE ID block ( tableColumnArgs )* )
			{
				DebugLocation(72, 64);
				// Scrape.g:72:64: ^( PROCEDURE ID block ( tableColumnArgs )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(72, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROCEDURE.NextNode(), root_1);

				DebugLocation(72, 76);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(72, 79);
				adaptor.AddChild(root_1, stream_block.NextTree());
				DebugLocation(72, 85);
				// Scrape.g:72:85: ( tableColumnArgs )*
				while ( stream_tableColumnArgs.HasNext )
				{
					DebugLocation(72, 85);
					adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

				}
				stream_tableColumnArgs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureDefinition", 2);
			LeaveRule("procedureDefinition", 2);
			LeaveRule_procedureDefinition();
		}
		DebugLocation(73, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureDefinition"); }
		return retval;

	}
	// $ANTLR end "procedureDefinition"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Scrape.g:75:1: statement : ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 3);
		TraceIn("statement", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement13 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement14 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment15 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement16 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement17 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement18 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement19 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement20 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall21 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable22 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(75, 1);
		try
		{
			// Scrape.g:76:2: ( createTableStatement | sqlStatement | updateStatment | variableDeclarationStatement | variableAssignmentStatement | insertStatement | eachStatement | whileStatement | procedureCall | truncateTable )
			int alt3=10;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case CREATE:
				{
				alt3 = 1;
				}
				break;
			case SELECT:
				{
				alt3 = 2;
				}
				break;
			case UPDATE:
				{
				alt3 = 3;
				}
				break;
			case VAR:
				{
				alt3 = 4;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt3 = 5;
				}
				break;
			case INSERT_DIRECTORY:
			case INSERT_INTO:
			case INSERT_OVERWRITE:
				{
				alt3 = 6;
				}
				break;
			case EACH:
				{
				alt3 = 7;
				}
				break;
			case WHILE:
				{
				alt3 = 8;
				}
				break;
			case EXEC:
				{
				alt3 = 9;
				}
				break;
			case TRUNCATE:
				{
				alt3 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:76:4: createTableStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 4);
				PushFollow(Follow._createTableStatement_in_statement324);
				createTableStatement13=createTableStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createTableStatement13.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:77:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 4);
				PushFollow(Follow._sqlStatement_in_statement329);
				sqlStatement14=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement14.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:78:4: updateStatment
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(78, 4);
				PushFollow(Follow._updateStatment_in_statement334);
				updateStatment15=updateStatment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, updateStatment15.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:79:4: variableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(79, 4);
				PushFollow(Follow._variableDeclarationStatement_in_statement339);
				variableDeclarationStatement16=variableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarationStatement16.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:80:4: variableAssignmentStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(80, 4);
				PushFollow(Follow._variableAssignmentStatement_in_statement344);
				variableAssignmentStatement17=variableAssignmentStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableAssignmentStatement17.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:81:4: insertStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(81, 4);
				PushFollow(Follow._insertStatement_in_statement349);
				insertStatement18=insertStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, insertStatement18.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Scrape.g:82:4: eachStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 4);
				PushFollow(Follow._eachStatement_in_statement354);
				eachStatement19=eachStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, eachStatement19.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Scrape.g:83:4: whileStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._whileStatement_in_statement359);
				whileStatement20=whileStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileStatement20.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Scrape.g:84:4: procedureCall
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._procedureCall_in_statement364);
				procedureCall21=procedureCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, procedureCall21.Tree);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Scrape.g:85:4: truncateTable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(85, 4);
				PushFollow(Follow._truncateTable_in_statement369);
				truncateTable22=truncateTable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, truncateTable22.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 3);
			LeaveRule("statement", 3);
			LeaveRule_statement();
		}
		DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_truncateTable();
	partial void LeaveRule_truncateTable();
	// $ANTLR start "truncateTable"
	// Scrape.g:88:1: truncateTable : TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) ;
	[GrammarRule("truncateTable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> truncateTable()
	{
		EnterRule_truncateTable();
		EnterRule("truncateTable", 4);
		TraceIn("truncateTable", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TRUNCATE23 = default(CommonToken);
		CommonToken TABLE24 = default(CommonToken);
		CommonToken ID25 = default(CommonToken);

		CommonTree TRUNCATE23_tree = default(CommonTree);
		CommonTree TABLE24_tree = default(CommonTree);
		CommonTree ID25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TABLE=new RewriteRuleITokenStream(adaptor,"token TABLE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_TRUNCATE=new RewriteRuleITokenStream(adaptor,"token TRUNCATE");
		try { DebugEnterRule(GrammarFileName, "truncateTable");
		DebugLocation(88, 1);
		try
		{
			// Scrape.g:89:2: ( TRUNCATE TABLE ID -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] ) )
			DebugEnterAlt(1);
			// Scrape.g:89:4: TRUNCATE TABLE ID
			{
			DebugLocation(89, 4);
			TRUNCATE23=(CommonToken)Match(input,TRUNCATE,Follow._TRUNCATE_in_truncateTable380); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TRUNCATE.Add(TRUNCATE23);

			DebugLocation(89, 13);
			TABLE24=(CommonToken)Match(input,TABLE,Follow._TABLE_in_truncateTable382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TABLE.Add(TABLE24);

			DebugLocation(89, 19);
			ID25=(CommonToken)Match(input,ID,Follow._ID_in_truncateTable384); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID25);



			{
			// AST REWRITE
			// elements: TRUNCATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 89:22: -> ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
			{
				DebugLocation(89, 25);
				// Scrape.g:89:25: ^( TRUNCATE TABLE_VARIABLE_REFERENCE[$ID] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(89, 27);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_TRUNCATE.NextNode(), root_1);

				DebugLocation(89, 36);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID25));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("truncateTable", 4);
			LeaveRule("truncateTable", 4);
			LeaveRule_truncateTable();
		}
		DebugLocation(90, 1);
		} finally { DebugExitRule(GrammarFileName, "truncateTable"); }
		return retval;

	}
	// $ANTLR end "truncateTable"

	partial void EnterRule_procedureCall();
	partial void LeaveRule_procedureCall();
	// $ANTLR start "procedureCall"
	// Scrape.g:93:1: procedureCall : EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) ;
	[GrammarRule("procedureCall")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCall()
	{
		EnterRule_procedureCall();
		EnterRule("procedureCall", 5);
		TraceIn("procedureCall", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXEC26 = default(CommonToken);
		CommonToken ID27 = default(CommonToken);
		CommonToken OPENPAREN28 = default(CommonToken);
		CommonToken CLOSEPAREN30 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXEC26_tree = default(CommonTree);
		CommonTree ID27_tree = default(CommonTree);
		CommonTree OPENPAREN28_tree = default(CommonTree);
		CommonTree CLOSEPAREN30_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_EXEC=new RewriteRuleITokenStream(adaptor,"token EXEC");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_procedureCallList=new RewriteRuleSubtreeStream(adaptor,"rule procedureCallList");
		try { DebugEnterRule(GrammarFileName, "procedureCall");
		DebugLocation(93, 1);
		try
		{
			// Scrape.g:94:2: ( EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN -> ^( EXEC ID ( procedureCallList )* ) )
			DebugEnterAlt(1);
			// Scrape.g:94:5: EXEC ID OPENPAREN ( procedureCallList )* CLOSEPAREN
			{
			DebugLocation(94, 5);
			EXEC26=(CommonToken)Match(input,EXEC,Follow._EXEC_in_procedureCall406); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXEC.Add(EXEC26);

			DebugLocation(94, 10);
			ID27=(CommonToken)Match(input,ID,Follow._ID_in_procedureCall408); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID27);

			DebugLocation(94, 13);
			OPENPAREN28=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_procedureCall410); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN28);

			DebugLocation(94, 23);
			// Scrape.g:94:23: ( procedureCallList )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==COMMAND_VAR||LA4_1==ID||LA4_1==IDENTITY_VAR||LA4_1==INT||LA4_1==STRING_LITERAL))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:94:23: procedureCallList
					{
					DebugLocation(94, 23);
					PushFollow(Follow._procedureCallList_in_procedureCall412);
					procedureCallList29=procedureCallList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_procedureCallList.Add(procedureCallList29.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(94, 42);
			CLOSEPAREN30=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_procedureCall415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN30);



			{
			// AST REWRITE
			// elements: ID, procedureCallList, EXEC
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 94:53: -> ^( EXEC ID ( procedureCallList )* )
			{
				DebugLocation(94, 56);
				// Scrape.g:94:56: ^( EXEC ID ( procedureCallList )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(94, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXEC.NextNode(), root_1);

				DebugLocation(94, 63);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(94, 66);
				// Scrape.g:94:66: ( procedureCallList )*
				while ( stream_procedureCallList.HasNext )
				{
					DebugLocation(94, 66);
					adaptor.AddChild(root_1, stream_procedureCallList.NextTree());

				}
				stream_procedureCallList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCall", 5);
			LeaveRule("procedureCall", 5);
			LeaveRule_procedureCall();
		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCall"); }
		return retval;

	}
	// $ANTLR end "procedureCall"

	partial void EnterRule_procedureCallList();
	partial void LeaveRule_procedureCallList();
	// $ANTLR start "procedureCallList"
	// Scrape.g:97:1: procedureCallList : ( callArgs COMMA )* callArgs -> ( callArgs )* ;
	[GrammarRule("procedureCallList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> procedureCallList()
	{
		EnterRule_procedureCallList();
		EnterRule("procedureCallList", 6);
		TraceIn("procedureCallList", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA32 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs31 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> callArgs33 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_callArgs=new RewriteRuleSubtreeStream(adaptor,"rule callArgs");
		try { DebugEnterRule(GrammarFileName, "procedureCallList");
		DebugLocation(97, 1);
		try
		{
			// Scrape.g:98:2: ( ( callArgs COMMA )* callArgs -> ( callArgs )* )
			DebugEnterAlt(1);
			// Scrape.g:98:4: ( callArgs COMMA )* callArgs
			{
			DebugLocation(98, 4);
			// Scrape.g:98:4: ( callArgs COMMA )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				switch (input.LA(1))
				{
				case INT:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case ID:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==DOT))
					{
						int LA5_3 = input.LA(3);

						if ((LA5_3==ID))
						{
							int LA5_4 = input.LA(4);

							if ((LA5_4==COMMA))
							{
								alt5 = 1;
							}


						}


					}
					else if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				case STRING_LITERAL:
					{
					int LA5_2 = input.LA(2);

					if ((LA5_2==COMMA))
					{
						alt5 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:98:5: callArgs COMMA
					{
					DebugLocation(98, 5);
					PushFollow(Follow._callArgs_in_procedureCallList438);
					callArgs31=callArgs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_callArgs.Add(callArgs31.Tree);
					DebugLocation(98, 14);
					COMMA32=(CommonToken)Match(input,COMMA,Follow._COMMA_in_procedureCallList440); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA32);


					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(98, 22);
			PushFollow(Follow._callArgs_in_procedureCallList444);
			callArgs33=callArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_callArgs.Add(callArgs33.Tree);


			{
			// AST REWRITE
			// elements: callArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 98:31: -> ( callArgs )*
			{
				DebugLocation(98, 34);
				// Scrape.g:98:34: ( callArgs )*
				while ( stream_callArgs.HasNext )
				{
					DebugLocation(98, 34);
					adaptor.AddChild(root_0, stream_callArgs.NextTree());

				}
				stream_callArgs.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("procedureCallList", 6);
			LeaveRule("procedureCallList", 6);
			LeaveRule_procedureCallList();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "procedureCallList"); }
		return retval;

	}
	// $ANTLR end "procedureCallList"

	partial void EnterRule_callArgs();
	partial void LeaveRule_callArgs();
	// $ANTLR start "callArgs"
	// Scrape.g:101:1: callArgs : ( expandVar | STRING_LITERAL );
	[GrammarRule("callArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> callArgs()
	{
		EnterRule_callArgs();
		EnterRule("callArgs", 7);
		TraceIn("callArgs", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL35 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar34 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL35_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "callArgs");
		DebugLocation(101, 1);
		try
		{
			// Scrape.g:102:2: ( expandVar | STRING_LITERAL )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1==COMMAND_VAR||LA6_1==ID||LA6_1==IDENTITY_VAR||LA6_1==INT))
			{
				alt6 = 1;
			}
			else if ((LA6_1==STRING_LITERAL))
			{
				alt6 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:102:4: expandVar
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(102, 4);
				PushFollow(Follow._expandVar_in_callArgs460);
				expandVar34=expandVar();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandVar34.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:103:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(103, 4);
				STRING_LITERAL35=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_callArgs465); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL35_tree = (CommonTree)adaptor.Create(STRING_LITERAL35);
				adaptor.AddChild(root_0, STRING_LITERAL35_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("callArgs", 7);
			LeaveRule("callArgs", 7);
			LeaveRule_callArgs();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "callArgs"); }
		return retval;

	}
	// $ANTLR end "callArgs"

	partial void EnterRule_proxyStatement();
	partial void LeaveRule_proxyStatement();
	// $ANTLR start "proxyStatement"
	// Scrape.g:106:1: proxyStatement : PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) ;
	[GrammarRule("proxyStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyStatement()
	{
		EnterRule_proxyStatement();
		EnterRule("proxyStatement", 8);
		TraceIn("proxyStatement", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PROXIES36 = default(CommonToken);
		CommonToken OPENPAREN37 = default(CommonToken);
		CommonToken CLOSEPAREN39 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyList38 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest40 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PROXIES36_tree = default(CommonTree);
		CommonTree OPENPAREN37_tree = default(CommonTree);
		CommonTree CLOSEPAREN39_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_PROXIES=new RewriteRuleITokenStream(adaptor,"token PROXIES");
		RewriteRuleSubtreeStream stream_proxyTest=new RewriteRuleSubtreeStream(adaptor,"rule proxyTest");
		RewriteRuleSubtreeStream stream_proxyList=new RewriteRuleSubtreeStream(adaptor,"rule proxyList");
		try { DebugEnterRule(GrammarFileName, "proxyStatement");
		DebugLocation(106, 1);
		try
		{
			// Scrape.g:107:2: ( PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest -> ^( PROXIES proxyList proxyTest ) )
			DebugEnterAlt(1);
			// Scrape.g:107:4: PROXIES OPENPAREN proxyList CLOSEPAREN proxyTest
			{
			DebugLocation(107, 4);
			PROXIES36=(CommonToken)Match(input,PROXIES,Follow._PROXIES_in_proxyStatement476); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PROXIES.Add(PROXIES36);

			DebugLocation(107, 12);
			OPENPAREN37=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_proxyStatement478); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN37);

			DebugLocation(107, 22);
			PushFollow(Follow._proxyList_in_proxyStatement480);
			proxyList38=proxyList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyList.Add(proxyList38.Tree);
			DebugLocation(107, 32);
			CLOSEPAREN39=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_proxyStatement482); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN39);

			DebugLocation(107, 43);
			PushFollow(Follow._proxyTest_in_proxyStatement484);
			proxyTest40=proxyTest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_proxyTest.Add(proxyTest40.Tree);


			{
			// AST REWRITE
			// elements: proxyList, PROXIES, proxyTest
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 107:53: -> ^( PROXIES proxyList proxyTest )
			{
				DebugLocation(107, 56);
				// Scrape.g:107:56: ^( PROXIES proxyList proxyTest )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(107, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PROXIES.NextNode(), root_1);

				DebugLocation(107, 66);
				adaptor.AddChild(root_1, stream_proxyList.NextTree());
				DebugLocation(107, 76);
				adaptor.AddChild(root_1, stream_proxyTest.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyStatement", 8);
			LeaveRule("proxyStatement", 8);
			LeaveRule_proxyStatement();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyStatement"); }
		return retval;

	}
	// $ANTLR end "proxyStatement"

	partial void EnterRule_proxyList();
	partial void LeaveRule_proxyList();
	// $ANTLR start "proxyList"
	// Scrape.g:110:1: proxyList : ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) ;
	[GrammarRule("proxyList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyList()
	{
		EnterRule_proxyList();
		EnterRule("proxyList", 9);
		TraceIn("proxyList", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL41 = default(CommonToken);
		CommonToken COMMA42 = default(CommonToken);
		CommonToken STRING_LITERAL43 = default(CommonToken);

		CommonTree STRING_LITERAL41_tree = default(CommonTree);
		CommonTree COMMA42_tree = default(CommonTree);
		CommonTree STRING_LITERAL43_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		try { DebugEnterRule(GrammarFileName, "proxyList");
		DebugLocation(110, 1);
		try
		{
			// Scrape.g:111:2: ( ( STRING_LITERAL COMMA )* STRING_LITERAL -> ^( PROXY_LIST ( STRING_LITERAL )* ) )
			DebugEnterAlt(1);
			// Scrape.g:111:4: ( STRING_LITERAL COMMA )* STRING_LITERAL
			{
			DebugLocation(111, 4);
			// Scrape.g:111:4: ( STRING_LITERAL COMMA )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==STRING_LITERAL))
				{
					int LA7_2 = input.LA(2);

					if ((LA7_2==COMMA))
					{
						alt7 = 1;
					}


				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:111:5: STRING_LITERAL COMMA
					{
					DebugLocation(111, 5);
					STRING_LITERAL41=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList506); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL41);

					DebugLocation(111, 20);
					COMMA42=(CommonToken)Match(input,COMMA,Follow._COMMA_in_proxyList508); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA42);


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(111, 28);
			STRING_LITERAL43=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_proxyList512); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL43);



			{
			// AST REWRITE
			// elements: STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 111:43: -> ^( PROXY_LIST ( STRING_LITERAL )* )
			{
				DebugLocation(111, 46);
				// Scrape.g:111:46: ^( PROXY_LIST ( STRING_LITERAL )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(111, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PROXY_LIST, "PROXY_LIST"), root_1);

				DebugLocation(111, 59);
				// Scrape.g:111:59: ( STRING_LITERAL )*
				while ( stream_STRING_LITERAL.HasNext )
				{
					DebugLocation(111, 59);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				}
				stream_STRING_LITERAL.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyList", 9);
			LeaveRule("proxyList", 9);
			LeaveRule_proxyList();
		}
		DebugLocation(112, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyList"); }
		return retval;

	}
	// $ANTLR end "proxyList"

	partial void EnterRule_proxyTest();
	partial void LeaveRule_proxyTest();
	// $ANTLR start "proxyTest"
	// Scrape.g:114:1: proxyTest : WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement ;
	[GrammarRule("proxyTest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> proxyTest()
	{
		EnterRule_proxyTest();
		EnterRule("proxyTest", 10);
		TraceIn("proxyTest", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH44 = default(CommonToken);
		CommonToken TEST45 = default(CommonToken);
		CommonToken OPENBRACE46 = default(CommonToken);
		CommonToken CLOSEBRACE48 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement47 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH44_tree = default(CommonTree);
		CommonTree TEST45_tree = default(CommonTree);
		CommonTree OPENBRACE46_tree = default(CommonTree);
		CommonTree CLOSEBRACE48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_TEST=new RewriteRuleITokenStream(adaptor,"token TEST");
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		try { DebugEnterRule(GrammarFileName, "proxyTest");
		DebugLocation(114, 1);
		try
		{
			// Scrape.g:115:2: ( WITH TEST OPENBRACE sqlStatement CLOSEBRACE -> sqlStatement )
			DebugEnterAlt(1);
			// Scrape.g:115:4: WITH TEST OPENBRACE sqlStatement CLOSEBRACE
			{
			DebugLocation(115, 4);
			WITH44=(CommonToken)Match(input,WITH,Follow._WITH_in_proxyTest532); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH44);

			DebugLocation(115, 9);
			TEST45=(CommonToken)Match(input,TEST,Follow._TEST_in_proxyTest534); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TEST.Add(TEST45);

			DebugLocation(115, 14);
			OPENBRACE46=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_proxyTest536); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE46);

			DebugLocation(115, 24);
			PushFollow(Follow._sqlStatement_in_proxyTest538);
			sqlStatement47=sqlStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement47.Tree);
			DebugLocation(115, 37);
			CLOSEBRACE48=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_proxyTest540); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE48);



			{
			// AST REWRITE
			// elements: sqlStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 115:48: -> sqlStatement
			{
				DebugLocation(115, 51);
				adaptor.AddChild(root_0, stream_sqlStatement.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("proxyTest", 10);
			LeaveRule("proxyTest", 10);
			LeaveRule_proxyTest();
		}
		DebugLocation(116, 1);
		} finally { DebugExitRule(GrammarFileName, "proxyTest"); }
		return retval;

	}
	// $ANTLR end "proxyTest"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Scrape.g:118:1: whileStatement : WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) ;
	[GrammarRule("whileStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 11);
		TraceIn("whileStatement", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHILE49 = default(CommonToken);
		CommonToken OPENPAREN50 = default(CommonToken);
		CommonToken ID51 = default(CommonToken);
		CommonToken CLOSEPAREN52 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHILE49_tree = default(CommonTree);
		CommonTree OPENPAREN50_tree = default(CommonTree);
		CommonTree ID51_tree = default(CommonTree);
		CommonTree CLOSEPAREN52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_WHILE=new RewriteRuleITokenStream(adaptor,"token WHILE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(118, 1);
		try
		{
			// Scrape.g:119:2: ( WHILE OPENPAREN ID CLOSEPAREN block -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block ) )
			DebugEnterAlt(1);
			// Scrape.g:119:4: WHILE OPENPAREN ID CLOSEPAREN block
			{
			DebugLocation(119, 4);
			WHILE49=(CommonToken)Match(input,WHILE,Follow._WHILE_in_whileStatement555); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHILE.Add(WHILE49);

			DebugLocation(119, 10);
			OPENPAREN50=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_whileStatement557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN50);

			DebugLocation(119, 20);
			ID51=(CommonToken)Match(input,ID,Follow._ID_in_whileStatement559); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID51);

			DebugLocation(119, 23);
			CLOSEPAREN52=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_whileStatement561); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN52);

			DebugLocation(119, 34);
			PushFollow(Follow._block_in_whileStatement563);
			block53=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block53.Tree);


			{
			// AST REWRITE
			// elements: WHILE, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 119:40: -> ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
			{
				DebugLocation(119, 43);
				// Scrape.g:119:43: ^( WHILE TABLE_VARIABLE_REFERENCE[$ID] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(119, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHILE.NextNode(), root_1);

				DebugLocation(119, 51);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID51));
				DebugLocation(119, 81);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whileStatement", 11);
			LeaveRule("whileStatement", 11);
			LeaveRule_whileStatement();
		}
		DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return retval;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_eachStatement();
	partial void LeaveRule_eachStatement();
	// $ANTLR start "eachStatement"
	// Scrape.g:122:1: eachStatement : EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) ;
	[GrammarRule("eachStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> eachStatement()
	{
		EnterRule_eachStatement();
		EnterRule("eachStatement", 12);
		TraceIn("eachStatement", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken v = default(CommonToken);
		CommonToken t = default(CommonToken);
		CommonToken EACH54 = default(CommonToken);
		CommonToken OPENPAREN55 = default(CommonToken);
		CommonToken VAR56 = default(CommonToken);
		CommonToken IN57 = default(CommonToken);
		CommonToken CLOSEPAREN58 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block59 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree v_tree = default(CommonTree);
		CommonTree t_tree = default(CommonTree);
		CommonTree EACH54_tree = default(CommonTree);
		CommonTree OPENPAREN55_tree = default(CommonTree);
		CommonTree VAR56_tree = default(CommonTree);
		CommonTree IN57_tree = default(CommonTree);
		CommonTree CLOSEPAREN58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
		RewriteRuleITokenStream stream_EACH=new RewriteRuleITokenStream(adaptor,"token EACH");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		try { DebugEnterRule(GrammarFileName, "eachStatement");
		DebugLocation(122, 1);
		try
		{
			// Scrape.g:123:2: ( EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block ) )
			DebugEnterAlt(1);
			// Scrape.g:123:4: EACH OPENPAREN VAR v= ID IN t= ID CLOSEPAREN block
			{
			DebugLocation(123, 4);
			EACH54=(CommonToken)Match(input,EACH,Follow._EACH_in_eachStatement585); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EACH.Add(EACH54);

			DebugLocation(123, 9);
			OPENPAREN55=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_eachStatement587); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN55);

			DebugLocation(123, 19);
			VAR56=(CommonToken)Match(input,VAR,Follow._VAR_in_eachStatement589); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR56);

			DebugLocation(123, 24);
			v=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement593); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(v);

			DebugLocation(123, 28);
			IN57=(CommonToken)Match(input,IN,Follow._IN_in_eachStatement595); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IN.Add(IN57);

			DebugLocation(123, 32);
			t=(CommonToken)Match(input,ID,Follow._ID_in_eachStatement599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(123, 36);
			CLOSEPAREN58=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_eachStatement601); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN58);

			DebugLocation(123, 47);
			PushFollow(Follow._block_in_eachStatement603);
			block59=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_block.Add(block59.Tree);


			{
			// AST REWRITE
			// elements: block, EACH
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 123:53: -> ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
			{
				DebugLocation(123, 56);
				// Scrape.g:123:56: ^( EACH VARIABLE_DECLARATION[$v] TABLE_VARIABLE_REFERENCE[$t] block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(123, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EACH.NextNode(), root_1);

				DebugLocation(123, 63);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(VARIABLE_DECLARATION, v));
				DebugLocation(123, 88);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(123, 117);
				adaptor.AddChild(root_1, stream_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("eachStatement", 12);
			LeaveRule("eachStatement", 12);
			LeaveRule_eachStatement();
		}
		DebugLocation(124, 1);
		} finally { DebugExitRule(GrammarFileName, "eachStatement"); }
		return retval;

	}
	// $ANTLR end "eachStatement"

	partial void EnterRule_noBraceBlock();
	partial void LeaveRule_noBraceBlock();
	// $ANTLR start "noBraceBlock"
	// Scrape.g:126:1: noBraceBlock : ( statement )* -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("noBraceBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> noBraceBlock()
	{
		EnterRule_noBraceBlock();
		EnterRule("noBraceBlock", 13);
		TraceIn("noBraceBlock", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> statement60 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "noBraceBlock");
		DebugLocation(126, 1);
		try
		{
			// Scrape.g:127:2: ( ( statement )* -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:127:4: ( statement )*
			{
			DebugLocation(127, 4);
			// Scrape.g:127:4: ( statement )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==COMMAND_VAR||LA8_1==CREATE||LA8_1==EACH||LA8_1==EXEC||LA8_1==ID||LA8_1==IDENTITY_VAR||(LA8_1>=INSERT_DIRECTORY && LA8_1<=INSERT_INTO)||LA8_1==INSERT_OVERWRITE||LA8_1==SELECT||(LA8_1>=TRUNCATE && LA8_1<=VAR)||LA8_1==WHILE))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:127:4: statement
					{
					DebugLocation(127, 4);
					PushFollow(Follow._statement_in_noBraceBlock628);
					statement60=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement60.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 127:15: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(127, 18);
				// Scrape.g:127:18: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(127, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(127, 26);
				// Scrape.g:127:26: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(127, 26);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("noBraceBlock", 13);
			LeaveRule("noBraceBlock", 13);
			LeaveRule_noBraceBlock();
		}
		DebugLocation(128, 1);
		} finally { DebugExitRule(GrammarFileName, "noBraceBlock"); }
		return retval;

	}
	// $ANTLR end "noBraceBlock"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Scrape.g:130:1: block : OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 14);
		TraceIn("block", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE61 = default(CommonToken);
		CommonToken CLOSEBRACE63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE61_tree = default(CommonTree);
		CommonTree CLOSEBRACE63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(130, 1);
		try
		{
			// Scrape.g:131:2: ( OPENBRACE ( statement )* CLOSEBRACE -> ^( BLOCK ( statement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:131:4: OPENBRACE ( statement )* CLOSEBRACE
			{
			DebugLocation(131, 4);
			OPENBRACE61=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_block649); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE61);

			DebugLocation(131, 14);
			// Scrape.g:131:14: ( statement )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==COMMAND_VAR||LA9_1==CREATE||LA9_1==EACH||LA9_1==EXEC||LA9_1==ID||LA9_1==IDENTITY_VAR||(LA9_1>=INSERT_DIRECTORY && LA9_1<=INSERT_INTO)||LA9_1==INSERT_OVERWRITE||LA9_1==SELECT||(LA9_1>=TRUNCATE && LA9_1<=VAR)||LA9_1==WHILE))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:131:14: statement
					{
					DebugLocation(131, 14);
					PushFollow(Follow._statement_in_block651);
					statement62=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(statement62.Tree);

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(131, 25);
			CLOSEBRACE63=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_block654); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE63);



			{
			// AST REWRITE
			// elements: statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 131:36: -> ^( BLOCK ( statement )* )
			{
				DebugLocation(131, 39);
				// Scrape.g:131:39: ^( BLOCK ( statement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(131, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(131, 47);
				// Scrape.g:131:47: ( statement )*
				while ( stream_statement.HasNext )
				{
					DebugLocation(131, 47);
					adaptor.AddChild(root_1, stream_statement.NextTree());

				}
				stream_statement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 14);
			LeaveRule("block", 14);
			LeaveRule_block();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_expandExpression();
	partial void LeaveRule_expandExpression();
	// $ANTLR start "expandExpression"
	// Scrape.g:134:1: expandExpression : EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) ;
	[GrammarRule("expandExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression()
	{
		EnterRule_expandExpression();
		EnterRule("expandExpression", 15);
		TraceIn("expandExpression", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EXPAND64 = default(CommonToken);
		CommonToken OPENPAREN65 = default(CommonToken);
		CommonToken TO67 = default(CommonToken);
		CommonToken CLOSEPAREN69 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar66 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandVar68 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EXPAND64_tree = default(CommonTree);
		CommonTree OPENPAREN65_tree = default(CommonTree);
		CommonTree TO67_tree = default(CommonTree);
		CommonTree CLOSEPAREN69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_TO=new RewriteRuleITokenStream(adaptor,"token TO");
		RewriteRuleITokenStream stream_EXPAND=new RewriteRuleITokenStream(adaptor,"token EXPAND");
		RewriteRuleSubtreeStream stream_expandBlock=new RewriteRuleSubtreeStream(adaptor,"rule expandBlock");
		RewriteRuleSubtreeStream stream_expandVar=new RewriteRuleSubtreeStream(adaptor,"rule expandVar");
		try { DebugEnterRule(GrammarFileName, "expandExpression");
		DebugLocation(134, 1);
		try
		{
			// Scrape.g:135:2: ( EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )* -> ^( EXPAND expandVar expandVar ( expandBlock )* ) )
			DebugEnterAlt(1);
			// Scrape.g:135:4: EXPAND OPENPAREN expandVar TO expandVar CLOSEPAREN ( expandBlock )*
			{
			DebugLocation(135, 4);
			EXPAND64=(CommonToken)Match(input,EXPAND,Follow._EXPAND_in_expandExpression674); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EXPAND.Add(EXPAND64);

			DebugLocation(135, 11);
			OPENPAREN65=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_expandExpression676); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN65);

			DebugLocation(135, 21);
			PushFollow(Follow._expandVar_in_expandExpression678);
			expandVar66=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar66.Tree);
			DebugLocation(135, 31);
			TO67=(CommonToken)Match(input,TO,Follow._TO_in_expandExpression680); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_TO.Add(TO67);

			DebugLocation(135, 34);
			PushFollow(Follow._expandVar_in_expandExpression682);
			expandVar68=expandVar();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expandVar.Add(expandVar68.Tree);
			DebugLocation(135, 44);
			CLOSEPAREN69=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_expandExpression684); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN69);

			DebugLocation(135, 55);
			// Scrape.g:135:55: ( expandBlock )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==OPENBRACE))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:135:55: expandBlock
					{
					DebugLocation(135, 55);
					PushFollow(Follow._expandBlock_in_expandExpression686);
					expandBlock70=expandBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expandBlock.Add(expandBlock70.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: expandVar, EXPAND, expandVar, expandBlock
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 135:68: -> ^( EXPAND expandVar expandVar ( expandBlock )* )
			{
				DebugLocation(135, 71);
				// Scrape.g:135:71: ^( EXPAND expandVar expandVar ( expandBlock )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(135, 73);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_EXPAND.NextNode(), root_1);

				DebugLocation(135, 80);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(135, 90);
				adaptor.AddChild(root_1, stream_expandVar.NextTree());
				DebugLocation(135, 100);
				// Scrape.g:135:100: ( expandBlock )*
				while ( stream_expandBlock.HasNext )
				{
					DebugLocation(135, 100);
					adaptor.AddChild(root_1, stream_expandBlock.NextTree());

				}
				stream_expandBlock.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandExpression", 15);
			LeaveRule("expandExpression", 15);
			LeaveRule_expandExpression();
		}
		DebugLocation(136, 1);
		} finally { DebugExitRule(GrammarFileName, "expandExpression"); }
		return retval;

	}
	// $ANTLR end "expandExpression"

	partial void EnterRule_expandBlock();
	partial void LeaveRule_expandBlock();
	// $ANTLR start "expandBlock"
	// Scrape.g:138:1: expandBlock : OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* ;
	[GrammarRule("expandBlock")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandBlock()
	{
		EnterRule_expandBlock();
		EnterRule("expandBlock", 16);
		TraceIn("expandBlock", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OPENBRACE71 = default(CommonToken);
		CommonToken CLOSEBRACE73 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OPENBRACE71_tree = default(CommonTree);
		CommonTree CLOSEBRACE73_tree = default(CommonTree);
		RewriteRuleITokenStream stream_OPENBRACE=new RewriteRuleITokenStream(adaptor,"token OPENBRACE");
		RewriteRuleITokenStream stream_CLOSEBRACE=new RewriteRuleITokenStream(adaptor,"token CLOSEBRACE");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "expandBlock");
		DebugLocation(138, 1);
		try
		{
			// Scrape.g:139:2: ( OPENBRACE ( mathExpression )* CLOSEBRACE -> ( mathExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:139:4: OPENBRACE ( mathExpression )* CLOSEBRACE
			{
			DebugLocation(139, 4);
			OPENBRACE71=(CommonToken)Match(input,OPENBRACE,Follow._OPENBRACE_in_expandBlock711); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENBRACE.Add(OPENBRACE71);

			DebugLocation(139, 14);
			// Scrape.g:139:14: ( mathExpression )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==COMMAND_VAR||LA11_1==FL||LA11_1==ID||LA11_1==IDENTITY_VAR||LA11_1==INT||LA11_1==NULL||LA11_1==OPENPAREN||LA11_1==STRING_LITERAL||LA11_1==130))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:139:14: mathExpression
					{
					DebugLocation(139, 14);
					PushFollow(Follow._mathExpression_in_expandBlock713);
					mathExpression72=mathExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mathExpression.Add(mathExpression72.Tree);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(139, 30);
			CLOSEBRACE73=(CommonToken)Match(input,CLOSEBRACE,Follow._CLOSEBRACE_in_expandBlock716); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEBRACE.Add(CLOSEBRACE73);



			{
			// AST REWRITE
			// elements: mathExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 139:41: -> ( mathExpression )*
			{
				DebugLocation(139, 44);
				// Scrape.g:139:44: ( mathExpression )*
				while ( stream_mathExpression.HasNext )
				{
					DebugLocation(139, 44);
					adaptor.AddChild(root_0, stream_mathExpression.NextTree());

				}
				stream_mathExpression.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandBlock", 16);
			LeaveRule("expandBlock", 16);
			LeaveRule_expandBlock();
		}
		DebugLocation(140, 1);
		} finally { DebugExitRule(GrammarFileName, "expandBlock"); }
		return retval;

	}
	// $ANTLR end "expandBlock"

	partial void EnterRule_expandVar();
	partial void LeaveRule_expandVar();
	// $ANTLR start "expandVar"
	// Scrape.g:142:1: expandVar : ( INT | variableReference );
	[GrammarRule("expandVar")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expandVar()
	{
		EnterRule_expandVar();
		EnterRule("expandVar", 17);
		TraceIn("expandVar", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INT74 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference75 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INT74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expandVar");
		DebugLocation(142, 1);
		try
		{
			// Scrape.g:143:2: ( INT | variableReference )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==INT))
			{
				alt12 = 1;
			}
			else if ((LA12_1==COMMAND_VAR||LA12_1==ID||LA12_1==IDENTITY_VAR))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:143:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(143, 4);
				INT74=(CommonToken)Match(input,INT,Follow._INT_in_expandVar732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT74_tree = (CommonTree)adaptor.Create(INT74);
				adaptor.AddChild(root_0, INT74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:144:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._variableReference_in_expandVar737);
				variableReference75=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference75.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expandVar", 17);
			LeaveRule("expandVar", 17);
			LeaveRule_expandVar();
		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "expandVar"); }
		return retval;

	}
	// $ANTLR end "expandVar"

	partial void EnterRule_downloadExpression();
	partial void LeaveRule_downloadExpression();
	// $ANTLR start "downloadExpression"
	// Scrape.g:147:1: downloadExpression : ( downloadPageExpresssion | downloadImageExpression );
	[GrammarRule("downloadExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression()
	{
		EnterRule_downloadExpression();
		EnterRule("downloadExpression", 18);
		TraceIn("downloadExpression", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression77 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "downloadExpression");
		DebugLocation(147, 1);
		try
		{
			// Scrape.g:148:2: ( downloadPageExpresssion | downloadImageExpression )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==DOWNLOAD_PAGE))
			{
				alt13 = 1;
			}
			else if ((LA13_1==DOWNLOAD_IMAGE))
			{
				alt13 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:148:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(148, 4);
				PushFollow(Follow._downloadPageExpresssion_in_downloadExpression748);
				downloadPageExpresssion76=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion76.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:149:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(149, 4);
				PushFollow(Follow._downloadImageExpression_in_downloadExpression753);
				downloadImageExpression77=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression77.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpression", 18);
			LeaveRule("downloadExpression", 18);
			LeaveRule_downloadExpression();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpression"); }
		return retval;

	}
	// $ANTLR end "downloadExpression"

	partial void EnterRule_downloadPageExpresssion();
	partial void LeaveRule_downloadPageExpresssion();
	// $ANTLR start "downloadPageExpresssion"
	// Scrape.g:152:1: downloadPageExpresssion : DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? ;
	[GrammarRule("downloadPageExpresssion")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion()
	{
		EnterRule_downloadPageExpresssion();
		EnterRule("downloadPageExpresssion", 19);
		TraceIn("downloadPageExpresssion", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_PAGE78 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint80 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_PAGE78_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadPageExpresssion");
		DebugLocation(152, 1);
		try
		{
			// Scrape.g:153:2: ( DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )? )
			DebugEnterAlt(1);
			// Scrape.g:153:4: DOWNLOAD_PAGE ^ downloadExpressionArg ( tableHint )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(153, 17);
			DOWNLOAD_PAGE78=(CommonToken)Match(input,DOWNLOAD_PAGE,Follow._DOWNLOAD_PAGE_in_downloadPageExpresssion764); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_PAGE78_tree = (CommonTree)adaptor.Create(DOWNLOAD_PAGE78);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_PAGE78_tree, root_0);
			}
			DebugLocation(153, 19);
			PushFollow(Follow._downloadExpressionArg_in_downloadPageExpresssion767);
			downloadExpressionArg79=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg79.Tree);
			DebugLocation(153, 41);
			// Scrape.g:153:41: ( tableHint )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:153:41: tableHint
				{
				DebugLocation(153, 41);
				PushFollow(Follow._tableHint_in_downloadPageExpresssion769);
				tableHint80=tableHint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableHint80.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadPageExpresssion", 19);
			LeaveRule("downloadPageExpresssion", 19);
			LeaveRule_downloadPageExpresssion();
		}
		DebugLocation(154, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadPageExpresssion"); }
		return retval;

	}
	// $ANTLR end "downloadPageExpresssion"

	partial void EnterRule_downloadImageExpression();
	partial void LeaveRule_downloadImageExpression();
	// $ANTLR start "downloadImageExpression"
	// Scrape.g:156:1: downloadImageExpression : DOWNLOAD_IMAGE ^ downloadExpressionArg ;
	[GrammarRule("downloadImageExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression()
	{
		EnterRule_downloadImageExpression();
		EnterRule("downloadImageExpression", 20);
		TraceIn("downloadImageExpression", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOWNLOAD_IMAGE81 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree DOWNLOAD_IMAGE81_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadImageExpression");
		DebugLocation(156, 1);
		try
		{
			// Scrape.g:157:2: ( DOWNLOAD_IMAGE ^ downloadExpressionArg )
			DebugEnterAlt(1);
			// Scrape.g:157:4: DOWNLOAD_IMAGE ^ downloadExpressionArg
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(157, 18);
			DOWNLOAD_IMAGE81=(CommonToken)Match(input,DOWNLOAD_IMAGE,Follow._DOWNLOAD_IMAGE_in_downloadImageExpression781); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOWNLOAD_IMAGE81_tree = (CommonTree)adaptor.Create(DOWNLOAD_IMAGE81);
			root_0 = (CommonTree)adaptor.BecomeRoot(DOWNLOAD_IMAGE81_tree, root_0);
			}
			DebugLocation(157, 20);
			PushFollow(Follow._downloadExpressionArg_in_downloadImageExpression784);
			downloadExpressionArg82=downloadExpressionArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpressionArg82.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadImageExpression", 20);
			LeaveRule("downloadImageExpression", 20);
			LeaveRule_downloadImageExpression();
		}
		DebugLocation(158, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadImageExpression"); }
		return retval;

	}
	// $ANTLR end "downloadImageExpression"

	partial void EnterRule_downloadExpressionArg();
	partial void LeaveRule_downloadExpressionArg();
	// $ANTLR start "downloadExpressionArg"
	// Scrape.g:160:1: downloadExpressionArg : ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference );
	[GrammarRule("downloadExpressionArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpressionArg()
	{
		EnterRule_downloadExpressionArg();
		EnterRule("downloadExpressionArg", 21);
		TraceIn("downloadExpressionArg", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken STRING_LITERAL83 = default(CommonToken);
		CommonToken OPENPAREN84 = default(CommonToken);
		CommonToken CLOSEPAREN86 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree STRING_LITERAL83_tree = default(CommonTree);
		CommonTree OPENPAREN84_tree = default(CommonTree);
		CommonTree CLOSEPAREN86_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "downloadExpressionArg");
		DebugLocation(160, 1);
		try
		{
			// Scrape.g:161:2: ( STRING_LITERAL | OPENPAREN ! sqlStatement CLOSEPAREN !| variableReference )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case STRING_LITERAL:
				{
				alt15 = 1;
				}
				break;
			case OPENPAREN:
				{
				alt15 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt15 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:161:4: STRING_LITERAL
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				STRING_LITERAL83=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_downloadExpressionArg795); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING_LITERAL83_tree = (CommonTree)adaptor.Create(STRING_LITERAL83);
				adaptor.AddChild(root_0, STRING_LITERAL83_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:162:4: OPENPAREN ! sqlStatement CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 13);
				OPENPAREN84=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_downloadExpressionArg800); if (state.failed) return retval;
				DebugLocation(162, 15);
				PushFollow(Follow._sqlStatement_in_downloadExpressionArg803);
				sqlStatement85=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement85.Tree);
				DebugLocation(162, 38);
				CLOSEPAREN86=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_downloadExpressionArg805); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:163:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(163, 4);
				PushFollow(Follow._variableReference_in_downloadExpressionArg811);
				variableReference87=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference87.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("downloadExpressionArg", 21);
			LeaveRule("downloadExpressionArg", 21);
			LeaveRule_downloadExpressionArg();
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "downloadExpressionArg"); }
		return retval;

	}
	// $ANTLR end "downloadExpressionArg"

	partial void EnterRule_variableReference();
	partial void LeaveRule_variableReference();
	// $ANTLR start "variableReference"
	// Scrape.g:166:1: variableReference : ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("variableReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableReference()
	{
		EnterRule_variableReference();
		EnterRule("variableReference", 22);
		TraceIn("variableReference", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID88 = default(CommonToken);
		CommonToken COMMAND_VAR89 = default(CommonToken);
		CommonToken IDENTITY_VAR90 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference91 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID88_tree = default(CommonTree);
		CommonTree COMMAND_VAR89_tree = default(CommonTree);
		CommonTree IDENTITY_VAR90_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "variableReference");
		DebugLocation(166, 1);
		try
		{
			// Scrape.g:167:2: ( ID -> VARIABLE_REFERENCE[$ID] | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt16=4;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA16_2 = input.LA(2);

				if ((LA16_2==DOT))
				{
					alt16 = 4;
				}
				else if ((LA16_2==EOF||LA16_2==ASTERISK||(LA16_2>=CLOSEBRACE && LA16_2<=COMMAND_VAR)||LA16_2==CREATE||LA16_2==DIV||LA16_2==EACH||(LA16_2>=EQUALS && LA16_2<=EXEC)||LA16_2==FL||LA16_2==ID||LA16_2==IDENTITY_VAR||(LA16_2>=INNER_JOIN && LA16_2<=INSERT_INTO)||(LA16_2>=INSERT_OVERWRITE && LA16_2<=INT)||LA16_2==JOIN||LA16_2==MINIS||LA16_2==NULL||LA16_2==OPENPAREN||LA16_2==PLUS||LA16_2==SELECT||LA16_2==STRING_LITERAL||(LA16_2>=TO && LA16_2<=VAR)||(LA16_2>=WHERE && LA16_2<=WITH)||LA16_2==130))
				{
					alt16 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt16 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt16 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:167:4: ID
				{
				DebugLocation(167, 4);
				ID88=(CommonToken)Match(input,ID,Follow._ID_in_variableReference823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID88);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 167:7: -> VARIABLE_REFERENCE[$ID]
				{
					DebugLocation(167, 10);
					adaptor.AddChild(root_0, (CommonTree)adaptor.Create(VARIABLE_REFERENCE, ID88));

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:168:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				COMMAND_VAR89=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_variableReference833); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR89_tree = (CommonTree)adaptor.Create(COMMAND_VAR89);
				adaptor.AddChild(root_0, COMMAND_VAR89_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:169:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				IDENTITY_VAR90=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_variableReference838); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR90_tree = (CommonTree)adaptor.Create(IDENTITY_VAR90);
				adaptor.AddChild(root_0, IDENTITY_VAR90_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:170:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._tableMemberReference_in_variableReference843);
				tableMemberReference91=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference91.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableReference", 22);
			LeaveRule("variableReference", 22);
			LeaveRule_variableReference();
		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "variableReference"); }
		return retval;

	}
	// $ANTLR end "variableReference"

	partial void EnterRule_tableMemberReference();
	partial void LeaveRule_tableMemberReference();
	// $ANTLR start "tableMemberReference"
	// Scrape.g:173:1: tableMemberReference : t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) ;
	[GrammarRule("tableMemberReference")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference()
	{
		EnterRule_tableMemberReference();
		EnterRule("tableMemberReference", 23);
		TraceIn("tableMemberReference", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken m = default(CommonToken);
		CommonToken DOT92 = default(CommonToken);

		CommonTree t_tree = default(CommonTree);
		CommonTree m_tree = default(CommonTree);
		CommonTree DOT92_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "tableMemberReference");
		DebugLocation(173, 1);
		try
		{
			// Scrape.g:174:2: (t= ID DOT m= ID -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] ) )
			DebugEnterAlt(1);
			// Scrape.g:174:4: t= ID DOT m= ID
			{
			DebugLocation(174, 5);
			t=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference857); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(174, 9);
			DOT92=(CommonToken)Match(input,DOT,Follow._DOT_in_tableMemberReference859); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DOT.Add(DOT92);

			DebugLocation(174, 14);
			m=(CommonToken)Match(input,ID,Follow._ID_in_tableMemberReference863); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(m);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:18: -> ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
			{
				DebugLocation(174, 21);
				// Scrape.g:174:21: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$m] )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 23);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_1);

				DebugLocation(174, 46);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
				DebugLocation(174, 64);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(MEMBER_REFERENCE, m));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableMemberReference", 23);
			LeaveRule("tableMemberReference", 23);
			LeaveRule_tableMemberReference();
		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "tableMemberReference"); }
		return retval;

	}
	// $ANTLR end "tableMemberReference"

	partial void EnterRule_variableDeclarationStatement();
	partial void LeaveRule_variableDeclarationStatement();
	// $ANTLR start "variableDeclarationStatement"
	// Scrape.g:177:1: variableDeclarationStatement : VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) ;
	[GrammarRule("variableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarationStatement()
	{
		EnterRule_variableDeclarationStatement();
		EnterRule("variableDeclarationStatement", 24);
		TraceIn("variableDeclarationStatement", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken VAR93 = default(CommonToken);
		CommonToken ID94 = default(CommonToken);
		CommonToken EQUALS95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree VAR93_tree = default(CommonTree);
		CommonTree ID94_tree = default(CommonTree);
		CommonTree EQUALS95_tree = default(CommonTree);
		RewriteRuleITokenStream stream_VAR=new RewriteRuleITokenStream(adaptor,"token VAR");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		try { DebugEnterRule(GrammarFileName, "variableDeclarationStatement");
		DebugLocation(177, 1);
		try
		{
			// Scrape.g:178:2: ( VAR ID EQUALS assignmentExpression -> ^( VARIABLE_DECLARATION ID assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:178:4: VAR ID EQUALS assignmentExpression
			{
			DebugLocation(178, 4);
			VAR93=(CommonToken)Match(input,VAR,Follow._VAR_in_variableDeclarationStatement887); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_VAR.Add(VAR93);

			DebugLocation(178, 8);
			ID94=(CommonToken)Match(input,ID,Follow._ID_in_variableDeclarationStatement889); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID94);

			DebugLocation(178, 11);
			EQUALS95=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableDeclarationStatement891); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS95);

			DebugLocation(178, 18);
			PushFollow(Follow._assignmentExpression_in_variableDeclarationStatement893);
			assignmentExpression96=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression96.Tree);


			{
			// AST REWRITE
			// elements: ID, assignmentExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:39: -> ^( VARIABLE_DECLARATION ID assignmentExpression )
			{
				DebugLocation(178, 42);
				// Scrape.g:178:42: ^( VARIABLE_DECLARATION ID assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 44);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_DECLARATION, "VARIABLE_DECLARATION"), root_1);

				DebugLocation(178, 65);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(178, 68);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarationStatement", 24);
			LeaveRule("variableDeclarationStatement", 24);
			LeaveRule_variableDeclarationStatement();
		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "variableDeclarationStatement"

	partial void EnterRule_variableAssignmentStatement();
	partial void LeaveRule_variableAssignmentStatement();
	// $ANTLR start "variableAssignmentStatement"
	// Scrape.g:181:1: variableAssignmentStatement : variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) ;
	[GrammarRule("variableAssignmentStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableAssignmentStatement()
	{
		EnterRule_variableAssignmentStatement();
		EnterRule("variableAssignmentStatement", 25);
		TraceIn("variableAssignmentStatement", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS98 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference97 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression99 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_assignmentExpression=new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
		RewriteRuleSubtreeStream stream_variableReference=new RewriteRuleSubtreeStream(adaptor,"rule variableReference");
		try { DebugEnterRule(GrammarFileName, "variableAssignmentStatement");
		DebugLocation(181, 1);
		try
		{
			// Scrape.g:182:2: ( variableReference EQUALS assignmentExpression -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:182:4: variableReference EQUALS assignmentExpression
			{
			DebugLocation(182, 4);
			PushFollow(Follow._variableReference_in_variableAssignmentStatement914);
			variableReference97=variableReference();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_variableReference.Add(variableReference97.Tree);
			DebugLocation(182, 22);
			EQUALS98=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_variableAssignmentStatement916); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS98);

			DebugLocation(182, 29);
			PushFollow(Follow._assignmentExpression_in_variableAssignmentStatement918);
			assignmentExpression99=assignmentExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_assignmentExpression.Add(assignmentExpression99.Tree);


			{
			// AST REWRITE
			// elements: assignmentExpression, variableReference
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 182:50: -> ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
			{
				DebugLocation(182, 53);
				// Scrape.g:182:53: ^( VARIABLE_ASSIGNMENT variableReference assignmentExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(182, 55);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(182, 75);
				adaptor.AddChild(root_1, stream_variableReference.NextTree());
				DebugLocation(182, 93);
				adaptor.AddChild(root_1, stream_assignmentExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableAssignmentStatement", 25);
			LeaveRule("variableAssignmentStatement", 25);
			LeaveRule_variableAssignmentStatement();
		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "variableAssignmentStatement"); }
		return retval;

	}
	// $ANTLR end "variableAssignmentStatement"

	partial void EnterRule_nullOperator();
	partial void LeaveRule_nullOperator();
	// $ANTLR start "nullOperator"
	// Scrape.g:185:1: nullOperator : COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) ;
	[GrammarRule("nullOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator()
	{
		EnterRule_nullOperator();
		EnterRule("nullOperator", 26);
		TraceIn("nullOperator", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMAND_VAR100 = default(CommonToken);
		CommonToken NULL_OPERATOR101 = default(CommonToken);
		CommonToken COMMAND_VAR102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal103 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMAND_VAR100_tree = default(CommonTree);
		CommonTree NULL_OPERATOR101_tree = default(CommonTree);
		CommonTree COMMAND_VAR102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nullOperator");
		DebugLocation(185, 1);
		try
		{
			// Scrape.g:186:2: ( COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal ) )
			DebugEnterAlt(1);
			// Scrape.g:186:4: COMMAND_VAR NULL_OPERATOR ^ ( COMMAND_VAR | literal )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(186, 4);
			COMMAND_VAR100=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator939); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COMMAND_VAR100_tree = (CommonTree)adaptor.Create(COMMAND_VAR100);
			adaptor.AddChild(root_0, COMMAND_VAR100_tree);
			}
			DebugLocation(186, 29);
			NULL_OPERATOR101=(CommonToken)Match(input,NULL_OPERATOR,Follow._NULL_OPERATOR_in_nullOperator941); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NULL_OPERATOR101_tree = (CommonTree)adaptor.Create(NULL_OPERATOR101);
			root_0 = (CommonTree)adaptor.BecomeRoot(NULL_OPERATOR101_tree, root_0);
			}
			DebugLocation(186, 31);
			// Scrape.g:186:31: ( COMMAND_VAR | literal )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==COMMAND_VAR))
			{
				alt17 = 1;
			}
			else if ((LA17_1==FL||LA17_1==INT||LA17_1==NULL||LA17_1==STRING_LITERAL))
			{
				alt17 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:186:32: COMMAND_VAR
				{
				DebugLocation(186, 32);
				COMMAND_VAR102=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_nullOperator945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR102_tree = (CommonTree)adaptor.Create(COMMAND_VAR102);
				adaptor.AddChild(root_0, COMMAND_VAR102_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:186:44: literal
				{
				DebugLocation(186, 44);
				PushFollow(Follow._literal_in_nullOperator947);
				literal103=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal103.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nullOperator", 26);
			LeaveRule("nullOperator", 26);
			LeaveRule_nullOperator();
		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "nullOperator"); }
		return retval;

	}
	// $ANTLR end "nullOperator"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Scrape.g:189:1: assignmentExpression : ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference );
	[GrammarRule("assignmentExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 27);
		TraceIn("assignmentExpression", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression104 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadExpression105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nullOperator108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(189, 1);
		try
		{
			// Scrape.g:190:2: ( mathExpression | downloadExpression | expandExpression | sqlStatement | nullOperator | variableReference )
			int alt18=6;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((LA18_2==NULL_OPERATOR))
				{
					alt18 = 5;
				}
				else if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTITY_VAR:
				{
				int LA18_2 = input.LA(2);

				if ((EvaluatePredicate(synpred30_Scrape_fragment)))
				{
					alt18 = 1;
				}
				else if ((true))
				{
					alt18 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FL:
			case INT:
			case NULL:
			case OPENPAREN:
			case STRING_LITERAL:
			case 130:
				{
				alt18 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
			case DOWNLOAD_PAGE:
				{
				alt18 = 2;
				}
				break;
			case EXPAND:
				{
				alt18 = 3;
				}
				break;
			case SELECT:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:190:4: mathExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._mathExpression_in_assignmentExpression959);
				mathExpression104=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression104.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:191:4: downloadExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._downloadExpression_in_assignmentExpression964);
				downloadExpression105=downloadExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadExpression105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:192:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._expandExpression_in_assignmentExpression969);
				expandExpression106=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression106.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:193:4: sqlStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._sqlStatement_in_assignmentExpression974);
				sqlStatement107=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sqlStatement107.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Scrape.g:194:4: nullOperator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._nullOperator_in_assignmentExpression979);
				nullOperator108=nullOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nullOperator108.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Scrape.g:195:4: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._variableReference_in_assignmentExpression984);
				variableReference109=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference109.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentExpression", 27);
			LeaveRule("assignmentExpression", 27);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return retval;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_mathExpression();
	partial void LeaveRule_mathExpression();
	// $ANTLR start "mathExpression"
	// Scrape.g:198:1: mathExpression : mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* ;
	[GrammarRule("mathExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression()
	{
		EnterRule_mathExpression();
		EnterRule("mathExpression", 28);
		TraceIn("mathExpression", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set111 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set111_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpression");
		DebugLocation(198, 5);
		try
		{
			// Scrape.g:199:6: ( mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )* )
			DebugEnterAlt(1);
			// Scrape.g:199:9: mathExpressionGroup ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 9);
			PushFollow(Follow._mathExpressionGroup_in_mathExpression1000);
			mathExpressionGroup110=mathExpressionGroup();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup110.Tree);
			DebugLocation(199, 29);
			// Scrape.g:199:29: ( ( PLUS | MINIS ) ^ mathExpressionGroup )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==MINIS||LA19_1==PLUS))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:199:30: ( PLUS | MINIS ) ^ mathExpressionGroup
					{
					DebugLocation(199, 46);

					set111=(CommonToken)input.LT(1);
					set111=(CommonToken)input.LT(1);
					if (input.LA(1)==MINIS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set111), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(199, 48);
					PushFollow(Follow._mathExpressionGroup_in_mathExpression1014);
					mathExpressionGroup112=mathExpressionGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpressionGroup112.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpression", 28);
			LeaveRule("mathExpression", 28);
			LeaveRule_mathExpression();
		}
		DebugLocation(200, 5);
		} finally { DebugExitRule(GrammarFileName, "mathExpression"); }
		return retval;

	}
	// $ANTLR end "mathExpression"

	partial void EnterRule_mathExpressionGroup();
	partial void LeaveRule_mathExpressionGroup();
	// $ANTLR start "mathExpressionGroup"
	// Scrape.g:202:1: mathExpressionGroup : atom ( ( ASTERISK | DIV ) ^ atom )* ;
	[GrammarRule("mathExpressionGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> mathExpressionGroup()
	{
		EnterRule_mathExpressionGroup();
		EnterRule("mathExpressionGroup", 29);
		TraceIn("mathExpressionGroup", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set114 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom113 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> atom115 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set114_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "mathExpressionGroup");
		DebugLocation(202, 3);
		try
		{
			// Scrape.g:203:2: ( atom ( ( ASTERISK | DIV ) ^ atom )* )
			DebugEnterAlt(1);
			// Scrape.g:203:4: atom ( ( ASTERISK | DIV ) ^ atom )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(203, 4);
			PushFollow(Follow._atom_in_mathExpressionGroup1032);
			atom113=atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, atom113.Tree);
			DebugLocation(203, 9);
			// Scrape.g:203:9: ( ( ASTERISK | DIV ) ^ atom )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==ASTERISK||LA20_1==DIV))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:203:10: ( ASTERISK | DIV ) ^ atom
					{
					DebugLocation(203, 28);

					set114=(CommonToken)input.LT(1);
					set114=(CommonToken)input.LT(1);
					if (input.LA(1)==ASTERISK||input.LA(1)==DIV)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set114), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(203, 30);
					PushFollow(Follow._atom_in_mathExpressionGroup1046);
					atom115=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, atom115.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mathExpressionGroup", 29);
			LeaveRule("mathExpressionGroup", 29);
			LeaveRule_mathExpressionGroup();
		}
		DebugLocation(204, 3);
		} finally { DebugExitRule(GrammarFileName, "mathExpressionGroup"); }
		return retval;

	}
	// $ANTLR end "mathExpressionGroup"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Scrape.g:206:1: atom : ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !);
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 30);
		TraceIn("atom", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal117 = default(CommonToken);
		CommonToken OPENPAREN119 = default(CommonToken);
		CommonToken CLOSEPAREN121 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableReference116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression120 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree OPENPAREN119_tree = default(CommonTree);
		CommonTree CLOSEPAREN121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(206, 5);
		try
		{
			// Scrape.g:207:6: ( variableReference | '$' -> ^( EXPAND_INTERATION_VARIABLE ) | literal | OPENPAREN ! mathExpression CLOSEPAREN !)
			int alt21=4;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt21 = 1;
				}
				break;
			case 130:
				{
				alt21 = 2;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt21 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt21 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:207:8: variableReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(207, 8);
				PushFollow(Follow._variableReference_in_atom1067);
				variableReference116=variableReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableReference116.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:208:5: '$'
				{
				DebugLocation(208, 5);
				char_literal117=(CommonToken)Match(input,130,Follow._130_in_atom1073); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal117);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 208:9: -> ^( EXPAND_INTERATION_VARIABLE )
				{
					DebugLocation(208, 12);
					// Scrape.g:208:12: ^( EXPAND_INTERATION_VARIABLE )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(208, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(EXPAND_INTERATION_VARIABLE, "EXPAND_INTERATION_VARIABLE"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:209:5: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 5);
				PushFollow(Follow._literal_in_atom1085);
				literal118=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal118.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:210:8: OPENPAREN ! mathExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 17);
				OPENPAREN119=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_atom1094); if (state.failed) return retval;
				DebugLocation(210, 19);
				PushFollow(Follow._mathExpression_in_atom1097);
				mathExpression120=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression120.Tree);
				DebugLocation(210, 44);
				CLOSEPAREN121=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_atom1099); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 30);
			LeaveRule("atom", 30);
			LeaveRule_atom();
		}
		DebugLocation(211, 5);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Scrape.g:213:1: literal : ( INT | STRING_LITERAL | NULL | FL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 31);
		TraceIn("literal", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set122 = default(CommonToken);

		CommonTree set122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(213, 1);
		try
		{
			// Scrape.g:214:2: ( INT | STRING_LITERAL | NULL | FL )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(214, 2);

			set122=(CommonToken)input.LT(1);
			if (input.LA(1)==FL||input.LA(1)==INT||input.LA(1)==NULL||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set122));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 31);
			LeaveRule("literal", 31);
			LeaveRule_literal();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// Scrape.g:223:1: insertStatement : ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) );
	[GrammarRule("insertStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 32);
		TraceIn("insertStatement", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken INSERT_INTO123 = default(CommonToken);
		CommonToken ID124 = default(CommonToken);
		CommonToken INSERT_DIRECTORY126 = default(CommonToken);
		CommonToken INSERT_OVERWRITE129 = default(CommonToken);
		CommonToken ID130 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement125 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression127 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement128 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree INSERT_INTO123_tree = default(CommonTree);
		CommonTree ID124_tree = default(CommonTree);
		CommonTree INSERT_DIRECTORY126_tree = default(CommonTree);
		CommonTree INSERT_OVERWRITE129_tree = default(CommonTree);
		CommonTree ID130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_INSERT_DIRECTORY=new RewriteRuleITokenStream(adaptor,"token INSERT_DIRECTORY");
		RewriteRuleITokenStream stream_INSERT_OVERWRITE=new RewriteRuleITokenStream(adaptor,"token INSERT_OVERWRITE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_INSERT_INTO=new RewriteRuleITokenStream(adaptor,"token INSERT_INTO");
		RewriteRuleSubtreeStream stream_sqlStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlStatement");
		RewriteRuleSubtreeStream stream_mathExpression=new RewriteRuleSubtreeStream(adaptor,"rule mathExpression");
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(223, 1);
		try
		{
			// Scrape.g:224:2: ( INSERT_INTO ID sqlStatement -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) | INSERT_DIRECTORY mathExpression sqlStatement -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement ) | INSERT_OVERWRITE ID sqlStatement -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement ) )
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case INSERT_INTO:
				{
				alt22 = 1;
				}
				break;
			case INSERT_DIRECTORY:
				{
				alt22 = 2;
				}
				break;
			case INSERT_OVERWRITE:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:224:4: INSERT_INTO ID sqlStatement
				{
				DebugLocation(224, 4);
				INSERT_INTO123=(CommonToken)Match(input,INSERT_INTO,Follow._INSERT_INTO_in_insertStatement1146); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_INTO.Add(INSERT_INTO123);

				DebugLocation(224, 16);
				ID124=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1148); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID124);

				DebugLocation(224, 19);
				PushFollow(Follow._sqlStatement_in_insertStatement1150);
				sqlStatement125=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement125.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_INTO
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 224:31: -> ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(224, 34);
					// Scrape.g:224:34: ^( INSERT_INTO TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(224, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_INTO.NextNode(), root_1);

					DebugLocation(224, 48);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID124));
					DebugLocation(224, 78);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:225:4: INSERT_DIRECTORY mathExpression sqlStatement
				{
				DebugLocation(225, 4);
				INSERT_DIRECTORY126=(CommonToken)Match(input,INSERT_DIRECTORY,Follow._INSERT_DIRECTORY_in_insertStatement1165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_DIRECTORY.Add(INSERT_DIRECTORY126);

				DebugLocation(225, 21);
				PushFollow(Follow._mathExpression_in_insertStatement1167);
				mathExpression127=mathExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_mathExpression.Add(mathExpression127.Tree);
				DebugLocation(225, 36);
				PushFollow(Follow._sqlStatement_in_insertStatement1169);
				sqlStatement128=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement128.Tree);


				{
				// AST REWRITE
				// elements: mathExpression, sqlStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 225:48: -> ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
				{
					DebugLocation(225, 51);
					// Scrape.g:225:51: ^( INSERT_INTO_DIRECTORY mathExpression sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(225, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INSERT_INTO_DIRECTORY, "INSERT_INTO_DIRECTORY"), root_1);

					DebugLocation(225, 75);
					adaptor.AddChild(root_1, stream_mathExpression.NextTree());
					DebugLocation(225, 90);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:226:4: INSERT_OVERWRITE ID sqlStatement
				{
				DebugLocation(226, 4);
				INSERT_OVERWRITE129=(CommonToken)Match(input,INSERT_OVERWRITE,Follow._INSERT_OVERWRITE_in_insertStatement1183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INSERT_OVERWRITE.Add(INSERT_OVERWRITE129);

				DebugLocation(226, 21);
				ID130=(CommonToken)Match(input,ID,Follow._ID_in_insertStatement1185); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID130);

				DebugLocation(226, 24);
				PushFollow(Follow._sqlStatement_in_insertStatement1187);
				sqlStatement131=sqlStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlStatement.Add(sqlStatement131.Tree);


				{
				// AST REWRITE
				// elements: sqlStatement, INSERT_OVERWRITE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:36: -> ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
				{
					DebugLocation(226, 39);
					// Scrape.g:226:39: ^( INSERT_OVERWRITE TABLE_VARIABLE_REFERENCE[$ID] sqlStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_INSERT_OVERWRITE.NextNode(), root_1);

					DebugLocation(226, 58);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, ID130));
					DebugLocation(226, 88);
					adaptor.AddChild(root_1, stream_sqlStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("insertStatement", 32);
			LeaveRule("insertStatement", 32);
			LeaveRule_insertStatement();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_updateStatment();
	partial void LeaveRule_updateStatment();
	// $ANTLR start "updateStatment"
	// Scrape.g:232:1: updateStatment : UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("updateStatment")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> updateStatment()
	{
		EnterRule_updateStatment();
		EnterRule("updateStatment", 33);
		TraceIn("updateStatment", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken UPDATE132 = default(CommonToken);
		CommonToken ID133 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArgs134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement136 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree UPDATE132_tree = default(CommonTree);
		CommonTree ID133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_UPDATE=new RewriteRuleITokenStream(adaptor,"token UPDATE");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		RewriteRuleSubtreeStream stream_setArgs=new RewriteRuleSubtreeStream(adaptor,"rule setArgs");
		try { DebugEnterRule(GrammarFileName, "updateStatment");
		DebugLocation(232, 1);
		try
		{
			// Scrape.g:233:2: ( UPDATE ID setArgs ( fromStatement )? ( whereStatement )? -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:233:4: UPDATE ID setArgs ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(233, 4);
			UPDATE132=(CommonToken)Match(input,UPDATE,Follow._UPDATE_in_updateStatment1212); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UPDATE.Add(UPDATE132);

			DebugLocation(233, 11);
			ID133=(CommonToken)Match(input,ID,Follow._ID_in_updateStatment1214); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID133);

			DebugLocation(233, 14);
			PushFollow(Follow._setArgs_in_updateStatment1216);
			setArgs134=setArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArgs.Add(setArgs134.Tree);
			DebugLocation(233, 22);
			// Scrape.g:233:22: ( fromStatement )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==FROM))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:233:22: fromStatement
				{
				DebugLocation(233, 22);
				PushFollow(Follow._fromStatement_in_updateStatment1218);
				fromStatement135=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(233, 37);
			// Scrape.g:233:37: ( whereStatement )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==WHERE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:233:37: whereStatement
				{
				DebugLocation(233, 37);
				PushFollow(Follow._whereStatement_in_updateStatment1221);
				whereStatement136=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: whereStatement, fromStatement, setArgs, ID, UPDATE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 233:53: -> ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(233, 56);
				// Scrape.g:233:56: ^( UPDATE ^( TABLE_ALIAS ID ) setArgs ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(233, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_UPDATE.NextNode(), root_1);

				DebugLocation(233, 65);
				// Scrape.g:233:65: ^( TABLE_ALIAS ID )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(233, 67);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

				DebugLocation(233, 79);
				adaptor.AddChild(root_2, stream_ID.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(233, 83);
				adaptor.AddChild(root_1, stream_setArgs.NextTree());
				DebugLocation(233, 91);
				// Scrape.g:233:91: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(233, 91);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(233, 106);
				// Scrape.g:233:106: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(233, 106);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("updateStatment", 33);
			LeaveRule("updateStatment", 33);
			LeaveRule_updateStatment();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatment"); }
		return retval;

	}
	// $ANTLR end "updateStatment"

	partial void EnterRule_setArgs();
	partial void LeaveRule_setArgs();
	// $ANTLR start "setArgs"
	// Scrape.g:236:1: setArgs : SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) ;
	[GrammarRule("setArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArgs()
	{
		EnterRule_setArgs();
		EnterRule("setArgs", 34);
		TraceIn("setArgs", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SET137 = default(CommonToken);
		CommonToken COMMA139 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg138 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> setArg140 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SET137_tree = default(CommonTree);
		CommonTree COMMA139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SET=new RewriteRuleITokenStream(adaptor,"token SET");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_setArg=new RewriteRuleSubtreeStream(adaptor,"rule setArg");
		try { DebugEnterRule(GrammarFileName, "setArgs");
		DebugLocation(236, 1);
		try
		{
			// Scrape.g:237:2: ( SET ( setArg COMMA )* setArg -> ^( SET ( setArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:237:4: SET ( setArg COMMA )* setArg
			{
			DebugLocation(237, 4);
			SET137=(CommonToken)Match(input,SET,Follow._SET_in_setArgs1253); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SET.Add(SET137);

			DebugLocation(237, 8);
			// Scrape.g:237:8: ( setArg COMMA )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				switch (input.LA(1))
				{
				case PICK:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case FL:
				case INT:
				case NULL:
				case STRING_LITERAL:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case ID:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case COMMAND_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case IDENTITY_VAR:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				case GETDATE:
					{
					int LA25_2 = input.LA(2);

					if ((EvaluatePredicate(synpred49_Scrape_fragment)))
					{
						alt25 = 1;
					}


					}
					break;
				}

				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:237:9: setArg COMMA
					{
					DebugLocation(237, 9);
					PushFollow(Follow._setArg_in_setArgs1256);
					setArg138=setArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_setArg.Add(setArg138.Tree);
					DebugLocation(237, 16);
					COMMA139=(CommonToken)Match(input,COMMA,Follow._COMMA_in_setArgs1258); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA139);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(237, 24);
			PushFollow(Follow._setArg_in_setArgs1262);
			setArg140=setArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_setArg.Add(setArg140.Tree);


			{
			// AST REWRITE
			// elements: SET, setArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:31: -> ^( SET ( setArg )* )
			{
				DebugLocation(237, 34);
				// Scrape.g:237:34: ^( SET ( setArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(237, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_SET.NextNode(), root_1);

				DebugLocation(237, 40);
				// Scrape.g:237:40: ( setArg )*
				while ( stream_setArg.HasNext )
				{
					DebugLocation(237, 40);
					adaptor.AddChild(root_1, stream_setArg.NextTree());

				}
				stream_setArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArgs", 34);
			LeaveRule("setArgs", 34);
			LeaveRule_setArgs();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "setArgs"); }
		return retval;

	}
	// $ANTLR end "setArgs"

	partial void EnterRule_setArg();
	partial void LeaveRule_setArg();
	// $ANTLR start "setArg"
	// Scrape.g:240:1: setArg : selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) ;
	[GrammarRule("setArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> setArg()
	{
		EnterRule_setArg();
		EnterRule("setArg", 35);
		TraceIn("setArg", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EQUALS142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg141 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree EQUALS142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "setArg");
		DebugLocation(240, 1);
		try
		{
			// Scrape.g:241:2: ( selectArg EQUALS selectArgs -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs ) )
			DebugEnterAlt(1);
			// Scrape.g:241:4: selectArg EQUALS selectArgs
			{
			DebugLocation(241, 4);
			PushFollow(Follow._selectArg_in_setArg1282);
			selectArg141=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg141.Tree);
			DebugLocation(241, 14);
			EQUALS142=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_setArg1284); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EQUALS.Add(EQUALS142);

			DebugLocation(241, 21);
			PushFollow(Follow._selectArgs_in_setArg1286);
			selectArgs143=selectArgs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArgs.Add(selectArgs143.Tree);


			{
			// AST REWRITE
			// elements: selectArg, selectArgs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 241:32: -> ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
			{
				DebugLocation(241, 35);
				// Scrape.g:241:35: ^( VARIABLE_ASSIGNMENT selectArg selectArgs )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(241, 37);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT"), root_1);

				DebugLocation(241, 57);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());
				DebugLocation(241, 67);
				adaptor.AddChild(root_1, stream_selectArgs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("setArg", 35);
			LeaveRule("setArg", 35);
			LeaveRule_setArg();
		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "setArg"); }
		return retval;

	}
	// $ANTLR end "setArg"

	partial void EnterRule_sqlStatement();
	partial void LeaveRule_sqlStatement();
	// $ANTLR start "sqlStatement"
	// Scrape.g:246:1: sqlStatement : selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) ;
	[GrammarRule("sqlStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlStatement()
	{
		EnterRule_sqlStatement();
		EnterRule("sqlStatement", 36);
		TraceIn("sqlStatement", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_fromStatement=new RewriteRuleSubtreeStream(adaptor,"rule fromStatement");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
		RewriteRuleSubtreeStream stream_whereStatement=new RewriteRuleSubtreeStream(adaptor,"rule whereStatement");
		try { DebugEnterRule(GrammarFileName, "sqlStatement");
		DebugLocation(246, 1);
		try
		{
			// Scrape.g:247:2: ( selectStatement ( fromStatement )? ( whereStatement )? -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:247:4: selectStatement ( fromStatement )? ( whereStatement )?
			{
			DebugLocation(247, 4);
			PushFollow(Follow._selectStatement_in_sqlStatement1310);
			selectStatement144=selectStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectStatement.Add(selectStatement144.Tree);
			DebugLocation(247, 20);
			// Scrape.g:247:20: ( fromStatement )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==FROM))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:247:20: fromStatement
				{
				DebugLocation(247, 20);
				PushFollow(Follow._fromStatement_in_sqlStatement1312);
				fromStatement145=fromStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fromStatement.Add(fromStatement145.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(247, 35);
			// Scrape.g:247:35: ( whereStatement )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==WHERE))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:247:35: whereStatement
				{
				DebugLocation(247, 35);
				PushFollow(Follow._whereStatement_in_sqlStatement1315);
				whereStatement146=whereStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_whereStatement.Add(whereStatement146.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: fromStatement, selectStatement, whereStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:51: -> ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
			{
				DebugLocation(247, 54);
				// Scrape.g:247:54: ^( SELECT_STATEMENT selectStatement ( fromStatement )? ( whereStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_STATEMENT, "SELECT_STATEMENT"), root_1);

				DebugLocation(247, 73);
				adaptor.AddChild(root_1, stream_selectStatement.NextTree());
				DebugLocation(247, 89);
				// Scrape.g:247:89: ( fromStatement )?
				if (stream_fromStatement.HasNext)
				{
					DebugLocation(247, 89);
					adaptor.AddChild(root_1, stream_fromStatement.NextTree());

				}
				stream_fromStatement.Reset();
				DebugLocation(247, 104);
				// Scrape.g:247:104: ( whereStatement )?
				if (stream_whereStatement.HasNext)
				{
					DebugLocation(247, 104);
					adaptor.AddChild(root_1, stream_whereStatement.NextTree());

				}
				stream_whereStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlStatement", 36);
			LeaveRule("sqlStatement", 36);
			LeaveRule_sqlStatement();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlStatement"); }
		return retval;

	}
	// $ANTLR end "sqlStatement"

	partial void EnterRule_whereStatement();
	partial void LeaveRule_whereStatement();
	// $ANTLR start "whereStatement"
	// Scrape.g:250:1: whereStatement : WHERE boolExpression -> ^( WHERE boolExpression ) ;
	[GrammarRule("whereStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whereStatement()
	{
		EnterRule_whereStatement();
		EnterRule("whereStatement", 37);
		TraceIn("whereStatement", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHERE147 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression148 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHERE147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		try { DebugEnterRule(GrammarFileName, "whereStatement");
		DebugLocation(250, 1);
		try
		{
			// Scrape.g:251:2: ( WHERE boolExpression -> ^( WHERE boolExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:251:5: WHERE boolExpression
			{
			DebugLocation(251, 5);
			WHERE147=(CommonToken)Match(input,WHERE,Follow._WHERE_in_whereStatement1342); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHERE.Add(WHERE147);

			DebugLocation(251, 11);
			PushFollow(Follow._boolExpression_in_whereStatement1344);
			boolExpression148=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression148.Tree);


			{
			// AST REWRITE
			// elements: boolExpression, WHERE
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:26: -> ^( WHERE boolExpression )
			{
				DebugLocation(251, 29);
				// Scrape.g:251:29: ^( WHERE boolExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 31);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WHERE.NextNode(), root_1);

				DebugLocation(251, 37);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whereStatement", 37);
			LeaveRule("whereStatement", 37);
			LeaveRule_whereStatement();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "whereStatement"); }
		return retval;

	}
	// $ANTLR end "whereStatement"

	partial void EnterRule_fromStatement();
	partial void LeaveRule_fromStatement();
	// $ANTLR start "fromStatement"
	// Scrape.g:254:1: fromStatement : ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) );
	[GrammarRule("fromStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fromStatement()
	{
		EnterRule_fromStatement();
		EnterRule("fromStatement", 38);
		TraceIn("fromStatement", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken FROM149 = default(CommonToken);
		CommonToken FROM151 = default(CommonToken);
		CommonToken ID153 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause152 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableHint154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement155 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree FROM149_tree = default(CommonTree);
		CommonTree FROM151_tree = default(CommonTree);
		CommonTree ID153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_tableHint=new RewriteRuleSubtreeStream(adaptor,"rule tableHint");
		RewriteRuleSubtreeStream stream_tableGenerationClause=new RewriteRuleSubtreeStream(adaptor,"rule tableGenerationClause");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "fromStatement");
		DebugLocation(254, 1);
		try
		{
			// Scrape.g:255:2: ( FROM t= ID (a= ID )? ( innerJoinStatement )? -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? ) | FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )? -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? ) )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==FROM))
			{
				int LA33_2 = input.LA(2);

				if ((LA33_2==ID))
				{
					alt33 = 1;
				}
				else if (((LA33_2>=DOWNLOAD_IMAGE && LA33_2<=DOWNLOAD_PAGE)||LA33_2==EXPAND))
				{
					alt33 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:255:4: FROM t= ID (a= ID )? ( innerJoinStatement )?
				{
				DebugLocation(255, 4);
				FROM149=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1364); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM149);

				DebugLocation(255, 10);
				t=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1368); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(255, 15);
				// Scrape.g:255:15: (a= ID )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==ID))
				{
					int LA28_2 = input.LA(2);

					if ((LA28_2==EOF||(LA28_2>=CLOSEBRACE && LA28_2<=CLOSEPAREN)||LA28_2==COMMAND_VAR||LA28_2==CREATE||LA28_2==EACH||LA28_2==EXEC||LA28_2==ID||LA28_2==IDENTITY_VAR||(LA28_2>=INNER_JOIN && LA28_2<=INSERT_INTO)||LA28_2==INSERT_OVERWRITE||LA28_2==JOIN||LA28_2==SELECT||(LA28_2>=TRUNCATE && LA28_2<=VAR)||(LA28_2>=WHERE && LA28_2<=WHILE)))
					{
						alt28 = 1;
					}
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:255:15: a= ID
					{
					DebugLocation(255, 15);
					a=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1372); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(255, 20);
				// Scrape.g:255:20: ( innerJoinStatement )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==INNER_JOIN||LA29_1==JOIN))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:255:20: innerJoinStatement
					{
					DebugLocation(255, 20);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1375);
					innerJoinStatement150=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement150.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }



				{
				// AST REWRITE
				// elements: innerJoinStatement, a, FROM
				// token labels: a
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 255:40: -> ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
				{
					DebugLocation(255, 43);
					// Scrape.g:255:43: ^( FROM TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(255, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(255, 50);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
					DebugLocation(255, 79);
					// Scrape.g:255:79: ( ^( TABLE_ALIAS $a) )?
					if (stream_a.HasNext)
					{
						DebugLocation(255, 79);
						// Scrape.g:255:79: ^( TABLE_ALIAS $a)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(255, 81);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(255, 94);
						adaptor.AddChild(root_2, stream_a.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_a.Reset();
					DebugLocation(255, 98);
					// Scrape.g:255:98: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(255, 98);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:256:4: FROM tableGenerationClause ( ID )? ( tableHint )? ( innerJoinStatement )?
				{
				DebugLocation(256, 4);
				FROM151=(CommonToken)Match(input,FROM,Follow._FROM_in_fromStatement1402); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FROM.Add(FROM151);

				DebugLocation(256, 9);
				PushFollow(Follow._tableGenerationClause_in_fromStatement1404);
				tableGenerationClause152=tableGenerationClause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_tableGenerationClause.Add(tableGenerationClause152.Tree);
				DebugLocation(256, 31);
				// Scrape.g:256:31: ( ID )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ID))
				{
					int LA30_2 = input.LA(2);

					if ((LA30_2==EOF||(LA30_2>=CLOSEBRACE && LA30_2<=CLOSEPAREN)||LA30_2==COMMAND_VAR||LA30_2==CREATE||LA30_2==EACH||LA30_2==EXEC||LA30_2==ID||LA30_2==IDENTITY_VAR||(LA30_2>=INNER_JOIN && LA30_2<=INSERT_INTO)||LA30_2==INSERT_OVERWRITE||LA30_2==JOIN||LA30_2==SELECT||(LA30_2>=TRUNCATE && LA30_2<=VAR)||(LA30_2>=WHERE && LA30_2<=WITH)))
					{
						alt30 = 1;
					}
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:256:31: ID
					{
					DebugLocation(256, 31);
					ID153=(CommonToken)Match(input,ID,Follow._ID_in_fromStatement1406); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ID.Add(ID153);


					}
					break;

				}
				} finally { DebugExitSubRule(30); }

				DebugLocation(256, 35);
				// Scrape.g:256:35: ( tableHint )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==WITH))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:256:35: tableHint
					{
					DebugLocation(256, 35);
					PushFollow(Follow._tableHint_in_fromStatement1409);
					tableHint154=tableHint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableHint.Add(tableHint154.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(256, 46);
				// Scrape.g:256:46: ( innerJoinStatement )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==INNER_JOIN||LA32_1==JOIN))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:256:46: innerJoinStatement
					{
					DebugLocation(256, 46);
					PushFollow(Follow._innerJoinStatement_in_fromStatement1412);
					innerJoinStatement155=innerJoinStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement155.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }



				{
				// AST REWRITE
				// elements: tableGenerationClause, ID, tableHint, innerJoinStatement, FROM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:66: -> ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
				{
					DebugLocation(256, 69);
					// Scrape.g:256:69: ^( FROM tableGenerationClause ( ^( TABLE_ALIAS ID ) )? ( tableHint )? ( innerJoinStatement )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 71);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_FROM.NextNode(), root_1);

					DebugLocation(256, 76);
					adaptor.AddChild(root_1, stream_tableGenerationClause.NextTree());
					DebugLocation(256, 98);
					// Scrape.g:256:98: ( ^( TABLE_ALIAS ID ) )?
					if (stream_ID.HasNext)
					{
						DebugLocation(256, 98);
						// Scrape.g:256:98: ^( TABLE_ALIAS ID )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(256, 100);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

						DebugLocation(256, 112);
						adaptor.AddChild(root_2, stream_ID.NextNode());

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ID.Reset();
					DebugLocation(256, 117);
					// Scrape.g:256:117: ( tableHint )?
					if (stream_tableHint.HasNext)
					{
						DebugLocation(256, 117);
						adaptor.AddChild(root_1, stream_tableHint.NextTree());

					}
					stream_tableHint.Reset();
					DebugLocation(256, 128);
					// Scrape.g:256:128: ( innerJoinStatement )?
					if (stream_innerJoinStatement.HasNext)
					{
						DebugLocation(256, 128);
						adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

					}
					stream_innerJoinStatement.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fromStatement", 38);
			LeaveRule("fromStatement", 38);
			LeaveRule_fromStatement();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "fromStatement"); }
		return retval;

	}
	// $ANTLR end "fromStatement"

	partial void EnterRule_tableHint();
	partial void LeaveRule_tableHint();
	// $ANTLR start "tableHint"
	// Scrape.g:259:1: tableHint : WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* ;
	[GrammarRule("tableHint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableHint()
	{
		EnterRule_tableHint();
		EnterRule("tableHint", 39);
		TraceIn("tableHint", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH156 = default(CommonToken);
		CommonToken OPENPAREN157 = default(CommonToken);
		CommonToken PIPE159 = default(CommonToken);
		CommonToken CLOSEPAREN161 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> hint160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH156_tree = default(CommonTree);
		CommonTree OPENPAREN157_tree = default(CommonTree);
		CommonTree PIPE159_tree = default(CommonTree);
		CommonTree CLOSEPAREN161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_PIPE=new RewriteRuleITokenStream(adaptor,"token PIPE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_hint=new RewriteRuleSubtreeStream(adaptor,"rule hint");
		try { DebugEnterRule(GrammarFileName, "tableHint");
		DebugLocation(259, 1);
		try
		{
			// Scrape.g:260:2: ( WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN -> ( hint )* )
			DebugEnterAlt(1);
			// Scrape.g:260:4: WITH OPENPAREN ( hint PIPE )* hint CLOSEPAREN
			{
			DebugLocation(260, 4);
			WITH156=(CommonToken)Match(input,WITH,Follow._WITH_in_tableHint1445); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH156);

			DebugLocation(260, 9);
			OPENPAREN157=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_tableHint1447); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN157);

			DebugLocation(260, 19);
			// Scrape.g:260:19: ( hint PIPE )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:260:20: hint PIPE
					{
					DebugLocation(260, 20);
					PushFollow(Follow._hint_in_tableHint1450);
					hint158=hint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_hint.Add(hint158.Tree);
					DebugLocation(260, 25);
					PIPE159=(CommonToken)Match(input,PIPE,Follow._PIPE_in_tableHint1452); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_PIPE.Add(PIPE159);


					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(260, 32);
			PushFollow(Follow._hint_in_tableHint1456);
			hint160=hint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_hint.Add(hint160.Tree);
			DebugLocation(260, 37);
			CLOSEPAREN161=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_tableHint1458); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN161);



			{
			// AST REWRITE
			// elements: hint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 260:48: -> ( hint )*
			{
				DebugLocation(260, 51);
				// Scrape.g:260:51: ( hint )*
				while ( stream_hint.HasNext )
				{
					DebugLocation(260, 51);
					adaptor.AddChild(root_0, stream_hint.NextTree());

				}
				stream_hint.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableHint", 39);
			LeaveRule("tableHint", 39);
			LeaveRule_tableHint();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "tableHint"); }
		return retval;

	}
	// $ANTLR end "tableHint"

	partial void EnterRule_hint();
	partial void LeaveRule_hint();
	// $ANTLR start "hint"
	// Scrape.g:263:1: hint : ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) );
	[GrammarRule("hint")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> hint()
	{
		EnterRule_hint();
		EnterRule("hint", 40);
		TraceIn("hint", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken THREAD162 = default(CommonToken);
		CommonToken OPENPAREN163 = default(CommonToken);
		CommonToken INT164 = default(CommonToken);
		CommonToken CLOSEPAREN165 = default(CommonToken);
		CommonToken JS166 = default(CommonToken);
		CommonToken OPENPAREN167 = default(CommonToken);
		CommonToken COMMA169 = default(CommonToken);
		CommonToken CLOSEPAREN171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg168 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> jsArg170 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree THREAD162_tree = default(CommonTree);
		CommonTree OPENPAREN163_tree = default(CommonTree);
		CommonTree INT164_tree = default(CommonTree);
		CommonTree CLOSEPAREN165_tree = default(CommonTree);
		CommonTree JS166_tree = default(CommonTree);
		CommonTree OPENPAREN167_tree = default(CommonTree);
		CommonTree COMMA169_tree = default(CommonTree);
		CommonTree CLOSEPAREN171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THREAD=new RewriteRuleITokenStream(adaptor,"token THREAD");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_INT=new RewriteRuleITokenStream(adaptor,"token INT");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_JS=new RewriteRuleITokenStream(adaptor,"token JS");
		RewriteRuleSubtreeStream stream_jsArg=new RewriteRuleSubtreeStream(adaptor,"rule jsArg");
		try { DebugEnterRule(GrammarFileName, "hint");
		DebugLocation(263, 1);
		try
		{
			// Scrape.g:264:2: ( THREAD OPENPAREN INT CLOSEPAREN -> ^( THREAD INT ) | JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )? -> ^( JS ( jsArg )* ) )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==THREAD))
			{
				alt37 = 1;
			}
			else if ((LA37_1==JS))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:264:4: THREAD OPENPAREN INT CLOSEPAREN
				{
				DebugLocation(264, 4);
				THREAD162=(CommonToken)Match(input,THREAD,Follow._THREAD_in_hint1474); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_THREAD.Add(THREAD162);

				DebugLocation(264, 11);
				OPENPAREN163=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1476); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN163);

				DebugLocation(264, 21);
				INT164=(CommonToken)Match(input,INT,Follow._INT_in_hint1478); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INT.Add(INT164);

				DebugLocation(264, 25);
				CLOSEPAREN165=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1480); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN165);



				{
				// AST REWRITE
				// elements: THREAD, INT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 264:36: -> ^( THREAD INT )
				{
					DebugLocation(264, 39);
					// Scrape.g:264:39: ^( THREAD INT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(264, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_THREAD.NextNode(), root_1);

					DebugLocation(264, 48);
					adaptor.AddChild(root_1, stream_INT.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:265:4: JS ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				{
				DebugLocation(265, 4);
				JS166=(CommonToken)Match(input,JS,Follow._JS_in_hint1493); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_JS.Add(JS166);

				DebugLocation(265, 7);
				// Scrape.g:265:7: ( OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==OPENPAREN))
				{
					alt36 = 1;
				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:265:8: OPENPAREN ( jsArg COMMA )* jsArg CLOSEPAREN
					{
					DebugLocation(265, 8);
					OPENPAREN167=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_hint1496); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN167);

					DebugLocation(265, 18);
					// Scrape.g:265:18: ( jsArg COMMA )*
					try { DebugEnterSubRule(35);
					while (true)
					{
						int alt35=2;
						try { DebugEnterDecision(35, false);
						int LA35_1 = input.LA(1);

						if ((LA35_1==INT||LA35_1==STRING_LITERAL))
						{
							int LA35_2 = input.LA(2);

							if ((LA35_2==COMMA))
							{
								alt35 = 1;
							}


						}


						} finally { DebugExitDecision(35); }
						switch ( alt35 )
						{
						case 1:
							DebugEnterAlt(1);
							// Scrape.g:265:19: jsArg COMMA
							{
							DebugLocation(265, 19);
							PushFollow(Follow._jsArg_in_hint1499);
							jsArg168=jsArg();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_jsArg.Add(jsArg168.Tree);
							DebugLocation(265, 25);
							COMMA169=(CommonToken)Match(input,COMMA,Follow._COMMA_in_hint1501); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_COMMA.Add(COMMA169);


							}
							break;

						default:
							goto loop35;
						}
					}

					loop35:
						;

					} finally { DebugExitSubRule(35); }

					DebugLocation(265, 33);
					PushFollow(Follow._jsArg_in_hint1505);
					jsArg170=jsArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_jsArg.Add(jsArg170.Tree);
					DebugLocation(265, 39);
					CLOSEPAREN171=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_hint1507); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN171);


					}
					break;

				}
				} finally { DebugExitSubRule(36); }



				{
				// AST REWRITE
				// elements: jsArg, JS
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:52: -> ^( JS ( jsArg )* )
				{
					DebugLocation(265, 55);
					// Scrape.g:265:55: ^( JS ( jsArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 57);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_JS.NextNode(), root_1);

					DebugLocation(265, 60);
					// Scrape.g:265:60: ( jsArg )*
					while ( stream_jsArg.HasNext )
					{
						DebugLocation(265, 60);
						adaptor.AddChild(root_1, stream_jsArg.NextTree());

					}
					stream_jsArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hint", 40);
			LeaveRule("hint", 40);
			LeaveRule_hint();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "hint"); }
		return retval;

	}
	// $ANTLR end "hint"

	partial void EnterRule_jsArg();
	partial void LeaveRule_jsArg();
	// $ANTLR start "jsArg"
	// Scrape.g:268:1: jsArg : ( STRING_LITERAL | INT );
	[GrammarRule("jsArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> jsArg()
	{
		EnterRule_jsArg();
		EnterRule("jsArg", 41);
		TraceIn("jsArg", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set172 = default(CommonToken);

		CommonTree set172_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "jsArg");
		DebugLocation(268, 1);
		try
		{
			// Scrape.g:269:2: ( STRING_LITERAL | INT )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(269, 2);

			set172=(CommonToken)input.LT(1);
			if (input.LA(1)==INT||input.LA(1)==STRING_LITERAL)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set172));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jsArg", 41);
			LeaveRule("jsArg", 41);
			LeaveRule_jsArg();
		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "jsArg"); }
		return retval;

	}
	// $ANTLR end "jsArg"

	partial void EnterRule_innerJoinStatement();
	partial void LeaveRule_innerJoinStatement();
	// $ANTLR start "innerJoinStatement"
	// Scrape.g:274:1: innerJoinStatement : innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) ;
	[GrammarRule("innerJoinStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement()
	{
		EnterRule_innerJoinStatement();
		EnterRule("innerJoinStatement", 42);
		TraceIn("innerJoinStatement", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken a = default(CommonToken);
		CommonToken string_literal174 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression175 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerJoinStatement176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree a_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_innerJoin=new RewriteRuleSubtreeStream(adaptor,"rule innerJoin");
		RewriteRuleSubtreeStream stream_innerJoinStatement=new RewriteRuleSubtreeStream(adaptor,"rule innerJoinStatement");
		try { DebugEnterRule(GrammarFileName, "innerJoinStatement");
		DebugLocation(274, 1);
		try
		{
			// Scrape.g:275:2: ( innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )? -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:275:4: innerJoin t= ID (a= ID )? 'on' boolExpression ( innerJoinStatement )?
			{
			DebugLocation(275, 4);
			PushFollow(Follow._innerJoin_in_innerJoinStatement1546);
			innerJoin173=innerJoin();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_innerJoin.Add(innerJoin173.Tree);
			DebugLocation(275, 15);
			t=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1550); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(t);

			DebugLocation(275, 20);
			// Scrape.g:275:20: (a= ID )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==ID))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:275:20: a= ID
				{
				DebugLocation(275, 20);
				a=(CommonToken)Match(input,ID,Follow._ID_in_innerJoinStatement1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(a);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(275, 25);
			string_literal174=(CommonToken)Match(input,131,Follow._131_in_innerJoinStatement1557); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(string_literal174);

			DebugLocation(275, 30);
			PushFollow(Follow._boolExpression_in_innerJoinStatement1559);
			boolExpression175=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression175.Tree);
			DebugLocation(275, 45);
			// Scrape.g:275:45: ( innerJoinStatement )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==INNER_JOIN||LA39_1==JOIN))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:275:45: innerJoinStatement
				{
				DebugLocation(275, 45);
				PushFollow(Follow._innerJoinStatement_in_innerJoinStatement1561);
				innerJoinStatement176=innerJoinStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_innerJoinStatement.Add(innerJoinStatement176.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: innerJoinStatement, boolExpression, a
			// token labels: a
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_a=new RewriteRuleITokenStream(adaptor,"token a",a);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:65: -> ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
			{
				DebugLocation(275, 68);
				// Scrape.g:275:68: ^( INNER_JOIN TABLE_VARIABLE_REFERENCE[$t] ( ^( TABLE_ALIAS $a) )? boolExpression ( innerJoinStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(INNER_JOIN, "INNER_JOIN"), root_1);

				DebugLocation(275, 81);
				adaptor.AddChild(root_1, (CommonTree)adaptor.Create(TABLE_VARIABLE_REFERENCE, t));
				DebugLocation(275, 110);
				// Scrape.g:275:110: ( ^( TABLE_ALIAS $a) )?
				if (stream_a.HasNext)
				{
					DebugLocation(275, 110);
					// Scrape.g:275:110: ^( TABLE_ALIAS $a)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 112);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_ALIAS, "TABLE_ALIAS"), root_2);

					DebugLocation(275, 125);
					adaptor.AddChild(root_2, stream_a.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_a.Reset();
				DebugLocation(275, 129);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(275, 144);
				// Scrape.g:275:144: ( innerJoinStatement )?
				if (stream_innerJoinStatement.HasNext)
				{
					DebugLocation(275, 144);
					adaptor.AddChild(root_1, stream_innerJoinStatement.NextTree());

				}
				stream_innerJoinStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoinStatement", 42);
			LeaveRule("innerJoinStatement", 42);
			LeaveRule_innerJoinStatement();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoinStatement"); }
		return retval;

	}
	// $ANTLR end "innerJoinStatement"

	partial void EnterRule_tableGenerationClause();
	partial void LeaveRule_tableGenerationClause();
	// $ANTLR start "tableGenerationClause"
	// Scrape.g:278:1: tableGenerationClause : ( downloadPageExpresssion | downloadImageExpression | expandExpression );
	[GrammarRule("tableGenerationClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableGenerationClause()
	{
		EnterRule_tableGenerationClause();
		EnterRule("tableGenerationClause", 43);
		TraceIn("tableGenerationClause", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> downloadPageExpresssion177 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> downloadImageExpression178 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expandExpression179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "tableGenerationClause");
		DebugLocation(278, 1);
		try
		{
			// Scrape.g:279:2: ( downloadPageExpresssion | downloadImageExpression | expandExpression )
			int alt40=3;
			try { DebugEnterDecision(40, false);
			switch (input.LA(1))
			{
			case DOWNLOAD_PAGE:
				{
				alt40 = 1;
				}
				break;
			case DOWNLOAD_IMAGE:
				{
				alt40 = 2;
				}
				break;
			case EXPAND:
				{
				alt40 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:279:4: downloadPageExpresssion
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(279, 4);
				PushFollow(Follow._downloadPageExpresssion_in_tableGenerationClause1595);
				downloadPageExpresssion177=downloadPageExpresssion();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadPageExpresssion177.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:280:4: downloadImageExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._downloadImageExpression_in_tableGenerationClause1600);
				downloadImageExpression178=downloadImageExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, downloadImageExpression178.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:281:4: expandExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._expandExpression_in_tableGenerationClause1605);
				expandExpression179=expandExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expandExpression179.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableGenerationClause", 43);
			LeaveRule("tableGenerationClause", 43);
			LeaveRule_tableGenerationClause();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "tableGenerationClause"); }
		return retval;

	}
	// $ANTLR end "tableGenerationClause"

	partial void EnterRule_innerJoin();
	partial void LeaveRule_innerJoin();
	// $ANTLR start "innerJoin"
	// Scrape.g:284:1: innerJoin : ( JOIN | INNER_JOIN );
	[GrammarRule("innerJoin")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerJoin()
	{
		EnterRule_innerJoin();
		EnterRule("innerJoin", 44);
		TraceIn("innerJoin", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set180 = default(CommonToken);

		CommonTree set180_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerJoin");
		DebugLocation(284, 1);
		try
		{
			// Scrape.g:285:2: ( JOIN | INNER_JOIN )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(285, 2);

			set180=(CommonToken)input.LT(1);
			if (input.LA(1)==INNER_JOIN||input.LA(1)==JOIN)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set180));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerJoin", 44);
			LeaveRule("innerJoin", 44);
			LeaveRule_innerJoin();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "innerJoin"); }
		return retval;

	}
	// $ANTLR end "innerJoin"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// Scrape.g:289:1: selectStatement : ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) );
	[GrammarRule("selectStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 45);
		TraceIn("selectStatement", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SELECT181 = default(CommonToken);
		CommonToken COMMA183 = default(CommonToken);
		CommonToken SELECT185 = default(CommonToken);
		CommonToken ASTERISK186 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs182 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs184 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree SELECT181_tree = default(CommonTree);
		CommonTree COMMA183_tree = default(CommonTree);
		CommonTree SELECT185_tree = default(CommonTree);
		CommonTree ASTERISK186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
		RewriteRuleITokenStream stream_ASTERISK=new RewriteRuleITokenStream(adaptor,"token ASTERISK");
		RewriteRuleSubtreeStream stream_selectArgs=new RewriteRuleSubtreeStream(adaptor,"rule selectArgs");
		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(289, 1);
		try
		{
			// Scrape.g:290:2: ( SELECT ( selectArgs COMMA )* selectArgs -> ^( SELECT ( selectArgs )* ) | SELECT ASTERISK -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) ) )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==SELECT))
			{
				int LA42_2 = input.LA(2);

				if ((LA42_2==ASTERISK))
				{
					alt42 = 2;
				}
				else if ((LA42_2==CASE||LA42_2==COMMAND_VAR||LA42_2==FL||LA42_2==GETDATE||LA42_2==ID||LA42_2==IDENTITY_VAR||LA42_2==INT||LA42_2==NULL||LA42_2==PICK||LA42_2==STRING_LITERAL))
				{
					alt42 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 42, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:290:4: SELECT ( selectArgs COMMA )* selectArgs
				{
				DebugLocation(290, 4);
				SELECT181=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1632); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT181);

				DebugLocation(290, 11);
				// Scrape.g:290:11: ( selectArgs COMMA )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					switch (input.LA(1))
					{
					case PICK:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case FL:
					case INT:
					case NULL:
					case STRING_LITERAL:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case ID:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case COMMAND_VAR:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case IDENTITY_VAR:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case GETDATE:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					case CASE:
						{
						int LA41_2 = input.LA(2);

						if ((EvaluatePredicate(synpred68_Scrape_fragment)))
						{
							alt41 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:290:12: selectArgs COMMA
						{
						DebugLocation(290, 12);
						PushFollow(Follow._selectArgs_in_selectStatement1635);
						selectArgs182=selectArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArgs.Add(selectArgs182.Tree);
						DebugLocation(290, 23);
						COMMA183=(CommonToken)Match(input,COMMA,Follow._COMMA_in_selectStatement1637); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(COMMA183);


						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(290, 31);
				PushFollow(Follow._selectArgs_in_selectStatement1641);
				selectArgs184=selectArgs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArgs.Add(selectArgs184.Tree);


				{
				// AST REWRITE
				// elements: selectArgs, SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:42: -> ^( SELECT ( selectArgs )* )
				{
					DebugLocation(290, 45);
					// Scrape.g:290:45: ^( SELECT ( selectArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 47);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(290, 54);
					// Scrape.g:290:54: ( selectArgs )*
					while ( stream_selectArgs.HasNext )
					{
						DebugLocation(290, 54);
						adaptor.AddChild(root_1, stream_selectArgs.NextTree());

					}
					stream_selectArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:291:4: SELECT ASTERISK
				{
				DebugLocation(291, 4);
				SELECT185=(CommonToken)Match(input,SELECT,Follow._SELECT_in_selectStatement1655); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SELECT.Add(SELECT185);

				DebugLocation(291, 11);
				ASTERISK186=(CommonToken)Match(input,ASTERISK,Follow._ASTERISK_in_selectStatement1657); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ASTERISK.Add(ASTERISK186);



				{
				// AST REWRITE
				// elements: SELECT
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:20: -> ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
				{
					DebugLocation(291, 23);
					// Scrape.g:291:23: ^( SELECT ^( SELECT_ARG SELECT_ALL[$ASTERISK] ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_SELECT.NextNode(), root_1);

					DebugLocation(291, 32);
					// Scrape.g:291:32: ^( SELECT_ARG SELECT_ALL[$ASTERISK] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(291, 34);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_2);

					DebugLocation(291, 45);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(SELECT_ALL, ASTERISK186));

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectStatement", 45);
			LeaveRule("selectStatement", 45);
			LeaveRule_selectStatement();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_selectArgs();
	partial void LeaveRule_selectArgs();
	// $ANTLR start "selectArgs"
	// Scrape.g:295:1: selectArgs : ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) );
	[GrammarRule("selectArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArgs()
	{
		EnterRule_selectArgs();
		EnterRule("selectArgs", 46);
		TraceIn("selectArgs", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement190 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PLUS188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_PLUS=new RewriteRuleITokenStream(adaptor,"token PLUS");
		RewriteRuleSubtreeStream stream_caseStatement=new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "selectArgs");
		DebugLocation(295, 1);
		try
		{
			// Scrape.g:296:2: ( ( selectArg PLUS )* selectArg -> ^( SELECT_ARG ( selectArg )* ) | caseStatement -> ^( SELECT_ARG caseStatement ) )
			int alt44=2;
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==COMMAND_VAR||LA44_1==FL||LA44_1==GETDATE||LA44_1==ID||LA44_1==IDENTITY_VAR||LA44_1==INT||LA44_1==NULL||LA44_1==PICK||LA44_1==STRING_LITERAL))
			{
				alt44 = 1;
			}
			else if ((LA44_1==CASE))
			{
				alt44 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:296:4: ( selectArg PLUS )* selectArg
				{
				DebugLocation(296, 4);
				// Scrape.g:296:4: ( selectArg PLUS )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					try
					{
						alt43 = dfa43.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:296:5: selectArg PLUS
						{
						DebugLocation(296, 5);
						PushFollow(Follow._selectArg_in_selectArgs1683);
						selectArg187=selectArg();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_selectArg.Add(selectArg187.Tree);
						DebugLocation(296, 15);
						PLUS188=(CommonToken)Match(input,PLUS,Follow._PLUS_in_selectArgs1685); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_PLUS.Add(PLUS188);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(296, 22);
				PushFollow(Follow._selectArg_in_selectArgs1689);
				selectArg189=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg189.Tree);


				{
				// AST REWRITE
				// elements: selectArg
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:32: -> ^( SELECT_ARG ( selectArg )* )
				{
					DebugLocation(296, 35);
					// Scrape.g:296:35: ^( SELECT_ARG ( selectArg )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(296, 48);
					// Scrape.g:296:48: ( selectArg )*
					while ( stream_selectArg.HasNext )
					{
						DebugLocation(296, 48);
						adaptor.AddChild(root_1, stream_selectArg.NextTree());

					}
					stream_selectArg.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:297:4: caseStatement
				{
				DebugLocation(297, 4);
				PushFollow(Follow._caseStatement_in_selectArgs1703);
				caseStatement190=caseStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_caseStatement.Add(caseStatement190.Tree);


				{
				// AST REWRITE
				// elements: caseStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:18: -> ^( SELECT_ARG caseStatement )
				{
					DebugLocation(297, 21);
					// Scrape.g:297:21: ^( SELECT_ARG caseStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(297, 23);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ARG, "SELECT_ARG"), root_1);

					DebugLocation(297, 34);
					adaptor.AddChild(root_1, stream_caseStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArgs", 46);
			LeaveRule("selectArgs", 46);
			LeaveRule_selectArgs();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArgs"); }
		return retval;

	}
	// $ANTLR end "selectArgs"

	partial void EnterRule_caseStatement();
	partial void LeaveRule_caseStatement();
	// $ANTLR start "caseStatement"
	// Scrape.g:302:1: caseStatement : ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) );
	[GrammarRule("caseStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseStatement()
	{
		EnterRule_caseStatement();
		EnterRule("caseStatement", 47);
		TraceIn("caseStatement", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CASE191 = default(CommonToken);
		CommonToken ELSE193 = default(CommonToken);
		CommonToken END195 = default(CommonToken);
		CommonToken CASE196 = default(CommonToken);
		CommonToken ELSE199 = default(CommonToken);
		CommonToken END201 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement192 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement198 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CASE191_tree = default(CommonTree);
		CommonTree ELSE193_tree = default(CommonTree);
		CommonTree END195_tree = default(CommonTree);
		CommonTree CASE196_tree = default(CommonTree);
		CommonTree ELSE199_tree = default(CommonTree);
		CommonTree END201_tree = default(CommonTree);
		RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
		RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
		RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
		RewriteRuleSubtreeStream stream_whenLiteralStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenLiteralStatement");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		RewriteRuleSubtreeStream stream_whenBoolStatement=new RewriteRuleSubtreeStream(adaptor,"rule whenBoolStatement");
		try { DebugEnterRule(GrammarFileName, "caseStatement");
		DebugLocation(302, 1);
		try
		{
			// Scrape.g:303:2: ( CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? ) | CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_1 = input.LA(1);

			if ((LA49_1==CASE))
			{
				int LA49_2 = input.LA(2);

				if ((LA49_2==WHEN))
				{
					alt49 = 1;
				}
				else if ((LA49_2==COMMAND_VAR||LA49_2==FL||LA49_2==GETDATE||LA49_2==ID||LA49_2==IDENTITY_VAR||LA49_2==INT||LA49_2==NULL||LA49_2==PICK||LA49_2==STRING_LITERAL))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:303:4: CASE ( whenBoolStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(303, 4);
				CASE191=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1725); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE191);

				DebugLocation(303, 9);
				// Scrape.g:303:9: ( whenBoolStatement )+
				int cnt45=0;
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_1 = input.LA(1);

					if ((LA45_1==WHEN))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch (alt45)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:303:9: whenBoolStatement
						{
						DebugLocation(303, 9);
						PushFollow(Follow._whenBoolStatement_in_caseStatement1727);
						whenBoolStatement192=whenBoolStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenBoolStatement.Add(whenBoolStatement192.Tree);

						}
						break;

					default:
						if (cnt45 >= 1)
							goto loop45;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee45 = new EarlyExitException( 45, input );
						DebugRecognitionException(eee45);
						throw eee45;
					}
					cnt45++;
				}
				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(303, 28);
				// Scrape.g:303:28: ( ELSE caseExpression )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ELSE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:303:29: ELSE caseExpression
					{
					DebugLocation(303, 29);
					ELSE193=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1731); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE193);

					DebugLocation(303, 34);
					PushFollow(Follow._caseExpression_in_caseStatement1733);
					caseExpression194=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression194.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(303, 51);
				END195=(CommonToken)Match(input,END,Follow._END_in_caseStatement1737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END195);



				{
				// AST REWRITE
				// elements: caseExpression, whenBoolStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:55: -> ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
				{
					DebugLocation(303, 58);
					// Scrape.g:303:58: ^( CASE_BOOL ( whenBoolStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(303, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_BOOL, "CASE_BOOL"), root_1);

					DebugLocation(303, 70);
					if (!(stream_whenBoolStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenBoolStatement.HasNext )
					{
						DebugLocation(303, 70);
						adaptor.AddChild(root_1, stream_whenBoolStatement.NextTree());

					}
					stream_whenBoolStatement.Reset();
					DebugLocation(303, 89);
					// Scrape.g:303:89: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(303, 89);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:304:4: CASE selectArg ( whenLiteralStatement )+ ( ELSE caseExpression )? END
				{
				DebugLocation(304, 4);
				CASE196=(CommonToken)Match(input,CASE,Follow._CASE_in_caseStatement1754); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CASE.Add(CASE196);

				DebugLocation(304, 9);
				PushFollow(Follow._selectArg_in_caseStatement1756);
				selectArg197=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_selectArg.Add(selectArg197.Tree);
				DebugLocation(304, 19);
				// Scrape.g:304:19: ( whenLiteralStatement )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_1 = input.LA(1);

					if ((LA47_1==WHEN))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:304:19: whenLiteralStatement
						{
						DebugLocation(304, 19);
						PushFollow(Follow._whenLiteralStatement_in_caseStatement1758);
						whenLiteralStatement198=whenLiteralStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_whenLiteralStatement.Add(whenLiteralStatement198.Tree);

						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }

				DebugLocation(304, 41);
				// Scrape.g:304:41: ( ELSE caseExpression )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==ELSE))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:304:42: ELSE caseExpression
					{
					DebugLocation(304, 42);
					ELSE199=(CommonToken)Match(input,ELSE,Follow._ELSE_in_caseStatement1762); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_ELSE.Add(ELSE199);

					DebugLocation(304, 47);
					PushFollow(Follow._caseExpression_in_caseStatement1764);
					caseExpression200=caseExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_caseExpression.Add(caseExpression200.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(304, 64);
				END201=(CommonToken)Match(input,END,Follow._END_in_caseStatement1768); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_END.Add(END201);



				{
				// AST REWRITE
				// elements: caseExpression, selectArg, whenLiteralStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:68: -> ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
				{
					DebugLocation(304, 71);
					// Scrape.g:304:71: ^( CASE_VAR selectArg ( whenLiteralStatement )+ ( caseExpression )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(304, 73);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_VAR, "CASE_VAR"), root_1);

					DebugLocation(304, 82);
					adaptor.AddChild(root_1, stream_selectArg.NextTree());
					DebugLocation(304, 92);
					if (!(stream_whenLiteralStatement.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_whenLiteralStatement.HasNext )
					{
						DebugLocation(304, 92);
						adaptor.AddChild(root_1, stream_whenLiteralStatement.NextTree());

					}
					stream_whenLiteralStatement.Reset();
					DebugLocation(304, 114);
					// Scrape.g:304:114: ( caseExpression )?
					if (stream_caseExpression.HasNext)
					{
						DebugLocation(304, 114);
						adaptor.AddChild(root_1, stream_caseExpression.NextTree());

					}
					stream_caseExpression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseStatement", 47);
			LeaveRule("caseStatement", 47);
			LeaveRule_caseStatement();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "caseStatement"); }
		return retval;

	}
	// $ANTLR end "caseStatement"

	partial void EnterRule_caseExpression();
	partial void LeaveRule_caseExpression();
	// $ANTLR start "caseExpression"
	// Scrape.g:307:1: caseExpression : selectArg -> ^( CASE_EXPRESSION selectArg ) ;
	[GrammarRule("caseExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression()
	{
		EnterRule_caseExpression();
		EnterRule("caseExpression", 48);
		TraceIn("caseExpression", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg202 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		RewriteRuleSubtreeStream stream_selectArg=new RewriteRuleSubtreeStream(adaptor,"rule selectArg");
		try { DebugEnterRule(GrammarFileName, "caseExpression");
		DebugLocation(307, 1);
		try
		{
			// Scrape.g:308:2: ( selectArg -> ^( CASE_EXPRESSION selectArg ) )
			DebugEnterAlt(1);
			// Scrape.g:308:4: selectArg
			{
			DebugLocation(308, 4);
			PushFollow(Follow._selectArg_in_caseExpression1793);
			selectArg202=selectArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selectArg.Add(selectArg202.Tree);


			{
			// AST REWRITE
			// elements: selectArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 308:14: -> ^( CASE_EXPRESSION selectArg )
			{
				DebugLocation(308, 17);
				// Scrape.g:308:17: ^( CASE_EXPRESSION selectArg )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(308, 19);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CASE_EXPRESSION, "CASE_EXPRESSION"), root_1);

				DebugLocation(308, 35);
				adaptor.AddChild(root_1, stream_selectArg.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("caseExpression", 48);
			LeaveRule("caseExpression", 48);
			LeaveRule_caseExpression();
		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpression"); }
		return retval;

	}
	// $ANTLR end "caseExpression"

	partial void EnterRule_whenLiteralStatement();
	partial void LeaveRule_whenLiteralStatement();
	// $ANTLR start "whenLiteralStatement"
	// Scrape.g:311:1: whenLiteralStatement : WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) ;
	[GrammarRule("whenLiteralStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenLiteralStatement()
	{
		EnterRule_whenLiteralStatement();
		EnterRule("whenLiteralStatement", 49);
		TraceIn("whenLiteralStatement", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN203 = default(CommonToken);
		CommonToken THEN205 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal204 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression206 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN203_tree = default(CommonTree);
		CommonTree THEN205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "whenLiteralStatement");
		DebugLocation(311, 1);
		try
		{
			// Scrape.g:312:2: ( WHEN literal THEN caseExpression -> ^( WHEN_LITERAL_STATEMENT literal caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:312:4: WHEN literal THEN caseExpression
			{
			DebugLocation(312, 4);
			WHEN203=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenLiteralStatement1812); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN203);

			DebugLocation(312, 9);
			PushFollow(Follow._literal_in_whenLiteralStatement1814);
			literal204=literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_literal.Add(literal204.Tree);
			DebugLocation(312, 17);
			THEN205=(CommonToken)Match(input,THEN,Follow._THEN_in_whenLiteralStatement1816); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN205);

			DebugLocation(312, 22);
			PushFollow(Follow._caseExpression_in_whenLiteralStatement1818);
			caseExpression206=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression206.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, literal
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 312:37: -> ^( WHEN_LITERAL_STATEMENT literal caseExpression )
			{
				DebugLocation(312, 40);
				// Scrape.g:312:40: ^( WHEN_LITERAL_STATEMENT literal caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(312, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_LITERAL_STATEMENT, "WHEN_LITERAL_STATEMENT"), root_1);

				DebugLocation(312, 65);
				adaptor.AddChild(root_1, stream_literal.NextTree());
				DebugLocation(312, 73);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenLiteralStatement", 49);
			LeaveRule("whenLiteralStatement", 49);
			LeaveRule_whenLiteralStatement();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "whenLiteralStatement"); }
		return retval;

	}
	// $ANTLR end "whenLiteralStatement"

	partial void EnterRule_whenBoolStatement();
	partial void LeaveRule_whenBoolStatement();
	// $ANTLR start "whenBoolStatement"
	// Scrape.g:315:1: whenBoolStatement : WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) ;
	[GrammarRule("whenBoolStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> whenBoolStatement()
	{
		EnterRule_whenBoolStatement();
		EnterRule("whenBoolStatement", 50);
		TraceIn("whenBoolStatement", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WHEN207 = default(CommonToken);
		CommonToken THEN209 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression208 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> caseExpression210 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WHEN207_tree = default(CommonTree);
		CommonTree THEN209_tree = default(CommonTree);
		RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
		RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
		RewriteRuleSubtreeStream stream_boolExpression=new RewriteRuleSubtreeStream(adaptor,"rule boolExpression");
		RewriteRuleSubtreeStream stream_caseExpression=new RewriteRuleSubtreeStream(adaptor,"rule caseExpression");
		try { DebugEnterRule(GrammarFileName, "whenBoolStatement");
		DebugLocation(315, 1);
		try
		{
			// Scrape.g:316:2: ( WHEN boolExpression THEN caseExpression -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression ) )
			DebugEnterAlt(1);
			// Scrape.g:316:4: WHEN boolExpression THEN caseExpression
			{
			DebugLocation(316, 4);
			WHEN207=(CommonToken)Match(input,WHEN,Follow._WHEN_in_whenBoolStatement1839); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WHEN.Add(WHEN207);

			DebugLocation(316, 9);
			PushFollow(Follow._boolExpression_in_whenBoolStatement1841);
			boolExpression208=boolExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_boolExpression.Add(boolExpression208.Tree);
			DebugLocation(316, 24);
			THEN209=(CommonToken)Match(input,THEN,Follow._THEN_in_whenBoolStatement1843); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_THEN.Add(THEN209);

			DebugLocation(316, 29);
			PushFollow(Follow._caseExpression_in_whenBoolStatement1845);
			caseExpression210=caseExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_caseExpression.Add(caseExpression210.Tree);


			{
			// AST REWRITE
			// elements: caseExpression, boolExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:44: -> ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
			{
				DebugLocation(316, 47);
				// Scrape.g:316:47: ^( WHEN_BOOL_STATEMENT boolExpression caseExpression )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(WHEN_BOOL_STATEMENT, "WHEN_BOOL_STATEMENT"), root_1);

				DebugLocation(316, 69);
				adaptor.AddChild(root_1, stream_boolExpression.NextTree());
				DebugLocation(316, 84);
				adaptor.AddChild(root_1, stream_caseExpression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("whenBoolStatement", 50);
			LeaveRule("whenBoolStatement", 50);
			LeaveRule_whenBoolStatement();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "whenBoolStatement"); }
		return retval;

	}
	// $ANTLR end "whenBoolStatement"

	partial void EnterRule_boolExpression();
	partial void LeaveRule_boolExpression();
	// $ANTLR start "boolExpression"
	// Scrape.g:319:1: boolExpression : andExpression ( OR ^ andExpression )* ;
	[GrammarRule("boolExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression()
	{
		EnterRule_boolExpression();
		EnterRule("boolExpression", 51);
		TraceIn("boolExpression", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken OR212 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression211 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree OR212_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolExpression");
		DebugLocation(319, 1);
		try
		{
			// Scrape.g:320:2: ( andExpression ( OR ^ andExpression )* )
			DebugEnterAlt(1);
			// Scrape.g:320:4: andExpression ( OR ^ andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(320, 4);
			PushFollow(Follow._andExpression_in_boolExpression1866);
			andExpression211=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression211.Tree);
			DebugLocation(320, 18);
			// Scrape.g:320:18: ( OR ^ andExpression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==OR))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:320:19: OR ^ andExpression
					{
					DebugLocation(320, 21);
					OR212=(CommonToken)Match(input,OR,Follow._OR_in_boolExpression1869); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OR212_tree = (CommonTree)adaptor.Create(OR212);
					root_0 = (CommonTree)adaptor.BecomeRoot(OR212_tree, root_0);
					}
					DebugLocation(320, 23);
					PushFollow(Follow._andExpression_in_boolExpression1872);
					andExpression213=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression213.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolExpression", 51);
			LeaveRule("boolExpression", 51);
			LeaveRule_boolExpression();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "boolExpression"); }
		return retval;

	}
	// $ANTLR end "boolExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Scrape.g:323:1: andExpression : boolTerm ( AND ^ boolTerm )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 52);
		TraceIn("andExpression", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken AND215 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm214 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm216 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree AND215_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(323, 1);
		try
		{
			// Scrape.g:324:2: ( boolTerm ( AND ^ boolTerm )* )
			DebugEnterAlt(1);
			// Scrape.g:324:5: boolTerm ( AND ^ boolTerm )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(324, 5);
			PushFollow(Follow._boolTerm_in_andExpression1886);
			boolTerm214=boolTerm();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm214.Tree);
			DebugLocation(324, 14);
			// Scrape.g:324:14: ( AND ^ boolTerm )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==AND))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:324:15: AND ^ boolTerm
					{
					DebugLocation(324, 18);
					AND215=(CommonToken)Match(input,AND,Follow._AND_in_andExpression1889); if (state.failed) return retval;
					if (state.backtracking == 0) {
					AND215_tree = (CommonTree)adaptor.Create(AND215);
					root_0 = (CommonTree)adaptor.BecomeRoot(AND215_tree, root_0);
					}
					DebugLocation(324, 20);
					PushFollow(Follow._boolTerm_in_andExpression1892);
					boolTerm216=boolTerm();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, boolTerm216.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 52);
			LeaveRule("andExpression", 52);
			LeaveRule_andExpression();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_boolTerm();
	partial void LeaveRule_boolTerm();
	// $ANTLR start "boolTerm"
	// Scrape.g:327:1: boolTerm : ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !);
	[GrammarRule("boolTerm")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolTerm()
	{
		EnterRule_boolTerm();
		EnterRule("boolTerm", 53);
		TraceIn("boolTerm", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken t = default(CommonToken);
		CommonToken NODES217 = default(CommonToken);
		CommonToken EQUALS218 = default(CommonToken);
		CommonToken STRING_LITERAL219 = default(CommonToken);
		CommonToken DOT220 = default(CommonToken);
		CommonToken NODES221 = default(CommonToken);
		CommonToken EQUALS222 = default(CommonToken);
		CommonToken STRING_LITERAL223 = default(CommonToken);
		CommonToken OPENPAREN227 = default(CommonToken);
		CommonToken CLOSEPAREN229 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator225 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectArg226 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> boolExpression228 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree t_tree = default(CommonTree);
		CommonTree NODES217_tree = default(CommonTree);
		CommonTree EQUALS218_tree = default(CommonTree);
		CommonTree STRING_LITERAL219_tree = default(CommonTree);
		CommonTree DOT220_tree = default(CommonTree);
		CommonTree NODES221_tree = default(CommonTree);
		CommonTree EQUALS222_tree = default(CommonTree);
		CommonTree STRING_LITERAL223_tree = default(CommonTree);
		CommonTree OPENPAREN227_tree = default(CommonTree);
		CommonTree CLOSEPAREN229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NODES=new RewriteRuleITokenStream(adaptor,"token NODES");
		RewriteRuleITokenStream stream_EQUALS=new RewriteRuleITokenStream(adaptor,"token EQUALS");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_DOT=new RewriteRuleITokenStream(adaptor,"token DOT");
		try { DebugEnterRule(GrammarFileName, "boolTerm");
		DebugLocation(327, 1);
		try
		{
			// Scrape.g:328:2: ( NODES EQUALS STRING_LITERAL -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL ) |t= ID DOT NODES EQUALS STRING_LITERAL -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL ) | selectArg ( boolOperator ^ selectArg )? | OPENPAREN ! boolExpression CLOSEPAREN !)
			int alt53=4;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case NODES:
				{
				alt53 = 1;
				}
				break;
			case ID:
				{
				int LA53_2 = input.LA(2);

				if ((LA53_2==DOT))
				{
					int LA53_3 = input.LA(3);

					if ((LA53_3==NODES))
					{
						alt53 = 2;
					}
					else if ((LA53_3==ID))
					{
						alt53 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 53, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA53_2==EOF||LA53_2==AND||(LA53_2>=CLOSEBRACE && LA53_2<=CLOSEPAREN)||LA53_2==COMMAND_VAR||LA53_2==CREATE||LA53_2==EACH||(LA53_2>=EQUALS && LA53_2<=EXEC)||(LA53_2>=GREATERTHAN && LA53_2<=GREATERTHANEQUAL)||LA53_2==ID||LA53_2==IDENTITY_VAR||(LA53_2>=INNER_JOIN && LA53_2<=INSERT_INTO)||LA53_2==INSERT_OVERWRITE||LA53_2==JOIN||(LA53_2>=LESSTHAN && LA53_2<=LESSTHANEQUAL)||LA53_2==LIKE||(LA53_2>=NOTEQUAL && LA53_2<=NOTLIKE)||LA53_2==OR||LA53_2==SELECT||LA53_2==THEN||(LA53_2>=TRUNCATE && LA53_2<=VAR)||(LA53_2>=WHERE && LA53_2<=WHILE)))
				{
					alt53 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
			case FL:
			case GETDATE:
			case IDENTITY_VAR:
			case INT:
			case NULL:
			case PICK:
			case STRING_LITERAL:
				{
				alt53 = 3;
				}
				break;
			case OPENPAREN:
				{
				alt53 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:328:4: NODES EQUALS STRING_LITERAL
				{
				DebugLocation(328, 4);
				NODES217=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1907); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES217);

				DebugLocation(328, 10);
				EQUALS218=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1909); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS218);

				DebugLocation(328, 17);
				STRING_LITERAL219=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1911); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL219);



				{
				// AST REWRITE
				// elements: STRING_LITERAL, NODES
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:32: -> ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
				{
					DebugLocation(328, 35);
					// Scrape.g:328:35: ^( NODES SELECT_ID[$NODES] STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(328, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(328, 43);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(SELECT_ID, NODES217));
					DebugLocation(328, 61);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:329:4: t= ID DOT NODES EQUALS STRING_LITERAL
				{
				DebugLocation(329, 5);
				t=(CommonToken)Match(input,ID,Follow._ID_in_boolTerm1929); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(t);

				DebugLocation(329, 9);
				DOT220=(CommonToken)Match(input,DOT,Follow._DOT_in_boolTerm1931); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DOT.Add(DOT220);

				DebugLocation(329, 13);
				NODES221=(CommonToken)Match(input,NODES,Follow._NODES_in_boolTerm1933); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_NODES.Add(NODES221);

				DebugLocation(329, 19);
				EQUALS222=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_boolTerm1935); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_EQUALS.Add(EQUALS222);

				DebugLocation(329, 26);
				STRING_LITERAL223=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_boolTerm1937); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL223);



				{
				// AST REWRITE
				// elements: NODES, STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:41: -> ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
				{
					DebugLocation(329, 44);
					// Scrape.g:329:44: ^( NODES ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] ) STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_NODES.NextNode(), root_1);

					DebugLocation(329, 52);
					// Scrape.g:329:52: ^( TABLE_MEMBER_REFERENCE ROW_REFERENCE[$t] MEMBER_REFERENCE[$NODES] )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 54);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_MEMBER_REFERENCE, "TABLE_MEMBER_REFERENCE"), root_2);

					DebugLocation(329, 77);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(ROW_REFERENCE, t));
					DebugLocation(329, 95);
					adaptor.AddChild(root_2, (CommonTree)adaptor.Create(MEMBER_REFERENCE, NODES221));

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(329, 121);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:330:4: selectArg ( boolOperator ^ selectArg )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(330, 4);
				PushFollow(Follow._selectArg_in_boolTerm1960);
				selectArg224=selectArg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg224.Tree);
				DebugLocation(330, 14);
				// Scrape.g:330:14: ( boolOperator ^ selectArg )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_1 = input.LA(1);

				if ((LA52_1==EQUALS||(LA52_1>=GREATERTHAN && LA52_1<=GREATERTHANEQUAL)||(LA52_1>=LESSTHAN && LA52_1<=LESSTHANEQUAL)||LA52_1==LIKE||(LA52_1>=NOTEQUAL && LA52_1<=NOTLIKE)))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:330:15: boolOperator ^ selectArg
					{
					DebugLocation(330, 27);
					PushFollow(Follow._boolOperator_in_boolTerm1963);
					boolOperator225=boolOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(boolOperator225.Tree, root_0);
					DebugLocation(330, 29);
					PushFollow(Follow._selectArg_in_boolTerm1966);
					selectArg226=selectArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selectArg226.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(52); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:331:4: OPENPAREN ! boolExpression CLOSEPAREN !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(331, 13);
				OPENPAREN227=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_boolTerm1974); if (state.failed) return retval;
				DebugLocation(331, 15);
				PushFollow(Follow._boolExpression_in_boolTerm1977);
				boolExpression228=boolExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, boolExpression228.Tree);
				DebugLocation(331, 40);
				CLOSEPAREN229=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_boolTerm1979); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolTerm", 53);
			LeaveRule("boolTerm", 53);
			LeaveRule_boolTerm();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "boolTerm"); }
		return retval;

	}
	// $ANTLR end "boolTerm"

	partial void EnterRule_boolOperator();
	partial void LeaveRule_boolOperator();
	// $ANTLR start "boolOperator"
	// Scrape.g:334:1: boolOperator : ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE );
	[GrammarRule("boolOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> boolOperator()
	{
		EnterRule_boolOperator();
		EnterRule("boolOperator", 54);
		TraceIn("boolOperator", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set230 = default(CommonToken);

		CommonTree set230_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "boolOperator");
		DebugLocation(334, 1);
		try
		{
			// Scrape.g:335:2: ( EQUALS | LESSTHAN | LESSTHANEQUAL | GREATERTHAN | GREATERTHANEQUAL | NOTEQUAL | LIKE | NOTLIKE )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(335, 2);

			set230=(CommonToken)input.LT(1);
			if (input.LA(1)==EQUALS||(input.LA(1)>=GREATERTHAN && input.LA(1)<=GREATERTHANEQUAL)||(input.LA(1)>=LESSTHAN && input.LA(1)<=LESSTHANEQUAL)||input.LA(1)==LIKE||(input.LA(1)>=NOTEQUAL && input.LA(1)<=NOTLIKE))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set230));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolOperator", 54);
			LeaveRule("boolOperator", 54);
			LeaveRule_boolOperator();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "boolOperator"); }
		return retval;

	}
	// $ANTLR end "boolOperator"

	partial void EnterRule_selectArg();
	partial void LeaveRule_selectArg();
	// $ANTLR start "selectArg"
	// Scrape.g:345:1: selectArg : ( pickStatement | literal | selectVariable | primitiveFunction );
	[GrammarRule("selectArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectArg()
	{
		EnterRule_selectArg();
		EnterRule("selectArg", 55);
		TraceIn("selectArg", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement231 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal232 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable233 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction234 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "selectArg");
		DebugLocation(345, 1);
		try
		{
			// Scrape.g:346:2: ( pickStatement | literal | selectVariable | primitiveFunction )
			int alt54=4;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case PICK:
				{
				alt54 = 1;
				}
				break;
			case FL:
			case INT:
			case NULL:
			case STRING_LITERAL:
				{
				alt54 = 2;
				}
				break;
			case COMMAND_VAR:
			case ID:
			case IDENTITY_VAR:
				{
				alt54 = 3;
				}
				break;
			case GETDATE:
				{
				alt54 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:346:4: pickStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(346, 4);
				PushFollow(Follow._pickStatement_in_selectArg2037);
				pickStatement231=pickStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pickStatement231.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:347:4: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(347, 4);
				PushFollow(Follow._literal_in_selectArg2042);
				literal232=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal232.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:348:4: selectVariable
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(348, 4);
				PushFollow(Follow._selectVariable_in_selectArg2047);
				selectVariable233=selectVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selectVariable233.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:349:4: primitiveFunction
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 4);
				PushFollow(Follow._primitiveFunction_in_selectArg2052);
				primitiveFunction234=primitiveFunction();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveFunction234.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectArg", 55);
			LeaveRule("selectArg", 55);
			LeaveRule_selectArg();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "selectArg"); }
		return retval;

	}
	// $ANTLR end "selectArg"

	partial void EnterRule_primitiveFunction();
	partial void LeaveRule_primitiveFunction();
	// $ANTLR start "primitiveFunction"
	// Scrape.g:352:1: primitiveFunction : GETDATE ^ OPENPAREN ! CLOSEPAREN !;
	[GrammarRule("primitiveFunction")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primitiveFunction()
	{
		EnterRule_primitiveFunction();
		EnterRule("primitiveFunction", 56);
		TraceIn("primitiveFunction", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken GETDATE235 = default(CommonToken);
		CommonToken OPENPAREN236 = default(CommonToken);
		CommonToken CLOSEPAREN237 = default(CommonToken);

		CommonTree GETDATE235_tree = default(CommonTree);
		CommonTree OPENPAREN236_tree = default(CommonTree);
		CommonTree CLOSEPAREN237_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveFunction");
		DebugLocation(352, 1);
		try
		{
			// Scrape.g:353:2: ( GETDATE ^ OPENPAREN ! CLOSEPAREN !)
			DebugEnterAlt(1);
			// Scrape.g:353:4: GETDATE ^ OPENPAREN ! CLOSEPAREN !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 11);
			GETDATE235=(CommonToken)Match(input,GETDATE,Follow._GETDATE_in_primitiveFunction2063); if (state.failed) return retval;
			if (state.backtracking == 0) {
			GETDATE235_tree = (CommonTree)adaptor.Create(GETDATE235);
			root_0 = (CommonTree)adaptor.BecomeRoot(GETDATE235_tree, root_0);
			}
			DebugLocation(353, 22);
			OPENPAREN236=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_primitiveFunction2066); if (state.failed) return retval;
			DebugLocation(353, 34);
			CLOSEPAREN237=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_primitiveFunction2069); if (state.failed) return retval;

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveFunction", 56);
			LeaveRule("primitiveFunction", 56);
			LeaveRule_primitiveFunction();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "primitiveFunction"); }
		return retval;

	}
	// $ANTLR end "primitiveFunction"

	partial void EnterRule_selectVariable();
	partial void LeaveRule_selectVariable();
	// $ANTLR start "selectVariable"
	// Scrape.g:356:1: selectVariable : ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference );
	[GrammarRule("selectVariable")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selectVariable()
	{
		EnterRule_selectVariable();
		EnterRule("selectVariable", 57);
		TraceIn("selectVariable", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID238 = default(CommonToken);
		CommonToken COMMAND_VAR239 = default(CommonToken);
		CommonToken IDENTITY_VAR240 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableMemberReference241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID238_tree = default(CommonTree);
		CommonTree COMMAND_VAR239_tree = default(CommonTree);
		CommonTree IDENTITY_VAR240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		try { DebugEnterRule(GrammarFileName, "selectVariable");
		DebugLocation(356, 1);
		try
		{
			// Scrape.g:357:2: ( ID -> ^( SELECT_ID[$ID] ) | COMMAND_VAR | IDENTITY_VAR | tableMemberReference )
			int alt55=4;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case ID:
				{
				int LA55_2 = input.LA(2);

				if ((LA55_2==DOT))
				{
					alt55 = 4;
				}
				else if ((LA55_2==EOF||LA55_2==AND||(LA55_2>=CLOSEBRACE && LA55_2<=COMMAND_VAR)||LA55_2==CREATE||(LA55_2>=EACH && LA55_2<=EXEC)||LA55_2==FROM||(LA55_2>=GREATERTHAN && LA55_2<=GREATERTHANEQUAL)||LA55_2==ID||LA55_2==IDENTITY_VAR||(LA55_2>=INNER_JOIN && LA55_2<=INSERT_INTO)||LA55_2==INSERT_OVERWRITE||LA55_2==JOIN||(LA55_2>=LESSTHAN && LA55_2<=LESSTHANEQUAL)||LA55_2==LIKE||(LA55_2>=NOTEQUAL && LA55_2<=NOTLIKE)||LA55_2==OR||LA55_2==PLUS||LA55_2==SELECT||LA55_2==THEN||(LA55_2>=TRUNCATE && LA55_2<=VAR)||LA55_2==WHEN||(LA55_2>=WHERE && LA55_2<=WHILE)))
				{
					alt55 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case COMMAND_VAR:
				{
				alt55 = 2;
				}
				break;
			case IDENTITY_VAR:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:357:4: ID
				{
				DebugLocation(357, 4);
				ID238=(CommonToken)Match(input,ID,Follow._ID_in_selectVariable2081); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID238);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:7: -> ^( SELECT_ID[$ID] )
				{
					DebugLocation(357, 10);
					// Scrape.g:357:10: ^( SELECT_ID[$ID] )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 12);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(SELECT_ID, ID238), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:358:4: COMMAND_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(358, 4);
				COMMAND_VAR239=(CommonToken)Match(input,COMMAND_VAR,Follow._COMMAND_VAR_in_selectVariable2093); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMAND_VAR239_tree = (CommonTree)adaptor.Create(COMMAND_VAR239);
				adaptor.AddChild(root_0, COMMAND_VAR239_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:359:4: IDENTITY_VAR
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(359, 4);
				IDENTITY_VAR240=(CommonToken)Match(input,IDENTITY_VAR,Follow._IDENTITY_VAR_in_selectVariable2098); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTITY_VAR240_tree = (CommonTree)adaptor.Create(IDENTITY_VAR240);
				adaptor.AddChild(root_0, IDENTITY_VAR240_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Scrape.g:360:4: tableMemberReference
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(360, 4);
				PushFollow(Follow._tableMemberReference_in_selectVariable2103);
				tableMemberReference241=tableMemberReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, tableMemberReference241.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selectVariable", 57);
			LeaveRule("selectVariable", 57);
			LeaveRule_selectVariable();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "selectVariable"); }
		return retval;

	}
	// $ANTLR end "selectVariable"

	partial void EnterRule_pickStatement();
	partial void LeaveRule_pickStatement();
	// $ANTLR start "pickStatement"
	// Scrape.g:363:1: pickStatement : PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) ;
	[GrammarRule("pickStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> pickStatement()
	{
		EnterRule_pickStatement();
		EnterRule("pickStatement", 58);
		TraceIn("pickStatement", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PICK242 = default(CommonToken);
		CommonToken STRING_LITERAL243 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement244 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement245 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree PICK242_tree = default(CommonTree);
		CommonTree STRING_LITERAL243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_PICK=new RewriteRuleITokenStream(adaptor,"token PICK");
		RewriteRuleSubtreeStream stream_matchStatement=new RewriteRuleSubtreeStream(adaptor,"rule matchStatement");
		RewriteRuleSubtreeStream stream_takeStatement=new RewriteRuleSubtreeStream(adaptor,"rule takeStatement");
		try { DebugEnterRule(GrammarFileName, "pickStatement");
		DebugLocation(363, 1);
		try
		{
			// Scrape.g:364:2: ( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:364:4: PICK STRING_LITERAL ( takeStatement )? ( matchStatement )*
			{
			DebugLocation(364, 4);
			PICK242=(CommonToken)Match(input,PICK,Follow._PICK_in_pickStatement2115); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_PICK.Add(PICK242);

			DebugLocation(364, 9);
			STRING_LITERAL243=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_pickStatement2117); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL243);

			DebugLocation(364, 24);
			// Scrape.g:364:24: ( takeStatement )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==TAKE))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:364:24: takeStatement
				{
				DebugLocation(364, 24);
				PushFollow(Follow._takeStatement_in_pickStatement2119);
				takeStatement244=takeStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_takeStatement.Add(takeStatement244.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(364, 39);
			// Scrape.g:364:39: ( matchStatement )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==MATCH))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:364:39: matchStatement
					{
					DebugLocation(364, 39);
					PushFollow(Follow._matchStatement_in_pickStatement2122);
					matchStatement245=matchStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_matchStatement.Add(matchStatement245.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, PICK, takeStatement, matchStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 364:55: -> ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
			{
				DebugLocation(364, 58);
				// Scrape.g:364:58: ^( PICK STRING_LITERAL ( takeStatement )? ( matchStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(364, 60);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_PICK.NextNode(), root_1);

				DebugLocation(364, 65);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(364, 80);
				// Scrape.g:364:80: ( takeStatement )?
				if (stream_takeStatement.HasNext)
				{
					DebugLocation(364, 80);
					adaptor.AddChild(root_1, stream_takeStatement.NextTree());

				}
				stream_takeStatement.Reset();
				DebugLocation(364, 95);
				// Scrape.g:364:95: ( matchStatement )*
				while ( stream_matchStatement.HasNext )
				{
					DebugLocation(364, 95);
					adaptor.AddChild(root_1, stream_matchStatement.NextTree());

				}
				stream_matchStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pickStatement", 58);
			LeaveRule("pickStatement", 58);
			LeaveRule_pickStatement();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "pickStatement"); }
		return retval;

	}
	// $ANTLR end "pickStatement"

	partial void EnterRule_takeStatement();
	partial void LeaveRule_takeStatement();
	// $ANTLR start "takeStatement"
	// Scrape.g:367:1: takeStatement : ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) );
	[GrammarRule("takeStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> takeStatement()
	{
		EnterRule_takeStatement();
		EnterRule("takeStatement", 59);
		TraceIn("takeStatement", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken TAKE246 = default(CommonToken);
		CommonToken ATTRIBUTE247 = default(CommonToken);
		CommonToken STRING_LITERAL248 = default(CommonToken);
		CommonToken TAKE249 = default(CommonToken);
		CommonToken TEXT250 = default(CommonToken);
		CommonToken TAKE251 = default(CommonToken);
		CommonToken HTML252 = default(CommonToken);

		CommonTree TAKE246_tree = default(CommonTree);
		CommonTree ATTRIBUTE247_tree = default(CommonTree);
		CommonTree STRING_LITERAL248_tree = default(CommonTree);
		CommonTree TAKE249_tree = default(CommonTree);
		CommonTree TEXT250_tree = default(CommonTree);
		CommonTree TAKE251_tree = default(CommonTree);
		CommonTree HTML252_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_TAKE=new RewriteRuleITokenStream(adaptor,"token TAKE");
		RewriteRuleITokenStream stream_HTML=new RewriteRuleITokenStream(adaptor,"token HTML");
		RewriteRuleITokenStream stream_TEXT=new RewriteRuleITokenStream(adaptor,"token TEXT");
		RewriteRuleITokenStream stream_ATTRIBUTE=new RewriteRuleITokenStream(adaptor,"token ATTRIBUTE");
		try { DebugEnterRule(GrammarFileName, "takeStatement");
		DebugLocation(367, 1);
		try
		{
			// Scrape.g:368:2: ( TAKE ATTRIBUTE STRING_LITERAL -> ^( TAKE_ATTRIBUTE STRING_LITERAL ) | TAKE TEXT -> ^( TAKE_TEXT ) | TAKE HTML -> ^( TAKE_HTML ) )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==TAKE))
			{
				switch (input.LA(2))
				{
				case ATTRIBUTE:
					{
					alt58 = 1;
					}
					break;
				case TEXT:
					{
					alt58 = 2;
					}
					break;
				case HTML:
					{
					alt58 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 58, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:368:4: TAKE ATTRIBUTE STRING_LITERAL
				{
				DebugLocation(368, 4);
				TAKE246=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2149); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE246);

				DebugLocation(368, 9);
				ATTRIBUTE247=(CommonToken)Match(input,ATTRIBUTE,Follow._ATTRIBUTE_in_takeStatement2151); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ATTRIBUTE.Add(ATTRIBUTE247);

				DebugLocation(368, 19);
				STRING_LITERAL248=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_takeStatement2153); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL248);



				{
				// AST REWRITE
				// elements: STRING_LITERAL
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 368:34: -> ^( TAKE_ATTRIBUTE STRING_LITERAL )
				{
					DebugLocation(368, 37);
					// Scrape.g:368:37: ^( TAKE_ATTRIBUTE STRING_LITERAL )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(368, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_ATTRIBUTE, "TAKE_ATTRIBUTE"), root_1);

					DebugLocation(368, 54);
					adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:369:4: TAKE TEXT
				{
				DebugLocation(369, 4);
				TAKE249=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2166); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE249);

				DebugLocation(369, 9);
				TEXT250=(CommonToken)Match(input,TEXT,Follow._TEXT_in_takeStatement2168); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TEXT.Add(TEXT250);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 369:14: -> ^( TAKE_TEXT )
				{
					DebugLocation(369, 17);
					// Scrape.g:369:17: ^( TAKE_TEXT )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(369, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_TEXT, "TAKE_TEXT"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:370:4: TAKE HTML
				{
				DebugLocation(370, 4);
				TAKE251=(CommonToken)Match(input,TAKE,Follow._TAKE_in_takeStatement2179); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_TAKE.Add(TAKE251);

				DebugLocation(370, 9);
				HTML252=(CommonToken)Match(input,HTML,Follow._HTML_in_takeStatement2181); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_HTML.Add(HTML252);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:14: -> ^( TAKE_HTML )
				{
					DebugLocation(370, 17);
					// Scrape.g:370:17: ^( TAKE_HTML )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TAKE_HTML, "TAKE_HTML"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("takeStatement", 59);
			LeaveRule("takeStatement", 59);
			LeaveRule_takeStatement();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "takeStatement"); }
		return retval;

	}
	// $ANTLR end "takeStatement"

	partial void EnterRule_matchStatement();
	partial void LeaveRule_matchStatement();
	// $ANTLR start "matchStatement"
	// Scrape.g:373:1: matchStatement : MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) ;
	[GrammarRule("matchStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> matchStatement()
	{
		EnterRule_matchStatement();
		EnterRule("matchStatement", 60);
		TraceIn("matchStatement", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MATCH253 = default(CommonToken);
		CommonToken STRING_LITERAL254 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement255 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree MATCH253_tree = default(CommonTree);
		CommonTree STRING_LITERAL254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleSubtreeStream stream_replaceStatement=new RewriteRuleSubtreeStream(adaptor,"rule replaceStatement");
		try { DebugEnterRule(GrammarFileName, "matchStatement");
		DebugLocation(373, 1);
		try
		{
			// Scrape.g:374:2: ( MATCH STRING_LITERAL ( replaceStatement )? -> ^( MATCH STRING_LITERAL ( replaceStatement )? ) )
			DebugEnterAlt(1);
			// Scrape.g:374:4: MATCH STRING_LITERAL ( replaceStatement )?
			{
			DebugLocation(374, 4);
			MATCH253=(CommonToken)Match(input,MATCH,Follow._MATCH_in_matchStatement2199); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_MATCH.Add(MATCH253);

			DebugLocation(374, 10);
			STRING_LITERAL254=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_matchStatement2201); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL254);

			DebugLocation(374, 25);
			// Scrape.g:374:25: ( replaceStatement )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==REPLACE))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:374:25: replaceStatement
				{
				DebugLocation(374, 25);
				PushFollow(Follow._replaceStatement_in_matchStatement2203);
				replaceStatement255=replaceStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_replaceStatement.Add(replaceStatement255.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }



			{
			// AST REWRITE
			// elements: STRING_LITERAL, MATCH, replaceStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 374:43: -> ^( MATCH STRING_LITERAL ( replaceStatement )? )
			{
				DebugLocation(374, 46);
				// Scrape.g:374:46: ^( MATCH STRING_LITERAL ( replaceStatement )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(374, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_MATCH.NextNode(), root_1);

				DebugLocation(374, 54);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());
				DebugLocation(374, 69);
				// Scrape.g:374:69: ( replaceStatement )?
				if (stream_replaceStatement.HasNext)
				{
					DebugLocation(374, 69);
					adaptor.AddChild(root_1, stream_replaceStatement.NextTree());

				}
				stream_replaceStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("matchStatement", 60);
			LeaveRule("matchStatement", 60);
			LeaveRule_matchStatement();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "matchStatement"); }
		return retval;

	}
	// $ANTLR end "matchStatement"

	partial void EnterRule_replaceStatement();
	partial void LeaveRule_replaceStatement();
	// $ANTLR start "replaceStatement"
	// Scrape.g:377:1: replaceStatement : REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) ;
	[GrammarRule("replaceStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> replaceStatement()
	{
		EnterRule_replaceStatement();
		EnterRule("replaceStatement", 61);
		TraceIn("replaceStatement", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken REPLACE256 = default(CommonToken);
		CommonToken STRING_LITERAL257 = default(CommonToken);

		CommonTree REPLACE256_tree = default(CommonTree);
		CommonTree STRING_LITERAL257_tree = default(CommonTree);
		RewriteRuleITokenStream stream_STRING_LITERAL=new RewriteRuleITokenStream(adaptor,"token STRING_LITERAL");
		RewriteRuleITokenStream stream_REPLACE=new RewriteRuleITokenStream(adaptor,"token REPLACE");
		try { DebugEnterRule(GrammarFileName, "replaceStatement");
		DebugLocation(377, 1);
		try
		{
			// Scrape.g:378:2: ( REPLACE STRING_LITERAL -> ^( REPLACE STRING_LITERAL ) )
			DebugEnterAlt(1);
			// Scrape.g:378:4: REPLACE STRING_LITERAL
			{
			DebugLocation(378, 4);
			REPLACE256=(CommonToken)Match(input,REPLACE,Follow._REPLACE_in_replaceStatement2226); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_REPLACE.Add(REPLACE256);

			DebugLocation(378, 12);
			STRING_LITERAL257=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_replaceStatement2228); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL257);



			{
			// AST REWRITE
			// elements: REPLACE, STRING_LITERAL
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 378:27: -> ^( REPLACE STRING_LITERAL )
			{
				DebugLocation(378, 30);
				// Scrape.g:378:30: ^( REPLACE STRING_LITERAL )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(378, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_REPLACE.NextNode(), root_1);

				DebugLocation(378, 40);
				adaptor.AddChild(root_1, stream_STRING_LITERAL.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("replaceStatement", 61);
			LeaveRule("replaceStatement", 61);
			LeaveRule_replaceStatement();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "replaceStatement"); }
		return retval;

	}
	// $ANTLR end "replaceStatement"

	partial void EnterRule_createTableStatement();
	partial void LeaveRule_createTableStatement();
	// $ANTLR start "createTableStatement"
	// Scrape.g:382:1: createTableStatement : ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) );
	[GrammarRule("createTableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createTableStatement()
	{
		EnterRule_createTableStatement();
		EnterRule("createTableStatement", 62);
		TraceIn("createTableStatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CREATE258 = default(CommonToken);
		CommonToken FILE259 = default(CommonToken);
		CommonToken ID260 = default(CommonToken);
		CommonToken OPENPAREN261 = default(CommonToken);
		CommonToken CLOSEPAREN263 = default(CommonToken);
		CommonToken CREATE266 = default(CommonToken);
		CommonToken BUFFER267 = default(CommonToken);
		CommonToken ID268 = default(CommonToken);
		CommonToken OPENPAREN269 = default(CommonToken);
		CommonToken CLOSEPAREN271 = default(CommonToken);
		CommonToken CREATE272 = default(CommonToken);
		CommonToken MSSQL273 = default(CommonToken);
		CommonToken ID274 = default(CommonToken);
		CommonToken OPENPAREN275 = default(CommonToken);
		CommonToken CLOSEPAREN277 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs262 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement264 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation265 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs270 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs276 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement278 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree CREATE258_tree = default(CommonTree);
		CommonTree FILE259_tree = default(CommonTree);
		CommonTree ID260_tree = default(CommonTree);
		CommonTree OPENPAREN261_tree = default(CommonTree);
		CommonTree CLOSEPAREN263_tree = default(CommonTree);
		CommonTree CREATE266_tree = default(CommonTree);
		CommonTree BUFFER267_tree = default(CommonTree);
		CommonTree ID268_tree = default(CommonTree);
		CommonTree OPENPAREN269_tree = default(CommonTree);
		CommonTree CLOSEPAREN271_tree = default(CommonTree);
		CommonTree CREATE272_tree = default(CommonTree);
		CommonTree MSSQL273_tree = default(CommonTree);
		CommonTree ID274_tree = default(CommonTree);
		CommonTree OPENPAREN275_tree = default(CommonTree);
		CommonTree CLOSEPAREN277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_BUFFER=new RewriteRuleITokenStream(adaptor,"token BUFFER");
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_CREATE=new RewriteRuleITokenStream(adaptor,"token CREATE");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_FILE=new RewriteRuleITokenStream(adaptor,"token FILE");
		RewriteRuleITokenStream stream_MSSQL=new RewriteRuleITokenStream(adaptor,"token MSSQL");
		RewriteRuleSubtreeStream stream_sqlTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithStatement");
		RewriteRuleSubtreeStream stream_fileTableLocation=new RewriteRuleSubtreeStream(adaptor,"rule fileTableLocation");
		RewriteRuleSubtreeStream stream_tableColumnArgs=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArgs");
		RewriteRuleSubtreeStream stream_fileTableWithStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithStatement");
		try { DebugEnterRule(GrammarFileName, "createTableStatement");
		DebugLocation(382, 1);
		try
		{
			// Scrape.g:383:2: ( CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation ) | CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN -> ^( BUFFER_TABLE ID ( tableColumnArgs )* ) | CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement ) )
			int alt64=3;
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==CREATE))
			{
				switch (input.LA(2))
				{
				case FILE:
					{
					alt64 = 1;
					}
					break;
				case BUFFER:
					{
					alt64 = 2;
					}
					break;
				case MSSQL:
					{
					alt64 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Scrape.g:383:4: CREATE FILE ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN ( fileTableWithStatement )? fileTableLocation
				{
				DebugLocation(383, 4);
				CREATE258=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2249); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE258);

				DebugLocation(383, 11);
				FILE259=(CommonToken)Match(input,FILE,Follow._FILE_in_createTableStatement2251); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_FILE.Add(FILE259);

				DebugLocation(383, 16);
				ID260=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2253); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID260);

				DebugLocation(383, 19);
				OPENPAREN261=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2255); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN261);

				DebugLocation(383, 29);
				// Scrape.g:383:29: ( tableColumnArgs )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==ID))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:383:29: tableColumnArgs
						{
						DebugLocation(383, 29);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2257);
						tableColumnArgs262=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs262.Tree);

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }

				DebugLocation(383, 46);
				CLOSEPAREN263=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2260); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN263);

				DebugLocation(383, 57);
				// Scrape.g:383:57: ( fileTableWithStatement )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==WITH))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:383:57: fileTableWithStatement
					{
					DebugLocation(383, 57);
					PushFollow(Follow._fileTableWithStatement_in_createTableStatement2262);
					fileTableWithStatement264=fileTableWithStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithStatement.Add(fileTableWithStatement264.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(383, 81);
				PushFollow(Follow._fileTableLocation_in_createTableStatement2265);
				fileTableLocation265=fileTableLocation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_fileTableLocation.Add(fileTableLocation265.Tree);


				{
				// AST REWRITE
				// elements: fileTableLocation, fileTableWithStatement, ID, tableColumnArgs
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 383:99: -> ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
				{
					DebugLocation(383, 102);
					// Scrape.g:383:102: ^( FILE_TABLE ID ( tableColumnArgs )* ( fileTableWithStatement )? fileTableLocation )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(383, 104);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(FILE_TABLE, "FILE_TABLE"), root_1);

					DebugLocation(383, 115);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(383, 118);
					// Scrape.g:383:118: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(383, 118);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(383, 135);
					// Scrape.g:383:135: ( fileTableWithStatement )?
					if (stream_fileTableWithStatement.HasNext)
					{
						DebugLocation(383, 135);
						adaptor.AddChild(root_1, stream_fileTableWithStatement.NextTree());

					}
					stream_fileTableWithStatement.Reset();
					DebugLocation(383, 159);
					adaptor.AddChild(root_1, stream_fileTableLocation.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Scrape.g:384:4: CREATE BUFFER ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN
				{
				DebugLocation(384, 4);
				CREATE266=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2286); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE266);

				DebugLocation(384, 11);
				BUFFER267=(CommonToken)Match(input,BUFFER,Follow._BUFFER_in_createTableStatement2288); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_BUFFER.Add(BUFFER267);

				DebugLocation(384, 18);
				ID268=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2290); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID268);

				DebugLocation(384, 21);
				OPENPAREN269=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2292); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN269);

				DebugLocation(384, 31);
				// Scrape.g:384:31: ( tableColumnArgs )*
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_1 = input.LA(1);

					if ((LA62_1==ID))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch ( alt62 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:384:31: tableColumnArgs
						{
						DebugLocation(384, 31);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2294);
						tableColumnArgs270=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs270.Tree);

						}
						break;

					default:
						goto loop62;
					}
				}

				loop62:
					;

				} finally { DebugExitSubRule(62); }

				DebugLocation(384, 48);
				CLOSEPAREN271=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2297); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN271);



				{
				// AST REWRITE
				// elements: tableColumnArgs, ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 384:59: -> ^( BUFFER_TABLE ID ( tableColumnArgs )* )
				{
					DebugLocation(384, 62);
					// Scrape.g:384:62: ^( BUFFER_TABLE ID ( tableColumnArgs )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(384, 64);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BUFFER_TABLE, "BUFFER_TABLE"), root_1);

					DebugLocation(384, 77);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(384, 80);
					// Scrape.g:384:80: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(384, 80);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Scrape.g:385:4: CREATE MSSQL ID OPENPAREN ( tableColumnArgs )* CLOSEPAREN sqlTableWithStatement
				{
				DebugLocation(385, 4);
				CREATE272=(CommonToken)Match(input,CREATE,Follow._CREATE_in_createTableStatement2313); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CREATE.Add(CREATE272);

				DebugLocation(385, 11);
				MSSQL273=(CommonToken)Match(input,MSSQL,Follow._MSSQL_in_createTableStatement2315); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_MSSQL.Add(MSSQL273);

				DebugLocation(385, 17);
				ID274=(CommonToken)Match(input,ID,Follow._ID_in_createTableStatement2317); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(ID274);

				DebugLocation(385, 20);
				OPENPAREN275=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_createTableStatement2319); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN275);

				DebugLocation(385, 30);
				// Scrape.g:385:30: ( tableColumnArgs )*
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_1 = input.LA(1);

					if ((LA63_1==ID))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch ( alt63 )
					{
					case 1:
						DebugEnterAlt(1);
						// Scrape.g:385:30: tableColumnArgs
						{
						DebugLocation(385, 30);
						PushFollow(Follow._tableColumnArgs_in_createTableStatement2321);
						tableColumnArgs276=tableColumnArgs();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_tableColumnArgs.Add(tableColumnArgs276.Tree);

						}
						break;

					default:
						goto loop63;
					}
				}

				loop63:
					;

				} finally { DebugExitSubRule(63); }

				DebugLocation(385, 47);
				CLOSEPAREN277=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_createTableStatement2324); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN277);

				DebugLocation(385, 58);
				PushFollow(Follow._sqlTableWithStatement_in_createTableStatement2326);
				sqlTableWithStatement278=sqlTableWithStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_sqlTableWithStatement.Add(sqlTableWithStatement278.Tree);


				{
				// AST REWRITE
				// elements: ID, tableColumnArgs, sqlTableWithStatement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:80: -> ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
				{
					DebugLocation(385, 83);
					// Scrape.g:385:83: ^( MSSQL_TABLE ID ( tableColumnArgs )* sqlTableWithStatement )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(385, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(MSSQL_TABLE, "MSSQL_TABLE"), root_1);

					DebugLocation(385, 97);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(385, 100);
					// Scrape.g:385:100: ( tableColumnArgs )*
					while ( stream_tableColumnArgs.HasNext )
					{
						DebugLocation(385, 100);
						adaptor.AddChild(root_1, stream_tableColumnArgs.NextTree());

					}
					stream_tableColumnArgs.Reset();
					DebugLocation(385, 117);
					adaptor.AddChild(root_1, stream_sqlTableWithStatement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createTableStatement", 62);
			LeaveRule("createTableStatement", 62);
			LeaveRule_createTableStatement();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "createTableStatement"); }
		return retval;

	}
	// $ANTLR end "createTableStatement"

	partial void EnterRule_fileTableLocation();
	partial void LeaveRule_fileTableLocation();
	// $ANTLR start "fileTableLocation"
	// Scrape.g:388:1: fileTableLocation : LOCATION ^ mathExpression ;
	[GrammarRule("fileTableLocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableLocation()
	{
		EnterRule_fileTableLocation();
		EnterRule("fileTableLocation", 63);
		TraceIn("fileTableLocation", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LOCATION279 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> mathExpression280 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree LOCATION279_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableLocation");
		DebugLocation(388, 1);
		try
		{
			// Scrape.g:389:2: ( LOCATION ^ mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:389:4: LOCATION ^ mathExpression
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(389, 12);
			LOCATION279=(CommonToken)Match(input,LOCATION,Follow._LOCATION_in_fileTableLocation2350); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LOCATION279_tree = (CommonTree)adaptor.Create(LOCATION279);
			root_0 = (CommonTree)adaptor.BecomeRoot(LOCATION279_tree, root_0);
			}
			DebugLocation(389, 14);
			PushFollow(Follow._mathExpression_in_fileTableLocation2353);
			mathExpression280=mathExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mathExpression280.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableLocation", 63);
			LeaveRule("fileTableLocation", 63);
			LeaveRule_fileTableLocation();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableLocation"); }
		return retval;

	}
	// $ANTLR end "fileTableLocation"

	partial void EnterRule_sqlTableWithStatement();
	partial void LeaveRule_sqlTableWithStatement();
	// $ANTLR start "sqlTableWithStatement"
	// Scrape.g:392:1: sqlTableWithStatement : WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) ;
	[GrammarRule("sqlTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithStatement()
	{
		EnterRule_sqlTableWithStatement();
		EnterRule("sqlTableWithStatement", 64);
		TraceIn("sqlTableWithStatement", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH281 = default(CommonToken);
		CommonToken OPENPAREN282 = default(CommonToken);
		CommonToken CLOSEPAREN284 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement283 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH281_tree = default(CommonTree);
		CommonTree OPENPAREN282_tree = default(CommonTree);
		CommonTree CLOSEPAREN284_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_sqlTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithStatement");
		DebugLocation(392, 1);
		try
		{
			// Scrape.g:393:2: ( WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN -> ^( WITH sqlTableWithVariablesStatement ) )
			DebugEnterAlt(1);
			// Scrape.g:393:4: WITH OPENPAREN sqlTableWithVariablesStatement CLOSEPAREN
			{
			DebugLocation(393, 4);
			WITH281=(CommonToken)Match(input,WITH,Follow._WITH_in_sqlTableWithStatement2365); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH281);

			DebugLocation(393, 9);
			OPENPAREN282=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_sqlTableWithStatement2367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN282);

			DebugLocation(393, 19);
			PushFollow(Follow._sqlTableWithVariablesStatement_in_sqlTableWithStatement2369);
			sqlTableWithVariablesStatement283=sqlTableWithVariablesStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariablesStatement.Add(sqlTableWithVariablesStatement283.Tree);
			DebugLocation(393, 50);
			CLOSEPAREN284=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_sqlTableWithStatement2371); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN284);



			{
			// AST REWRITE
			// elements: WITH, sqlTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:61: -> ^( WITH sqlTableWithVariablesStatement )
			{
				DebugLocation(393, 64);
				// Scrape.g:393:64: ^( WITH sqlTableWithVariablesStatement )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(393, 66);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(393, 71);
				adaptor.AddChild(root_1, stream_sqlTableWithVariablesStatement.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithStatement", 64);
			LeaveRule("sqlTableWithStatement", 64);
			LeaveRule_sqlTableWithStatement();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithStatement"

	partial void EnterRule_sqlTableWithVariablesStatement();
	partial void LeaveRule_sqlTableWithVariablesStatement();
	// $ANTLR start "sqlTableWithVariablesStatement"
	// Scrape.g:396:1: sqlTableWithVariablesStatement : ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* ;
	[GrammarRule("sqlTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariablesStatement()
	{
		EnterRule_sqlTableWithVariablesStatement();
		EnterRule("sqlTableWithVariablesStatement", 65);
		TraceIn("sqlTableWithVariablesStatement", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA286 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement285 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement287 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_sqlTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule sqlTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariablesStatement");
		DebugLocation(396, 1);
		try
		{
			// Scrape.g:397:2: ( ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement -> ( sqlTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:397:4: ( sqlTableWithVariableStatement COMMA )* sqlTableWithVariableStatement
			{
			DebugLocation(397, 4);
			// Scrape.g:397:4: ( sqlTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==CONNECTIONSTRING||LA65_1==DBTABLE))
				{
					int LA65_2 = input.LA(2);

					if ((LA65_2==EQUALS))
					{
						int LA65_3 = input.LA(3);

						if ((LA65_3==STRING_LITERAL))
						{
							int LA65_4 = input.LA(4);

							if ((LA65_4==COMMA))
							{
								alt65 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:397:5: sqlTableWithVariableStatement COMMA
					{
					DebugLocation(397, 5);
					PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2392);
					sqlTableWithVariableStatement285=sqlTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement285.Tree);
					DebugLocation(397, 35);
					COMMA286=(CommonToken)Match(input,COMMA,Follow._COMMA_in_sqlTableWithVariablesStatement2394); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA286);


					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(397, 43);
			PushFollow(Follow._sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2398);
			sqlTableWithVariableStatement287=sqlTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_sqlTableWithVariableStatement.Add(sqlTableWithVariableStatement287.Tree);


			{
			// AST REWRITE
			// elements: sqlTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 397:73: -> ( sqlTableWithVariableStatement )*
			{
				DebugLocation(397, 76);
				// Scrape.g:397:76: ( sqlTableWithVariableStatement )*
				while ( stream_sqlTableWithVariableStatement.HasNext )
				{
					DebugLocation(397, 76);
					adaptor.AddChild(root_0, stream_sqlTableWithVariableStatement.NextTree());

				}
				stream_sqlTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariablesStatement", 65);
			LeaveRule("sqlTableWithVariablesStatement", 65);
			LeaveRule_sqlTableWithVariablesStatement();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariablesStatement"

	partial void EnterRule_sqlTableWithVariableStatement();
	partial void LeaveRule_sqlTableWithVariableStatement();
	// $ANTLR start "sqlTableWithVariableStatement"
	// Scrape.g:400:1: sqlTableWithVariableStatement : ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("sqlTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> sqlTableWithVariableStatement()
	{
		EnterRule_sqlTableWithVariableStatement();
		EnterRule("sqlTableWithVariableStatement", 66);
		TraceIn("sqlTableWithVariableStatement", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set288 = default(CommonToken);
		CommonToken EQUALS289 = default(CommonToken);
		CommonToken STRING_LITERAL290 = default(CommonToken);

		CommonTree set288_tree = default(CommonTree);
		CommonTree EQUALS289_tree = default(CommonTree);
		CommonTree STRING_LITERAL290_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "sqlTableWithVariableStatement");
		DebugLocation(400, 1);
		try
		{
			// Scrape.g:401:2: ( ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:401:4: ( CONNECTIONSTRING | DBTABLE ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(401, 32);

			set288=(CommonToken)input.LT(1);
			set288=(CommonToken)input.LT(1);
			if (input.LA(1)==CONNECTIONSTRING||input.LA(1)==DBTABLE)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set288), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(401, 40);
			EQUALS289=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_sqlTableWithVariableStatement2424); if (state.failed) return retval;
			DebugLocation(401, 42);
			STRING_LITERAL290=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_sqlTableWithVariableStatement2427); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL290_tree = (CommonTree)adaptor.Create(STRING_LITERAL290);
			adaptor.AddChild(root_0, STRING_LITERAL290_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sqlTableWithVariableStatement", 66);
			LeaveRule("sqlTableWithVariableStatement", 66);
			LeaveRule_sqlTableWithVariableStatement();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "sqlTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "sqlTableWithVariableStatement"

	partial void EnterRule_fileTableWithStatement();
	partial void LeaveRule_fileTableWithStatement();
	// $ANTLR start "fileTableWithStatement"
	// Scrape.g:404:1: fileTableWithStatement : WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) ;
	[GrammarRule("fileTableWithStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithStatement()
	{
		EnterRule_fileTableWithStatement();
		EnterRule("fileTableWithStatement", 67);
		TraceIn("fileTableWithStatement", 67);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken WITH291 = default(CommonToken);
		CommonToken OPENPAREN292 = default(CommonToken);
		CommonToken CLOSEPAREN294 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement293 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree WITH291_tree = default(CommonTree);
		CommonTree OPENPAREN292_tree = default(CommonTree);
		CommonTree CLOSEPAREN294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_CLOSEPAREN=new RewriteRuleITokenStream(adaptor,"token CLOSEPAREN");
		RewriteRuleITokenStream stream_OPENPAREN=new RewriteRuleITokenStream(adaptor,"token OPENPAREN");
		RewriteRuleITokenStream stream_WITH=new RewriteRuleITokenStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_fileTableWithVariablesStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariablesStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithStatement");
		DebugLocation(404, 1);
		try
		{
			// Scrape.g:405:2: ( WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN -> ^( WITH ( fileTableWithVariablesStatement )* ) )
			DebugEnterAlt(1);
			// Scrape.g:405:4: WITH OPENPAREN ( fileTableWithVariablesStatement )* CLOSEPAREN
			{
			DebugLocation(405, 4);
			WITH291=(CommonToken)Match(input,WITH,Follow._WITH_in_fileTableWithStatement2438); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_WITH.Add(WITH291);

			DebugLocation(405, 9);
			OPENPAREN292=(CommonToken)Match(input,OPENPAREN,Follow._OPENPAREN_in_fileTableWithStatement2440); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OPENPAREN.Add(OPENPAREN292);

			DebugLocation(405, 19);
			// Scrape.g:405:19: ( fileTableWithVariablesStatement )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==FIELD_TERMINATOR||LA66_1==ROW_TERMINATOR))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:405:19: fileTableWithVariablesStatement
					{
					DebugLocation(405, 19);
					PushFollow(Follow._fileTableWithVariablesStatement_in_fileTableWithStatement2442);
					fileTableWithVariablesStatement293=fileTableWithVariablesStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariablesStatement.Add(fileTableWithVariablesStatement293.Tree);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(405, 52);
			CLOSEPAREN294=(CommonToken)Match(input,CLOSEPAREN,Follow._CLOSEPAREN_in_fileTableWithStatement2445); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CLOSEPAREN.Add(CLOSEPAREN294);



			{
			// AST REWRITE
			// elements: WITH, fileTableWithVariablesStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 405:63: -> ^( WITH ( fileTableWithVariablesStatement )* )
			{
				DebugLocation(405, 66);
				// Scrape.g:405:66: ^( WITH ( fileTableWithVariablesStatement )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(405, 68);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_WITH.NextNode(), root_1);

				DebugLocation(405, 73);
				// Scrape.g:405:73: ( fileTableWithVariablesStatement )*
				while ( stream_fileTableWithVariablesStatement.HasNext )
				{
					DebugLocation(405, 73);
					adaptor.AddChild(root_1, stream_fileTableWithVariablesStatement.NextTree());

				}
				stream_fileTableWithVariablesStatement.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithStatement", 67);
			LeaveRule("fileTableWithStatement", 67);
			LeaveRule_fileTableWithStatement();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithStatement"

	partial void EnterRule_fileTableWithVariablesStatement();
	partial void LeaveRule_fileTableWithVariablesStatement();
	// $ANTLR start "fileTableWithVariablesStatement"
	// Scrape.g:408:1: fileTableWithVariablesStatement : ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* ;
	[GrammarRule("fileTableWithVariablesStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariablesStatement()
	{
		EnterRule_fileTableWithVariablesStatement();
		EnterRule("fileTableWithVariablesStatement", 68);
		TraceIn("fileTableWithVariablesStatement", 68);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA296 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement295 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement297 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_fileTableWithVariableStatement=new RewriteRuleSubtreeStream(adaptor,"rule fileTableWithVariableStatement");
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariablesStatement");
		DebugLocation(408, 1);
		try
		{
			// Scrape.g:409:2: ( ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement -> ( fileTableWithVariableStatement )* )
			DebugEnterAlt(1);
			// Scrape.g:409:4: ( fileTableWithVariableStatement COMMA )* fileTableWithVariableStatement
			{
			DebugLocation(409, 4);
			// Scrape.g:409:4: ( fileTableWithVariableStatement COMMA )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_1 = input.LA(1);

				if ((LA67_1==FIELD_TERMINATOR||LA67_1==ROW_TERMINATOR))
				{
					int LA67_2 = input.LA(2);

					if ((LA67_2==EQUALS))
					{
						int LA67_3 = input.LA(3);

						if ((LA67_3==STRING_LITERAL))
						{
							int LA67_4 = input.LA(4);

							if ((LA67_4==COMMA))
							{
								alt67 = 1;
							}


						}


					}


				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:409:5: fileTableWithVariableStatement COMMA
					{
					DebugLocation(409, 5);
					PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2468);
					fileTableWithVariableStatement295=fileTableWithVariableStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement295.Tree);
					DebugLocation(409, 36);
					COMMA296=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fileTableWithVariablesStatement2470); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA296);


					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(409, 44);
			PushFollow(Follow._fileTableWithVariableStatement_in_fileTableWithVariablesStatement2474);
			fileTableWithVariableStatement297=fileTableWithVariableStatement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_fileTableWithVariableStatement.Add(fileTableWithVariableStatement297.Tree);


			{
			// AST REWRITE
			// elements: fileTableWithVariableStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 409:75: -> ( fileTableWithVariableStatement )*
			{
				DebugLocation(409, 78);
				// Scrape.g:409:78: ( fileTableWithVariableStatement )*
				while ( stream_fileTableWithVariableStatement.HasNext )
				{
					DebugLocation(409, 78);
					adaptor.AddChild(root_0, stream_fileTableWithVariableStatement.NextTree());

				}
				stream_fileTableWithVariableStatement.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariablesStatement", 68);
			LeaveRule("fileTableWithVariablesStatement", 68);
			LeaveRule_fileTableWithVariablesStatement();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariablesStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariablesStatement"

	partial void EnterRule_fileTableWithVariableStatement();
	partial void LeaveRule_fileTableWithVariableStatement();
	// $ANTLR start "fileTableWithVariableStatement"
	// Scrape.g:412:1: fileTableWithVariableStatement : ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL ;
	[GrammarRule("fileTableWithVariableStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fileTableWithVariableStatement()
	{
		EnterRule_fileTableWithVariableStatement();
		EnterRule("fileTableWithVariableStatement", 69);
		TraceIn("fileTableWithVariableStatement", 69);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set298 = default(CommonToken);
		CommonToken EQUALS299 = default(CommonToken);
		CommonToken STRING_LITERAL300 = default(CommonToken);

		CommonTree set298_tree = default(CommonTree);
		CommonTree EQUALS299_tree = default(CommonTree);
		CommonTree STRING_LITERAL300_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fileTableWithVariableStatement");
		DebugLocation(412, 1);
		try
		{
			// Scrape.g:413:2: ( ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL )
			DebugEnterAlt(1);
			// Scrape.g:413:4: ( FIELD_TERMINATOR | ROW_TERMINATOR ) ^ EQUALS ! STRING_LITERAL
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(413, 39);

			set298=(CommonToken)input.LT(1);
			set298=(CommonToken)input.LT(1);
			if (input.LA(1)==FIELD_TERMINATOR||input.LA(1)==ROW_TERMINATOR)
			{
				input.Consume();
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set298), root_0);
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(413, 47);
			EQUALS299=(CommonToken)Match(input,EQUALS,Follow._EQUALS_in_fileTableWithVariableStatement2499); if (state.failed) return retval;
			DebugLocation(413, 49);
			STRING_LITERAL300=(CommonToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_fileTableWithVariableStatement2502); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL300_tree = (CommonTree)adaptor.Create(STRING_LITERAL300);
			adaptor.AddChild(root_0, STRING_LITERAL300_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fileTableWithVariableStatement", 69);
			LeaveRule("fileTableWithVariableStatement", 69);
			LeaveRule_fileTableWithVariableStatement();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "fileTableWithVariableStatement"); }
		return retval;

	}
	// $ANTLR end "fileTableWithVariableStatement"

	partial void EnterRule_tableColumnArgs();
	partial void LeaveRule_tableColumnArgs();
	// $ANTLR start "tableColumnArgs"
	// Scrape.g:416:1: tableColumnArgs : ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) ;
	[GrammarRule("tableColumnArgs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArgs()
	{
		EnterRule_tableColumnArgs();
		EnterRule("tableColumnArgs", 70);
		TraceIn("tableColumnArgs", 70);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA302 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg301 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg303 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree COMMA302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_tableColumnArg=new RewriteRuleSubtreeStream(adaptor,"rule tableColumnArg");
		try { DebugEnterRule(GrammarFileName, "tableColumnArgs");
		DebugLocation(416, 1);
		try
		{
			// Scrape.g:417:2: ( ( tableColumnArg COMMA )* tableColumnArg -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* ) )
			DebugEnterAlt(1);
			// Scrape.g:417:4: ( tableColumnArg COMMA )* tableColumnArg
			{
			DebugLocation(417, 4);
			// Scrape.g:417:4: ( tableColumnArg COMMA )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==ID))
				{
					int LA68_2 = input.LA(2);

					if ((LA68_2==DATETIME||LA68_2==FLOAT||LA68_2==IDENTITY||LA68_2==INTEGER||LA68_2==STRING))
					{
						int LA68_3 = input.LA(3);

						if ((LA68_3==COMMA))
						{
							alt68 = 1;
						}


					}


				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Scrape.g:417:5: tableColumnArg COMMA
					{
					DebugLocation(417, 5);
					PushFollow(Follow._tableColumnArg_in_tableColumnArgs2514);
					tableColumnArg301=tableColumnArg();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg301.Tree);
					DebugLocation(417, 20);
					COMMA302=(CommonToken)Match(input,COMMA,Follow._COMMA_in_tableColumnArgs2516); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_COMMA.Add(COMMA302);


					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(417, 28);
			PushFollow(Follow._tableColumnArg_in_tableColumnArgs2520);
			tableColumnArg303=tableColumnArg();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_tableColumnArg.Add(tableColumnArg303.Tree);


			{
			// AST REWRITE
			// elements: tableColumnArg
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:43: -> ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
			{
				DebugLocation(417, 46);
				// Scrape.g:417:46: ^( TABLE_COLUMN_ARGS ( tableColumnArg )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(417, 48);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARGS, "TABLE_COLUMN_ARGS"), root_1);

				DebugLocation(417, 66);
				// Scrape.g:417:66: ( tableColumnArg )*
				while ( stream_tableColumnArg.HasNext )
				{
					DebugLocation(417, 66);
					adaptor.AddChild(root_1, stream_tableColumnArg.NextTree());

				}
				stream_tableColumnArg.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArgs", 70);
			LeaveRule("tableColumnArgs", 70);
			LeaveRule_tableColumnArgs();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArgs"); }
		return retval;

	}
	// $ANTLR end "tableColumnArgs"

	partial void EnterRule_tableColumnArg();
	partial void LeaveRule_tableColumnArg();
	// $ANTLR start "tableColumnArg"
	// Scrape.g:420:1: tableColumnArg : ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) ;
	[GrammarRule("tableColumnArg")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> tableColumnArg()
	{
		EnterRule_tableColumnArg();
		EnterRule("tableColumnArg", 71);
		TraceIn("tableColumnArg", 71);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken ID304 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> dataType305 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree ID304_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleSubtreeStream stream_dataType=new RewriteRuleSubtreeStream(adaptor,"rule dataType");
		try { DebugEnterRule(GrammarFileName, "tableColumnArg");
		DebugLocation(420, 1);
		try
		{
			// Scrape.g:421:2: ( ID dataType -> ^( TABLE_COLUMN_ARG ID dataType ) )
			DebugEnterAlt(1);
			// Scrape.g:421:4: ID dataType
			{
			DebugLocation(421, 4);
			ID304=(CommonToken)Match(input,ID,Follow._ID_in_tableColumnArg2541); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ID.Add(ID304);

			DebugLocation(421, 7);
			PushFollow(Follow._dataType_in_tableColumnArg2543);
			dataType305=dataType();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dataType.Add(dataType305.Tree);


			{
			// AST REWRITE
			// elements: dataType, ID
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 421:16: -> ^( TABLE_COLUMN_ARG ID dataType )
			{
				DebugLocation(421, 19);
				// Scrape.g:421:19: ^( TABLE_COLUMN_ARG ID dataType )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(421, 21);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(TABLE_COLUMN_ARG, "TABLE_COLUMN_ARG"), root_1);

				DebugLocation(421, 38);
				adaptor.AddChild(root_1, stream_ID.NextNode());
				DebugLocation(421, 41);
				adaptor.AddChild(root_1, stream_dataType.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("tableColumnArg", 71);
			LeaveRule("tableColumnArg", 71);
			LeaveRule_tableColumnArg();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "tableColumnArg"); }
		return retval;

	}
	// $ANTLR end "tableColumnArg"

	partial void EnterRule_dataType();
	partial void LeaveRule_dataType();
	// $ANTLR start "dataType"
	// Scrape.g:424:1: dataType : ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME );
	[GrammarRule("dataType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> dataType()
	{
		EnterRule_dataType();
		EnterRule("dataType", 72);
		TraceIn("dataType", 72);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set306 = default(CommonToken);

		CommonTree set306_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "dataType");
		DebugLocation(424, 1);
		try
		{
			// Scrape.g:425:2: ( STRING | INTEGER | FLOAT | IDENTITY | DATETIME )
			DebugEnterAlt(1);
			// Scrape.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(425, 2);

			set306=(CommonToken)input.LT(1);
			if (input.LA(1)==DATETIME||input.LA(1)==FLOAT||input.LA(1)==IDENTITY||input.LA(1)==INTEGER||input.LA(1)==STRING)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set306));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dataType", 72);
			LeaveRule("dataType", 72);
			LeaveRule_dataType();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "dataType"); }
		return retval;

	}
	// $ANTLR end "dataType"

	partial void EnterRule_synpred23_Scrape_fragment();
	partial void LeaveRule_synpred23_Scrape_fragment();

	// $ANTLR start synpred23_Scrape
	private void synpred23_Scrape_fragment()
	{
		EnterRule_synpred23_Scrape_fragment();
		EnterRule("synpred23_Scrape_fragment", 95);
		TraceIn("synpred23_Scrape_fragment", 95);
		try
		{
			// Scrape.g:153:41: ( tableHint )
			DebugEnterAlt(1);
			// Scrape.g:153:41: tableHint
			{
			DebugLocation(153, 41);
			PushFollow(Follow._tableHint_in_synpred23_Scrape769);
			tableHint();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_Scrape_fragment", 95);
			LeaveRule("synpred23_Scrape_fragment", 95);
			LeaveRule_synpred23_Scrape_fragment();
		}
	}
	// $ANTLR end synpred23_Scrape

	partial void EnterRule_synpred30_Scrape_fragment();
	partial void LeaveRule_synpred30_Scrape_fragment();

	// $ANTLR start synpred30_Scrape
	private void synpred30_Scrape_fragment()
	{
		EnterRule_synpred30_Scrape_fragment();
		EnterRule("synpred30_Scrape_fragment", 102);
		TraceIn("synpred30_Scrape_fragment", 102);
		try
		{
			// Scrape.g:190:4: ( mathExpression )
			DebugEnterAlt(1);
			// Scrape.g:190:4: mathExpression
			{
			DebugLocation(190, 4);
			PushFollow(Follow._mathExpression_in_synpred30_Scrape959);
			mathExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_Scrape_fragment", 102);
			LeaveRule("synpred30_Scrape_fragment", 102);
			LeaveRule_synpred30_Scrape_fragment();
		}
	}
	// $ANTLR end synpred30_Scrape

	partial void EnterRule_synpred49_Scrape_fragment();
	partial void LeaveRule_synpred49_Scrape_fragment();

	// $ANTLR start synpred49_Scrape
	private void synpred49_Scrape_fragment()
	{
		EnterRule_synpred49_Scrape_fragment();
		EnterRule("synpred49_Scrape_fragment", 121);
		TraceIn("synpred49_Scrape_fragment", 121);
		try
		{
			// Scrape.g:237:9: ( setArg COMMA )
			DebugEnterAlt(1);
			// Scrape.g:237:9: setArg COMMA
			{
			DebugLocation(237, 9);
			PushFollow(Follow._setArg_in_synpred49_Scrape1256);
			setArg();
			PopFollow();
			if (state.failed) return;
			DebugLocation(237, 16);
			Match(input,COMMA,Follow._COMMA_in_synpred49_Scrape1258); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred49_Scrape_fragment", 121);
			LeaveRule("synpred49_Scrape_fragment", 121);
			LeaveRule_synpred49_Scrape_fragment();
		}
	}
	// $ANTLR end synpred49_Scrape

	partial void EnterRule_synpred68_Scrape_fragment();
	partial void LeaveRule_synpred68_Scrape_fragment();

	// $ANTLR start synpred68_Scrape
	private void synpred68_Scrape_fragment()
	{
		EnterRule_synpred68_Scrape_fragment();
		EnterRule("synpred68_Scrape_fragment", 140);
		TraceIn("synpred68_Scrape_fragment", 140);
		try
		{
			// Scrape.g:290:12: ( selectArgs COMMA )
			DebugEnterAlt(1);
			// Scrape.g:290:12: selectArgs COMMA
			{
			DebugLocation(290, 12);
			PushFollow(Follow._selectArgs_in_synpred68_Scrape1635);
			selectArgs();
			PopFollow();
			if (state.failed) return;
			DebugLocation(290, 23);
			Match(input,COMMA,Follow._COMMA_in_synpred68_Scrape1637); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Scrape_fragment", 140);
			LeaveRule("synpred68_Scrape_fragment", 140);
			LeaveRule_synpred68_Scrape_fragment();
		}
	}
	// $ANTLR end synpred68_Scrape
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA14 dfa14;
	private DFA34 dfa34;
	private DFA43 dfa43;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa14 = new DFA14( this, SpecialStateTransition14 );
		dfa34 = new DFA34( this );
		dfa43 = new DFA43( this );
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x12\xFFFF";
		private const string DFA14_eofS =
			"\x1\x2\x11\xFFFF";
		private const string DFA14_minS =
			"\x1\xF\x1\x4E\x1\xFFFF\x1\x3A\x1\x4E\x1\x10\x2\x37\x1\x3A\x1\x0\x2\x10"+
			"\x1\xFFFF\x1\x10\x1\x37\x1\x10\x2\x0";
		private const string DFA14_maxS =
			"\x1\x80\x1\x4E\x1\xFFFF\x1\x73\x1\x4E\x1\x52\x1\x37\x1\x65\x1\x73\x1"+
			"\x0\x1\x10\x1\x11\x1\xFFFF\x1\x52\x1\x65\x1\x52\x2\x0";
		private const string DFA14_acceptS =
			"\x2\xFFFF\x1\x2\x9\xFFFF\x1\x1\x5\xFFFF";
		private const string DFA14_specialS =
			"\x9\xFFFF\x1\x2\x6\xFFFF\x1\x1\x1\x0}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x7\xFFFF\x1\x2\x3\xFFFF\x1\x2\xC"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x24\xFFFF\x1\x2\x16\xFFFF\x3\x2\x6\xFFFF\x2\x2\x1\x1",
				"\x1\x3",
				"",
				"\x1\x5\x38\xFFFF\x1\x4",
				"\x1\x6",
				"\x1\x9\x3D\xFFFF\x1\x7\x3\xFFFF\x1\x8",
				"\x1\xA",
				"\x1\xB\x2D\xFFFF\x1\xB",
				"\x1\x5\x38\xFFFF\x1\x4",
				"\x1\xFFFF",
				"\x1\xD",
				"\x1\xF\x1\xE",
				"",
				"\x1\x10\x41\xFFFF\x1\x8",
				"\x1\xB\x2D\xFFFF\x1\xB",
				"\x1\x11\x41\xFFFF\x1\x8",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "153:41: ( tableHint )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition14(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA14_1 = input.LA(1);
		int index14_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred23_Scrape_fragment))) {s = 12;}

				else if ((true)) {s = 2;}

				input.Seek(index14_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 14, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\xC\xFFFF";
		private const string DFA34_eofS =
			"\xC\xFFFF";
		private const string DFA34_minS =
			"\x1\x3A\x1\x4E\x1\x10\x2\x37\x2\xFFFF\x3\x10\x1\x37\x1\x10";
		private const string DFA34_maxS =
			"\x1\x73\x1\x4E\x1\x52\x1\x37\x1\x65\x2\xFFFF\x1\x10\x1\x11\x1\x52\x1"+
			"\x65\x1\x52";
		private const string DFA34_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1\x5\xFFFF";
		private const string DFA34_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x2\x38\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x3D\xFFFF\x1\x4\x3\xFFFF\x1\x6",
				"\x1\x7",
				"\x1\x8\x2D\xFFFF\x1\x8",
				"",
				"",
				"\x1\x9",
				"\x1\xB\x1\xA",
				"\x1\x5\x41\xFFFF\x1\x6",
				"\x1\x8\x2D\xFFFF\x1\x8",
				"\x1\x5\x41\xFFFF\x1\x6"
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "()* loopback of 260:19: ( hint PIPE )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x17\xFFFF";
		private const string DFA43_eofS =
			"\x2\xFFFF\x4\x8\x1\xFFFF\x1\x8\x6\xFFFF\x2\x8\x1\xFFFF\x4\x8\x1\xFFFF"+
			"\x1\x8";
		private const string DFA43_minS =
			"\x1\x12\x1\x65\x4\xF\x1\x4E\x1\xF\x2\xFFFF\x1\x2E\x1\x10\x1\x7\x1\x65"+
			"\x2\xF\x1\x65\x4\xF\x1\x65\x1\xF";
		private const string DFA43_maxS =
			"\x2\x65\x4\x7F\x1\x4E\x1\x7F\x2\xFFFF\x1\x2E\x1\x10\x1\x71\x1\x65\x2"+
			"\x7F\x1\x65\x4\x7F\x1\x65\x1\x7F";
		private const string DFA43_acceptS =
			"\x8\xFFFF\x1\x2\x1\x1\xD\xFFFF";
		private const string DFA43_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x4\x14\xFFFF\x1\x2\x2\xFFFF\x1\x6\x3\xFFFF\x1\x3\x1\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\x2\x13\xFFFF\x1\x2\x5\xFFFF\x1\x1\x13\xFFFF\x1\x2",
				"\x1\x7",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1C\xFFFF"+
				"\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x4\xFFFF\x1\xA\x2\xFFFF\x1\x8\x3\xFFFF\x1\x8"+
				"\x7\xFFFF\x1\x8\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF"+
				"\x1\x8\x1C\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1C\xFFFF"+
				"\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1C\xFFFF"+
				"\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\xB",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\xA\xFFFF\x1\x8\xD\xFFFF\x1\xC\x8\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"",
				"",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10\x25\xFFFF\x1\x12\x43\xFFFF\x1\x11",
				"\x1\x13",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1C\xFFFF"+
				"\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\x1C\xFFFF"+
				"\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x14",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\x7\xFFFF\x1\x15\x2\xFFFF\x1\x8\x16\xFFFF\x3\x8"+
				"\x6\xFFFF\x2\x8",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8",
				"\x1\x16",
				"\x4\x8\x2\xFFFF\x1\x8\x7\xFFFF\x1\x8\x3\xFFFF\x1\x8\x7\xFFFF\x1\x8"+
				"\x4\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x2\x8\x1\xFFFF\x1\x8\xB\xFFFF"+
				"\x1\xD\x10\xFFFF\x1\x9\xA\xFFFF\x1\x8\x16\xFFFF\x3\x8\x6\xFFFF\x2\x8"
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "()* loopback of 296:4: ( selectArg PLUS )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _noBraceBlock_in_program232 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _proxyStatement_in_program247 = new BitSet(new ulong[]{0x59400220240000UL,0x80E0000040000000UL});
		public static readonly BitSet _noBraceBlock_in_program249 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_program251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureDefinition_in_program266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROCEDURE_in_procedureDefinition285 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_procedureDefinition287 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_procedureDefinition289 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _tableColumnArgs_in_procedureDefinition291 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureDefinition294 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _block_in_procedureDefinition296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _createTableStatement_in_statement324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_statement329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatment_in_statement334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationStatement_in_statement339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableAssignmentStatement_in_statement344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eachStatement_in_statement354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _procedureCall_in_statement364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _truncateTable_in_statement369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUNCATE_in_truncateTable380 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _TABLE_in_truncateTable382 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_truncateTable384 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXEC_in_procedureCall406 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_procedureCall408 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_procedureCall410 = new BitSet(new ulong[]{0x81400000050000UL,0x2000000000UL});
		public static readonly BitSet _procedureCallList_in_procedureCall412 = new BitSet(new ulong[]{0x81400000050000UL,0x2000000000UL});
		public static readonly BitSet _CLOSEPAREN_in_procedureCall415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _callArgs_in_procedureCallList438 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_procedureCallList440 = new BitSet(new ulong[]{0x81400000040000UL,0x2000000000UL});
		public static readonly BitSet _callArgs_in_procedureCallList444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandVar_in_callArgs460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_callArgs465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROXIES_in_proxyStatement476 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_proxyStatement478 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _proxyList_in_proxyStatement480 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_proxyStatement482 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _proxyTest_in_proxyStatement484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList506 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_proxyList508 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_proxyList512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_proxyTest532 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _TEST_in_proxyTest534 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _OPENBRACE_in_proxyTest536 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _sqlStatement_in_proxyTest538 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _CLOSEBRACE_in_proxyTest540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileStatement555 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_whileStatement557 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_whileStatement559 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_whileStatement561 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _block_in_whileStatement563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EACH_in_eachStatement585 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_eachStatement587 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _VAR_in_eachStatement589 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_eachStatement593 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _IN_in_eachStatement595 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_eachStatement599 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_eachStatement601 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _block_in_eachStatement603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_noBraceBlock628 = new BitSet(new ulong[]{0x59400220240002UL,0x80E0000040000000UL});
		public static readonly BitSet _OPENBRACE_in_block649 = new BitSet(new ulong[]{0x59400220248000UL,0x80E0000040000000UL});
		public static readonly BitSet _statement_in_block651 = new BitSet(new ulong[]{0x59400220248000UL,0x80E0000040000000UL});
		public static readonly BitSet _CLOSEBRACE_in_block654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXPAND_in_expandExpression674 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_expandExpression676 = new BitSet(new ulong[]{0x81400000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression678 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _TO_in_expandExpression680 = new BitSet(new ulong[]{0x81400000040000UL});
		public static readonly BitSet _expandVar_in_expandExpression682 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_expandExpression684 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _expandBlock_in_expandExpression686 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _OPENBRACE_in_expandBlock711 = new BitSet(new ulong[]{0x81408000048000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _mathExpression_in_expandBlock713 = new BitSet(new ulong[]{0x81408000048000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _CLOSEBRACE_in_expandBlock716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_expandVar732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_expandVar737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_downloadExpression748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_downloadExpression753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_PAGE_in_downloadPageExpresssion764 = new BitSet(new ulong[]{0x1400000040000UL,0x2000004000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadPageExpresssion767 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _tableHint_in_downloadPageExpresssion769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOWNLOAD_IMAGE_in_downloadImageExpression781 = new BitSet(new ulong[]{0x1400000040000UL,0x2000004000UL});
		public static readonly BitSet _downloadExpressionArg_in_downloadImageExpression784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_downloadExpressionArg795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_downloadExpressionArg800 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _sqlStatement_in_downloadExpressionArg803 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_downloadExpressionArg805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_downloadExpressionArg811 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_variableReference823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_variableReference833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_variableReference838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_variableReference843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableMemberReference857 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _DOT_in_tableMemberReference859 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_tableMemberReference863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VAR_in_variableDeclarationStatement887 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_variableDeclarationStatement889 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_variableDeclarationStatement891 = new BitSet(new ulong[]{0x81408418040000UL,0x2040004800UL,0x4UL});
		public static readonly BitSet _assignmentExpression_in_variableDeclarationStatement893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_variableAssignmentStatement914 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_variableAssignmentStatement916 = new BitSet(new ulong[]{0x81408418040000UL,0x2040004800UL,0x4UL});
		public static readonly BitSet _assignmentExpression_in_variableAssignmentStatement918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator939 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _NULL_OPERATOR_in_nullOperator941 = new BitSet(new ulong[]{0x80008000040000UL,0x2000000800UL});
		public static readonly BitSet _COMMAND_VAR_in_nullOperator945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_nullOperator947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_assignmentExpression959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadExpression_in_assignmentExpression964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_assignmentExpression969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlStatement_in_assignmentExpression974 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullOperator_in_assignmentExpression979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableReference_in_assignmentExpression984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1000 = new BitSet(new ulong[]{0x2UL,0x80010UL});
		public static readonly BitSet _set_in_mathExpression1003 = new BitSet(new ulong[]{0x81408000040000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _mathExpressionGroup_in_mathExpression1014 = new BitSet(new ulong[]{0x2UL,0x80010UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1032 = new BitSet(new ulong[]{0x2000042UL});
		public static readonly BitSet _set_in_mathExpressionGroup1035 = new BitSet(new ulong[]{0x81408000040000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _atom_in_mathExpressionGroup1046 = new BitSet(new ulong[]{0x2000042UL});
		public static readonly BitSet _variableReference_in_atom1067 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_atom1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_atom1085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_atom1094 = new BitSet(new ulong[]{0x81408000040000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _mathExpression_in_atom1097 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_atom1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_INTO_in_insertStatement1146 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_insertStatement1148 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_DIRECTORY_in_insertStatement1165 = new BitSet(new ulong[]{0x81408000040000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _mathExpression_in_insertStatement1167 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1169 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INSERT_OVERWRITE_in_insertStatement1183 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_insertStatement1185 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _sqlStatement_in_insertStatement1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatment1212 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_updateStatment1214 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _setArgs_in_updateStatment1216 = new BitSet(new ulong[]{0x20000000002UL,0x4000000000000000UL});
		public static readonly BitSet _fromStatement_in_updateStatment1218 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _whereStatement_in_updateStatment1221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SET_in_setArgs1253 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _setArg_in_setArgs1256 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_setArgs1258 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _setArg_in_setArgs1262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_setArg1282 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_setArg1284 = new BitSet(new ulong[]{0x81448000040800UL,0x2000020800UL});
		public static readonly BitSet _selectArgs_in_setArg1286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectStatement_in_sqlStatement1310 = new BitSet(new ulong[]{0x20000000002UL,0x4000000000000000UL});
		public static readonly BitSet _fromStatement_in_sqlStatement1312 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _whereStatement_in_sqlStatement1315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_whereStatement1342 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _boolExpression_in_whereStatement1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1364 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_fromStatement1368 = new BitSet(new ulong[]{0x204400000000002UL});
		public static readonly BitSet _ID_in_fromStatement1372 = new BitSet(new ulong[]{0x204000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromStatement1402 = new BitSet(new ulong[]{0x418000000UL});
		public static readonly BitSet _tableGenerationClause_in_fromStatement1404 = new BitSet(new ulong[]{0x204400000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _ID_in_fromStatement1406 = new BitSet(new ulong[]{0x204000000000002UL,0x0UL,0x1UL});
		public static readonly BitSet _tableHint_in_fromStatement1409 = new BitSet(new ulong[]{0x204000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_fromStatement1412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_tableHint1445 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_tableHint1447 = new BitSet(new ulong[]{0x400000000000000UL,0x8000000000000UL});
		public static readonly BitSet _hint_in_tableHint1450 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _PIPE_in_tableHint1452 = new BitSet(new ulong[]{0x400000000000000UL,0x8000000000000UL});
		public static readonly BitSet _hint_in_tableHint1456 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_tableHint1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THREAD_in_hint1474 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_hint1476 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _INT_in_hint1478 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JS_in_hint1493 = new BitSet(new ulong[]{0x2UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_hint1496 = new BitSet(new ulong[]{0x80000000000000UL,0x2000000000UL});
		public static readonly BitSet _jsArg_in_hint1499 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_hint1501 = new BitSet(new ulong[]{0x80000000000000UL,0x2000000000UL});
		public static readonly BitSet _jsArg_in_hint1505 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_hint1507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerJoin_in_innerJoinStatement1546 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_innerJoinStatement1550 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _ID_in_innerJoinStatement1554 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_innerJoinStatement1557 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _boolExpression_in_innerJoinStatement1559 = new BitSet(new ulong[]{0x204000000000002UL});
		public static readonly BitSet _innerJoinStatement_in_innerJoinStatement1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadPageExpresssion_in_tableGenerationClause1595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _downloadImageExpression_in_tableGenerationClause1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expandExpression_in_tableGenerationClause1605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1632 = new BitSet(new ulong[]{0x81448000040800UL,0x2000020800UL});
		public static readonly BitSet _selectArgs_in_selectStatement1635 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_selectStatement1637 = new BitSet(new ulong[]{0x81448000040800UL,0x2000020800UL});
		public static readonly BitSet _selectArgs_in_selectStatement1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_selectStatement1655 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _ASTERISK_in_selectStatement1657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_selectArgs1683 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _PLUS_in_selectArgs1685 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _selectArg_in_selectArgs1689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _caseStatement_in_selectArgs1703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1725 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _whenBoolStatement_in_caseStatement1727 = new BitSet(new ulong[]{0xC0000000UL,0x800000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1731 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _caseExpression_in_caseStatement1733 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _END_in_caseStatement1737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseStatement1754 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _selectArg_in_caseStatement1756 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _whenLiteralStatement_in_caseStatement1758 = new BitSet(new ulong[]{0xC0000000UL,0x800000000000000UL});
		public static readonly BitSet _ELSE_in_caseStatement1762 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _caseExpression_in_caseStatement1764 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _END_in_caseStatement1768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_caseExpression1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenLiteralStatement1812 = new BitSet(new ulong[]{0x80008000000000UL,0x2000000800UL});
		public static readonly BitSet _literal_in_whenLiteralStatement1814 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _THEN_in_whenLiteralStatement1816 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _caseExpression_in_whenLiteralStatement1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_whenBoolStatement1839 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _boolExpression_in_whenBoolStatement1841 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _THEN_in_whenBoolStatement1843 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _caseExpression_in_whenBoolStatement1845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_boolExpression1866 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _OR_in_boolExpression1869 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _andExpression_in_boolExpression1872 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _boolTerm_in_andExpression1886 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _AND_in_andExpression1889 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _boolTerm_in_andExpression1892 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _NODES_in_boolTerm1907 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1909 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_boolTerm1929 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _DOT_in_boolTerm1931 = new BitSet(new ulong[]{0x0UL,0x100UL});
		public static readonly BitSet _NODES_in_boolTerm1933 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_boolTerm1935 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_boolTerm1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArg_in_boolTerm1960 = new BitSet(new ulong[]{0x5800180100000002UL,0x600UL});
		public static readonly BitSet _boolOperator_in_boolTerm1963 = new BitSet(new ulong[]{0x81448000040000UL,0x2000020800UL});
		public static readonly BitSet _selectArg_in_boolTerm1966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPENPAREN_in_boolTerm1974 = new BitSet(new ulong[]{0x81448000040000UL,0x2000024900UL});
		public static readonly BitSet _boolExpression_in_boolTerm1977 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_boolTerm1979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pickStatement_in_selectArg2037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectArg2042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectVariable_in_selectArg2047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveFunction_in_selectArg2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GETDATE_in_primitiveFunction2063 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_primitiveFunction2066 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_primitiveFunction2069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_selectVariable2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMAND_VAR_in_selectVariable2093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTITY_VAR_in_selectVariable2098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableMemberReference_in_selectVariable2103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PICK_in_pickStatement2115 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_pickStatement2117 = new BitSet(new ulong[]{0x2UL,0x100000000004UL});
		public static readonly BitSet _takeStatement_in_pickStatement2119 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _matchStatement_in_pickStatement2122 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _TAKE_in_takeStatement2149 = new BitSet(new ulong[]{0x80UL});
		public static readonly BitSet _ATTRIBUTE_in_takeStatement2151 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_takeStatement2153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2166 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _TEXT_in_takeStatement2168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TAKE_in_takeStatement2179 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _HTML_in_takeStatement2181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_matchStatement2199 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_matchStatement2201 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _replaceStatement_in_matchStatement2203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _REPLACE_in_replaceStatement2226 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_replaceStatement2228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2249 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _FILE_in_createTableStatement2251 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2253 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2255 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2257 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2260 = new BitSet(new ulong[]{0x0UL,0x2UL,0x1UL});
		public static readonly BitSet _fileTableWithStatement_in_createTableStatement2262 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _fileTableLocation_in_createTableStatement2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2286 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _BUFFER_in_createTableStatement2288 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2290 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2292 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2294 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CREATE_in_createTableStatement2313 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _MSSQL_in_createTableStatement2315 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ID_in_createTableStatement2317 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_createTableStatement2319 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _tableColumnArgs_in_createTableStatement2321 = new BitSet(new ulong[]{0x400000010000UL});
		public static readonly BitSet _CLOSEPAREN_in_createTableStatement2324 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _sqlTableWithStatement_in_createTableStatement2326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LOCATION_in_fileTableLocation2350 = new BitSet(new ulong[]{0x81408000040000UL,0x2000004800UL,0x4UL});
		public static readonly BitSet _mathExpression_in_fileTableLocation2353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_sqlTableWithStatement2365 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_sqlTableWithStatement2367 = new BitSet(new ulong[]{0x900000UL});
		public static readonly BitSet _sqlTableWithVariablesStatement_in_sqlTableWithStatement2369 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _CLOSEPAREN_in_sqlTableWithStatement2371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2392 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_sqlTableWithVariablesStatement2394 = new BitSet(new ulong[]{0x900000UL});
		public static readonly BitSet _sqlTableWithVariableStatement_in_sqlTableWithVariablesStatement2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_sqlTableWithVariableStatement2415 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_sqlTableWithVariableStatement2424 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_sqlTableWithVariableStatement2427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_fileTableWithStatement2438 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _OPENPAREN_in_fileTableWithStatement2440 = new BitSet(new ulong[]{0x1000010000UL,0x20000000UL});
		public static readonly BitSet _fileTableWithVariablesStatement_in_fileTableWithStatement2442 = new BitSet(new ulong[]{0x1000010000UL,0x20000000UL});
		public static readonly BitSet _CLOSEPAREN_in_fileTableWithStatement2445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2468 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_fileTableWithVariablesStatement2470 = new BitSet(new ulong[]{0x1000000000UL,0x20000000UL});
		public static readonly BitSet _fileTableWithVariableStatement_in_fileTableWithVariablesStatement2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_fileTableWithVariableStatement2490 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _EQUALS_in_fileTableWithVariableStatement2499 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _STRING_LITERAL_in_fileTableWithVariableStatement2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2514 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_tableColumnArgs2516 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _tableColumnArg_in_tableColumnArgs2520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_tableColumnArg2541 = new BitSet(new ulong[]{0x100810000400000UL,0x1000000000UL});
		public static readonly BitSet _dataType_in_tableColumnArg2543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tableHint_in_synpred23_Scrape769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mathExpression_in_synpred30_Scrape959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _setArg_in_synpred49_Scrape1256 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred49_Scrape1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selectArgs_in_synpred68_Scrape1635 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _COMMA_in_synpred68_Scrape1637 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
